<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>i</b:listType>
			<b:listData listID="index"/>
		</b:entriesMeta>

		<b:entry entryID="000827" baseName="disney-timeless-story-marunouchi">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-01-07</b:date>
				<b:time>13:56:44</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>Disney TIMELESS STORY 東京丸之內</b:title>
			<b:content>
				<b:summary>這次去東京其中一個目標就是去拍東京車站，拍東京車站其實就兩個點，丸之內大樓和新丸之內大樓，因為據說新丸之內大樓景比較漂亮，所以就先過去新丸，結果不知道為什麼超多人的。...</b:summary>
				<b:mainContent><p>這次去東京其中一個目標就是去拍東京車站，拍東京車站其實就兩個點，<a href="http://www.marunouchi.com/top/marubiru">丸之內大樓</a>和<a href="http://www.marunouchi.com/top/shinmaru.html">新丸之內大樓</a>，因為據說新丸之內大樓景比較漂亮，所以就先過去新丸，結果不知道為什麼超多人的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15999587797/" title="新丸大樓 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7485/15999587797_e2951e8028_b.jpg" width="1024" height="683" alt="新丸大樓" srcset="https://farm8.staticflickr.com/7485/15999587797_e2951e8028.jpg 768w, https://farm8.staticflickr.com/7485/15999587797_e2951e8028_b.jpg 768w 2x, https://farm8.staticflickr.com/7485/15999587797_3cb4ba1de0_k.jpg 2x" /></a></p>
</b:mainContent>
				<b:extendContent><p>這是大樓外面排隊的人潮，從地下道雖然有直通，但是會被引導出來排隊進大樓，電扶梯也是滿滿的人。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15999585707/" title="新丸大樓 by othree, on Flickr"><img src="https://farm9.staticflickr.com/8614/15999585707_4366e3eec2_b.jpg" width="1024" height="683" alt="新丸大樓" srcset="https://farm9.staticflickr.com/8614/15999585707_4366e3eec2.jpg 768w, https://farm9.staticflickr.com/8614/15999585707_4366e3eec2_b.jpg 768w 2x, https://farm9.staticflickr.com/8614/15999585707_c608a96cad_k.jpg 2x" /></a></p>

<p>然後到三樓繞了一大圈排隊，想說東京車站夜景有這麼夯嗎，日本人都要排隊才看的到，然後就傻傻的跟著排到最後發現，是魔髮奇緣的裝置場景：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15999327639/" title="新丸大樓 魔髮奇緣 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7531/15999327639_d7e1eef74b_b.jpg" width="1024" height="683" alt="新丸大樓 魔髮奇緣" srcset="https://farm8.staticflickr.com/7531/15999327639_d7e1eef74b.jpg 768w, https://farm8.staticflickr.com/7531/15999327639_d7e1eef74b_b.jpg 768w 2x, https://farm8.staticflickr.com/7531/15999327639_e723a6ccb4_k.jpg 2x" /></a></p>

<p>原來其實根本是誤會一場，到三樓後我可以直接繼續往上到七樓的，還傻傻的排隊，只好順便拍個照就上去七樓，結果沒想到新丸大樓七樓現在沒開放，沒說什麼原因，似乎是要維護檢查之類的，只好跑去丸大樓看，然後在地下道發現這是 Disney 和丸之內商圈的合作聖誕節活動「TIMELESS STORY」：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16017918950/" title="Disney TIMELESS Story 東京丸之內 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7463/16017918950_cb58c5e6a1_b.jpg" width="683" height="1024" alt="Disney TIMELESS Story 東京丸之內" srcset="https://farm8.staticflickr.com/7463/16017918950_cb58c5e6a1.jpg 768w, https://farm8.staticflickr.com/7463/16017918950_cb58c5e6a1_b.jpg 768w 2x, https://farm8.staticflickr.com/7463/16017918950_04b0bc2691_k.jpg 2x" /></a></p>

<p>海報上發現丸之內大樓也有，而且還是 Frozen，感覺人就會多到滿出來的樣子，結果就是這種情形：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15999578907/" title="丸大樓 Frozen by othree, on Flickr"><img src="https://farm9.staticflickr.com/8587/15999578907_2502cbddb4_b.jpg" width="1024" height="683" alt="丸大樓 Frozen" srcset="https://farm9.staticflickr.com/8587/15999578907_2502cbddb4.jpg 768w, https://farm9.staticflickr.com/8587/15999578907_2502cbddb4_b.jpg 768w 2x, https://farm9.staticflickr.com/8587/15999578907_89f9909fce_k.jpg 2x" /></a></p>

<p>真不愧是 Frozen，先不論人數，這兩者的規模也差太多了，靠近一點看可以看到做得很精緻。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15999569917/" title="丸大樓 Frozen by othree, on Flickr"><img src="https://farm8.staticflickr.com/7503/15999569917_8ed93cdd71_b.jpg" width="683" height="1024" alt="丸大樓 Frozen" srcset="https://farm8.staticflickr.com/7503/15999569917_8ed93cdd71.jpg 768w, https://farm8.staticflickr.com/7503/15999569917_8ed93cdd71_b.jpg 768w 2x, https://farm8.staticflickr.com/7503/15999569917_5111b4c7eb_k.jpg 2x" /></a></p>

<p>然後是立體的 Elsa 和 Ana</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16159561936/" title="丸大樓 Frozen by othree, on Flickr"><img src="https://farm8.staticflickr.com/7575/16159561936_dd3d29d432_b.jpg" width="1024" height="683" alt="丸大樓 Frozen" srcset="https://farm8.staticflickr.com/7575/16159561936_dd3d29d432.jpg 768w, https://farm8.staticflickr.com/7575/16159561936_dd3d29d432_b.jpg 768w 2x, https://farm8.staticflickr.com/7575/16159561936_0bd166628d_k.jpg 2x" /></a></p>

<p>回來看看魔髮奇緣的兩位主角</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15998066910/" title="新丸大樓 魔髮奇緣 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7578/15998066910_a7e345f890_b.jpg" width="1024" height="683" alt="新丸大樓 魔髮奇緣" srcset="https://farm8.staticflickr.com/7578/15998066910_a7e345f890.jpg 768w, https://farm8.staticflickr.com/7578/15998066910_a7e345f890_b.jpg 768w 2x, https://farm8.staticflickr.com/7578/15998066910_51d8f223a8_k.jpg 2x" /></a></p>

<p>只是兩片版子，還是黑的，真是太可憐了～～</p>

<p>其實看那張海報會發現還有米老鼠、維尼、愛麗斯夢遊仙境和兩個電影的場景，不過我就沒花時間去別棟大樓找了，最後來看看東京車站吧。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15565585843/" title="東京車站 by othree, on Flickr"><img src="https://farm9.staticflickr.com/8662/15565585843_66a48da675_b.jpg" width="1024" height="683" alt="東京車站" srcset="https://farm9.staticflickr.com/8662/15565585843_66a48da675.jpg 768w, https://farm9.staticflickr.com/8662/15565585843_66a48da675_b.jpg 768w 2x, https://farm9.staticflickr.com/8662/15565585843_3285cb75b8_k.jpg 2x" /></a></p>

<p>這是丸大樓拍過去的樣子，真的應該是新丸大樓的角度比較好，沒有右下角那塊黑黑的東西，然後高度也是，新丸大樓看車站的地方比丸大樓高兩層，另外可以發現車站本體雖然完工了，不過前面的馬路動線還沒好，不知道全部都弄好時看起來會怎樣。</p>

<p>另外丸大樓雖然目前看起來拍車站角度比較不好，不過有另外一個優點是可以看到日本郵局總局，也就是現在已經變成複合型商場的 <a href="http://jptower-kitte.jp/">KITTE</a>（還蠻好逛的），這個其實現在只有門面這塊是以前的樣子，可以從旁邊看到後面已經是新大樓了，和台灣那棟整棟都還在的不一樣啊～～</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15563003714/" title="PC230852 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7488/15563003714_72f6f2f562_b.jpg" width="1024" height="683" alt="PC230852" srcset="https://farm8.staticflickr.com/7488/15563003714_72f6f2f562.jpg 768w, https://farm8.staticflickr.com/7488/15563003714_72f6f2f562_b.jpg 768w 2x, https://farm8.staticflickr.com/7488/15563003714_31a6668394_k.jpg 2x" /></a></p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000826" baseName="android-l-webview-fullscreen-api">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-01-05</b:date>
				<b:time>21:20:32</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Android L WebView Fullscreen API</b:title>
			<b:content>
				<b:summary>今天遇到一個問題是，本來好好的全螢幕影片播放功能，到了 Android L 的 Facebook App 裡的 webview 瀏覽器就壞掉了，而且透過開發工具看沒有錯誤訊息出來，查了一陣子終於發現，最新的 webview 改成使用 Chrome 核心後，有些 API 雖然 Chrome 有支援，但是在 WebView 裡面是沒開啟的。 其實我本來已經有用 feature detection 的寫法了，不過這個情形實際上，requestFullscreen 是找的到，可以執行，也不會有錯誤的，只是就是什麼事情都不會發生，後來才 發現 是要用 document.fullscreenEnabled 來做判斷，這個東西我之前一直覺得在手機上都用不到的東西（桌面瀏覽器通常會先問使用者是否願意讓網頁進入全螢幕），沒想到會在這邊派上用場啊。...</b:summary>
				<b:mainContent><p>今天遇到一個問題是，本來好好的全螢幕影片播放功能，到了 Android L 的 Facebook App 裡的 webview 瀏覽器就壞掉了，而且透過開發工具看沒有錯誤訊息出來，查了一陣子終於發現，最新的 webview 改成使用 Chrome 核心後，有些 API 雖然 Chrome 有支援，但是在 WebView 裡面是<a href="https://developer.chrome.com/multidevice/webview/overview#does_the_new_webview_have_feature_parity_with_chrome_for_android_">沒開啟</a>的。</p>

<p>其實我本來已經有用 feature detection 的寫法了，不過這個情形實際上，<code>requestFullscreen</code> 是找的到，可以執行，也不會有錯誤的，只是就是什麼事情都不會發生，後來才 <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode#Other_information">發現</a> 是要用 <code>document.fullscreenEnabled</code> 來做判斷，這個東西我之前一直覺得在手機上都用不到的東西（桌面瀏覽器通常會先問使用者是否願意讓網頁進入全螢幕），沒想到會在這邊派上用場啊。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000825" baseName="latest-true-color-vim">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-12-10</b:date>
				<b:time>01:46:05</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Latest True Color Vim</b:title>
			<b:content>
				<b:summary>上次文章的安裝方法已經過時了，更新一下： hg clone https://bitbucket.org/ZyX_I/vim cd vim cd src &amp;&amp; make autoconf &amp;&amp; cd .. ./configure \ --enable-gui=no \ --without-x \ --enable-multibyte \ --with-tlib=ncurses \ --enable-cscope \ --with-features=huge \ --disable-nls \ --enable-perlinterp \ --enable-pythoninterp \ --enable-rubyinterp \ --enable-termtruecolor make make install...</b:summary>
				<b:mainContent><p>上次<a href="https://blog.othree.net/log/2013/07/27/true-color-terminal-vim-osx/">文章</a>的安裝方法已經過時了，更新一下：</p>

<pre><code>hg clone https://bitbucket.org/ZyX_I/vim
cd vim
cd src &amp;&amp; make autoconf &amp;&amp; cd ..

./configure \
  --enable-gui=no \
  --without-x \
  --enable-multibyte \
  --with-tlib=ncurses \
  --enable-cscope \
  --with-features=huge \
  --disable-nls \
  --enable-perlinterp \
  --enable-pythoninterp \
  --enable-rubyinterp \
  --enable-termtruecolor

make
make install
</code></pre>

<p>其實就是現在 ZyX 自己維護的 git repo 已經是有把 True Color 支援的 code merge 進來的版本，只是現在的最新版設定上有些修改，差異在不一定會直接輸出 true color 的色碼 sequence 了，要 Terminal Type 是 <code>xterm</code> 的時候才有。如果不是 <code>xterm</code> 的時候則需要加上設定檔，告訴 Vim 要怎樣輸出色碼的 sequence：</p>

<pre><code>let &amp;t_8f="^[[38;2;%lu;%lu;%lum"
let &amp;t_8b="^[[48;2;%lu;%lu;%lum"
</code></pre>

<p>其中的 <code>^[</code> 是控制碼，就像是 BBS 著色一樣，不能直接打，Vim 的話要用 Ctrl + v + [ 三個按鍵同時按來輸入。這兩個設定項目因為是 ZyX 版才有，所以如果是跑普通的 Vim 的話，啟動時會跑出警告，可以用 <code>:help xterm-true-color</code> 看看比較詳細的說明。</p>

<p>最後 iTerm2 雖然已經出 2.0 了，不過 True Color 的正式支援是放在 3.0，所以目前要在 Mac 上用 True Color Terminal 還是需要抓 nightly 版的 iTerm2。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000824" baseName="typescript-definition">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-12-04</b:date>
				<b:time>23:06:48</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>關於 TypeScript</b:title>
			<b:content>
				<b:summary> 這幾年各種 compile to JavaScript language 盛行，大部分都是朝向讓程式碼更好寫的方向來前進，微軟在 2012 年也推出了 TypeScript 這個 compile to JavaScript language，不過他的方向卻不一樣，TypeScript 是一個 JavaScript 的 superset，意思就是所有的 JavaScript 都是合法的 TypeScript，而 TypeScript 多了一些語法，加入了一些新功能，不過這些新的語法完全都不用也是可以正常的寫程式，給 TypeScript compiler 編譯。 TypeScript 顧名思義，它著重的在資料型別這個部分，JavaScript 是 weak type （弱型別）的語言，寫起來算是很方便，不過這個特性卻也是一些問題的來源，首先最常見到的是因為資料型態不嚴謹而造成的 bug，第二個常被提出來的就是為了實做 weak type 而造成的 performance 下降，因此一直有一些聲音在對抗弱型別這個特性，第一個是 Douglas...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15756461070/" title="type-error by othree, on Flickr"><img src="https://farm8.staticflickr.com/7510/15756461070_d3b58d0aca_b.jpg" width="1024" height="261" alt="type-error" srcset="https://farm8.staticflickr.com/7510/15756461070_d3b58d0aca.jpg 768w, https://farm8.staticflickr.com/7510/15756461070_d3b58d0aca_b.jpg 768w 2x" /></a></p>

<p>這幾年各種 compile to JavaScript language 盛行，大部分都是朝向讓程式碼更好寫的方向來前進，微軟在 2012 年也推出了 <a href="http://www.typescriptlang.org/">TypeScript</a> 這個 compile to JavaScript language，不過他的方向卻不一樣，TypeScript 是一個 JavaScript 的 superset，意思就是所有的 JavaScript 都是合法的 TypeScript，而 TypeScript 多了一些語法，加入了一些新功能，不過這些新的語法完全都不用也是可以正常的寫程式，給 TypeScript compiler 編譯。</p>

<p>TypeScript 顧名思義，它著重的在資料型別這個部分，JavaScript 是 weak type （弱型別）的語言，寫起來算是很方便，不過這個特性卻也是一些問題的來源，首先最常見到的是因為資料型態不嚴謹而造成的 bug，第二個常被提出來的就是為了實做 weak type 而造成的 performance 下降，因此一直有一些聲音在對抗弱型別這個特性，第一個是 Douglas Crockford 先出聲的，不過一開始是從程式碼的嚴謹和可靠性來說的，因為他當時主力在 <a href="http://www.jslint.com/">JSLint</a> 上，所以對於可靠的程式碼的要求比較高，JSLint 一度還把這項檢查放入，後來接著 Google V8 引擎也對沒有改變型別的變數作了最佳化，然後有 TypeScript，接著未來的 ES7 也可能會加入型別宣告的語法進來，這部分似乎是 Douglas 參與推動的，然後 Google 也打算推出 <a href="https://docs.google.com/document/d/11YUzC-1d0V1-Q3V0fQ7KSit97HnZoKVygDxpWzEYW0U/mobilebasic?pli=1&amp;viewopt=127">AtScript</a> 的樣子，AtScript 是 TypeScript 的 superset，更進一步增加了型別相關的特性進來。</p>

<p>TypeScript 是一個介於中間的語言，當然為了支援  JavaScript 不能直接把整個環境都改成強型別的，所以 TypeScript 的作法是讓形別的宣告變為可省略的，如果沒有宣告型別，則一切和以前一樣，如果你的變數有宣告型別，那個變數才會是強型別，在編譯的時候，如果把不同型別的值給它，就會跑出警告訊息，像是 JSLint 一樣。TypeScript 的型別宣告語法中，一些比較簡單的可以和程式碼一起寫：</p>

<pre><code>var str:string;
</code></pre>

<p>可是稍微複雜一點，和物件有關係的話，就要獨立寫一段宣告的程式碼了：</p>

<pre><code>interface HotkeysProvider {
    template: string;
    includeCheatSheet: boolean;
    get(combo: string): ng.hotkeys.Hotkey;
    toggleCheatSheet(): void;
}
</code></pre>

<p>這段宣告其實是完全獨立於程式碼的邏輯本身，全部砍掉程式也可以運作，本身不牽涉到任何邏輯，所以可以完全獨立出去，在 TypeScript 中稱為 type definition（型別定義） ，常用的副檔名是 <code>.d.ts</code>，感覺上很像是 C 語言的 header file，其實我對於 TypeScript 本身的發展是不太樂觀的，覺得他的佔有率永遠不會起來，但是它的型別定義這塊我到覺得是大有可為，主因是目前沒有比較在業界有使用的到型別定義的語言，寫標準所用的 <a href="http://www.w3.org/TR/WebIDL/#idl">WebIDL</a> 普極度實在很低，相關的工具開發和支援實在很少，反而 .d.ts 檔知道的人比較多，編譯器也都有了，而且多虧 TypeScript 有開放原碼，事實上也有其它專案有借助 TypeScript 定義檔，像是我在用的 <a href="http://ternjs.net/">TernJS</a> 這個 JavaScript 自動補完工具，就有提供一個 <a href="https://github.com/marijnh/tern/blob/master/bin/from_ts">from_ts 工具</a> 可以把 .d.ts 檔轉成它可以讀的定義檔案，加上有 <a href="http://definitelytyped.org/">DefinitelyType</a> 專案，各種不同 JavaScript Library 的定義檔都已經有了，所以 TernJS 就可以利用這些資源，提供各種 Library 的自動補完支援了，不過前提是使用者要知道有這些東西，官方文件其實沒有把這塊講得這麼連貫。</p>

<p>除了 TernJS 的應用外，我相信這些定義檔還可以讓編輯器或是 IDE 可以提供更多的輔助功能，像是或許可以拿來產生編輯器用的 syntax 定義檔，在編寫程式時直接提出警告等等，其實現在想的到的這些功能微軟的 Visuall Studio 應該都有了，不過有個公定格式做中介還是比較方便第三方應用，雖然目前好像只有看到 TernJS 的第三方應用，有些可惜，而且微軟的 Compiler 常常偷改，TernJS 提供的 <code>from_ts</code> 是需要使用到一些 compiler 內部的 function 才能用的，而從我接觸 TernJS 以來，微軟至少已經改過兩次改很大造成 <code>from_ts</code>完全不能用的情形。</p>

<p>總之微軟的 TypeScript 我覺得使用人數也不會有什麼大變化，但是定義檔 <code>.d.ts</code> 的部分倒是比較可以期待，變成半個 JS 用的標準介面定義文件格式，競爭對手的話應該是 WebIDL 吧，不過 WebIDL 比較不親切，也不太有人去實做和推廣他的應用，ES7 的型別暗示其實是只是針對那五個基本型別為主，沒有像 WebIDL 和 TypeScript 那樣完整。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000823" baseName="hide-apache-version">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-12-03</b:date>
				<b:time>12:09:41</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>隱藏 Apache 版本號</b:title>
			<b:content>
				<b:summary>之前有想過是不是能隱藏 HTTP Server 的資訊，不過 Server 這個 Header 不可省略的樣子，所以最少也是要給個 Server Name，當然也可以改程式碼給假的，不想改的話最多就是把版本號隱藏起來了： ServerSignature Off ServerTokens Prod...</b:summary>
				<b:mainContent><p>之前有想過是不是能隱藏 HTTP Server 的資訊，不過 <strong>Server</strong> 這個 Header 不可省略的樣子，所以最少也是要給個 Server Name，當然也可以改程式碼給假的，不想改的話最多就是把版本號隱藏起來了：</p>

<pre><code>ServerSignature Off
ServerTokens Prod
</code></pre>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000822" baseName="jspcvim">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-11-30</b:date>
				<b:time>18:37:08</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>JavaScript Parameter Complete</b:title>
			<b:content>
				<b:summary>前陣子在 FB 上說過突然有想做的 Vim Plugin 已經開發的差不多，所以把 1.0 放上了，這個又是自動補完的 plugin，架構設計上是沒針對 JavaScript，不過目前我只有針對 JavaScript 做好補完選項，這個 Plugin 一開始是為了處理 Web Crypto API，這組 API 在做加解密的時候是需要指定演算法，不過演算法的名稱裡面，有一些有 - 在裡面，像是 SHA-256 之類的，以前這種字串的關鍵字，還可以加到 syntax 裡面，然後用 syntax complete 來處理，不過 - 不是 JavaScript 的關鍵字，會被忽略掉，為了處理這個問題，就開發了這個 complete function，簡稱 jspc.vim。 這個 complete function 的功能自動補完各種函數內的字串參數，像是剛剛提到的 crypto...</b:summary>
				<b:mainContent><p>前陣子在 FB 上說過突然有想做的 Vim Plugin 已經開發的差不多，所以把 1.0 放上了，這個又是自動補完的 plugin，架構設計上是沒針對 JavaScript，不過目前我只有針對 JavaScript 做好補完選項，這個 Plugin 一開始是為了處理 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.crypto">Web Crypto API</a>，這組 API 在做加解密的時候是需要指定演算法，不過演算法的名稱裡面，有一些有 <code>-</code> 在裡面，像是 <code>SHA-256</code> 之類的，以前這種字串的關鍵字，還可以加到 syntax 裡面，然後用 syntax complete 來處理，不過 <code>-</code> 不是 JavaScript 的關鍵字，會被忽略掉，為了處理這個問題，就開發了這個 complete function，簡稱 <a href="https://github.com/othree/jspc.vim">jspc.vim</a>。</p>

<p>這個 complete function 的功能自動補完各種函數內的字串參數，像是剛剛提到的 crypto algorithm，還有各種事件名稱，Media Type 等，其實越做發現越多這類的選項，目前支援的東西包括：</p>

<ul>
<li>Web Crypto Algorithm Name</li>
<li>Event Name for DOM, jQuery, Backbone</li>
<li>HTTP Methods for XHR, fetch</li>
<li>HTTP Headers, some values</li>
<li>Locales for Intl</li>
<li>HTML Tag Name for DOM API</li>
<li>Image Type for canvas.toBlob, canvas.toDataURL</li>
</ul>

<p>這個 function 的原理還蠻簡單的，如果抓到游標位置看起來在字串內（以下用底線代表游標位置）：</p>

<pre><code>n.addEventListener('cl_
</code></pre>

<p>然後就會往前找看看這是不是一個 function call 的內部，是的話去看看 function name，像是上面的範例就會找 <code>addEventListener</code>，然後就去內部先定義好的表單找看有沒有候選的項目，有的話就會根據字串內容去做過濾後然後給回來。</p>

<p>如果前面有其他參數是不會受影響的，不過 function name 和字串要在同一行，然後除了 JavaScript 的語法用 <code>(</code> 做為判斷是不是 function call 之外，其實還有支援 CoffeeScript 那種只用空白接餐處的寫法：</p>

<pre><code>n.addEventListener 'cl_
</code></pre>

<p>其實判斷方法很簡單，就是找空白前面不是 <code>,</code> 的話就是了，一時還想不到是不是有其他種語言的 function call 的語法跳脫這兩種寫法的，我想應該可以支援大部分的程式語言了，不過裡面的候選資料還需要人來做苦工，所以我只弄了 JavaScript 的 Web 相關的東西，然後同時給 CoffeeScript、LiveScript、TypeScript 用，安裝方法就照用 Pathogen 那套裝法就可以了裝起來直接用，因為實做上是把原本的 omni complete function 包起來，所以不用特別做什麼設定，就可以和其它自動補完的輔助工具合作，像是 <a href="https://github.com/othree/vim-autocomplpop">vim-autocomplpop</a> 和 <a href="https://github.com/Shougo/neocomplcache.vim">neocomplcache.vim</a>，其實本來是獨立一個 function 的，但是這樣要和 Neo Complete Cache 整合太難了，乾脆就走 Vim 的 omnicomplete 路線，結果意外的方便，最後就是有什麼問題歡迎提出摟～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
