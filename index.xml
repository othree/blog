<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>i</b:listType>
			<b:listData listID="index"/>
		</b:entriesMeta>

		<b:entry entryID="000858" baseName="how-to-reduce-pdf-size">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2016-02-06</b:date>
				<b:time>10:10:15</b:time>
			</b:datetime>
			<b:category>software</b:category>
			<b:title>How to Reduce PDF Size and Keep Text</b:title>
			<b:content>
				<b:summary>Requirement Small size of PDF file generated from PSD, with real text(for accessibility) and good image quality. Expect Expect the PDF file size is a little bit larger than JPG file. Issue Use save as and choose Photoshop PDF will...</b:summary>
				<b:mainContent><h4>Requirement</h4>

<p>Small size of PDF file generated from PSD, with real text(for accessibility) and good image quality.</p>

<h4>Expect</h4>

<p>Expect the PDF file size is a little bit larger than JPG file.</p>

<h4>Issue</h4>

<p>Use <strong>save as</strong> and choose <strong>Photoshop PDF</strong> will generate large PDF. But save as JPG/PNG is much smaller. Test file spec:</p>

<ul>
<li>Page Size: 210mm*297mm (A4)</li>
<li>Resolution: 1240px*1754px</li>
<li>Fonts: 2 English font</li>
</ul>

<p>Sizes:</p>

<table>
<thead>
  <tr>
    <th>Format</th>
    <th>Option</th>
    <th>Size</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>PSD</td>
    <td></td>
    <td>79.7MB</td>
  </tr>
  <tr>
    <td>PNG</td>
    <td></td>
    <td>&#160;1.2MB</td>
  </tr>
  <tr>
    <td>JPG</td>
    <td>q: 100</td>
    <td>&#160;0.6MB</td>
  </tr>
  <tr>
    <td>PDF</td>
    <td>default</td>
    <td>&#160;7.0MB</td>
  </tr>
</tbody>
</table>

<p>File transformed on Adobe CC 2016 Jan </p>

<p>Tried several methods to reduce the file size includes:</p>

<ul>
<li>Remove unused layers</li>
<li>Merge and flatten all layers</li>
<li>Use lower jpeg compression quality</li>
<li>Not save meta data</li>
<li>Not preserve Photoshop editing capability</li>
<li>Use Photoshop autotool > PDF presentation</li>
<li>Use Illustrator</li>
<li>Use Acrobat Pro to optimize PDF</li>
</ul>

<p>But none of them can really make the PDF file as small as expected.</p>

<h4>Solution</h4>

<p>Separate the text and image. Also create a clean PSD file. Steps:</p>

<ol>
<li>Hide all text layers</li>
<li>Save as PNG file</li>
<li>Open PNG file in Photoshop</li>
<li>Unhide text layers and copy text layers to PNG file (should place at right place)</li>
<li>Save as Photoshop PDF file</li>
</ol>

<h5>Result</h5>

<table>
<thead>
  <tr>
    <th>Format</th>
    <th>Option</th>
    <th>Size</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>JPG</td>
    <td>q: 100</td>
    <td style="text-align: right">618.0KB</td>
  </tr>
  <tr>
    <td>PDF</td>
    <td>default</td>
    <td style="text-align: right">624.0KB</td>
  </tr>
</tbody>
</table>

<p>PS. I think other vector object can also use this method to keep their quality and maintain PDF in small size. But not tested.</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000857" baseName="json-universe">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2016-01-11</b:date>
				<b:time>22:38:31</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>JSON Universe</b:title>
			<b:content>
				<b:summary>JSON 在這幾年不但標準化，還開始漸漸的取代了 XML，成為網路上主要的資料交換格式，我認為主要的原因在於他相對於 XML 簡單好懂好用很多，另外一個優點就是他格式很簡單好懂，學起來很快，而相較於更傳統的 Form URL encode 的資料傳輸格式，我覺得最大的優點是他多了 Data Type，而且也可以一口氣送出結構化的資料，傳統的 Form URL encode 雖然有 key value pair，也可以用 [] 模仿出陣列，不過他的所有的 value 都是字串，在 server 端都還要自己判斷欄位，手動做一次型別轉換。只是雖然 JSON 很好上手，還是有幾個地雷容易踩到，如果是會寫 JavaScript 的人更容易中招，大概列舉一下： 不支援註解 物件的 key 一定要用字串型式，就是一定要用引號框起來 字串一定要用雙引號，不能用單引號 陣列或物件的最後一個元素後面不能加逗點（ES5 允許） 當然要避免這些問題，最保險就是用各個語言已經有人實做好的函示庫來處理，而不要自己用組字串的方式來產生 JSON string。不過這篇文章不是要講這些，其實會想寫這篇文章是從 E4X 那篇文章開始來的，那篇文章有提到...</b:summary>
				<b:mainContent><p><a href="http://json.org/">JSON</a> 在這幾年不但<a href="https://www.ietf.org/rfc/rfc4627.txt">標準化</a>，還開始漸漸的取代了 XML，成為網路上主要的資料交換格式，我認為主要的原因在於他相對於 XML 簡單好懂好用很多，另外一個優點就是他格式很簡單好懂，學起來很快，而相較於更傳統的 Form URL encode 的資料傳輸格式，我覺得最大的優點是他多了 Data Type，而且也可以一口氣送出結構化的資料，傳統的 Form URL encode 雖然有 key value pair，也可以用 <code>[]</code> 模仿出陣列，不過他的所有的 value 都是字串，在 server 端都還要自己判斷欄位，手動做一次型別轉換。只是雖然 JSON 很好上手，還是有幾個地雷容易踩到，如果是會寫 JavaScript 的人更容易中招，大概列舉一下：</p>

<ul>
<li>不支援註解</li>
<li>物件的 key 一定要用字串型式，就是一定要用引號框起來</li>
<li>字串一定要用雙引號，不能用單引號</li>
<li>陣列或物件的最後一個元素後面不能加逗點（ES5 允許）</li>
</ul>

<p>當然要避免這些問題，最保險就是用各個語言已經有人實做好的函示庫來處理，而不要自己用組字串的方式來產生 JSON string。不過這篇文章不是要講這些，其實會想寫這篇文章是從 <a href="https://blog.othree.net/log/2015/12/25/jsx-e4x/">E4X</a> 那篇文章開始來的，那篇文章有提到 E4X 已經被棄用了，而 Mozilla 建議的替代方案是一個叫 JXON 的東西，名字看起來和 JSON 很像，而事實上除了 JXON，還有一堆名稱和 JSON 很相近的相關技術，像是 JSONH、BSON、LJSON ...等等，不過其實我找不太到有人去收集這些東西，所以就決定自己來整理一下，這篇文章就是要來介紹一下這堆 JSON 衍生出來的東西，以下沒照特定排序。</p>
</b:mainContent>
				<b:extendContent><h4>JXON</h4>

<p>第一個要介紹的就是剛剛提到的 <a href="https://developer.mozilla.org/en-US/docs/JXON">JXON</a>，JXON 全名是 lossless JavaScript XML Object Notation，是使用 JavaScript 語言的 syntax 來表示 XML 文件的資料，可以達到完整無失真的呈現，就是說可以還原成一模一樣的 XML，不過其實 JXON 並不是真的有個明確的標準，並沒有一個組織或單位來制訂，雖然如此，還是可以找到有人有<a href="https://github.com/tyrasd/jxon">實做</a>。</p>

<h4>JSONx</h4>

<p>第二個要介紹的是 <a href="https://www-01.ibm.com/support/knowledgecenter/SS9H2Y_7.1.0/com.ibm.dp.doc/json_jsonx.html">JSONx</a>，這是 IBM 推出的一種 XML 文件格式，目的非常有趣，和 JXON 剛好相反，是用 XML 文件來表示 JSON 文件的資料，namespace 是 <code>http://www.ibm.com/xmlns/prod/2009/jsonx</code>，講真的我想不到到底有誰會有需求使用到這個標準，隨便看個範例文件吧：</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;json:object xsi:schemaLocation="http://www.datapower.com/schemas/json jsonx.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:json="http://www.ibm.com/xmlns/prod/2009/jsonx"&gt;
  &lt;json:string name="name"&gt;John Smith&lt;/json:string&gt;
  &lt;json:object name="address"&gt;
    &lt;json:string name="streetAddress"&gt;21 2nd Street&lt;/json:string&gt;
    &lt;json:string name="city"&gt;New York&lt;/json:string&gt;
    &lt;json:string name="state"&gt;NY&lt;/json:string&gt;
    &lt;json:number name="postalCode"&gt;10021&lt;/json:number&gt;
  &lt;/json:object&gt;
  &lt;json:array name="phoneNumbers"&gt;
    &lt;json:string&gt;212 555-1111&lt;/json:string&gt;
    &lt;json:string&gt;212 555-2222&lt;/json:string&gt;
  &lt;/json:array&gt;
  &lt;json:null name="additionalInfo" /&gt;
  &lt;json:boolean name="remote"&gt;false&lt;/json:boolean&gt;
  &lt;json:number name="height"&gt;62.4&lt;/json:number&gt;
  &lt;json:string name="ficoScore"&gt; &gt; 640&lt;/json:string&gt;
&lt;/json:object&gt;
</code></pre>

<h4>MessagePack</h4>

<p><a href="http://msgpack.org/">MessagePack</a> 是一個類似 Protocol Buffer 的 Binary 資料交換格式，不過其資料的構成很 JSON，官網上的測試頁面就可以讓你直接輸入 JSON 資料，然後它會轉成 MessagePack 的格式。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24129761021/" title="MessagePack Try by othree, on Flickr"><img src="https://farm2.staticflickr.com/1543/24129761021_bf896219e8_b.jpg" width="840" height="289" alt="MessagePack Try" /></a></p>

<p>MessagePack 相較於下面介紹的其他幾個 Binary 格式是比較好懂些，也有比較完整的實做和支援，是目前比較多人使用的 binary JSON 格式，也有一些商業網站採用，像是 Pinterest、fluentd。這類的 binary 資料格式蠻常被拿來和 Google 的 <a href="https://developers.google.com/protocol-buffers/">Protocol Buffer</a> 來做比較，當然相較於 Protocol Buffer 來說，JSON 型式的資料結構其特色就是 schema free，不用事先定義好傳輸資料內部的結構。</p>

<h4>BSON, BJSON</h4>

<p><a href="http://bsonspec.org/">BSON</a>、<a href="http://bjson.org/">BJSON</a> 也都是 Binary 的 JSON 表現格式，不過這兩個規格都不完全相容於 JSON，有多一些自定義的資料型態，像是 regular expression，然後大部分人都只有談到 BSON，不太有人講到 BJSON 的樣子。</p>

<h4>UBJSON, Smile</h4>

<p><a href="http://ubjson.org/">UBJSON</a>(Universal Binary JSON) 和 <a href="http://wiki.fasterxml.com/SmileFormatSpec">Smile</a> 也和上面幾個一樣是 Binary 的資料格式，和 BSON 比起來則是差在這兩個格式完全相容於 JSON，意思就是可以做到 <code>UBJSON -&gt; JSON -&gt; UBJSON</code> 這樣的資料轉而完全不會遺失資訊。</p>

<p>Binanry 的 JSON 表現格式其實還有一個叫 <a href="https://componentality.com/xjson/">xJSON</a> 的比較沒知名度這樣。</p>

<h4>Hjson</h4>

<p><a href="http://hjson.org/">Hjson</a> 全名是 the Human JSON，顧名思義就是更人性化的 JSON 格式，是一個比 JSON 寬鬆的規範，例如允許註解，不用 <code>,</code> 改成用換行也可以分開不同元素：</p>

<pre><code>[
  1
  2
  3
]
</code></pre>

<p>物件的 key 不需要字串的引號：</p>

<pre><code>{ foo: 123 }
</code></pre>

<p>等等很多方便的語法，不過其實如果要用機器產生這些寬鬆的資料是不太好，比較適合的場合還是用人工維護的 JSON 檔案。</p>

<h4>rson</h4>

<p><a href="https://code.google.com/p/rson/">rson</a> 是一個 JSON 的 superset，和 Hjson 的目標有些接近，不過 rson 的一些新語法更接近 <a href="http://www.yaml.org/">YAML</a> 格式，專案是放在 Google Code 上，而且似乎已經沒維護了，是個總有一天會消失在網路上的東西吧。</p>

<h4>LJSON</h4>

<p><a href="https://github.com/MaiaVictor/LJSON">LJSON</a> 的 L 應該是 lambda 的意思，也是個 JSON 的擴充格式，改變只有一個，就是多了可以儲存 pure function 的能力，儲存 function 的形式是很像 ES6 arrow function 的樣子：</p>

<pre><code>(v0)=&gt;({"author":"John","message":v0})
</code></pre>

<p>最大的差別在於 <code>=&gt;</code> 後面是接 <code>()</code>，並且還有個特色是它會想辦法最佳化，會有像是 dead code removal 的效果。如果要自己做到用 JSON 儲存 function 的話，一般是可以先用 <code>toString</code> 來輸出 function 的原始碼，要還原時再用 <code>new Function</code> 來還原，不過如果不是 pure function，例如有用到 closure 變數的話，就一定會失去這些 reference 到的變數了。</p>

<p>另外還有一個 <a href="https://github.com/daviddengcn/ljson">LJSON</a> 是叫做 Loose JSON，就和上面介紹的 Hjson 目標差不多，就不再多介紹了。</p>

<h4>JSON Lines</h4>

<p><a href="http://jsonlines.org/">JSON Lines</a> 也是有點接近上面介紹的幾個東西，其實是個很簡單的東西，就是把多個 JSON 資料用換行接在同一個文件檔案內，例如：</p>

<pre><code>[1,2,3]
[4,5,6]
[7,8,9]
</code></pre>

<p>三個 JSON 陣列接在一起，不是一個合法的 JSON string，一般 JSON Parser 都會說 Syntax Error，不過支援 JSON Lines 的環境下就可以把這串字串切開，分成三個陣列，支援的環境中我看到比較有名的大概就是 <a href="https://github.com/maxogden/dat/">dat</a> 了，這是一個蠻厲害的資料分享的工具，其中的串流模式傳輸資料就是用到 JSON Lines 格式（其實就是一個一個 JSON 資料輪流輸出）。</p>

<h4>JSONH</h4>

<p><a href="https://github.com/WebReflection/JSONH">JSONH</a> 就不是一個 JSON 的擴充格式了，它事實上是用來壓縮 JSON 的，特別適用於物件的陣列的資料集，像是：</p>

<pre><code>[
  {
    "name": "John",
    "gender": "Male",
    "country": "USA"
  },
  {
    "name": "Smith",
    "gender": "Male",
    "country": "Canada"
  }
]
</code></pre>

<p>透過用 JSONH 壓縮就會變成：</p>

<pre><code>[3, "name", "gender", "country", "John", "Male", "USA", "Smith", "Male", "Canada"]
</code></pre>

<p>最主要節省的就是大量重複的屬性名稱，如果屬性名稱長，陣列又長，這樣壓縮前後的資料量大小差距就會很明顯，不過如果資料階層比較複雜的話，沒辦法整理得這麼漂亮，壓縮效果就會打折了。</p>

<h4>Jsonnet</h4>

<p><a href="http://jsonnet.org/">Jsonnet</a> 是 Google 所推出，帶著一點程式語言特性的 JSON 文件格式，例如多了個 <code>self</code>：</p>

<pre><code>{
    person1: {
        name: "Alice",
        welcome: "Hello " + self.name + "!",
    },
    person2: self.person1 { name: "Bob" },
}
</code></pre>

<p>還有 tempalte string：</p>

<pre><code>{
    fmt2: "The word %(wd)s has %(le)d letters.  Go %(wd)s!"
        % {wd: $.word, le: std.length($.word)},
}
</code></pre>

<p>Array comprehension：</p>

<pre><code>{
    foo: [1, 2, 3],
    bar: [x * x for x in self.foo if x &gt;= 2],
    baz: { ["field" + x]: x for x in self.foo },
    obj: { ["foo" + "bar"]: 3 },
}
</code></pre>

<p>除了這些程式語法的特性之外， Jsonnet 還有像是 Hjson 的一些比較人性化的語法的支援，官網上則自稱是是一種 data template language，而不是單純的資料而已。</p>

<h4>JSON3</h4>

<p><a href="http://bestiejs.github.io/json3/">JSON3</a> 其實不是一個新版本的 JSON，而是一個更加穩健的 JavaScript 的 JSON 實做，多處理了一些不同瀏覽器的差異問題，3 的由來其實是相對於 Douglas 的 <a href="https://github.com/douglascrockford/JSON-js">json2.js</a>，這個 json2.js 是整個 JSON 進 ECMAScript 標準時最主要的依據，包括 Global Varibale 的名稱，API 的設計都是從這邊來的，至於這個 json2.js 的 2 的意思其實就是這是 Douglas 實做的第二版 JSON library。</p>

<h4>JSONP</h4>

<p><a href="https://zh.wikipedia.org/wiki/JSONP">JSONP</a> 其實不是一個標準，最早出處也不詳，不過早一點在 CORS 普及前就開始寫 Ajax 的人應該是很熟悉的東西，瀏覽器為了安全性問題，雖然可以跨直接用 XHR 做出 HTTP request，但是會限制跨 domain 的連線，現在有 CORS 可以讓網站所有者提供允許的白名單，但是在 CORS 普及前，基本上是完全被禁止的，不過有個方法就是插入 <code>&lt;script&gt;</code> 標籤去執行遠端的 js 檔案，這個方法的缺點就是只能執行，不能讀取檔案內容，JSONP 就是在這個限制下所設計出來可以用來跟遠端要資料的方法，基本上實做的方法就是在本地先產生好一個暫時的 callback function：</p>

<pre><code>window.cb123456 = function (data) {
  window.cb123456 = null; //clean up

  //do something with data      
};
</code></pre>

<p>然後把遠端資源加上參數指定 callback 名稱：</p>

<pre><code>&lt;script type="text/javascript"
     src="http://server2.example.com/RetrieveUser?UserId=1823&amp;jsonp=cb123456"&gt;
&lt;/script&gt;
</code></pre>

<p>遠端收到 Request 後產生特別的 response，本來要回傳的資料如下：</p>

<pre><code>{
  "name": "John",
  "gender": "Male",
  "country": "USA"
}
</code></pre>

<p>現在會變成一段 JavaScript 程式碼：</p>

<pre><code>cb1231465({
  "name": "John",
  "gender": "Male",
  "country": "USA"
});
</code></pre>

<h4>JSON Schema</h4>

<p>JSON 本身是很自由的資料格式，不過開發比較大型的應用程式，或是要做一些測試的時候，太過自由就不一定是優點了，所以很合理的就會有個來定義資料內容結構的描述語言出現，<a href="http://json-schema.org/">JSON Schema</a> 就是一個，而且似乎很合理的 JSON Schema 也是 JSON 文件：</p>

<pre><code>{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Product",
    "description": "A product from Acme's catalog",
    "type": "object",
    "properties": {
        "id": {
            "description": "The unique identifier for a product",
            "type": "integer"
        }
    },
    "required": ["id"]
}
</code></pre>

<p>這個文件格式也有在 <a href="http://raml.org/">RAML</a> 中被使用到，RAML 是個 RESTful API 的定義文件，如果 API 傳輸的資料是 JSON 的話，就可以內嵌 JSON Schema，都定義完整就可以用自動化工具來做一些測試了，或是也可以產生一些方便閱讀的文件等等。</p>

<h4>JSON-LD</h4>

<p><a href="http://json-ld.org/">JSON-LD</a> 是 JSON for Linked Data，所謂 Linked Data 其實就是語意網的一部分，基本上還是遵照 <a href="http://www.w3.org/RDF/">RDF</a> 架構去設計出來的文件，目前也很多網路服務都支援，像是 Google、Facebook 等等，甚至 Gmail 的一些特殊能力也是透過在信件內插入 JSON-LD 格式的資料才得以實現。</p>

<h4>JSON-RPC</h4>

<p><a href="http://json-rpc.org/">JSON-RPC</a> 基本上就是 XML-RPC 的 JSON 版本這樣，其實我也不知道有沒有人真的拿來應用就是，倒是 XML-RPC 現在還不少老東西有支援。</p>

<h4>GeoJSON</h4>

<p><a href="http://geojson.org/">GeoJSON</a> 則是針對地理資訊的 JSON 資料格式，基本上就是點線面，然後座標用經緯度，再加上 meta 資訊這樣，不會很複雜，GitHub 也支援 <a href="https://github.com/blog/1541-geojson-rendering-improvements">直接預覽</a> 的功能，<a href="http://g0v.tw/zh-TW/index.html">g0v</a> 上其實有不少專案都有用到 geojson 資料，還有個 <a href="https://github.com/g0v/twgeojson">twgeojson</a> 的基礎建設，最新版的檔案有點大，不過可以看看舊版本的<a href="https://github.com/g0v/twgeojson/blob/master/legacy/twTown1982.json">檔案</a>：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24218757206/" title="twgeojson g0v by othree, on Flickr"><img src="https://farm2.staticflickr.com/1657/24218757206_9c6e578f87_b.jpg" width="999" height="690" alt="twgeojson g0v" srcset="https://farm2.staticflickr.com/1657/24218757206_0bafdc4c24_o_d.png 2x" /></a></p>

<p>GeoJSON 還有一個擴充版的文件格式叫做 <a href="https://github.com/mbostock/topojson">TopoJSON</a>，相較於 GeoJSON 比較適合用在 topology 上（可以想像你只要台灣地圖，但是不用放在世界地圖上），整體檔案大小也因此可以小很多。</p>

<h4>JSON-stat</h4>

<p><a href="http://json-stat.org/">JSON-stat</a> 是個把二維統計資訊表格用 JSON 表現的格式，而且不是只能夠處理兩個維度的資料而已，事實上可以儲存更多維度，JSON-stat 在儲存 raw data 的部分是用打平的一維陣列來儲存，所以也不用擔心太多層太過複雜的狀況，想詳細瞭解一點的可以參考官網右上角的投影片看看。</p>

<h4>JSON Graph</h4>

<p><a href="http://netflix.github.io/falcor/documentation/jsongraph.html">JSON Graph</a> 是 Netflix 推出的 <a href="http://netflix.github.io/falcor/">Falcor</a> 裡面用到的，Falcor 是一種用來取代 RESTful API 的新的前後端之間的溝通方式，這種方法和 RESTful 相比最大的差異就是不再是對單一的資源（resource）做操作，而是整個應用程式會用到的東西都組織定義好，放到一個大的 resource 內，然後再對這個大的資源做操作，而這個大的 resource 就是所謂的 JSON Graph 物件，Falcor 的出現是為了解決一些把 RESTful 用到很透徹時會出現的問題，不過真的要想用這套方法在自己的服務上其實是有些難度，因為要實做一個 Falcor Server，官方也只有提供 Node 版的。</p>

<h4>JSONPath</h4>

<p><a href="http://goessner.net/articles/JsonPath/">JSONPath</a> 是一個 JSON 的 query 語言，像是 <a href="https://developer.mozilla.org/en-US/docs/Web/XPath">XPath</a> 之於 XML，語法 syntax 其實和普通 JavaScript 程式碼很像，不會太難理解，一些範例：</p>

<pre><code>$.store.*
$.store.book[*].author
$.store..price
</code></pre>

<p>不過這些可不是程式碼，而是單純的字串，丟進 JSONPath 引擎再給它相對應的物件（不是 JSON 字串），就可以把目標位置的資料取出來。</p>

<h4>JSONiq</h4>

<p><a href="http://jsoniq.org/">JSONiq</a> 也是個用來 query JSON 資料用的語言，不過和上面的 JSONPath 不一樣，比較像是 SQL 那樣有點程式化，而且語法偏 functional programming，例如：</p>

<pre><code>for $sarah in collection("users"),
    $friend in collection("users")
where $sarah.name eq "Sarah"
      and
      (some $name in $sarah.friends[]
       satisfies $friend.name eq $name)
return $friend
</code></pre>

<h4>JSON Pointer</h4>

<p><a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> 是一個 2013 的 RFC 標準(RFC-6901)，用途和 JSON Path 有點像，也是用來取出 JSON 文件中的一部份資料，不過最主要的差異在於 JSON Pointer 一定是只能指向到一個節點，只能拿到一個 value，不像 JSONPath 或是 JSONip 可以一次 query 很多節點，然後用陣列的形式傳回值；另外還有一個和 JSONPath 的差異是 JSON Pointer 和 XPath 的語法很接近：</p>

<pre><code>/foo/0
/actors/4/name
</code></pre>

<h4>JSON Patch</h4>

<p><a href="https://tools.ietf.org/html/rfc6902">JSON Patch</a> 是一個另 RFC 標準(RFC-6902)，緊接在 JSON Pointer 之後，這兩個標準都是都是在 <a href="https://blog.gslin.org/archives/2014/02/15/4261/json-patch/">gslin</a> 那邊看到的，JSON Patch 主要是定義了一組標準的對 JSON 的操作(operation)，提供了 add, remove, replace, move, copy, test 幾個操作，基本上看起來如下：</p>

<pre><code>{"op": "add", "path": "/pets/0", "value": "dog"}
</code></pre>

<p>這行的意思是要在 pets 下的第一個元素的位置加上一個值，字串 "dog"，JSON Patch 基本上是設計來和 HTTP Patch 配合的，以前如果要用 Patch 修改某個特定網路 reource 的話，一定要把整個完整的，更新過後的 JSON 資料傳一次，但是如果用 JSON Patch 就可以只傳要做怎樣的更新就可以了，可以節省很多資料的傳輸量，而且還可以先用 test 做測試，然後也可以一次做一連串的修改動作：</p>

<pre><code>[
  { "op": "replace", "path": "/baz", "value": "boo" },
  { "op": "add", "path": "/hello", "value": ["world"] },
  { "op": "remove", "path": "/foo"}
]
</code></pre>

<h4>JSONDiffPatch</h4>

<p><a href="http://benjamine.github.io/jsondiffpatch/demo/index.html">JSONDiffPatch</a> 是本來文章發出後才看到的 JSON 文件的 diff, patch 工具，網站上的 demo 還有視覺化的顯示，感覺很華麗：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23699590343/" title="JSONDiffPatch by othree, on Flickr"><img src="https://farm2.staticflickr.com/1507/23699590343_c3d5b0dd16_b.jpg" width="425" height="654" alt="JSONDiffPatch" srcset="https://farm2.staticflickr.com/1507/23699590343_c3d5b0dd16.jpg 768w" /></a></p>

<p>雖然用的格式不是 JSON Patch，而是自己有定義他的 <a href="https://github.com/benjamine/jsondiffpatch/blob/master/docs/deltas.md">delta format</a>，不過基本上作的事情很接近，另外他還可以 undo patch，也有 plugin 可以外掛，還算蠻完整的。</p>

<h4>JSONLint</h4>

<p><a href="http://jsonlint.com">JSONLint</a> 是 JSON 的文件格式檢查工具，不過實際上大部分人在命令列用的通常是 npm 裝的<a href="https://github.com/zaach/jsonlint">版本</a>，這版是 Mozilla 的 Zach Carter 用 JavaScript 實做的，我自己還蠻常用一個線上服務：<a href="https://jsonformatter.curiousconcept.com/">JSON Formatter</a>，除了可以做語法檢查，還可以用可以收展開的樹狀檢視模式來看 JSON 資料。</p>

<h4>?JSON</h4>

<p>最後，JSON 的相關應用和各種 library 真的是不少，其實 JSON 前面加上 26 個英文字母的任意一個，只有 <code>ojson</code> 沒有東西而已，其他 25 個名稱都有人用，不過大部分都是特定語言的 JSON library 實做就是了。然後相信我這篇文章列出來的不是全部，如果有人知道什麼特別的變化或應用也歡迎提供～</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000856" baseName="2015">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2016-01-03</b:date>
				<b:time>15:20:10</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>2015</b:title>
			<b:content>
				<b:summary> 又到了一年一度的照片回顧了，今年因為比較多事情，竟然有一個月沒有照片（除了開箱以外），所以就另外多挑了一張照片出來這樣。首先是一月在台南武廟前面碳烤吐司那邊拍的，台南的大大小小寺廟真的很多，隨便一條巷子進去就有間小廟。 二月是最後一次五月天到HTC的尾牙了，今年聽說五月天沒有要唱尾牙場這樣。 三月的是在摩茲工寮拍的，是 Kano 的 workshop，Kano 是讓小朋友能自己從硬體組裝電腦的一個 kit，之前和朋友湊團買了不少台，達到可以請官方支援開一場 workshop 的目標，所以就辦了一場，也是我難得有機會拍小孩子的照片。 四月是我今年印象最深刻的一杯飲料，台南凰商號的鳳梨冰茶。 五月的時候去了北京一趟，趁著有一天假日去觀光一下，其中頤和園還蠻不錯的，這張照片是園內的麒麟，做工精細，光是台座就很華麗，然後這尊我都稱他為標準麒麟，感覺是有人要畫麒麟時可以來參考用的標準版。 六月就是都沒照片可以挑，所以跳到七月，今年幫 HITCON 記錄了不少活動，最主力參與的就是 HITCON 本番活動的四天研討會加前面兩天 Training 了，然後拍完我就感冒接著一直咳嗽到11月底，明年大概不能這樣從頭參加到尾了，挑的這張是 HITCON Girls 的讀書會的照片，其實 HITCON Girls 的難易度對我來說好像還蠻剛好的(?)。 八月是慣例的 COSCUP，這張是 Jserv 講完他封麥演講後拍的，因為覺得他神情不太一般就拍下來了，後來看他的一些心情抒發才知道是怎麼回事。 九月去幫忙拍了 Open Street Map 的研討會（State of The Map），規模不大，不過是我拍的蠻開心的一場活動，就是一種小而美的 fu。 十月其實也沒拍什麼照片，這張是某天下班時在信義區空橋拍的簡單夜景。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16140518847/" title="武廟碳烤土司 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7492/16140518847_59717232dc_b.jpg" width="1024" height="683" alt="武廟碳烤土司" srcset="https://farm8.staticflickr.com/7492/16140518847_88848cf42f_k.jpg 2x" /></a></p>

<p>又到了一年一度的照片回顧了，今年因為比較多事情，竟然有一個月沒有照片（除了開箱以外），所以就另外多挑了一張照片出來這樣。首先是一月在台南武廟前面碳烤吐司那邊拍的，台南的大大小小寺廟真的很多，隨便一條巷子進去就有間小廟。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16456098101/" title="HTC 2014 Year End Party by othree, on Flickr"><img src="https://farm8.staticflickr.com/7322/16456098101_3302c040ba_b.jpg" width="1024" height="683" alt="HTC 2014 Year End Party" srcset="https://farm8.staticflickr.com/7322/16456098101_b7740c3902_k.jpg 2x" /></a></p>

<p>二月是最後一次五月天到HTC的尾牙了，今年聽說五月天沒有要唱尾牙場這樣。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16535116467/" title="Kano 小朋友的電腦自己動手作工作坊 by othree, on Flickr"><img src="https://farm9.staticflickr.com/8602/16535116467_1e42f2e043_b.jpg" width="1024" height="683" alt="Kano 小朋友的電腦自己動手作工作坊" srcset="https://farm9.staticflickr.com/8602/16535116467_ba59ba6dcd_k.jpg 2x" /></a></p>

<p>三月的是在摩茲工寮拍的，是 Kano 的 workshop，Kano 是讓小朋友能自己從硬體組裝電腦的一個 kit，之前和朋友湊團買了不少台，達到可以請官方支援開一場 workshop 的目標，所以就辦了一場，也是我難得有機會拍小孩子的照片。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/17133378048/" title="台南 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7669/17133378048_014e3ee6f2_b.jpg" width="1024" height="683" alt="台南" srcset="https://farm8.staticflickr.com/7669/17133378048_149a4f072d_k.jpg 2x" /></a></p>

<p>四月是我今年印象最深刻的一杯飲料，台南凰商號的鳳梨冰茶。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/18732255206/" title="頤和園 by othree, on Flickr"><img src="https://farm9.staticflickr.com/8873/18732255206_de78be9257_b.jpg" width="683" height="1024" alt="頤和園" srcset="https://farm9.staticflickr.com/8873/18732255206_8d341d52b8_k.jpg 2x" /></a></p>

<p>五月的時候去了北京一趟，趁著有一天假日去觀光一下，其中頤和園還蠻不錯的，這張照片是園內的麒麟，做工精細，光是台座就很華麗，然後這尊我都稱他為標準麒麟，感覺是有人要畫麒麟時可以來參考用的標準版。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/19502074628/" title="HITCON GIRLS 7月讀書會 by othree, on Flickr"><img src="https://farm1.staticflickr.com/413/19502074628_f5bd2785a1_b.jpg" width="1024" height="683" alt="HITCON GIRLS 7月讀書會" srcset="https://farm1.staticflickr.com/413/19502074628_54c3a5432f_k.jpg 2x" /></a></p>

<p>六月就是都沒照片可以挑，所以跳到七月，今年幫 HITCON 記錄了不少活動，最主力參與的就是 HITCON 本番活動的四天研討會加前面兩天 Training 了，然後拍完我就感冒接著一直咳嗽到11月底，明年大概不能這樣從頭參加到尾了，挑的這張是 HITCON Girls 的讀書會的照片，其實 HITCON Girls 的難易度對我來說好像還蠻剛好的(?)。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21691691725/" title="COSCUP 2015 Day 2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/732/21691691725_0158744a48_b.jpg" width="1024" height="683" alt="COSCUP 2015 Day 2" srcset="https://farm1.staticflickr.com/732/21691691725_dbd49a1cb9_k.jpg 2x" /></a></p>

<p>八月是慣例的 COSCUP，這張是 Jserv 講完他封麥演講後拍的，因為覺得他神情不太一般就拍下來了，後來看他的一些心情抒發才知道是怎麼回事。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21588592452/" title="SOTM Taiwan 2015 Day 2 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5666/21588592452_42ba1e0687_b.jpg" width="1024" height="683" alt="SOTM Taiwan 2015 Day 2" srcset="https://farm6.staticflickr.com/5666/21588592452_e277dc0763_k.jpg 2x" /></a></p>

<p>九月去幫忙拍了 Open Street Map 的研討會（State of The Map），規模不大，不過是我拍的蠻開心的一場活動，就是一種小而美的 fu。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21840706024/" title="信義區 by othree, on Flickr"><img src="https://farm1.staticflickr.com/774/21840706024_a5df54ab4a_b.jpg" width="1024" height="683" alt="信義區" srcset="https://farm1.staticflickr.com/774/21840706024_2997a2fa53_k.jpg 2x" /></a></p>

<p>十月其實也沒拍什麼照片，這張是某天下班時在信義區空橋拍的簡單夜景。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23369387526/" title="菲貓 by othree, on Flickr"><img src="https://farm1.staticflickr.com/666/23369387526_c49aaa7eeb_b.jpg" width="1024" height="683" alt="菲貓" srcset="https://farm1.staticflickr.com/666/23369387526_4b65fa5c6f_k.jpg 2x" /></a></p>

<p>十一月底幫家裡貓咪穿上正式服裝時拍的照片。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23459263613/" title="Kumamon Square by othree, on Flickr"><img src="https://farm6.staticflickr.com/5771/23459263613_d450468173_b.jpg" width="1024" height="683" alt="Kumamon Square" srcset="https://farm6.staticflickr.com/5771/23459263613_bae1c42d73_k.jpg 2x" /></a></p>

<p>十二月去了一趟九州，還專程去拜訪了 Kumamon ，熊本真的是很多 Kumamon，去熊本的行程就是拜訪熊本熊、熊本城、吃豬排、吃燒肉，熊本城其實是重建的，然後現在還是有城主，用的是一口城主制度，簡單說就是有捐錢幫忙維護熊本城就能當城主。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16222124870/" title="FF25 Cosplay by othree, on Flickr"><img src="https://farm8.staticflickr.com/7352/16222124870_39dd508f76_b.jpg" width="1024" height="683" alt="FF25 Cosplay" srcset="https://farm8.staticflickr.com/7352/16222124870_12ad7ac663_k.jpg 2x" /></a></p>

<p>最後補一張 cosplay 的照片，今年後半年都沒有拍相關的活動，剛好上面也都沒挑到這個主題的照片，最近 FF 開始移師到花博園區，那邊腹地比較廣大，比較不會有在台大的的種種問題，不過還搞不太清楚要在哪裡找人拍照就是。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000855" baseName="jsx-e4x">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-12-25</b:date>
				<b:time>09:36:53</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>JSX 的前世</b:title>
			<b:content>
				<b:summary> React 的主要創新在於 Virtual DOM，而伴隨著 Virtual DOM 而來的，就是 Virtual DOM 的操作，由於 JavaScript 語言限制的關係，要產生一個簡單的 &lt;div&gt; 標籤就要寫成： var divNode = React.DOM.div({attr1:"value"}); 如果還要加上子元素，像是一個 list： &lt;ol&gt; &lt;li&gt;Item A&lt;/li&gt; &lt;li&gt;Item B&lt;/li&gt; &lt;li&gt;Item C&lt;/li&gt; &lt;li&gt;Item D&lt;/li&gt; &lt;/ol&gt; 就要寫成： var listNode = React.DOM.div({}, React.DOM.li({}, "Item A"), React.DOM.li({},...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23319631253/" title="ECMA-357 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5679/23319631253_52dfbeb5c0_b.jpg" width="362" height="512" alt="ECMA-357" srcset="https://farm6.staticflickr.com/5679/23319631253_52dfbeb5c0.jpg 768w" /></a></p>

<p>React 的主要創新在於 Virtual DOM，而伴隨著 Virtual DOM 而來的，就是 Virtual DOM 的操作，由於 JavaScript 語言限制的關係，要產生一個簡單的 <code>&lt;div&gt;</code> 標籤就要寫成：</p>

<pre><code>var divNode = React.DOM.div({attr1:"value"});
</code></pre>

<p>如果還要加上子元素，像是一個 list：</p>

<pre><code>&lt;ol&gt;
  &lt;li&gt;Item A&lt;/li&gt;
  &lt;li&gt;Item B&lt;/li&gt;
  &lt;li&gt;Item C&lt;/li&gt;
  &lt;li&gt;Item D&lt;/li&gt;
&lt;/ol&gt;
</code></pre>

<p>就要寫成：</p>

<pre><code>var listNode = React.DOM.div({},
  React.DOM.li({}, "Item A"),
  React.DOM.li({}, "Item B"),
  React.DOM.li({}, "Item C"),
  React.DOM.li({}, "Item D")
);
</code></pre>

<p>雖然比起純 DOM 的語法要簡單很多了，不過其實類似這種寫法來快速產生文件樹節點的 library 已經早就有了，像是 <a href="https://github.com/eneko/mooml">Mooml</a>、<a href="https://github.com/dominictarr/hyperscript">hyperscript</a>（thanks WM），如果 React 當初就直接這樣子推出，大家會想嘗試的意願應該會低很多，Facebook 的工程師應該也知道這樣和直接寫 DOM 或是其他 library 的感覺差異不大，所以他們解決的方法就是建立了一個新的 syntax，看起來就像是讓 DOM 變成像是原生的資料型態一樣，也就是現在的 JSX syntax，然後當然要讓這種語法可以在瀏覽器執行，所以官方有提供了 transpiler，不過其實這個把 XML DOM 當成 JS 語言中的原生資料型態的想法不是第一次出現了，早在好幾年前，就有一個 ECMA-357，又稱為 <a href="https://developer.mozilla.org/zh-TW/docs/E4X/%E4%BD%BF%E7%94%A8_E4X_%E8%99%95%E7%90%86_XML">E4X</a> 的標準是在做這件事的，全名則是 ECMAScript for XML，早期的 Mozilla SpiderMonkey 是有支援的，約是在 2006 年的 JavaScript 1.6 中推出，不過到 Firefox 21 的時候已經完全移除了，所以現在基本上是已經無法體會到這套 JS 擴充的語法，不過其實這套語法還蠻不錯的，有類似 template string 的寫法：</p>

<pre><code>var doc = &lt;{h}&gt;&lt;body&gt;{text}&lt;/body&gt;&lt;/{h}&gt;;
</code></pre>

<p>React 則因為同時導入了 immutable 的概念，所以其 Virtual DOM 設計上只有產生文件樹結構的部分，沒有刪除修改，相較於 JSX 只有建置（create）的語法，E4X 則是有更完整的 CRUD 操作（就像是操作 JS 資料一樣），另外還多了用來尋找目標節點的 selector syntax：</p>

<pre><code>languages.lang[1]
person..*
people.person.(name == "Joe").age
</code></pre>

<p>而且目標對像是 XML，所以對於 namespace 的處理也都有，整體而言算是很完整的 XML 操作方案，使用起來也比 DOM 簡潔很多，可惜後來被放棄，我推測大概幾個原因：</p>

<ol>
<li>使用 XML 的應用越來越少</li>
<li>實做 E4X 會增加 JS 引擎的複雜度</li>
<li>相較於 DOM 不依存於單一程式語言，E4X 則是 JS extension</li>
<li>用 E4X 產生的節點不是 DOM 物件，不直接相容</li>
</ol>

<p>沒想到後來會在 Facebook 的手上，把這個概念單存的套用在 HTML 文件樹之上而重生。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000854" baseName="ula-umbrella">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-11-19</b:date>
				<b:time>22:14:02</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>ULA 雨傘</b:title>
			<b:content>
				<b:summary> 前陣子因緣際會有朋友去香港，就請他幫忙買了隻香港有名（？）的 ULA 雨傘，收到之後覺得驚為天人，幾乎是我用折傘以來的遇到的各種小問題在 ULA 雨傘上都有處理，這篇文章就來介紹一下他們做了什麼處理，解決了什麼問題。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22276626569/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/698/22276626569_c47da2bce3_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/698/22276626569_c47da2bce3.jpg 768w, https://farm1.staticflickr.com/698/22276626569_36ed7cdcc5_k.jpg 2x" /></a></p>

<p>前陣子因緣際會有朋友去香港，就請他幫忙買了隻香港有名（？）的 <a href="http://www.ula-umbrella.com/">ULA</a> 雨傘，收到之後覺得驚為天人，幾乎是我用折傘以來的遇到的各種小問題在 ULA 雨傘上都有處理，這篇文章就來介紹一下他們做了什麼處理，解決了什麼問題。</p>
</b:mainContent>
				<b:extendContent><p>首先第一印像是，雨傘綁起來時很緊，幾乎所有其它的雨傘都是，在我辛苦的把傘面整理好之後，要綁起來時，卻發現因為魔鬼沾或鈕釦的位置，綁起來會鬆鬆的，沒辦法綁緊，結果本來弄得很緊實的傘布就變的鬆鬆垮垮的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22275767928/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/571/22275767928_6ee17966fd_b.jpg" width="683" height="1024" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/571/22275767928_6ee17966fd.jpg 768w, https://farm1.staticflickr.com/571/22275767928_98a4d504ca_k.jpg 2x" /></a></p>

<p>第二個是則是雨傘套的部分，其它雨傘幾乎都沒有考慮要撐傘時，隨附的雨傘套要放在哪的問題，以前我最常做的方法就是把他綁在手把的繩圈上，不過這個方法久了傘套的布就會變的很皺，ULA 則是設計了一個鈕釦在手把繩圈那邊，可以固定拿下來的傘套。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21842288193/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/724/21842288193_3484a9d9c9_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/724/21842288193_3484a9d9c9.jpg 768w, https://farm1.staticflickr.com/724/21842288193_522bcc5b31_k.jpg 2x" /></a></p>

<p>第三個則是雨傘開關的地方，有一整塊軟橡膠墊讓手指不會因為要用力壓金屬片卡吮而不舒服，而且很顯眼，有畫龍點睛的效果，雖然都是素色的雨傘，不過整體設計是蠻好看的。另外一點和開關相關的特色，就是開關很好操作，不太會有力量出不去卡卡的狀況。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21842283173/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/771/21842283173_7e44d94c85_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/771/21842283173_7e44d94c85.jpg 768w, https://farm1.staticflickr.com/771/21842283173_8bce12b29f_k.jpg 2x" /></a></p>

<p>第四個則是收傘容易，雨傘支架末端都有設計過，配合頭蠻大的握把，很容易就把所有支架末端收好固定到握把內，再也不用一直橋來橋去的收傘了。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22275764628/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/716/22275764628_1c69194dd2_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/716/22275764628_1c69194dd2.jpg 768w, https://farm1.staticflickr.com/716/22275764628_3b30e190a1_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21840724334/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/773/21840724334_cd305357d7_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/773/21840724334_cd305357d7.jpg 768w, https://farm1.staticflickr.com/773/21840724334_97ebfd3d10_k.jpg 2x" /></a></p>

<p>另外雨傘握把雖然不長，但是形狀也是設計過的，握起來感覺不會太差，</p>

<p>而除了以上的特色之外，還有一個設計很不錯的是手把的繩圈其實是可以拆開套到其它東西上的，用的雖然是鈕釦不過可靠度蠻高的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22474404621/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5702/22474404621_b7e797e13f_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm6.staticflickr.com/5702/22474404621_b7e797e13f.jpg 768w, https://farm6.staticflickr.com/5702/22474404621_0ddb29dbf5_k.jpg 2x" /></a></p>

<p>最後要講的是耐用度，相信一定有人會有疑問，總之我覺得耐用度也不差，我現在手上這隻有經歷過一次颱風的攻擊，整個被吹翻，傘沒散掉，唯一的受損是有兩根拉桿有一點彎曲，不過我試著要彎回來才發現這拉桿其實很堅固，和一般折傘的拉桿比起來差蠻多，另外就是固定拉桿的方式好很多，我上一隻國產某算是名牌的雨傘後來固定拉桿的地方就常常脫落，要一直回去修理（不過最後是忘在電影院不見了）。傘布本身的防水性目前也都表現很不錯。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22450098812/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5633/22450098812_01311ee804_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm6.staticflickr.com/5633/22450098812_01311ee804.jpg 768w, https://farm6.staticflickr.com/5633/22450098812_0961e69d48_k.jpg 2x" /></a></p>

<p>ULA 雨傘的包裝如下，在香港地鐵有販賣機在賣，要用八達通卡購買，而且不同站點還有各自的限定色，是蠻有趣的銷售方式，當然也有實體店面，價錢大約台幣三四百，如果有去香港的推薦可以買一隻回來試試，要送人的話，就要三思了～～</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22525750458/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/710/22525750458_8719d1e5e0_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/710/22525750458_8719d1e5e0.jpg 768w, https://farm1.staticflickr.com/710/22525750458_84b7929ec2_k.jpg 2x" /></a></p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000853" baseName="apache2-http2">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-10-19</b:date>
				<b:time>23:04:03</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>Apache2 and HTTP/2</b:title>
			<b:content>
				<b:summary> 最近 Apache HTTPD 2.4.17 出了，內建 HTTP/2 的支援，不免俗的要來測試一下，在 Ubuntu 14.04 LTS 下安裝其實也是蠻辛苦的，最主要的問題是 OpenSSL 內建的是 1.0.1，但是要完整支援 HTTP/2 ，還需要 TLS 的 ALPN ，然後就會需要 OpenSSL 1.0.2，因此第一件事情就是下載編譯安裝 OpenSSL，目前最新的是 1.0.2d，如果是 15.10 就是內建 1.0.2 的，問題會少很多，總之先自己下載解壓縮然後編譯： ./config make sudo make install 會把檔案裝到 /usr/local/ssl 這個位置，大概是因為 OpenSSL 影響比較大所以預設沒有裝到平常的 /usr/local...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22116841470/" title="Apache HTTP/2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/660/22116841470_28857c25b9_o_d.png" width="520" height="427" alt="Apache HTTP/2" /></a></p>

<p>最近 Apache HTTPD 2.4.17 出了，內建 HTTP/2 的支援，不免俗的要來測試一下，在 Ubuntu 14.04 LTS 下安裝其實也是蠻辛苦的，最主要的問題是 <a href="https://www.openssl.org/">OpenSSL</a> 內建的是 1.0.1，但是要完整支援 HTTP/2 ，還需要 TLS 的 <a href="https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation">ALPN</a> ，然後就會需要 OpenSSL 1.0.2，因此第一件事情就是下載編譯安裝 OpenSSL，目前最新的是 1.0.2d，如果是 15.10 就是內建 1.0.2 的，問題會少很多，總之先自己下載解壓縮然後編譯：</p>

<pre><code>./config
make
sudo make install
</code></pre>

<p>會把檔案裝到 <code>/usr/local/ssl</code> 這個位置，大概是因為 OpenSSL 影響比較大所以預設沒有裝到平常的 <code>/usr/local</code> 下面，不過也因此造就後續比較麻煩的地方。</p>

<p>Apache 的部分比較麻煩，要分兩個部分，第一個部分是先把 APR 部分的程式碼和 HTTPD 的部分拉下來放一起，這邊參考 <a href="http://d.hatena.ne.jp/ASnoKaze/20151016/1445011720">あすのかぜ</a> 上的指令：</p>

<pre><code>wget http://ftp.jaist.ac.jp/pub/apache//httpd/httpd-2.4.17.tar.gz
tar zxvf ./httpd-2.4.17.tar.gz

wget http://ftp.yz.yamagata-u.ac.jp/pub/network/apache//apr/apr-1.5.2.tar.gz
tar zxvf ./apr-util-1.5.4.tar.gz
mv ./apr-1.5.2 ./httpd-2.4.17/srclib/apr

wget http://ftp.yz.yamagata-u.ac.jp/pub/network/apache//apr/apr-util-1.5.4.tar.gz
ar zxvf ./apr-util-1.5.4.tar.gz 
mv ./apr-util-1.5.4 ./httpd-2.4.17/srclib/apr-util
</code></pre>

<p>然後進去 <code>httpd-2.4.17</code> 目錄下指令編譯安裝：</p>

<pre><code>env PKG_CONFIG_PATH=/usr/local/ssl/lib/pkgconfig ./configure --enable-http2
make
sudo make install
</code></pre>

<p>執行的時候也需要注意，需要帶個環境變數，不然他找不到 <code>/usr/local/ssl/</code> 下的 Library：</p>

<pre><code>env LD_LIBRARY_PATH=/usr/local/ssl/lib /usr/local/apache2/bin/httpd
</code></pre>

<p>或是：</p>

<pre><code>env LD_LIBRARY_PATH=/usr/local/ssl/lib /usr/local/apache2/bin/apachectl start
</code></pre>

<p>不過其實執行前還需要先修改一下設定，我是加在 VirtualHost 裡面：</p>

<pre><code>&lt;VirtualHost *:80&gt;
    Protocols h2c http/1.1
    ServerName blog.othree.net
    ServerAdmin othree@gmail.com
</code></pre>

<p>還有</p>

<pre><code>&lt;VirtualHost *:443&gt;
    Protocols h2 http/1.1
    ServerName blog.othree.net
    ServerAdmin othree@gmail.com
</code></pre>

<p>重點是 <code>Protocols</code> 那行，<code>h2</code> 指的是 HTTPS(TLS) 下的 HTTP/2 連線，<code>h2c</code> 則是 HTTP 下的，在其他地方還會看到 <code>h-15</code>、<code>h-17</code> 之類的，那些其實是之前草稿的版本，無視就好，另外還有一個地方需要設定的是加密用的 CipherSuite 和溝通協定，可以參考 <a href="https://icing.github.io/mod_h2/howto.html#https">How to h2 in apache</a> 提供的設定：</p>

<pre><code>SSLCipherSuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK
SSLProtocol All -SSLv2 -SSLv3
</code></pre>

<p>不確定 CipherSuite 的選擇影響多大，不過我猜主要是要把 SSL 全部關掉吧，然後其實這組設定就是 Mozilla 推薦的 SSL 設定的 <a href="https://wiki.mozilla.org/Security/Server_Side_TLS">Modern</a> 那組，等於是要放棄很多舊瀏覽器了，支援的瀏覽器最低版本如下：</p>

<ul>
<li>Firefox 27</li>
<li>Chrome 22</li>
<li>IE 11</li>
<li>Opera 14</li>
<li>Safari 7</li>
<li>Android 4.4</li>
<li>Java 8 </li>
</ul>

<p>都弄好開啟 Apache 就可以了，不過記得如果之前是用 apt 裝的 Apache 的話，設定要自己搬過來。</p>

<p>驗證工具可以用 Curl 或是 nghttp，我是在 OSX 上用 brew 裝的，Curl 比較麻煩，不過可以看到一開始溝通的部分：</p>

<pre><code>brew install curl --with-nghttp2
brew link curl

/usr/local/bin/curl -v --http2 https://othree.net
</code></pre>

<p>然後就會出現最上面那張圖那樣的資訊，可以看到有 ALPN 的選項出現，另外一個工具是 nghttp，其實 Curl 的 http2 支援就是用這套 library：</p>

<pre><code>brew install nghttp2

nghttp -uv https://othree.net
</code></pre>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22118020729/" title="Apache HTTP/2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/565/22118020729_9f6d1b9a08_o_d.png" width="520" height="427" alt="Apache HTTP/2" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22278832416/" title="Apache HTTP/2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/771/22278832416_5553a17fb8_o_d.png" width="520" height="427" alt="Apache HTTP/2" /></a></p>

<p>可以看到上色整理得很漂亮的資訊，另外用瀏覽器也可以判斷，Firefox 的話會寫上 HTTP 版本號，Chrome 我測試是要 Canary 才支援，然後我網站連線的 SSL 握手那段花的時間反而更多，不過還是比較快全部下載完，只是 render 畫面影響的還有其他檔案，雖然大部分檔案都提早開始下載，不過也同時開始下載重要度比較低的圖形檔案，結果反而 DOM ready 的時間點更晚~~~，下圖是 HTTP/1.1 的時候：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22305448445/" title="http1.1-1 by othree, on Flickr"><img src="https://farm1.staticflickr.com/707/22305448445_7da40d9f50_h_d.jpg" width="1022" height="53" alt="http1.1-1" /></a></p>

<p>然後是 2.0：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21684413063/" title="http2-1 by othree, on Flickr"><img src="https://farm1.staticflickr.com/756/21684413063_dbab9bbafb_h_d.jpg" width="1022" height="530" alt="http2-1" /></a></p>

<p>最後就是還不支援 Server Push，這個東西其實技術上不難，可是和 Cache 搞在一起就變很複雜了，目前好像還沒有比較好的解法出現，也只有一些非開源的系統支援的樣子。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
