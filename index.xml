<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>i</b:listType>
			<b:listData listID="index"/>
		</b:entriesMeta>

		<b:entry entryID="000752" baseName="ntu">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-07-01</b:date>
				<b:time>22:35:55</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>台大</b:title>
			<b:content>
				<b:summary>由於已經連續發了超過十篇技術文章，所以要貼些照片來平衡一下，剛好前兩天晚上走過台大拍了一些，所以就來貼些在台大校內拍的照片吧。...</b:summary>
				<b:mainContent><p>由於已經連續發了超過十篇技術文章，所以要貼些照片來平衡一下，剛好前兩天晚上走過台大拍了一些，所以就來貼些在台大校內拍的照片吧。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5014521240/" title="Flickr 上 othree 的 台大校門"><img src="//farm5.staticflickr.com/4147/5014521240_a5a4a72b4c_b.jpg" width="1024" height="768" alt="台大校門" srcset="//farm5.staticflickr.com/4147/5014521240_a5a4a72b4c.jpg 768w, //farm5.staticflickr.com/4147/5014521240_a5a4a72b4c_b.jpg 768w 2x" /></a></p>
</b:mainContent>
				<b:extendContent><p>台大校門，現在已經是古蹟了，據說以前校門廣場常常是黨外人士聚會的場所。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9158987767/" title="Flickr 上 othree 的 台大 at Night"><img src="//farm8.staticflickr.com/7394/9158987767_2c2c9649a7_b.jpg" width="1024" height="683" alt="台大 at Night" srcset="//farm8.staticflickr.com/7394/9158987767_2c2c9649a7.jpg 768w, //farm8.staticflickr.com/7394/9158987767_2c2c9649a7_b.jpg 768w 2x, //farm8.staticflickr.com/7394/9158987767_eab77f0438_k.jpg 2x" /></a></p>

<p>台灣應該只有大學校內會看到這樣壯觀的腳踏車海吧。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9158986845/" title="Flickr 上 othree 的 台大 at Night"><img src="//farm4.staticflickr.com/3811/9158986845_c9a66049f3_b.jpg" width="1024" height="683" alt="台大 at Night" srcset="//farm4.staticflickr.com/3811/9158986845_c9a66049f3.jpg 768w, //farm4.staticflickr.com/3811/9158986845_c9a66049f3_b.jpg 768w 2x, //farm4.staticflickr.com/3811/9158986845_c095e99e80_k.jpg 2x" /></a></p>

<p>很喜歡這樣拍透光的植物，晚上的時候剛好可以用路燈，看起來就很翠綠。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/3933561345/" title="Flickr 上 othree 的 第一活動中心屋頂"><img src="//farm4.staticflickr.com/3253/3933561345_45fd2e3449_b.jpg" width="1024" height="768" alt="第一活動中心屋頂" srcset="//farm4.staticflickr.com/3253/3933561345_45fd2e3449.jpg 768w, //farm4.staticflickr.com/3253/3933561345_45fd2e3449_b.jpg 768w 2x" /></a></p>

<p>台大的第一學生活動中心也是某個時期才有的歷史建物，這種中空屋頂結構現在已經看不到了，最近幾年做了不少改建，因為要符合現代的建築法規，加了一些不是這麼需要的補強，像是二樓口字形的走廊硬是一邊要加上剪力牆，有點難過啊，希望能保存下去。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9158993245/" title="Flickr 上 othree 的 台大 at Night"><img src="//farm6.staticflickr.com/5477/9158993245_6553e9436f_b.jpg" width="1024" height="683" alt="台大 at Night" srcset="//farm6.staticflickr.com/5477/9158993245_6553e9436f.jpg 768w, //farm6.staticflickr.com/5477/9158993245_6553e9436f_b.jpg 768w 2x, //farm6.staticflickr.com/5477/9158993245_cd28aec67f_k.jpg 2x" /></a></p>

<p>校內很多這樣小小一棟不知道是什麼的建築物。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9161215528/" title="Flickr 上 othree 的 台大 at Night"><img src="//farm8.staticflickr.com/7295/9161215528_12a2e8522a_b.jpg" width="1024" height="683" alt="台大 at Night" srcset="//farm8.staticflickr.com/7295/9161215528_12a2e8522a.jpg 768w, //farm8.staticflickr.com/7295/9161215528_12a2e8522a_b.jpg 768w 2x, //farm8.staticflickr.com/7295/9161215528_c98da9527b_k.jpg 2x" /></a></p>

<p>偷渡的台科大，不過還是在台大校內拍的~~</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8567737535/" title="Flickr 上 othree 的 台大杜鵑花節"><img src="//farm9.staticflickr.com/8527/8567737535_3c6bbabec4_b.jpg" width="1024" height="683" alt="台大杜鵑花節" srcset="//farm9.staticflickr.com/8527/8567737535_3c6bbabec4.jpg 768w, //farm9.staticflickr.com/8527/8567737535_3c6bbabec4_b.jpg 768w 2x, //farm9.staticflickr.com/8527/8567737535_fb8bf6bcee_k.jpg 2x" /></a></p>

<p>杜鵑花節現在人都很多，很多是家長會帶小孩，還有校內社團也可以趁機擺攤宣傳，似乎有很多高中生是整車整車來的？</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8567736513/" title="Flickr 上 othree 的 台大杜鵑花節"><img src="//farm9.staticflickr.com/8245/8567736513_865c07887c_b.jpg" width="1024" height="683" alt="台大杜鵑花節" srcset="//farm9.staticflickr.com/8245/8567736513_865c07887c.jpg 768w, //farm9.staticflickr.com/8245/8567736513_865c07887c_b.jpg 768w 2x, //farm9.staticflickr.com/8245/8567736513_39fbacb025_k.jpg 2x" /></a></p>

<p>來張杜鵑花！</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5385180238/" title="Flickr 上 othree 的 台大醫院"><img src="//farm6.staticflickr.com/5211/5385180238_a069cacb4e_b.jpg" width="1024" height="768" alt="台大醫院" srcset="//farm6.staticflickr.com/5211/5385180238_a069cacb4e.jpg 768w, //farm6.staticflickr.com/5211/5385180238_a069cacb4e_b.jpg 768w 2x" /></a></p>

<p>最後來張很久以前拍的台大醫院舊館，台大以前的建物幾乎都是這種風格，後來有一個時期的建築真是超難看，幾乎都四四方方，像是現在已經拆掉的新生大樓（有興趣的自己 google 看看，我沒拍過它XD），大約在我在學時期，系上的教授就說最近幾年有開始在注重這些，當時是新的圖書館剛成立啟用，後來的幾棟新館真的也都好看許多。然後看到這張照片就想到基隆車站（默）。</p>

<p>最後話說台大沒有建築系，最相關的就是土木系的建築與城鄉研究所了，所以現在回想起來，才發覺大學時也是有吸收到一些相關的知識耶，雖然我現在做的完全不相關...</p>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000751" baseName="javascript-primitives-obj">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-06-30</b:date>
				<b:time>14:24:41</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>JavaScript Primitives Objects</b:title>
			<b:content>
				<b:summary>接續上一篇文章，JavaScript 的資料型別可以分為兩類：基本型別(primitive value)和物件(object)。基本型別包含字串、數值、布林值等，物件除了物件外，還有像是函數、Regular Expression 等。JavaScript 還有一組很特別的 constructor，對應到每種基本型別，所以你可以 new String('blah'); 來產生基本型別的物件： new String('blah'); new Number(42); ner Boolean(true); 如果看最近的書本和教學都會說不要使用這種方法來建立這些基本型別，缺點有效能問題、API 設計不好，會有混淆等等。不過如果是物件的話，不就可以很方便的做一些操作了嗎？ 這兩年很受歡迎的 Ruby 有一個特性就是所有的基本型別都是物件，所以就可以很簡單的用一些串接的方式直接對這些基本型別進行操作： str = 'hello' str.capitalize # Hello str.capitalize! str # Hello str.count('l') # 2 在 JavaScript 中的基本型別其實不需要以物件的形式，也可以做類似的操作： var str =...</b:summary>
				<b:mainContent><p>接續上一篇文章，JavaScript 的資料型別可以分為兩類：基本型別(primitive value)和物件(object)。基本型別包含字串、數值、布林值等，物件除了物件外，還有像是函數、Regular Expression 等。JavaScript 還有一組很特別的 constructor，對應到每種基本型別，所以你可以 <code>new String('blah');</code> 來產生基本型別的物件：</p>

<pre><code>new String('blah');
new Number(42);
ner Boolean(true);
</code></pre>

<p>如果看最近的書本和教學都會說不要使用這種方法來建立這些基本型別，缺點有效能問題、API 設計不好，會有混淆等等。不過如果是物件的話，不就可以很方便的做一些操作了嗎？</p>

<p>這兩年很受歡迎的 Ruby 有一個特性就是所有的基本型別都是物件，所以就可以很簡單的用一些串接的方式直接對這些基本型別進行操作：</p>

<pre><code>str = 'hello'
str.capitalize        #  Hello
str.capitalize!
str                   #  Hello
str.count('l')        #  2
</code></pre>

<p>在 JavaScript 中的基本型別其實不需要以物件的形式，也可以做類似的操作：</p>

<pre><code>var str = 'hello';
str.length;           // 2
str.contains('l');    // true
str.indexOf('l');     // 2
</code></pre>

<p>但是如果想要更進一步的在上面加上屬性或是 method 就會發現行不通：</p>

<pre><code>var str = 'hello';
str.target = 'world';
str.target;            // undefined
</code></pre>

<p>這中間到底是有什麼差異呢？這個問題我想了很久，直到看了 <a href="http://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/">The Secret Life of JavaScript Primitives</a> 這篇文章才瞭解，最後面這個例子，其實等同於：</p>

<pre><code>var str = 'hello';
(new String(str)).target = 'world';
(new String(str)).target;
</code></pre>

<p>當使用物件形式的 <code>.</code> 運算子對基本型別資料操作的時候，會產生一個新的物件，然後用完就丟掉，所以在指派 target 屬性那行操作到的物件，和要取回 target 屬性那行的物件，是完全不一樣的兩個物件，這也就是為什麼這些資料可以用類似物件的方法操作，但是卻不能真的像物件一樣使用。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000750" baseName="javascript-is-untyped">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-06-30</b:date>
				<b:time>00:08:06</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>JavaScript is Untyped</b:title>
			<b:content>
				<b:summary> 上週去聽 Gias Kay Lee 講 Animation in AngularJS，說到 JavaScript 其實是 untyped language，因為我沒受過 Computer Science 的正統教育，這名詞對我來說是新的，所以回來花了些時間看網路上的文件。 Wikipedia 上的文章不少，不過看起來比較吃力，Stack Overflow 上也有幾則不錯的問答，對我來說幫助很大，這個問題其實也沒很複雜，在 Computer Science 上來說，是不使用 strong type 和 weak type 來形容程式語言的，因為沒有明確的定義，取而代之的，是數個有明確定義的相關特性：type safety、memory safety、static/dynamic type checking、type conversions。 所以我之前 文章 說到 JavaScript 是 weak...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9167965602/" title="Flickr 上 othree 的 untyped"><img src="//farm6.staticflickr.com/5328/9167965602_d9be012d23_b.jpg" width="674" height="382" alt="untyped" srcset="//farm6.staticflickr.com/5328/9167965602_d9be012d23.jpg 768w, //farm6.staticflickr.com/5328/9167965602_d9be012d23_b.jpg 768w 2x" /></a></p>

<p>上週去聽 <a href="https://twitter.com/gsklee">Gias Kay Lee</a> 講 <a href="http://slid.es/gsklee/animation-in-angularjs">Animation in AngularJS</a>，說到 JavaScript 其實是 <a href="http://en.wikipedia.org/wiki/Talk%3ATyped_and_untyped_languages#.22Untyped_Language.22">untyped language</a>，因為我沒受過 Computer Science 的正統教育，這名詞對我來說是新的，所以回來花了些時間看網路上的文件。</p>

<p>Wikipedia 上的文章不少，不過看起來比較吃力，Stack Overflow 上也有幾則不錯的<a href="http://stackoverflow.com/questions/964910/is-javascript-an-untyped-language">問答</a>，對我來說幫助很大，這個問題其實也沒很複雜，在 Computer Science 上來說，是不使用 strong type 和 weak type 來形容程式語言的，因為沒有明確的定義，取而代之的，是數個有明確定義的相關特性：type safety、memory safety、static/dynamic type checking、type conversions。</p>

<p>所以我之前 <a href="https://blog.othree.net/log/2013/06/01/dependency-injection-of-angularjs/">文章</a> 說到 JavaScript 是 weak type 那段其實應該要說是 untyped 會比較好。其實講到 type 的問題，就會想到 JavaScript 的效能問題，Brendan Eich 說過 JavaScript 引擎很難跑得快的原因就是因為它是 untyped 的。在 <a href="http://www.html5rocks.com/en/tutorials/speed/v8/">Performance Tips for JavaScript in V8</a> 這篇文章有提到，V8 引擎其中有一個提升速度的設計是給變數 hidden class，這個 hidden class 其實就是隱藏的變數型別，如果你的變數從頭到尾都維持同樣的型別，例如整數永遠是整數、字串永遠是字串，而不會有中間換型別的情形，那 V8 引擎就可以利用 hidden class 的資訊來提升運算速度，我覺得這個 tip 很不錯，不只是 V8 可以跑比較快，即使其他引擎沒有受益，作為寫程式時的 good practice 也很受用，減少了程式內的不可預期性。</p>

<p>另外一個我覺得很相似的例子是這兩年新的 <a href="http://asmjs.org/spec/latest/">asm.js</a>，asm.js 是一個 JavaScript 的子集，設計上可以直接做一些比較低階的操作，像是直接 allocate 記憶體還有 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays">Typed Array</a> 等，而其中還定義了一組相容於普通 JavaScript 的寫法來宣告變數的型別：</p>

<pre><code>function f(x, y) {
    x = x|0;      // int parameter
    y = +y;       // double parameter

    return;
}
</code></pre>

<p>只是 asm.js 會直接手寫的應該很少，像 asm.js 有名的例子： Unreal Engine 就是用工具 compile 過去的。</p>

<p>PS: 我還找不到上面那張圖片的投影片出處，有人知道的話麻煩告訴我，感謝。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

		<b:entry entryID="000749" baseName="autocomplpop-and-snipmate">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-06-25</b:date>
				<b:time>00:46:07</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>autocomplpop + snipmate</b:title>
			<b:content>
				<b:summary> 我用 vim-snipmate 和 vim-autocomplpop 已經蠻久了，不過運氣不好的是兩個 plugin 的原作者都已經不維護了，過了許久，有幾個人接手了 snipmate，不過大改一陣子之後，原本兩者間可以合作的hack 就失效了，考慮一陣子之後我開始在 github 上 fork 了一版 autocomplpop 來維護，一來是我用 vundle 安裝方便，二來是希望有一天能重新把 autocomplpop 支援 snipmate 的功能再弄起來。 其實幾個月前我有研究過一次，不過那時候幾乎看不懂新版 snipmate 的程式碼，沒想到今天又看一次竟然看懂了，不知道是不是之前那版本來就很難讀就是，總之研究了一下可行性，發現似乎可以不用像以前那樣用 hack 的方法就可以讓功能復活，花了大約兩三個小時下去弄，真的成功了，感動。 這次不用改檔案，設定有設對： let g:acp_behaviorSnipmateLength = 1 輸入的時候輸入大寫就應該要看到 snippets 的候選項目了。 最後要補充一下，我 fork 的 autocomplpop 是原作者...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9125887997/" title="Flickr 上 othree 的 autocomplpop + snipmate"><img src="//farm6.staticflickr.com/5533/9125887997_27c6e863a0_b.jpg" width="1001" height="484" alt="autocomplpop + snipmate" srcset="//farm6.staticflickr.com/5533/9125887997_27c6e863a0.jpg 768w, //farm6.staticflickr.com/5533/9125887997_27c6e863a0_b.jpg 768w 2x" /></a></p>

<p>我用 vim-snipmate 和 vim-autocomplpop 已經蠻久了，不過運氣不好的是兩個 plugin 的原作者都已經不維護了，過了許久，有幾個人接手了 <a href="https://github.com/garbas/vim-snipmate">snipmate</a>，不過大改一陣子之後，原本兩者間可以合作的<a href="http://www.ptt.cc/bbs/Editor/M.1264437741.A.4ED.html">hack</a> 就失效了，考慮一陣子之後我開始在 github 上 fork 了一版 <a href="https://github.com/othree/vim-autocomplpop">autocomplpop</a> 來維護，一來是我用 vundle 安裝方便，二來是希望有一天能重新把 autocomplpop 支援 snipmate 的功能再弄起來。</p>

<p>其實幾個月前我有研究過一次，不過那時候幾乎看不懂新版 snipmate 的程式碼，沒想到今天又看一次竟然看懂了，不知道是不是之前那版本來就很難讀就是，總之研究了一下可行性，發現似乎可以不用像以前那樣用 hack 的方法就可以讓功能復活，花了大約兩三個小時下去弄，真的成功了，感動。</p>

<p>這次不用改檔案，設定有<a href="https://github.com/othree/vim-autocomplpop/blob/master/doc/acp.txt#L82">設對</a>：</p>

<pre><code>let g:acp_behaviorSnipmateLength = 1
</code></pre>

<p>輸入的時候輸入大寫就應該要看到 snippets 的候選項目了。</p>

<p>最後要補充一下，我 fork 的 autocomplpop 是原作者 ns9tks 拆出一些 component 的版本，所以會需要安裝 <a href="http://www.vim.org/scripts/script.php?script_id=3252">L9</a>，新的 snipmate 也有相依的 plugin：<a href="https://github.com/marcweber/vim-addon-mw-utils">vim-addon-mw-utils</a> 和 <a href="https://github.com/tomtom/tlib_vim">tlib</a>，而且它也不含 snippets，東西在另外一個 <a href="https://github.com/honza/vim-snippets">vim-snippets</a>，其實有點多，蠻混亂的，所以整理一下總共要裝哪些 plugin：</p>

<ul>
<li><a href="http://www.vim.org/scripts/script.php?script_id=3252">L9</a></li>
<li><a href="https://github.com/othree/vim-autocomplpop">vim-autocomplpop</a></li>
<li><a href="https://github.com/marcweber/vim-addon-mw-utils">vim-addon-mw-utils</a></li>
<li><a href="https://github.com/tomtom/tlib_vim">tlib</a></li>
<li><a href="https://github.com/garbas/vim-snipmate">vim-snipmate</a></li>
<li><a href="https://github.com/honza/vim-snippets">vim-snippets</a></li>
</ul>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000748" baseName="vim-variable-variables">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-06-21</b:date>
				<b:time>17:32:28</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Vim Variable Variables</b:title>
			<b:content>
				<b:summary>上一篇文章介紹 Syntastic 的最後面，其實本來想順便介紹一個 Vim Plugin 設定的 pattern，後來想一想還是獨立一篇文章好了，剛好今年 COSCUP 要介紹一些 Vim 的東西，這篇文章也可以作些 Vim 的介紹，就先從上一篇文章最後面的那行 Vim 設定開始看起： let g:syntastic_coffee_coffeelint_args = "--csv -f ~/coffeelint-config.json" 在這行設定中，作的事情其實只是宣告並給一個變數值，而我想說的重點是這個變數的變數名稱：g:syntastic_coffee_coffeelint_args，這個變數其實是根據 Syntastic 的文件 5.2 節設定的，其實這個變數名稱裡面有 coffee、coffeelint、args 三個變數，在文件中是這樣描述這個變數的組成的： syntastic_[filetype]_[subchecker]_[option-name] 表示的是 coffee 這種檔案格式下面，用 coffeelint 時的 args 參數，這種階層式的設定，在其他程式語言通常會用 dictionary 這種資料型態比較多，可是在 Vim 的圈子卻不是這樣，而是比較多用上面這種...</b:summary>
				<b:mainContent><p>上一篇文章介紹 Syntastic 的最後面，其實本來想順便介紹一個 Vim Plugin 設定的 pattern，後來想一想還是獨立一篇文章好了，剛好今年 COSCUP 要介紹一些 Vim 的東西，這篇文章也可以作些 Vim 的介紹，就先從上一篇文章最後面的那行 Vim 設定開始看起：</p>

<pre><code>let g:syntastic_coffee_coffeelint_args = "--csv -f ~/coffeelint-config.json"
</code></pre>

<p>在這行設定中，作的事情其實只是宣告並給一個變數值，而我想說的重點是這個變數的變數名稱：<code>g:syntastic_coffee_coffeelint_args</code>，這個變數其實是根據 Syntastic 的<a href="https://github.com/scrooloose/syntastic/blob/master/doc/syntastic.txt#L386">文件 5.2 節</a>設定的，其實這個變數名稱裡面有 <em>coffee</em>、<em>coffeelint</em>、<em>args</em> 三個變數，在文件中是這樣描述這個變數的組成的：</p>

<pre><code>syntastic_[filetype]_[subchecker]_[option-name]
</code></pre>

<p>表示的是 coffee 這種檔案格式下面，用 coffeelint 時的 args 參數，這種階層式的設定，在其他程式語言通常會用 dictionary 這種資料型態比較多，可是在 Vim 的圈子卻不是這樣，而是比較多用上面這種 Variable Variables 的形式，我想可能原因是： Vim Script 要建立多階層的空 dictionary 不是很方便，要一層一層的建立，而這個問題不管是開發者自己不方便，使用者在 vimrc 裡面作設定也會變得很麻煩。</p>

<p>那在 Vim Script 裡面，要怎樣實作這樣 variable variables 形式的程式呢？很簡單，和 <a href="http://php.net/manual/en/language.variables.variable.php">PHP 很像</a>，都是用<a href="http://vimdoc.sourceforge.net/htmldoc/eval.html#curly-braces-names">大括號</a>，所以要讀取最上面那個使用者設定的值很簡單：</p>

<pre><code>g:syntastic_{filetype}_{subchecker}_{optionName}
</code></pre>

<p>這樣就好了，真的那麼簡單就好了...</p>

<p>Vim Script 和現在主流的 Scripting 語言差異蠻大的，有很多不太方便的設計，像是設定 list, dictionary 時如果要在不同行寫不同項目的內容，每行間都要加一個反斜線 <code>\</code>，資料的型別是強型別，字串和數字都要自己手動作轉換，宣告和改變數的值都要用 <code>let</code> 等等，而這邊會遇到的限制是，無法存取任何一個不存在的變數，要是有存取到的話都會出現錯誤，即使只有讀取值也是，並不會直接給你 false value 或是像 JavaScript 那樣有 <code>undefined</code>，所以要是使用者沒設定過這個變數 <code>g:syntastic_coffee_coffeelint_args</code>，我在 Plugin 裡面就不能直接讀取他，不然只會看到紅色的錯誤訊息。</p>

<p>要處理這個問題，要用的是 <a href="http://vimdoc.sourceforge.net/htmldoc/eval.html#exists()">exists</a> 這個內建的 function，這個 function 是專門用來檢查變數是否存在用的，如果變數存在才做事情，寫起來就像是：</p>

<pre><code>if exists('gsyntastic_' . filetype . '_' . subchecker . '_' . optionName)
    let args = g:syntastic_{filetype}_{subchecker}_{optionName}
</code></pre>

<p>實在是不太好看，不過寫 Vim Script 基本上就是常常要寫這樣難看的程式碼，做的都是一些土法煉鋼的事情，其實還蠻辛苦的，而且你現在應該可以想像，如果要用多階層的 dictionary 在 vimrc 裡面作設定會長什麼樣子了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000747" baseName="syntastic-coffeelint">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-06-21</b:date>
				<b:time>00:29:08</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>使用 Syntastic 執行 CoffeeLint 檢驗 CoffeeScript</b:title>
			<b:content>
				<b:summary>我之前有 fork jslint.vim 出來做了一個 coffee-check.vim，不過前陣子開始改用 Syntastic，作者 Martin Grenfell 也是個蠻有名的 Vim plugin 作者，最有名的應該 nerdtree 了吧，Syntastic 則是一個通用的 syntax checker plugin，使用的是外部的 syntax checker，設計成可以任意擴充支援不同檔案類型，而且支援一個檔案類型多種 checker，並且沒有限制 syntax 檢查，只要外部程式會跟你說哪裡有問題就可以。 Syntastic 預設就已經有 CoffeeScript 用的設定，支援 CoffeeScript Compiler 和 CoffeeLint，前者可以用來作 syntax checker，後者則是 lint，實際上安裝起來蠻簡單的，系統的 coffee 和 coffeelint 指令都可以透過 npm 安裝：...</b:summary>
				<b:mainContent><p>我之前有 fork jslint.vim 出來做了一個 <a href="https://github.com/othree/coffee-check.vim">coffee-check.vim</a>，不過前陣子開始改用 <a href="https://github.com/scrooloose/syntastic">Syntastic</a>，作者 Martin Grenfell 也是個蠻有名的 Vim plugin 作者，最有名的應該 <a href="https://github.com/scrooloose/nerdtree">nerdtree</a> 了吧，Syntastic 則是一個通用的 syntax checker plugin，使用的是外部的 syntax checker，設計成可以任意擴充支援不同檔案類型，而且支援一個檔案類型多種 checker，並且沒有限制 syntax 檢查，只要外部程式會跟你說哪裡有問題就可以。</p>

<p>Syntastic 預設就已經有 CoffeeScript 用的設定，支援 CoffeeScript Compiler 和 <a href="http://www.coffeelint.org/">CoffeeLint</a>，前者可以用來作 syntax checker，後者則是 <a href="http://zh.wikipedia.org/wiki/Lint">lint</a>，實際上安裝起來蠻簡單的，系統的 coffee 和 coffeelint 指令都可以透過 npm 安裝：</p>

<pre><code>npm install -g coffee-script
npm install -g coffeelint
</code></pre>

<p>Synatastic 用 Vundle 或 pathogen 安裝，然後你編輯完 CoffeeScript 檔案存檔時，就會出現檢查的結果了。</p>

<p>不過雖然安裝簡單，但是我還是遇到一個問題，就是 CoffeeLint 的其中一項檢查項目是每行的程式碼不要太長，預設是 80 個字元，不過這個數值對我來說太小了，所以我就必須要想辦法修改這個限制，CoffeeLint 有提供設定這些規定的選項，有點複雜，首先你必須要先有一個設定檔，而這個設定檔要 CoffeeLint 0.5.5 以後才有辦法用指令產生，運氣很不好的，npm 現在的 stable 版卻是 0.5.4，還不支援產生設定檔，我又不想要自己 compile 一份，所以只好上網搜尋，結果還真的給我找到範例，趕緊丟 <a href="https://gist.github.com/othree/5820021">gist 備份</a>。</p>

<p>設定檔內容就是個 JSON：</p>

<pre><code>{
    "max_line_length": {
      "value": 80,
      "level": "ignore",
      "message": "Line exceeds maximum allowed length"
    }
}
</code></pre>

<p>還蠻好理解的（可是沒範例我怎麼知道格式是怎樣啊！怒！），改好我要的設定後，執行 coffeelint 指令時還要加上參數來指定設定檔：</p>

<pre><code>coffeelint -f ~/coffeelint-configuration.json route.coffee
</code></pre>

<p>之前做到這步後我就卡住了，因為不知道怎樣設定成讓 Syntastic 執行時也接一樣的參數，直到今天早上跟 joseph 推薦 Syntastic 之後，才又花時間研究一次，終於發現其實可以在 vimrc 裡面<a href="https://github.com/scrooloose/syntastic/blob/master/doc/syntastic.txt#L386">設定</a>特定檔案、特定 checker、特定設定的值：</p>

<pre><code>let g:syntastic_coffee_coffeelint_args = "--csv -f ~/coffeelint-config.json"
</code></pre>

<p>前面的 <code>--csv</code> 是一定要的，這樣設好，我終於可以不用一直看到 CoffeeLint 跟我說我的程式碼太長了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

	</b:entries>
</b:blog>
