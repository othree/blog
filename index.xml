<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>i</b:listType>
			<b:listData listID="index"/>
		</b:entriesMeta>

		<b:entry entryID="000785" baseName="scrolling-performance">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-01-01</b:date>
				<b:time>01:49:24</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>Scrolling Performance</b:title>
			<b:content>
				<b:summary>元旦就是要來發篇技術文章的啦。 一直覺得我的 blog 在 scroll 的時候好像不是很順暢，把之前亂加的 parallax 特效拿掉也沒什麼改善，於是週末花了些時間研究了一下，其實要改進捲動時效能可以作的事情大概就是那些，Fixing a parallax scrolling website to run in 60 FPS 這篇文章有整理成條目： Resize、scroll 事件不要在迴圈內綁 Resize、scroll 事件的 handler 用 requestAnimationFrame 來執行 避免 resize 大張圖片 避免 background-size HTML5 Rocks 的 Scrolling Performance 這篇文章則是介紹如何分析網站捲動的效能，也有提到一些上面那篇文章沒講到的項目，像是避免 repaint，避免一些計算比較昂貴的 style 等。另外最近還有一個很有名的...</b:summary>
				<b:mainContent><p>元旦就是要來發篇技術文章的啦。</p>

<p>一直覺得我的 blog 在 scroll 的時候好像不是很順暢，把之前亂加的 parallax 特效拿掉也沒什麼改善，於是週末花了些時間研究了一下，其實要改進捲動時效能可以作的事情大概就是那些，<a href="http://kristerkari.github.io/adventures-in-webkit-land/blog/2013/08/30/fixing-a-parallax-scrolling-website-to-run-in-60-fps/">Fixing a parallax scrolling website to run in 60 FPS</a> 這篇文章有整理成條目：</p>

<ol>
<li>Resize、scroll 事件不要在迴圈內綁</li>
<li>Resize、scroll 事件的 handler 用 requestAnimationFrame 來執行</li>
<li>避免 resize 大張圖片</li>
<li>避免 background-size</li>
</ol>

<p>HTML5 Rocks 的 <a href="http://www.html5rocks.com/en/tutorials/speed/scrolling/">Scrolling Performance</a> 這篇文章則是介紹如何分析網站捲動的效能，也有提到一些上面那篇文章沒講到的項目，像是避免 repaint，避免一些計算比較昂貴的 style 等。另外最近還有一個很有名的 <a href="http://www.thecssninja.com/javascript/pointer-events-60fps">hack</a>，是在捲動時，使用 <code>pointer-events: none;</code> 來避免元件產生 hover 的特效結果增加畫面 painting 的運算。</p>

<p>在講我遇到的問題前想先來說一下下面這張圖怎麼看：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11624929755/" title="Scroll cause image resize by othree, on Flickr"><img src="//farm4.staticflickr.com/3780/11624929755_c33c8aa3f0_b.jpg" width="1024" height="750" alt="Scroll cause image resize" src-1="(max-width: 768px)  //farm4.staticflickr.com/3780/11624929755_c33c8aa3f0.jpg 1x, //farm4.staticflickr.com/3780/11624929755_c33c8aa3f0_b.jpg 2x"  /></a></p>

<p>這張圖是 Chrome 的內建開發工具，目前要作 performance tuning 最好的工具還是 Chrome 開發工具的這個 Timeline 和 Profile，網路上找的到的相關資源也是以 Chrome 為主。這張圖的上半是 framerate 的狀態表示，上面的綠色 bar 代表的是生成畫面前運算執行的時間，所以是越短越好，可以看到那個區塊有兩條橫線，右邊寫了 30fps 和 60fps，意思是執行時間只要能壓在那條線下面，就可以讓頁面有該 frame rate 的表現。下半部就可以拉近去細看不同時間點做了哪些事情，像是圖片 decode、resize、事件的 callback 執行等等都可以分辨。</p>

<p>使用這個開發工具來看到底是那邊計算很花時間，結果發現一直有 image resize 的運算在發生，即使我的圖片都已經全部讀好，頁面從頭卷到尾過，只要從新捲動就會發現 Chrome 又重新把 resize 過的 image 再 resize 一次，後來同事 <a href="http://blog.linmic.net/">Linmic</a> 寫了 test case 來測試各種定義圖片寬高的方法：</p>

<ul>
<li><code>&lt;img&gt;</code> width/height 屬性</li>
<li>CSS 相對長度定義（百分比、em）</li>
<li>CSS 絕對長對定義（px）</li>
<li>CSS 背景圖 + background-size</li>
</ul>

<p>等等，結果發現只有第一個方法圖片不會因為頁面捲動而需要重新 resize，簡單說就是，如果圖片的寬高是用到 CSS 的定義來決定的話，那在 Chrome 下就會有個 bug 是，頁面捲動時，即使圖片尺寸沒有變過，Chrome 還是會重新去 resize。根據目測，這問題在 Firefox 和 Safari 上是沒有的樣子，Chrome 的差距比較大，而且現在因為 responsive design 的關係，文章內的插圖很多寬高都是相對的寬高，像是很多人用的 <a href="http://getbootstrap.com/">Bootstrap</a> 就是這樣，其實影響的範圍蠻廣的，而且找不到方法可以避開，搜尋一下看起來是有一張 <a href="https://code.google.com/p/chromium/issues/detail?id=162514">issue</a>，希望能夠早點修復啊。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000784" baseName="2013">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-12-28</b:date>
				<b:time>20:01:51</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>2013</b:title>
			<b:content>
				<b:summary> 今年終於要結束了，照慣例來回顧一下，一樣是一個月挑一張照片，今年拍的照片數量比去年多了四千張左右，上傳的照片數量更是倍數成長，無法像去年一張一張看，只好從重要的事件中挑選了。因為強迫限制了一個月一張，所以也很多我很喜歡的照片無法貼在這篇，像是研討會今年去了有六場也只挑到其中兩場的照片，去日本的櫻花雖然覺的醍醐寺的最漂亮，但是因為天氣沒很好還是放棄那邊的照片。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8377172426/" title="WebConf 2013 Day 1 by othree, on Flickr"><img src="//farm9.staticflickr.com/8323/8377172426_f61d9b4002_b.jpg" width="1024" height="683" alt="WebConf 2013 Day 1" src-1="(max-width: 768px)  //farm9.staticflickr.com/8323/8377172426_f61d9b4002.jpg 1x, //farm9.staticflickr.com/8323/8377172426_f61d9b4002_b.jpg 2x" src-2="//farm9.staticflickr.com/8323/8377172426_a7a7fc1c96_k.jpg 2x" /></a></p>

<p>今年終於要結束了，照慣例來回顧一下，一樣是一個月挑一張照片，今年拍的照片數量比去年多了四千張左右，上傳的照片數量更是倍數成長，無法像去年一張一張看，只好從重要的事件中挑選了。因為強迫限制了一個月一張，所以也很多我很喜歡的照片無法貼在這篇，像是研討會今年去了有六場也只挑到其中兩場的照片，去日本的櫻花雖然覺的醍醐寺的最漂亮，但是因為天氣沒很好還是放棄那邊的照片。</p>
</b:mainContent>
				<b:extendContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8477826443/" title="FF21 by othree, on Flickr"><img src="//farm9.staticflickr.com/8374/8477826443_45100488aa_b.jpg" width="1024" height="683" alt="FF21" src-1="(max-width: 768px)  //farm9.staticflickr.com/8374/8477826443_45100488aa.jpg 1x, //farm9.staticflickr.com/8374/8477826443_45100488aa_b.jpg 2x" src-2="//farm9.staticflickr.com/8374/8477826443_af234665df_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8601062182/" title="Mozilla 15週年小 Party by othree, on Flickr"><img src="//farm9.staticflickr.com/8367/8601062182_89c3c88036_b.jpg" width="1024" height="683" alt="Mozilla 15週年小 Party" src-1="(max-width: 768px)  //farm9.staticflickr.com/8367/8601062182_89c3c88036.jpg 1x, //farm9.staticflickr.com/8367/8601062182_89c3c88036_b.jpg 2x" src-2="//farm9.staticflickr.com/8367/8601062182_012fb1072e_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8664825451/" title="清水寺 夜櫻 by othree, on Flickr"><img src="//farm9.staticflickr.com/8245/8664825451_447f9e3de4_b.jpg" width="1024" height="683" alt="清水寺 夜櫻" src-1="(max-width: 768px)  //farm9.staticflickr.com/8245/8664825451_447f9e3de4.jpg 1x, //farm9.staticflickr.com/8245/8664825451_447f9e3de4_b.jpg 2x" src-2="//farm9.staticflickr.com/8245/8664825451_254684d8a2_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8815321259/" title="大稻埕碼頭 by othree, on Flickr"><img src="//farm8.staticflickr.com/7282/8815321259_48a43c162a_b.jpg" width="1024" height="683" alt="大稻埕碼頭" src-1="(max-width: 768px)  //farm8.staticflickr.com/7282/8815321259_48a43c162a.jpg 1x, //farm8.staticflickr.com/7282/8815321259_48a43c162a_b.jpg 2x" src-2="//farm8.staticflickr.com/7282/8815321259_d16e8239c0_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9158987767/" title="台大 at Night by othree, on Flickr"><img src="//farm8.staticflickr.com/7394/9158987767_2c2c9649a7_b.jpg" width="1024" height="683" alt="台大 at Night" src-1="(max-width: 768px)  //farm8.staticflickr.com/7394/9158987767_2c2c9649a7.jpg 1x, //farm8.staticflickr.com/7394/9158987767_2c2c9649a7_b.jpg 2x" src-2="//farm8.staticflickr.com/7394/9158987767_eab77f0438_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9238189089/" title="台南夕陽 by othree, on Flickr"><img src="//farm3.staticflickr.com/2881/9238189089_f3dbea33e2_b.jpg" width="1024" height="683" alt="台南夕陽" src-1="(max-width: 768px)  //farm3.staticflickr.com/2881/9238189089_f3dbea33e2.jpg 1x, //farm3.staticflickr.com/2881/9238189089_f3dbea33e2_b.jpg 2x" src-2="//farm3.staticflickr.com/2881/9238189089_8e17feff18_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9441279600/" title="COSCUP 2013 Day 2 by othree, on Flickr"><img src="//farm3.staticflickr.com/2841/9441279600_e3ceecf7d2_b.jpg" width="1024" height="218" alt="COSCUP 2013 Day 2" src-1="(max-width: 768px)  //farm3.staticflickr.com/2841/9441279600_e3ceecf7d2.jpg 1x, //farm3.staticflickr.com/2841/9441279600_e3ceecf7d2_b.jpg 2x" src-2="//farm3.staticflickr.com/2841/9441279600_cd527072cd_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9848423285/" title="wedding by othree, on Flickr"><img src="//farm8.staticflickr.com/7307/9848423285_b16120d18d_b.jpg" width="1024" height="683" alt="wedding" src-1="(max-width: 768px)  //farm8.staticflickr.com/7307/9848423285_b16120d18d.jpg 1x, //farm8.staticflickr.com/7307/9848423285_b16120d18d_b.jpg 2x" src-2="//farm8.staticflickr.com/7307/9848423285_4bfcaab152_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/10320981036/" title="Mozilla San Francisco by othree, on Flickr"><img src="//farm3.staticflickr.com/2820/10320981036_fe6d198645_b.jpg" width="1024" height="683" alt="Mozilla San Francisco" src-1="(max-width: 768px)  //farm3.staticflickr.com/2820/10320981036_fe6d198645.jpg 1x, //farm3.staticflickr.com/2820/10320981036_fe6d198645_b.jpg 2x" src-2="//farm3.staticflickr.com/2820/10320981036_2ab7f610ea_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/10927028886/" title="福壽山農場 by othree, on Flickr"><img src="//farm3.staticflickr.com/2822/10927028886_0803fb0752_b.jpg" width="1024" height="683" alt="福壽山農場" src-1="(max-width: 768px)  //farm3.staticflickr.com/2822/10927028886_0803fb0752.jpg 1x, //farm3.staticflickr.com/2822/10927028886_0803fb0752_b.jpg 2x" src-2="//farm3.staticflickr.com/2822/10927028886_09ef3ae64a_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11497654454/" title="新北歡樂耶誕城 by othree, on Flickr"><img src="//farm4.staticflickr.com/3787/11497654454_51337d0be8_b.jpg" width="1024" height="683" alt="新北歡樂耶誕城" src-1="(max-width: 768px)  //farm4.staticflickr.com/3787/11497654454_51337d0be8.jpg 1x, //farm4.staticflickr.com/3787/11497654454_51337d0be8_b.jpg 2x" src-2="//farm4.staticflickr.com/3787/11497654454_8a4798e8c6_k.jpg 2x" /></a></p>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000783" baseName="w3c-validator-suite">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-12-25</b:date>
				<b:time>22:13:16</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>W3C Validator Suite</b:title>
			<b:content>
				<b:summary>W3C 不知道何時推出了 Validator Suite，有別於 Markup Validator，這次是個收費服務，目前註冊帳號會送 20 個使用額度，收費也是買使用額度，而不是算時間的，Validator Suite，是基於 Markup Validator 而發展的，本身是 close source，兩者最主要的差別在於 Validator Suite 是可以一口氣檢查大量網頁的，你丟網址給它，它可以一直往下深入檢查每個子頁面，Markup Validator 則是一次只有一頁，這樣設計的目標對象其實應該是商業網站之類的，至於 W3C 的 Markup Validator 則是 open source 的，這幾年也一直有更新，整個進步很多，很多新標準的支援都很快，像是 itemprop、itemscope 之類的屬性都能真正的判斷是否有正確使用，而不只是單純的判斷是不是個合法的屬性。...</b:summary>
				<b:mainContent><p>W3C 不知道何時推出了 <a href="https://validator-suite.w3.org/">Validator Suite</a>，有別於 <a href="http://validator.w3.org/">Markup Validator</a>，這次是個收費服務，目前註冊帳號會送 20 個使用額度，收費也是買使用額度，而不是算時間的，Validator Suite，是基於 Markup Validator 而發展的，本身是 close source，兩者最主要的差別在於 Validator Suite 是可以一口氣檢查大量網頁的，你丟網址給它，它可以一直往下深入檢查每個子頁面，Markup Validator 則是一次只有一頁，這樣設計的目標對象其實應該是商業網站之類的，至於 W3C 的 Markup Validator 則是 open source 的，這幾年也一直有更新，整個進步很多，很多新標準的支援都很快，像是 itemprop、itemscope 之類的屬性都能真正的判斷是否有正確使用，而不只是單純的判斷是不是個合法的屬性。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11547188533/" title="W3C Validator Suite by othree, on Flickr"><img src="//farm8.staticflickr.com/7397/11547188533_3c7063ebd6_b.jpg" width="1024" height="759" alt="W3C Validator Suite" src-1="(max-width: 768px)  //farm8.staticflickr.com/7397/11547188533_3c7063ebd6.jpg 1x, //farm8.staticflickr.com/7397/11547188533_3c7063ebd6_b.jpg 2x"  /></a></p>
</b:mainContent>
				<b:extendContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11547188043/" title="W3C Validator Suite by othree, on Flickr"><img src="//farm8.staticflickr.com/7429/11547188043_349956d8f8_b.jpg" width="1024" height="759" alt="W3C Validator Suite" src-1="(max-width: 768px)  //farm8.staticflickr.com/7429/11547188043_349956d8f8.jpg 1x, //farm8.staticflickr.com/7429/11547188043_349956d8f8_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11547187753/" title="W3C Validator Suite by othree, on Flickr"><img src="//farm8.staticflickr.com/7375/11547187753_caccfa7ac7_b.jpg" width="1024" height="759" alt="W3C Validator Suite" src-1="(max-width: 768px)  //farm8.staticflickr.com/7375/11547187753_caccfa7ac7.jpg 1x, //farm8.staticflickr.com/7375/11547187753_caccfa7ac7_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11547187353/" title="W3C Validator Suite by othree, on Flickr"><img src="//farm8.staticflickr.com/7344/11547187353_5f87f77d7d_b.jpg" width="1024" height="759" alt="W3C Validator Suite" src-1="(max-width: 768px)  //farm8.staticflickr.com/7344/11547187353_5f87f77d7d.jpg 1x, //farm8.staticflickr.com/7344/11547187353_5f87f77d7d_b.jpg 2x"  /></a></p>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000782" baseName="asmjs-1half-x-slower-than-native">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-12-24</b:date>
				<b:time>00:59:41</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>asm.js 效能再提昇</b:title>
			<b:content>
				<b:summary> Mozilla 之前發表 asm.js 後，公佈的速度大約是原生應用是的兩倍慢，不過最近這個數字又變好了，根據 20 日 Mozilla Hacks 發表的文章，現在這個數字已經變成 1.5 倍了，主要是歸功於 float32 數值處理最佳化，不過目前還不建議直接使用這個新的 float32 最佳化機制，Mozilla Blog 有一篇文章則是在講比較技術面的內容，大概看一下，應該是犧牲精確度來換取速度。本來我是覺的要真的和 native 一樣快不太可能，不過看到新的 benchmark 結果，覺的這天或許不會太久就會到來吧。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11517198133/" title="asm1.5b by othree, on Flickr"><img src="//farm6.staticflickr.com/5520/11517198133_293174bb1e_b.jpg" width="1024" height="509" alt="asm1.5b" src-1="(max-width: 768px)  //farm6.staticflickr.com/5520/11517198133_293174bb1e.jpg 1x, //farm6.staticflickr.com/5520/11517198133_293174bb1e_b.jpg 2x"  /></a></p>

<p>Mozilla 之前發表 asm.js 後，公佈的速度大約是原生應用是的兩倍慢，不過最近這個數字又變好了，根據 20 日 Mozilla Hacks 發表的<a href="https://hacks.mozilla.org/2013/12/gap-between-asm-js-and-native-performance-gets-even-narrower-with-float32-optimizations/">文章</a>，現在這個數字已經變成 1.5 倍了，主要是歸功於  float32 數值處理最佳化，不過目前還不建議直接使用這個新的 float32 最佳化機制，Mozilla Blog 有一篇<a href="https://blog.mozilla.org/javascript/2013/11/07/efficient-float32-arithmetic-in-javascript/">文章</a>則是在講比較技術面的內容，大概看一下，應該是犧牲精確度來換取速度。本來我是覺的要真的和 native 一樣快不太可能，不過看到新的 benchmark 結果，覺的這天或許不會太久就會到來吧。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000781" baseName="ipad-air">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-12-21</b:date>
				<b:time>22:06:51</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>iPad Air</b:title>
			<b:content>
				<b:summary> 前陣子入手的 iPad Air 真是很讓人滿意，歷代最輕，更好的螢幕，這些大家都知道的部份就不用說了，所以我要來說的是 smart cover 的部份。這次隨著 iPad 尺寸的改變，也推出了新版的 smart cover，針對之前的使用者回報做了許多的改進，官方有說到的就是和 iPad 接觸連接的地方有加上保護層，不會像以前一樣刮傷 iPad 表面，另外我還發現兩點改進比較少人講到。 這次發售前就已經可以發現，新版的 smart cover 的折線少了一條變成只有兩條，以前有三條四面，然後可以組成一個可以固定住的三角形，不過新版的只有三面，照理說三角形會不能固定，所以發表時我就開始很好奇會怎樣讓三角形固定，結果蘋果是用磁鐵來讓三角形固定住，真的是沒想到可以在邊邊還加磁鐵啊。 另外一個則是如果把 smart cover 翻到 iPad 後面，在主機的後面也有隱藏的磁鐵來幫你把 smart cover 定位好，說定位不是固定其實是因為雖然有磁鐵，但是這邊用的比較弱，像照片那樣其實很容易掉下來，但是手拿時好拿很多，也比較不會因為長期這樣拿而讓 smart cover 的轉軸那邊變形。 我覺的這些改進雖然小，但是卻可以表現出蘋果確實有在根據使用者習慣來改進產品，感覺不錯。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11453059264/" title="iPad Air by othree, on Flickr"><img src="//farm8.staticflickr.com/7331/11453059264_69bdb81298_b.jpg" width="1024" height="683" alt="iPad Air" src-1="(max-width: 768px)  //farm8.staticflickr.com/7331/11453059264_69bdb81298.jpg 1x, //farm8.staticflickr.com/7331/11453059264_69bdb81298_b.jpg 2x" src-2="//farm8.staticflickr.com/7331/11453059264_c8c4363402_k.jpg 2x" /></a></p>

<p>前陣子入手的 iPad Air 真是很讓人滿意，歷代最輕，更好的螢幕，這些大家都知道的部份就不用說了，所以我要來說的是 smart cover 的部份。這次隨著 iPad 尺寸的改變，也推出了新版的 smart cover，針對之前的使用者回報做了許多的改進，官方有說到的就是和 iPad 接觸連接的地方有加上保護層，不會像以前一樣刮傷 iPad 表面，另外我還發現兩點改進比較少人講到。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11452986475/" title="iPad Air by othree, on Flickr"><img src="//farm8.staticflickr.com/7449/11452986475_ca2f9dcf9c_b.jpg" width="1024" height="683" alt="iPad Air" src-1="(max-width: 768px)  //farm8.staticflickr.com/7449/11452986475_ca2f9dcf9c.jpg 1x, //farm8.staticflickr.com/7449/11452986475_ca2f9dcf9c_b.jpg 2x" src-2="//farm8.staticflickr.com/7449/11452986475_12bddee1a9_k.jpg 2x" /></a></p>

<p>這次發售前就已經可以發現，新版的 smart cover 的折線少了一條變成只有兩條，以前有三條四面，然後可以組成一個可以固定住的三角形，不過新版的只有三面，照理說三角形會不能固定，所以發表時我就開始很好奇會怎樣讓三角形固定，結果蘋果是用磁鐵來讓三角形固定住，真的是沒想到可以在邊邊還加磁鐵啊。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11478998005/" title="iPad Air smart cover by othree, on Flickr"><img src="//farm4.staticflickr.com/3772/11478998005_4ea7cae18c_b.jpg" width="1024" height="683" alt="iPad Air smart cover" src-1="(max-width: 768px)  //farm4.staticflickr.com/3772/11478998005_4ea7cae18c.jpg 1x, //farm4.staticflickr.com/3772/11478998005_4ea7cae18c_b.jpg 2x" src-2="//farm4.staticflickr.com/3772/11478998005_68fce9a600_k.jpg 2x" /></a></p>

<p>另外一個則是如果把 smart cover 翻到 iPad 後面，在主機的後面也有隱藏的磁鐵來幫你把 smart cover 定位好，說定位不是固定其實是因為雖然有磁鐵，但是這邊用的比較弱，像照片那樣其實很容易掉下來，但是手拿時好拿很多，也比較不會因為長期這樣拿而讓 smart cover 的轉軸那邊變形。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11479017524/" title="iPad Air smart cover by othree, on Flickr"><img src="//farm4.staticflickr.com/3690/11479017524_4a81b2693e_b.jpg" width="1024" height="683" alt="iPad Air smart cover" src-1="(max-width: 768px)  //farm4.staticflickr.com/3690/11479017524_4a81b2693e.jpg 1x, //farm4.staticflickr.com/3690/11479017524_4a81b2693e_b.jpg 2x" src-2="//farm4.staticflickr.com/3690/11479017524_53b6672b6d_k.jpg 2x" /></a></p>

<p>我覺的這些改進雖然小，但是卻可以表現出蘋果確實有在根據使用者習慣來改進產品，感覺不錯。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000780" baseName="javascript-promise">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-12-21</b:date>
				<b:time>00:13:01</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>JavaScript Promise</b:title>
			<b:content>
				<b:summary>最近 JavaScript 圈很熱的一則消息就是要有原生的 Promise 了，不過這個時間點再來介紹 Promise 物件好像有點重複且不必要了，所以想來講一下標準這部份的發展。 在繼續下去前要先作些名詞統一，因為實際上 spec 用的名詞和 jQuery 用的不太一樣，首先是 promise、deferred 甚至是 future 在這邊其實都是同義詞，而 fulfill 則是 jQuery 的 resolve 那樣的動作，reject 就沒有不一樣詞彙，最後是 thenable，代表的是可以丟進 Promise 裡一起 chaining 的物件，只要有定義 then function 就可以算了。 之前的文章也有提過，JavaScript 領域的 Promise 基本上是 jQuery Deferred 實作後才開始受到廣為注目，而 jQuery 實作的說是基於...</b:summary>
				<b:mainContent><p>最近 JavaScript 圈很熱的一則<a href="http://www.html5rocks.com/en/tutorials/es6/promises/">消息</a>就是要有原生的 Promise 了，不過這個時間點再來介紹 Promise 物件好像有點重複且不必要了，所以想來講一下標準這部份的發展。</p>

<p>在繼續下去前要先作些名詞統一，因為實際上 spec 用的名詞和 jQuery 用的不太一樣，首先是 promise、deferred 甚至是 future 在這邊其實都是同義詞，而 fulfill 則是 jQuery 的 resolve 那樣的動作，reject 就沒有不一樣詞彙，最後是 thenable，代表的是可以丟進 Promise 裡一起 chaining 的物件，只要有定義 then function 就可以算了。</p>

<p>之前的文章也有提過，JavaScript 領域的 Promise 基本上是 jQuery Deferred 實作後才開始受到廣為注目，而 jQuery 實作的說是基於 CommonJS <a href="http://wiki.commonjs.org/wiki/Promises">Promise/A</a> 這個標準，不過其實去看 Promise/A 會發現他內容根本就很少，不知道怎麼和 jQuery Deferred 扯上邊的，最近才了解，Promise/A 其實只有最基本的 Promise 的功能定義，而它的定義就只有說有個值未來會拿到，然後你要給他 <code>then</code> 這個 method。</p>

<p>而其它像是怎樣 fulfill，有沒有 <code>when</code> 那種功能之類的，都沒有定義，完全就是個自由發揮，所以 jQuery 的實作才會看起來和 Promise/A 比起來差距這麼多，不過更糟的是，第一版的 jQuery Deferred 卻還把 then 實作錯了，在 spec 中描述 then 的部份的第二段文字：</p>

<blockquote>
  <p>This function should return a new promise that is fulfilled when the given fulfilledHandler or errorHandler callback is finished. This allows promise operations to be chained together. The value returned from the callback handler is the fulfillment value for the returned promise. If the callback throws an error, the returned promise will be moved to failed state. </p>
</blockquote>

<p>這邊其實是在說 then 要回傳一個新的 promise 物件，然後你的 Promise 才會有 chaining 的特性，在 jQuery 一開始的版本，這個特性其實是要利用 <code>pipe</code> 來達成而不是 <code>then</code> 的，我想這也是後來為什麼 jQuery Deferred 把 then 的行為改成 pipe 的行為的原因，不過即使如此， jQuery 的 API 還是和 Promise/A 有些差距就是了，說來尷尬，Promise/A 只規範了 then，結果把 Promise 發揚光大的 jQuery 實作卻把 then 做錯了。</p>

<p>由於 Promise/A 只有描述行為，而不是詳細的實作，於是就有了 <a href="http://promises-aplus.github.io/promises-spec/">Promise/A+</a>，這個 spec 不是 CommonJS 的 spec，而是由一群人自主發起的，把 Promise/A 裡面所缺的詳細規範補齊，像是 Promise fulfill 時要怎樣處理之類的，定義得很詳細，這份標準完全沒宣告著作權，用的是 CC0，像 <a href="https://github.com/tildeio/rsvp.js">rsvp.js</a> 和 <a href="https://github.com/kriskowal/q">Q</a> 用的就是 Promise/A+ 標準來實作，不過 Promise/A+ 還是只有定義 then 的部份，怎樣 fulfill，怎樣 reject 部分的 API 還是沒碰，所以不同的實作都還是會有些差異。其實 Promise/A+ 組織的 github 帳號上可以看到有關於這部份的<a href="https://github.com/promises-aplus/resolvers-spec">討論</a>，雖然是沒寫出任何草案，我想應該就是直接進了 TC39 的 <a href="https://github.com/domenic/promises-unwrapping">Promise spec</a> 了吧，畢竟好像編輯有重複的<a href="https://twitter.com/domenic">人</a>。</p>

<p>TC39 的 Promise 就和 Promise/A+ 的差不多一樣，fulfill 和 reject 的 API 設計就是用他們討論時的其中一個選項，結果是和 rsvp.js 的時作比較接近，fulfill 和 reject function 是在 promise 物件的建構時給的 callback 裡面才會拿到，和 jQuery Deferred 物件可以從外面來 resolve/reject 的設計不一樣：</p>

<pre><code>new Promise(function (fulfill, reject, progress) {
    // blah....
});
</code></pre>

<p>我對於 JavaScript 原生要支援 Promise 這件事是非常樂觀看待啦，畢竟常常只想要它又不想要 jQuery 或是另外引入其他 Library，以後原生支援就省事很多了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

	</b:entries>
</b:blog>
