<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>i</b:listType>
			<b:listData listID="index"/>
		</b:entriesMeta>

		<b:entry entryID="001000" baseName="genji-koh">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2023-12-09</b:date>
				<b:time>15:41:08</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>源氏香 南知多</b:title>
			<b:content>
				<b:summary> 前陣子去了一趟名古屋，一開始其實只是想說帶小孩去樂高樂園，結果行程規劃從一開始的名古屋市區和周邊為主，弄到後來變成市區五天租車五天的，然後打算最後一天住在機場旁邊，就想說那前一天就在附近玩玩好了，要去的地方就因此多了一個一開始完全沒考慮過的「知多半島」了，當然也有研究住宿，當時也有找到「源氏香」這間旅館，不過那時候已經有安排了下呂溫泉的溫泉旅館，所以就沒考慮這個價位的住宿了，就在一切都安排好後沒幾天，突然就看到 FB 上有人分享到他們有特別的，針對台灣人的免費體驗方案，就是入住後要在 SNS 上分享。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377566549/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377566549_d4c2cc3812_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377566549_2332169903_k.jpg 2x" /></a></p>
<p>前陣子去了一趟名古屋，一開始其實只是想說帶小孩去樂高樂園，結果行程規劃從一開始的名古屋市區和周邊為主，弄到後來變成市區五天租車五天的，然後打算最後一天住在機場旁邊，就想說那前一天就在附近玩玩好了，要去的地方就因此多了一個一開始完全沒考慮過的「知多半島」了，當然也有研究住宿，當時也有找到「<a href="https://genji-koh.kaiei-ryokans.com/">源氏香</a>」這間旅館，不過那時候已經有安排了下呂溫泉的溫泉旅館，所以就沒考慮這個價位的住宿了，就在一切都安排好後沒幾天，突然就看到 FB 上有人分享到他們有特別的，針對台灣人的免費體驗方案，就是入住後要在 SNS 上分享。</p>
</b:mainContent>
				<b:extendContent><p>研究加考慮了幾天，決定還是給他申請下去，然後因為有帶小孩的關係，我也有先寫信聯絡確認過沒問題（我日文大概是簡單的可以讀但不太能寫、所以靠 ChatGPT 翻譯，旅館方他們的回信也都有用工具翻譯成中文，所以溝通還算不是太大的問題），當然有另外收費，本來有點期待可以在房間看夕陽的，不過當天因為從下呂出發，中間還去了犬山城，然後七早八早就天黑，所以到達旅館時，已經看不到太陽了，還好還有晚霞。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377252211/" title="源氏香 夕陽 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377252211_1035494cc3_b.jpg" width="1024" height="683" alt="源氏香 夕陽" srcset="https://live.staticflickr.com/65535/53377252211_878a8725b3_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53376328142/" title="源氏香 夕陽 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53376328142_dc58e088f7_b.jpg" width="1024" height="683" alt="源氏香 夕陽" srcset="https://live.staticflickr.com/65535/53376328142_fecdbaf6a1_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377699285/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377699285_e3eb6e2798_b.jpg" width="683" height="1024" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377699285_3a628c14ab_k.jpg 2x" /></a></p>
<p>大門邊還有兩盆火和一個鼓，後來看到其他人分享說請他們接送的，到飯店時還會有人擊鼓歡迎，不過我們到的時候停車場其實已經黑麻麻的了。進入大廳後馬上就聞到很特別的香味（飯店的特色），辦理入住後有抹茶和小點心，小點心我當時沒吃，回來才發現也是南知多的點心店的類似麻糬的小點，還蠻好吃的，意外的是還送了紙鶴的摺紙和色紙給我們的小朋友。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377695225/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377695225_da81da4c2f_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377695225_67d87ceeda_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377695225/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377430478_9901c76d9e_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377430478_5227e74aa8_k.jpg 2x" /></a></p>
<p>房間是他們最標準的和室，另外有獨立廁所、乾濕分離的衛浴、洗臉台還有兩個，其實空間也是很大，棉被則是自己鋪，不過有需要的也可以播電話到前台請他們幫忙，其他備品設備都很齊，可以自己燒水，還有一壺冷水(有冰那種）可以飲用，清潔度也沒大問題，我沒特別刁難的下去找哪裡沒乾淨，當然有些設備有點舊，不過都維護的還不錯。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377430593/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377430593_9dc5f67f44_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377430593_805b310402_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377253426/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377253426_129c06686a_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377253426_030b98f08b_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377253426/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377430778_204ce69195_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377430778_66f98f2f8d_k_d.jpg 2x" /></a></p>
<p>進到房間時天色已經幾乎要全黑了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377253961/" title="源氏香 夕陽 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377253961_aef74feac6_b.jpg" width="1024" height="683" alt="源氏香 夕陽" srcset="https://live.staticflickr.com/65535/53377253961_e2c4dd71f8_k.jpg 2x" /></a></p>
<p>然後就是特色的品香體驗了，除了官網介紹的體驗的活動之外，房間都有固定的準備了五種香可以自己點起來品聞。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377431548/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377431548_0e01a75328_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377431548_cc43a881e6_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377701580/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377701580_c55f6148d0_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377701580_2b00978bdb_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53376329882/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53376329882_d8863a7ef8_b.jpg" width="683" height="1024" alt="源氏香" srcset="https://live.staticflickr.com/65535/53376329882_d00263949c_k.jpg 2x" /></a></p>
<p>我們試了其中三種，左邊兩個那個就比較接近台灣拜拜燒的香，不過第一款點的藍色的和第二天點的桃紅的都很特別，而且是好聞的味道，文章的前面沒詳述，其實源氏香號稱是日本第一間以薰香為主題的旅館（1999 年開業，其實不算老，有點意外這之前沒人想過經營這樣主題的旅宿），從一進到旅館就可以感受到，不同的公共空間有著不同的香味，像是大廳和電梯就明顯用了不一樣的香味，都是很好聞且會讓人舒服可以放鬆的味道，然後讓我印象深刻的是，這些味道其實我都沒有聞過（記憶中沒聞過），味道濃郁卻不也會刺鼻或讓人不舒服，而且我不會過敏，對我來說是個非常新的體驗，就是開了眼界這樣，原來有這樣的香味，然後原來可以這樣子來使用這些香味。</p>
<p>接著休息到晚餐時間，日式溫泉旅館的定番：懷石料理套餐，也有準備好中文版的菜單給我們看，有開胃菜、生魚片、肉類拼盤、蒸菜、天婦羅等，食物很美味，份量也夠，吃完時就很飽了，最後還給我們豆皮壽司帶回房間當宵夜，另外就是吃飯時都是單獨包廂，雖不是完全獨立房間但也有簾子可以完全檔著，隱私還是顧的不錯。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377425398/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377425398_1ffcfbf3bf_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377425398_1f78921360_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53376330807/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53376330807_6e725f49a4_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53376330807_e02bf3c15c_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377433103/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377433103_880a8e4482_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377433103_4b26839cc8_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53376332187/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53376332187_b673076856_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53376332187_e9bc8de114_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53376332352/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53376332352_b049f76634_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53376332352_477d362dc6_k.jpg 2x" /></a></p>
<p>飯店內很多地方都有展示薰香相關的東西，尤其是香爐。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377705165/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377705165_d4fab5674c_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377705165_0c9f74e0bc_k.jpg 2x" /></a></p>
<p>飯後休息一陣子後，我們就去洗澡泡湯了，旅館內的澡堂，在最頂樓十樓有男女分開兩間露天澡堂，然後八樓九樓各一間室內，一男一女的，我們想說晚上先泡室內的就好了，隔天早上再去泡露天的，不過這個決定有點失算，首先是兩間室內澡堂其實最早的規劃是包場的貸切風呂，現在改成公用的，所以很多基礎設備是沒有的，像是可以上鎖的櫃子，所以房間鑰匙只能和毛巾衣物一起塞到竹籃裡面，我本來覺得很奇怪，想說完全沒有也太奇怪，直到隔天去頂樓一看，才發現兩邊設備差太多了吧，頂樓不但更衣休息空間都大很多，有私人櫃子，還有飲水機和冰櫃，有免費冰棒，但是只有下午到晚上開放取用，所以我沒吃到...，要是還有其他人來造訪記得還是以露天風呂為優先，不然也是可以泡湯完去十樓的休息休息，晚上可以去拿冰棒吃，然後除了兩個澡堂的差異之外，還有一點要特別注意的是，澡堂開放時間不是非常棒，晚上只有到十一點，隔天早上則是九點（退房是十點）。</p>
<p>泡完澡，回到房間休息，看看外面，發現到看得到內海對岸（看地圖是伊勢神宮那方向最亮）的燈光，然後光害很少，所以星星也很多，用相機拍下去更多。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377429313/" title="源氏香 夜景 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377429313_6f8d04c654_b.jpg" width="1024" height="683" alt="源氏香 夜景" srcset="https://live.staticflickr.com/65535/53377429313_ade5d6dee5_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377698565/" title="源氏香 夜景 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377698565_6fa79d8ef6_b.jpg" width="683" height="1024" alt="源氏香 夜景" srcset="https://live.staticflickr.com/65535/53377698565_9f27911f1f_k.jpg 2x" /></a></p>
<p>可以拍星空，算是很意外的收穫，這天還是有月亮跑出來的日子，不然應該可以拍的到更多星星。然後晚上真的是很冷，南知多冬天應該是淡季吧，雖然有虎河豚，但是好像沒什麼其他觀光客。</p>
<p>隔天早上，意外的發現，這個地理位置竟然可以拍日出，但是我起床時太陽已經跑出來了一陣子了，我真是太小看日本的緯度了，</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53376325997/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53376325997_71e6f0071f_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53376325997_c069bccb7c_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377696905/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377696905_f3519e90fc_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377696905_123e239c57_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377697230/" title="源氏香 廣緣 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377697230_62a1850dfb_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377697230_8fe833fe6e_k.jpg 2x" /></a></p>
<p>早餐一樣是在二樓餐廳，白天配上窗外景色真是漂亮很多，早餐也很豐盛，而且就有河豚可以吃了，不過是比較小隻的！</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377566549/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377566549_d4c2cc3812_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377566549_2332169903_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377566244/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377566244_df5557fa88_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377566244_40a043453e_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377566469/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377566469_242ecdbbde_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377566469_aa5af1c24d_k.jpg 2x" /></a></p>
<p>因為澡堂早上九點就關的關係，我們排很早吃早餐，吃完飯後就去泡露天溫泉，外面依然很冷，躲在熱水裡都不敢出來，不過風景很好，其實在決定參加前，有看 Google Map 上的一些評論，有很多人說到露天溫泉水裡有很多羽毛之類ㄉ，這次我倒是沒遇到，不過不確定是因為冬天比較沒鳥來亂，還是有認真改善這個問題就是。</p>
<p>泡完湯後回房間休息，最後又點了一枝香。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377426453/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377426453_e156813103_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377426453_fcd357b2c6_k.jpg 2x" /></a></p>
<p>大廳早上還有一個迷你朝市，有賣些漁產，還有賣早餐的河豚（已經是處理成一夜干加上真空包裝了），逛完我們就退房去南知多的行程了，飯店的人也出來送別，還在門口等我們到準備好發車離開。</p>
<p>整體而言，這次的住宿是滿意的，雖然有發現一些小問題，不過重要的幾個項目都有不錯的體驗：房間舒適、薰香讓人印象深刻、餐飲也好吃、溫泉、海邊景觀很棒，雖然是特別的方案但是也沒給我們特別關照或是過度干擾，只有入住退房時有跟我們提醒到活動相關的規則。算是個花錢後不會讓人覺得不值的經驗，不過我發現南知多去的外國觀光客好像不多，甚至有很多是只能打電話預約的當地住宿，所以就來附上南知多我簡單研究一下覺得可以值得去看的景點（需自駕）：</p>
<ul>
<li><a href="https://www.ebisato.co.jp/index.php">蝦仙貝之里工廠</a>：本來是想讓小孩去作仙貝，但是因為本來就打算去機場買一箱，所以沒時間就放棄了；</li>
<li><a href="https://www.aichi-now.jp/spots/detail/112/">羽豆岬</a>：知多半島最南端，有神社、小展望台，還有個羽豆崎城跡，很小沒被列到兩百名城中；</li>
<li><a href="https://www.morozaki.jp/asaichi/">師崎港 朝市</a>：就在羽豆岬附近，不是在主要道路旁邊所以我錯過了，扼碗，看到別人去逛覺得蠻有趣的；</li>
<li>海鮮餐廳：附近很多海鮮餐廳，冬天有河豚，我有預約一間吃了虎河豚套餐，之後再來介紹（其實源氏香也有河豚套餐）；</li>
<li>其他還有一些甜食點心的店，像我本來有查了一兩家 parfait 的咖啡廳要去，結果吃完河豚套餐就太飽了；</li>
<li><a href="https://www.tokoname-kankou.net/">常滑市</a>在機場旁邊，算是比較熱鬧的地方，如果不規劃到更南邊，或是沒有開車，光是常滑市排個半天一天也不錯，車站附近有陶瓷器散步道，氣氛很不錯，還有很多招財貓，靠近機場那邊還有超大的 AEON Mall 和 Costco（見<a href="https://www.flickr.com/photos/othree/53384408327/in/dateposted-public/">照片</a>），然後這次去了我才發現該市也是 <a href="https://www.netflix.com/tw/title/81281872">想哭的我戴上了貓的面具</a> 的取景地。</li>
</ul>
<p>最後附上<a href="https://www.flickr.com/photos/othree/albums/72177720313161610/">完整相簿連結</a>，只有源氏香的部分，其他的照片都還沒整理。</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000999" baseName="sign-in-with-">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2023-11-08</b:date>
				<b:time>21:52:51</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Sign-in with OOO ID</b:title>
			<b:content>
				<b:summary>最近工作上在研究 Sign-in with Apple/Google ID，其實這件事情也作過很多次了，不過距離上次也有點久了，不知道那些 SDK 有沒有什麼改變，所以還是要重頭來，而且這次多研究了一個 Apple，有搞懂些以前沒釐清的細節，想說紀錄一下。 首先就是，我發現到 Google 和 Apple 現在都會回一個 ID Token，內容則是 JWT，而且是認真的 JWT，真的會有帶一點使用者資料（像是 email）的，可以用來作 user authentication（認證）用的，這在以前只有 OAuth 2.0 的時候是沒有的，查一陣子資料才發現這其實是 OpenID Connect（簡稱 OIDC） 規範的，該規範是是 2014 年發布的，其實還比 JWT 早定稿。 相較於 OAuth 2.0 做的是 authorization（授權），OIDC 做的則是 authentication（認證），只不過 OIDC 是整個依附在...</b:summary>
				<b:mainContent><p>最近工作上在研究 Sign-in with Apple/Google ID，其實這件事情也作過很多次了，不過距離上次也有點久了，不知道那些 SDK 有沒有什麼改變，所以還是要重頭來，而且這次多研究了一個 Apple，有搞懂些以前沒釐清的細節，想說紀錄一下。</p>
<p>首先就是，我發現到 Google 和 Apple 現在都會回一個 <a href="https://openid.net/specs/openid-connect-core-1_0.html#IDToken">ID Token</a>，內容則是 JWT，而且是認真的 JWT，真的會有帶一點使用者資料（像是 email）的，可以用來作 user authentication（認證）用的，這在以前只有 OAuth 2.0 的時候是沒有的，查一陣子資料才發現這其實是 <a href="https://openid.net/specs/openid-connect-core-1_0.html">OpenID Connect</a>（簡稱 OIDC） 規範的，該規範是是 2014 年發布的，其實還比 JWT 早定稿。</p>
<p>相較於 OAuth 2.0 做的是 authorization（授權），OIDC 做的則是 authentication（認證），只不過 OIDC 是整個依附在 OAuth 2.0 的架構上，利用的就是 OAuth 2.0 的 <a href="https://www.rfc-editor.org/rfc/rfc6749#section-3.1.1">response_type</a>，本來只有 <code>code</code> 和 <code>token</code> 兩種，在 OIDC 多提供了 <a href="https://openid.net/specs/openid-connect-core-1_0.html#Authentication"><code>id_token</code></a>，ID Token 是用 JWT，而且也有明確定義有裡面的 user profile 相關的<a href="https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims">欄位</a>（不是定義哪些是必須提供，而是定義好語意和對應的欄位名稱）。</p>
<p>第二個則是我一直存疑已久的問題，就是 OAuth 2.0 的設計上基本是用 redirection flow，而且 <a href="https://www.rfc-editor.org/rfc/rfc6749#section-3.1.2"><code>redirect_uri</code></a> 也是必要的，但是 Google 其實一直都支援純 JS 的方案，也就是說 Relying Party(應用程式端)不需要實作一個 redirection endpoint 來接資料，前端的 JS 就可以直接拿到 authorization code 和 access token，這次也認真的研究了這個問題，結果發現，Apple 的 OAuth 流程中，<a href="https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#ResponseModes">response_mode</a> 給的值是目前不在標準內的 <code>web_message</code>，而 Google 則是 <a href="https://www.rfc-editor.org/rfc/rfc6749#section-3.1.2"><code>redirect_uri</code></a> 給的是一個沒見過的 scheme：<code>storagerelay://</code> 的 URI。</p>
<p>其實我一開始以為這些設計，是各個公司自己想一想然後就自己做下去的，結果沒想到其實不是，首先是 Apple 的實作，用的是 <a href="https://datatracker.ietf.org/doc/html/draft-sakimura-oauth-wmrm-00">OAuth 2.0 Web Message Response Mode</a> 這份草稿的設計，這份草稿其中一位作者 Nat Sakimura 現在是 OpenID 的 chairman，而且他也是其他很多相關規範的作者（像是 <a href="https://www.rfc-editor.org/rfc/rfc7519">JWT</a>)，不過這份草稿只有一版且沒人更新，有很多細節沒有寫定，大部分都是提供範例程式碼而已，所以 Apple 有些東西不是照範例做，例如 message 的 payload；Google 實作的則是 <a href="https://lists.openid.net/pipermail/openid-specs-ab/2015-November/005865.html">OAuth 2.0 IDP-IFrame-based Implicit Flow</a>，這份文件其實是我最後才找到的，因為這份只有出現在 OpenID 的 mailing-list，而且也完全沒有討論和更新，不像前一份還有發到 IETF，回到文件內容，這份的作者，就全部都是 Google 的人了，內容完整許多，也有定義好 message 的 payload 結構，不過還是有些細節有缺，像是認證完成後的回傳事件，現在 Google 用的事件名稱在這份文件中就找不到。</p>
<p>除了這兩份草稿外，其實還有一份是 <a href="https://curity.io/">Curity</a> 提出的 <a href="https://datatracker.ietf.org/doc/html/draft-ideskog-assisted-token-05">OAuth 2.0 Assisted Token</a>，一樣有發到 IETF，而且還比較有在更新，最新一版是 2021 的，Assisted Token 的設計是多給了一個流程叫做 Assisted Token Flow，用不一樣的 URL 來使用這個 flow，這個流程的最後一步就是 postMessage 回到 opener/parent，規範寫的比較完整，包括各種新屬性的 registry、message 的 payload，還有安全性相關的考量都有，不過我看一看有些地方覺得有些疑惑，第一個是 message payload 的結構似乎辨識度沒很高，第二個則是完全沒提到 refresh token 和 authorization code，不確定是目前還沒考慮到那邊，還是因為安全性考量把它們先排除。</p>
<p>第三個是 Apple 的實作，雖然基本上還是照著 OAuth，但是其實限制更多，首先就是，<code>scope</code> 就只有 email 和 name 可以拿，而且 Apple 做成，只有第一次 authorization 時，會把 user profile 傳給 RP，之後是拿不到的（不過 email 有在 id token 內），然後，雖然可以拿到 access token，但是其實完全沒有可以使用它的 API endpoint，所以什麼事情都不能作，真的只能用來做 authentication，最後一個，就是用 code 換 token 時，要給的 <code>client_secret</code> 參數還特別麻煩，要<a href="https://developer.apple.com/documentation/accountorganizationaldatasharing/creating-a-client-secret">自己組一個 JWT</a>（但是也因此會 expire 比較安全），然後用之前從 Apple Developer 後台生好的 secret key 去算 signature。</p>
<p>最後一個想紀錄的就是，這幾份標準和文件裡面幾乎都有一個章節是 Security Consideration，內容雖然不全面但是還蠻值得一看的，也有提到一些攻擊手法，而除此之外，其實還有一份文件：<a href="https://www.rfc-editor.org/rfc/rfc6819">RFC6819: OAuth 2.0 Threat Model and Security Considerations</a>，內容就是有說明 OAuth 2.0 各種設計在安全性上的考量（像是為什麼有 <a href="https://www.rfc-editor.org/rfc/rfc6819#section-3.3">Refresh Token</a>，什麼情境下它有助於安全性的提升），以及各種可能的攻擊手法。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000998" baseName="celeste">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2023-10-22</b:date>
				<b:time>20:56:37</b:time>
			</b:datetime>
			<b:category>acg</b:category>
			<b:title>Celeste</b:title>
			<b:content>
				<b:summary> 一直想寫一篇關於 Celeste（蔚藍山脈）的文章，不過拖了很久一直寫不出來，其實我當初也是拖了很久才玩的。我因為原本就很喜歡 2D 的平台遊戲，然後看到 Celeste 的介紹覺得很特別，以登山為目標，沒有戰鬥但是有挑戰性的平台遊戲，多麼特別啊！所以 2019 年我就把它買下來了，還是 Limited Run Games 的版本，結果買回來後，稍微玩一下覺得怎麼難到爆炸，就放置了。 後來到了 2021 年底，在 FB 看到橘子說他登頂了，我才一點手癢一點不服輸的又重拾了起來，結果這次就順利了突破一開始的障礙，漸漸的上手了起來，後來橘子更是把全部的關卡包括第九章都過完了，本來想說我 B 面 C 面不勉強（有多難可以參考机核的文章：《蔚蓝：Celeste》：每个人心中都有一座山，但并非每个人都能登上山顶），結果還是不服輸的就慢慢的也都過完了，必須說這關卡難度的曲線設計的真的是非常棒，最後花了一個月左右，遊戲時間 50 多小時，成績是把全部關卡通過，收集到所有除了黃金草莓以外的草莓，認真的說，這遊戲真的很難，我相信一定很多人無法達到這樣的成績，當然我也不是要說我多厲害，因為我這樣的成績還不是全要素收集，更上一層還有無死通關的金草莓，不過這樣的挑戰歷程已經讓我想寫文章記錄下來了。 我覺得這款遊戲最讓我感到厲害的，就是它遊戲的內外呼應，遊戲內的故事主軸是登山，而在了遊戲故事之外，這款遊戲也設計成了一個讓人攀登的高山，關卡和整體的難度就是設計的非常精巧，大家都可以在山腳出發，但是可能只有一半人能到五成高度，到了八成高度的地方就只剩下兩成，而真正能到達山頂，達成全要素，收集到所有的草莓，真正見到最後那個山頂風景的，就只有少數的那些玩家，那 26 個黃金草莓，全世界登記有案能拿到的大約只有三百多人（台灣也有至少一位），Celeste 也有賣出一百萬套左右，也就說只有萬分之三的人，能夠到達這款遊戲的真正的山頂（要素的山頂、還有另一批人在拼 speed run）。 本來還想要介紹更多的東西，但是寫了兩三次都不盡如意，最後決定，留下這篇文章作為自己參與了這段挑戰的紀錄，我到現在偶爾，都還會拉出當時登山時的一些影片紀錄，有些關卡真的是非常困難，難到讓人過關時都忍不住會按下 Switch 的錄影按鍵紀錄下來，甚至也不少是功虧一簣的紀錄，當然，我拿到最後一顆 moon berry 的紀錄也有，當時也有貼在 FB 上。 附上幾篇開發相關的延伸閱讀： 開發經驗分享】專題系列－《Celeste》...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53276279101/" title="Celeste by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53276279101_c264a1ba25_b.jpg" width="768" height="1024" alt="Celeste" srcset="https://live.staticflickr.com/65535/53276279101_77a78ba47f_k.jpg 2x" /></a></p>
<p>一直想寫一篇關於 <a href="https://www.celestegame.com/">Celeste</a>（蔚藍山脈）的文章，不過拖了很久一直寫不出來，其實我當初也是拖了很久才玩的。我因為原本就很喜歡 2D 的平台遊戲，然後看到 Celeste 的介紹覺得很特別，以登山為目標，沒有戰鬥但是有挑戰性的平台遊戲，多麼特別啊！所以 2019 年我就把它買下來了，還是 <a href="https://limitedrungames.com/products/switch-limited-run-23-celeste-preorder">Limited Run Games 的版本</a>，結果買回來後，稍微玩一下覺得怎麼難到爆炸，就放置了。</p>
<p>後來到了 2021 年底，在 FB 看到橘子說<a href="https://www.facebook.com/Orange.8361/posts/pfbid0MZgonb2aBDzEfp1JwzrRALTZGtjf384afpWZXYFo9Pt3Pk78rDaJAwxyXyPwtHoNl">他登頂了</a>，我才一點手癢一點不服輸的又重拾了起來，結果這次就順利了突破一開始的障礙，漸漸的上手了起來，後來橘子更是把<a href="https://www.facebook.com/Orange.8361/posts/pfbid02hRCPB4QydeQnBcUygewfZh7akZ2nWr9i9XTQmvB2sVpLjsheCCjWtiuuZmWpfJwal">全部的關卡包括第九章都過完</a>了，本來想說我 B 面 C 面不勉強（有多難可以參考机核的文章：<a href="https://www.gcores.com/articles/96249">《蔚蓝：Celeste》：每个人心中都有一座山，但并非每个人都能登上山顶</a>），結果還是不服輸的就慢慢的也都過完了，必須說這關卡難度的曲線設計的真的是非常棒，最後花了一個月左右，遊戲時間 50 多小時，成績是把全部關卡通過，收集到所有除了黃金草莓以外的草莓，認真的說，這遊戲真的很難，我相信一定很多人無法達到這樣的成績，當然我也不是要說我多厲害，因為我這樣的成績還不是全要素收集，更上一層還有無死通關的金草莓，不過這樣的挑戰歷程已經讓我想寫文章記錄下來了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53281633529/" title="Celeste by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53281633529_58b4cc2bc0_b.jpg" width="1024" height="576" alt="Celeste" srcset="" /></a></p>
<p>我覺得這款遊戲最讓我感到厲害的，就是它遊戲的內外呼應，遊戲內的故事主軸是登山，而在了遊戲故事之外，這款遊戲也設計成了一個讓人攀登的高山，關卡和整體的難度就是設計的非常精巧，大家都可以在山腳出發，但是可能只有一半人能到五成高度，到了八成高度的地方就只剩下兩成，而真正能到達山頂，達成全要素，收集到所有的草莓，真正見到最後那個山頂風景的，就只有少數的那些玩家，那 26 個黃金草莓，全世界登記有案能拿到的大約只有<a href="https://celeste.ink/wiki/List_of_Celeste_players_with_the_Farewell_Golden_Berry">三百多人</a>（<a href="https://forum.gamer.com.tw/C.php?bsn=32436&amp;snA=17">台灣也有至少一位</a>），Celeste 也有賣出一百萬套左右，也就說只有萬分之三的人，能夠到達這款遊戲的真正的山頂（要素的山頂、還有另一批人在拼 speed run）。</p>
<p>本來還想要介紹更多的東西，但是寫了兩三次都不盡如意，最後決定，留下這篇文章作為自己參與了這段挑戰的紀錄，我到現在偶爾，都還會拉出當時登山時的一些影片紀錄，有些關卡真的是非常困難，難到讓人過關時都忍不住會按下 Switch 的錄影按鍵紀錄下來，甚至也不少是功虧一簣的紀錄，當然，我拿到最後一顆 moon berry 的紀錄也有，當時也有<a href="https://www.facebook.com/othree/posts/pfbid0RtymcvfzMXR2QfdD1X756CNoCzuZBe4WYj9dCsCEu4zpEVorNweWqBjbrTMtUnJZl">貼在 FB</a> 上。</p>
<p>附上幾篇開發相關的延伸閱讀：</p>
<ul>
<li><a href="https://indie-guider.games/post/DevStudy-Celestegame/">開發經驗分享】專題系列－《Celeste》</a></li>
<li><a href="https://qwe321qwe321qwe321.github.io/posts/61013/">從移動和跳躍開始，做好 2D 平台跳躍遊戲的角色控制 _BB001</a></li>
<li><a href="https://www.rockpapershotgun.com/celeste-dash">Why Celeste's dash feels great</a></li>
<li><a href="https://www.youtube.com/watch?v=4RlpMhBKNr0">Level Design Workshop: Designing Celeste</a> Celeste 開發者 Maddy Thorson 在 GDC 2017 的分享</li>
</ul>
<p>其他延伸閱讀可以參考橘子的第二篇 FB 貼文。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000997" baseName="digital-envelope-routines-unsupported">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2023-09-15</b:date>
				<b:time>11:41:56</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>digital envelope routines::unsupported</b:title>
			<b:content>
				<b:summary>Node.js 16 LTS 已經結束維護，所以手上的東西就開始需要升級升級，然後就必須要來正面面對這個我逃避已久的錯誤訊息： digital envelope routines::unsupported 這錯誤基本上就是發生在幾個網站的專案，尤其是 build 專案時特別會容易看到，而且這個錯誤其實和一般看到的 JS 錯誤長得不太一樣，全貌其實是這樣： Error: error:0308010C:digital envelope routines::unsupported 首先是錯誤訊息，前面有一些 hex 值，不知道是什麼，然後下面 trace 的地方，可以看到幾乎都是 node_module 內的東西，不是因為我們自己的 code 造成的，所以就很讓人困惑，想說是不是什麼系統問題、還是有什麼偷用非公開 API 造成不相容的狀況。總之以前就是遇到這個問題就是又降版回來，沒有仔細深究，這次終於要來認真處理，不過搜尋結果，幾乎都是說加一個 --openssl-legacy-provider flag，都沒人說到底是什麼問題，尋找許久，終於在 StackOverflow 找到一則最正確的答案，沒想到和 OpenSSL 1.x 的生命已經到盡頭有關。 結果這個錯誤，其實是因為 Node.js 17 開始，從 OpenSSL 1.x...</b:summary>
				<b:mainContent><p>Node.js 16 LTS 已經結束維護，所以手上的東西就開始需要升級升級，然後就必須要來正面面對這個我逃避已久的錯誤訊息：</p>
<pre><code>digital envelope routines::unsupported
</code></pre>
<p>這錯誤基本上就是發生在幾個網站的專案，尤其是 build 專案時特別會容易看到，而且這個錯誤其實和一般看到的 JS 錯誤長得不太一樣，全貌其實是這樣：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53186660279/" title="digital envelope routines::unsupported by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53186660279_4f2b82bbbc_b.jpg" width="1024" height="738" alt="digital envelope routines::unsupported" srcset="https://live.staticflickr.com/65535/53186660279_a5cd706923_k.jpg 2x" /></a></p>
<pre><code>Error: error:0308010C:digital envelope routines::unsupported
</code></pre>
<p>首先是錯誤訊息，前面有一些 hex 值，不知道是什麼，然後下面 trace 的地方，可以看到幾乎都是 node_module 內的東西，不是因為我們自己的 code 造成的，所以就很讓人困惑，想說是不是什麼系統問題、還是有什麼偷用非公開 API 造成不相容的狀況。總之以前就是遇到這個問題就是又降版回來，沒有仔細深究，這次終於要來認真處理，不過搜尋結果，幾乎都是說加一個 <code>--openssl-legacy-provider</code> flag，都沒人說到底是什麼問題，尋找許久，終於在 StackOverflow 找到一則<a href="https://stackoverflow.com/a/73027407/443051">最正確的答案</a>，沒想到和 OpenSSL 1.x 的生命已經到盡頭有關。</p>
<p>結果這個錯誤，其實是因為 Node.js 17 開始，從 OpenSSL 1.x 換到 3.x，然後 OpenSSL 3.x 不是向下相容的，所以有些東西有機會出錯，這邊爛掉的，其實是一些 legacy 的 hash method 預設是拿掉的，而 Webpack 在建立 bundle 檔案時，如果檔名有用到 hash 的話，預設的 hash method 用的就是已經被淘汰的 <a href="https://www.openssl.org/docs/man3.1/man3/MD4.html">md4</a>，然後 md4 是用 Node.js 的 <a href="https://nodejs.org/docs/latest-v20.x/api/crypto.html#cryptocreatehashalgorithm-options">crypto</a> 來呼叫 OpenSSL 做事，Node.js 的文件也有提到支援的演算法是依據你的 OpenSSL 版本和系統而定，所以其實並沒有保證 <strong>md4</strong> 一定可以用，而如果使用了 OpenSSL 不支援的演算法，跑出來的錯誤訊息就是像上面截圖一樣特別了，然後我還特別去用 OpenSSL 3 cli 跑跑看，結果出來的錯誤訊息真的就是差不多：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53188641438/" title="OpenSSL 3 error by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53188641438_3493041848_b.jpg" width="512" height="341" alt="OpenSSL 3 error" srcset="" /></a></p>
<p>使用 flag 開啟舊演算法的支援其實我覺得還算可以接受，畢竟是 build 而已，不是拿來跑服務，不過這個 flag 似乎有點特殊，似乎不能直接放在 <code>NODE_OPTIONS</code> 裡面，而且同個程式庫要是拿到舊版 Node.js 環境去跑，加這個 flag 反而跑不起來，所以最理想還是把問題解決掉。</p>
<p>那這個問題應該怎麼處理呢？其實簡單說就是把套件升級升級就好了，因為現在的套件新版本都有處理這個問題，不過走上升級這條路之前可以先試試看 StackOverflow 上的解法（有可能讓你專案爛掉，請先備份）：</p>
<pre><code class="language-bash">npm audit fix --force 
</code></pre>
<p>如果你用的是 yarn，沒有 <code>audit fix</code> 可用，但是也有人提供用 npm 來修理的<a href="https://stackoverflow.com/questions/51732435/is-there-a-yarn-alternative-for-npm-audit/60878037#60878037">流程</a>，不過我是沒試過這個流程，我自己有一個專案是靠 <code>yarn upgrade</code> 升級後解決問題的（實際上是把所有有用到的 <a href="https://github.com/webpack/loader-utils/releases/tag/v2.0.1"><strong>loader-utils</strong> 都升級到 2.0.4</a>，本來有個套件用到 2.0.0），剩下的還是無法修好的就要靠手工了，然後因為我處理的網站只有 Gatsby 和 CRE(Create React App) 兩種，所以以下就是只有說明這兩個系統的為主，兩者其實都是使用 Webpack 作打包工具的，而 <a href="https://github.com/webpack/webpack/releases/tag/v5.61.0">Webpack</a> 是從 v5.61.0 開始保證支援 Node.js 17 的，我稍微查了一下 Gatsby 是從 <a href="https://github.com/gatsbyjs/gatsby/releases/tag/gatsby%404.2.0">4.2.0</a>，而 CRA 的則是要最新版 react-script <a href="https://github.com/facebook/create-react-app/releases/tag/v5.0.1">5.0.1</a> 才保證支援，為什麼說是保證呢？因為 <code>^</code> 的 semver range 的關係，例如要是你的 react-script 是 5.0.0，那你本地可能會是裝到 Webpack v5.60.0，那就不支援 Node.js 17 了，像我就是有 Gatsby 3.x 的，升級到 4.x 就沒事了。</p>
<p>Gatsby 和 CRA 其實都還好，最慘的是 eject 過的 CRA 了，只能手工升級，基本上就是去 <a href="https://github.com/facebook/create-react-app/tree/main/packages/react-scripts">react-script</a> 那邊，複製需要的檔案回到你的專案覆蓋過去，最主要的是 <code>scripts/</code> 和 <code>config/</code> 下的檔案，然後根據自己的修改紀錄把自己作過的修改改回去，接著更新 <code>package.json</code> 裡面的 dependencies，版本號就是參照 react-script 那邊的 <a href="https://github.com/facebook/create-react-app/blob/main/packages/react-scripts/package.json#L30-L78">package.json</a>，最主要的就是 <code>webpack</code> 相關的，接著安裝套件後重新 build，要是還有一樣的錯誤，就看 trace 看看是哪個相依套件，看有沒有新版有修正就更新試試看，大概就是這樣，很容易漏東西所以會一直重複測試，蠻花時間的，不過最後 build 成功還是有成就感的。</p>
<p>PS. 還要小心其他升級的後遺症，如果是 app 最好要測試過各種行為，像我遇到 Webpack 5 不支援 polyfill Buffer 的問題，剛好那個錯誤又被 catch 掉，所以我 build 是沒問題的，就是測試跑不過，後來參考網路上的<a href="https://viglucci.io/articles/how-to-polyfill-buffer-with-webpack-5">文章</a>處理。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000996" baseName="vim-license-2">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2023-09-11</b:date>
				<b:time>17:27:11</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Vim License 的故事（下）</b:title>
			<b:content>
				<b:summary> 接續前一篇。 Mike 在 SPDX License List 這邊提出的問題則是，為什麼會有 Vim 要替換，但是 Vim Maintainer 不要替換這樣特別的情形，所以我就是認真的解釋，並且說明這是跟原作者 Bram 確認過的細節並附上討論，還有舉我前面提過那個最極端的例子，然後我猜最重要的是現實世界有沒有人這樣使用過，還好我還真的找到幾個專案有認真的把條款內的 Vim 替換掉（當然是連 Vim Maintainer 也換掉了），像是 Tagbar；我的 PR 是 2019/07/11 提的，然後一直來回到 9/25 回了最後一個回應之後就沒人回我了，之後到了 10/19 就突然被合併了（其實 SPDX 有定期的會議，應該是在其中有討論過要不要合併這個 PR 吧），接著等到 2020 一月我發了 PR 到 choosealicense 把 vim.txt...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177611514/" title="Vim License on choosealicense by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177611514_6232063ea9_b.jpg" width="1024" height="684" alt="Vim License on choosealicense" srcset="https://live.staticflickr.com/65535/53177611514_69382dace8_k.jpg 2x" /></a></p>
<p>接續<a href="https://blog.othree.net/log/2023/09/10/vim-license-1/">前一篇</a>。</p>
<p>Mike 在 SPDX License List 這邊提出的問題則是，為什麼會有 Vim 要替換，但是 Vim Maintainer 不要替換這樣特別的情形，所以我就是認真的解釋，並且說明這是跟原作者 Bram 確認過的細節並附上討論，還有舉我前面提過那個最極端的例子，然後我猜最重要的是現實世界有沒有人這樣使用過，還好我還真的找到幾個專案有認真的把條款內的 Vim 替換掉（當然是連 Vim Maintainer 也換掉了），像是 <a href="https://github.com/preservim/tagbar/blob/master/LICENSE">Tagbar</a>；我的 PR 是 2019/07/11 提的，然後一直來回到 9/25 回了最後一個回應之後就沒人回我了，之後到了 10/19 就突然被合併了（其實 SPDX 有定期的會議，應該是在其中有討論過要不要合併這個 PR 吧），接著等到 2020 一月我發了 PR 到 choosealicense 把 vim.txt 加進去，這次就蠻順利就合併了。</p>
</b:mainContent>
				<b:extendContent><p>解決了上游問題，回到 Licensee 偵測的問題，我本來的 PR 沒被合併，而是 Mike 另外弄了一個比較通用的解法，是根據條款文本內的替換字串來動態調整差異的容許範圍，然後接著 2020/03/13，Licensee 9.13.1 作為第一版支援 Vim License 的 Licensee 發佈了，接下來，我理論上就只要等 GitHub 更新 Licensee 的版本就好了，這我倒是不太擔心，我是有種感覺 GitHub 是有在認真更新這些東西的，然後，時間快轉到三個月後，這段期間其實我都有偶爾上去 GitHub 看一下 Vim License 有沒有被偵測出來，想著要是終於完成的話就可以投個稿了，當時的時間大概是搞了三年這樣，總之因為過有點久了，我又去拉了最新版 Licensee 來測試，結果讓我嚇了一跳，竟然偵測不出來了！</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177845605/" title="Licensee 9.13.1 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177845605_dbd6f40e06_b.jpg" width="1024" height="684" alt="Licensee 9.13.1" srcset="https://live.staticflickr.com/65535/53177845605_169f7db9ba_k.jpg 2x" /></a></p>
<p>所以我又花時間下去查原因，結果是 2020/05/12 的 9.14 開始爛掉的，Mike 在 9.14 有修改一部分的演算法，在比對兩份文件時，因為有替換字串的關係，不可能用完全比對的方式，所以在有替換字串時，文件的長度差異會影響相似度，有個動態的 <code>max_delta</code>，如果替換字串後長度差異太大超過 <code>max_delta</code> 的話，就會被判定為不同的文件，在 9.14 則是把這個機制拿掉，直接把替換字串的影響弄進相似度之中，不過其中長度差異的懲罰太大，結果造成 Vim 專案本身的判斷失準，發現原因之後，我就發了 PR 調整懲罰的參數，讓 Vim 剛好可以過關這樣，結果我發 PR 時 Mike 早已經發現這個問題，也已經修改好開了 PR 只是還在 review，而該 PR 的方法是則是動態的根據替換字串的數量來調整文件長度差異的值，除此之外，Vim License 還被加到測試之中，所以以後應該不會再發生這種問題了。</p>
<p>然後，我就等這個 PR merge 等了三個月，不過還好 merge 後馬上就發佈 9.14.1 了，接著又回到等 GitHub 更新的時間了，我就一直等，一直等，偶爾上去 GitHub 的 Vim repo 確認一下，2021 年初我還寫信去 GitHub Support 問他們當時使用的版本是哪一版，Support 還有認真去幫我確認是沒更新，然後就這樣一直等一直等到 2022 年初，有天在用 GitHub 的搜尋功能時，突然發現到，可以用條件設定搜尋特定授權條款的專案，然後我就想說可以來試試看 Vim License：<code>license:vim</code>，結果竟然有<a href="https://github.com/search?q=license%3Avim&amp;type=repositories">符合條件的專案</a>出現！讓我大吃一驚！原來不知何時 GitHub 已經偵測的到 Vim License 了，可是 Vim 那個 repo 結果卻還是不正確，深入了解一下，推測應該是 GitHub 有 cache 機制，找了一下文件發現到有提到說如果有發現專案的授權條款標示不正確，可以聯絡 support，於是我就發了 support request，這次很快就收到回應，然後在 2022/01/12 這天，確認了 GitHub 上的 Vim 專案有正確的顯示為 Vim License 了，歷時將近五年，那天我還發推慶祝了一下。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177410816/" title="Search result of Vim Licensed repo by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177410816_564bde201f_b.jpg" width="1024" height="684" alt="Search result of Vim Licensed repo" srcset="https://live.staticflickr.com/65535/53177410816_1f295d5269_k.jpg 2x" /></a></p>
<blockquote class="twitter-tweet"><p lang="zh" dir="ltr">自己挖了將近五年的坑今天終於填平了，今年終於可以投個稿</p>-- othree (@othree) <a href="https://twitter.com/othree/status/1481290722368458757?ref_src=twsrc%5Etfw">January 12, 2022</a></blockquote> <script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>之後，終於可以準備投稿，然後順利投上 2022 年的 COSCUP，題目是「<a href="https://coscup.org/2022/zh-TW/session/ESQUUF">歷時五年的開源貢獻，GitHub 支援 Vim License 的故事</a>」（<a href="https://www.youtube.com/watch?v=YM7RHRwIrKU">影片</a>、<a href="https://speakerdeck.com/othree/how-github-supports-vim-license-detection-the-five-years-journey">投影片</a>），在準備分享的過程也是遭受很多的<del>電玩干擾</del>阻力，分享過程還算順利，自己有點小不滿意不過還算可以接受，不滿意的地方是有些我一開始有想要分享的點忘了說，不過也是在這篇文章有補齊了。</p>
<p>其實在初期那段等待的時間之間，我還開了一個小專案 <a href="https://vim-license.dev/">Vim License Gen</a>，用來幫人產生自己的專案/軟體用的 Vim License 文件，為什麼要有這個工具是因為以前的純文字文件，每行的寬度大概都在 80 個字元以內，但是每個專案的名稱都不一樣，如果直接做替換，有可能會破版，所以這個工具一是會保持版面，二是它可以正確的只替換需要替換的部分，然後這個專案就是用 Vim License 開源，並且是用自己產生 Vim License 文件，然後我也把他列為使用 Vim License 的三個專案之一（另外兩個分別是 Vim 和 vim-pathogen），這也是個 self-hosting 的實現。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177408966/" title="Vim License Gen by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177408966_62bd21b8ab_b.jpg" width="1024" height="684" alt="Vim License Gen" srcset="https://live.staticflickr.com/65535/53177408966_c7baf853ea_k.jpg 2x" /></a></p>
<p>故事並沒有到這邊就結束，COSCUP 分享之後的目標就是把這篇文章寫下來了，不過一拖再拖，其中一個主因是以前我是先把文章寫好順便作整理，但是這次因為準備時間不夠，無法在分享前先把文章寫好，變成後寫，沒了趕稿壓力，加上又有像是王國之淚等讓人分心的東西，就一直無限期拖搞，直到今年 2023/08/05 傳出了 Vim 的作者 Bram Moolenaar 於八月三日因病過世的消息了。</p>
<p>Bram 過世之後，除了緬懷之外，大家也會擔心起 Vim 的後續誰維護的問題，還好 Vim GitHub 組織內還有另外兩位成員，其中 Christian Brabandt 算是接起主持人的角色，他同時也是我用很久的 vim-airline 的作者，然後很快的也發了 PR 做了一些相關的修改，像是在 doc 裡面緬懷 Bram、更新檔案內的維護者資訊等，只不過其中一項修改，改到了 LICENSE 檔案！改的地方當然就是那個高度耦合的 Vim Maintainer 的部分：</p>
<blockquote>
<p>The current maintainer is Bram Moolenaar <a href="mailto:Bram@vim.org">Bram@vim.org</a>.</p>
</blockquote>
<p>改成</p>
<blockquote>
<p>The current maintainers are listed here: https://github.com/orgs/vim/people.</p>
</blockquote>
<p>然後我還是被 ping 了才知道這 PR 已經合併，這下我可緊張了，其實我本來也是有在想 Vim License 的問題，只不過想說 Bram 才剛過世，可以晚點再提出，當時有想了幾個方案，理想上要能同時繼續支援現有的使用 Vim License 的專案、然後也要能讓授權條款內的文字正確的更新，不過當時不管哪個方案，都無法保證兩全齊美，當時想的方案為：</p>
<ul>
<li>方案一：更改條款內文並且發布新版，可能是叫 Vim License 1.1 之類的，缺點是可能需要重新提交提交新版的條款到 choosealicense，但是現況來看幾乎不可能符合提交的一千個專案的條件；</li>
<li>方案二：更改條款內文，繼續用一樣的條款名，不推修改到 choosealicense，缺點是 Licensee 可能辨認不出來，結果就是 Vim 專案自己無法被辨識為使用 Vim License；</li>
<li>方案三：同二，但是該推送修改的地方如 SPDX License List 和 choosealicense 都送，缺點是使用舊版授權條款文字的可能都再也辨認不出來，另一個問題是這樣的變化 Mike 是否會接受？</li>
</ul>
<p>就之前的紀錄，當時版本偵測出來的相似度也只有 98.45%，這樣一改下去，會不會就爆炸又偵測不出來了呢，於是我趕快找了個時間拉最新版的 Vim 和 Licnesee 下來測試，結果，竟然還是 98.45%，這結果又讓我驚呆了，直覺是因為 Licensee 的演算法改的更好了，一查下去，原來剛好在今年初的 Licensee 9.16.0 其中的一項修改就是針對替換字串提供更高的差異容許範圍，所以舊版 Vim License 下去比對會有 99.12% 的相似度，剛好足夠新版修改後的差異，而這結果就剛好克服了方案三的缺點，所以接下來應該就是會朝這個方向進行，先提交新版的文字給 SPDX License List，然後再更新 choosealicense 內的範本吧。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53176812027/" title="Vim License detection by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53176812027_c95d17b663_b.jpg" width="1024" height="666" alt="Vim License detection" srcset="" /></a></p>
<p>以上，就是到目前為主的故事了，最後想來作一個總結，也就是談談當初為什麼想在 COSCUP 分享這個呢？其實我當初假想的聽眾是開源的新手，我想分享的其中一點是，對於開源專案的貢獻，我完全是照自己的步調，也不給任何一邊壓力，所有的等待過程我都沒去催促過任何人，不過標題的「五年」或許造成反效果也說不定，投稿時 Rock 有建議過我可以調整一下標題，不過我實在是想不到什麼其他好標題，結果就都沒改，後來，當天在我的前一場是 Max 的「<a href="https://coscup.org/2022/zh-TW/session/99GBZC">開源軟體與社群 - 參與國際社群經驗談</a>」（<a href="https://www.youtube.com/watch?v=OxuQ1sdLhks">影片</a>），就有提到這點，可以選擇你最舒服的方式參與，不用害怕參與；第二點想分享的東西則是關於在這個過程中學到的東西，像是 Licensee 的判斷原理，SPDX 相關的東西，和各個群體溝通的過程，很多東西都是我之前並不清楚的，像是我以前知道有個 SPDX License Indentifier，但是並不清楚 SPDX 是搞什麼用的，然後它們有維護 License List，甚至授權條款文本裡面可以有替換字串等，我覺得這些都是蠻有趣的知識；最後一點則是分享這一整個過程，中間一波三折，坑坑相連到天邊的轉折，我自己都覺得很有趣。</p>
<p>以下列出我一路以來開過的 PR、Issue 和討論:</p>
<ul>
<li><a href="https://github.com/github/choosealicense.com/issues/498">choosealicense.com/issues/498</a> 最初的 issue</li>
<li><a href="https://groups.google.com/g/vim_dev/c/DlTVMew1ZSo/m/b9QCTlXgEAAJ">vim_dev: A Questions about Vim License</a> 跟 Bram 詢問　Vim License 的細節</li>
<li><a href="https://github.com/licensee/licensee/issues/385">licensee/issues/385</a> 提出 Vim License 偵測的問題</li>
<li><a href="https://github.com/spdx/license-list-XML/pull/901">license-list-XML/pull/901</a> 幫 SPDX License List 裡面的 Vim License 加上替換字串</li>
<li><a href="https://github.com/vim/vim/pull/5458">vim/pull/5458</a> 幫 Vim 加入　LICENSE 檔案</li>
<li><a href="https://github.com/tpope/vim-pathogen/pull/210">vim-pathogen/pull/210</a> 幫 vim-pathogen 加入 LICENSE 檔案</li>
<li><a href="https://github.com/github/choosealicense.com/pull/717">choosealicense.com/pull/717</a> 最重要的那個 PR，加 vim.txt 到 choosealicense</li>
<li><a href="https://github.com/licensee/licensee/pull/445">licensee/pull/445</a> 修改新版 Licensee 的問題</li>
<li><a href="https://github.com/othree/vim-license/issues/2">vim-license/issues/2</a> Vim License Gen 紀錄各個連結用的 issue</li>
</ul>
<p>最後的最後就來個簡單的 timeline 吧：</p>
<pre><code>- 2013/07/15 Choose a license released
- 2016/09/21 Display/detect the license
- 2017/03/26 Open issue to choosealicense
- 2018/06/15 First issue closed
- 2019/06/23 Discuss the License text with Bram
- 2019/06/27 Issue about Vim License detection
- 2019/07/11 SPDX PR
- 2019/09/25 Last comment of the SPDX PR
- 2019/10/19 SPDX PR merged
- 2020/01/08 PR add License to Vim
- 2020/01/18 PR add License to vim-pathogen
- 2020/01/21 PR add vim.txt to choosealicense
- 2020/03/13 Licensee 9.13.1 released, Vim added
- 2020/05/12 Licensee 9.14 release, Vim detection failed
- 2020/07/04 PR to fix detection issue
- 2020/10/14 Issue fix merged v9.14.1
- 2021/02/05 Contact GitHub support 1st time
- 2022/01/12 Contact GitHub support 2nd time, 確認上線
- 2022/05/22 投稿、開始寫文章
- 2022/07/29 COSCUP 2022
- 2023/08/03 Bram Passed away
- 2023/08/13 Vim License file updated
- 2023/09/04 再次開始寫文章
- 2023/09/12 發表文章
</code></pre>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000995" baseName="vim-license-1">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2023-09-10</b:date>
				<b:time>23:32:05</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Vim License 的故事（上）</b:title>
			<b:content>
				<b:summary> 這篇是我去年 COSCUP 分享的文字版，拖稿許久終於寫出來了，以下正文開始。 Open Source Software 一直是 GitHub 的心頭肉(?)，也因此 GitHub 一直都有在各方面協助 OSS 開發者，其中也包括了對 Open Source License（開源授權）相關的協助。在 2013 年，GitHub 發佈了一個小網站 叫 choosealicense.com，用簡單的條列介紹各開源授權條款的特色，並且藉由一些問答互動來幫助開發者挑選開源軟體授權條款。 而到了 2016 年，GitHub 更進一步提供了授權條款的偵測功能，只要你的程式庫裡面有正確的授權條款資訊（像是 LICENSE 檔案），然後使用的條款也在偵測的範圍內，那在 GitHub 上就會顯示該專案所使用的授權條款，也會同時提供該授權條款的特色給訪客參考，不過這個偵測功能，能偵測到的授權條款只有一些，更精確的說，就是只有 choosealicense 網站上的那些。 在 GitHub 推出授權條款偵測功能後沒多久，我就發現到 Vim 所使用的 Vim License 並不在偵測的範圍內。Vim...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177898493/" title="‎vim-license-slide.‎001 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177898493_0143b6204a_b.jpg" width="1024" height="576" alt="‎vim-license-slide.‎001" srcset="https://live.staticflickr.com/65535/53177898493_530da1ec12_k.jpg 2x" /></a></p>
<p>這篇是我<a href="https://blog.othree.net/log/2022/07/31/coscup-2022/">去年 COSCUP</a> 分享的文字版，拖稿許久終於寫出來了，以下正文開始。</p>
<p>Open Source Software 一直是 GitHub 的心頭肉(?)，也因此 GitHub 一直都有在各方面協助 OSS 開發者，其中也包括了對 Open Source License（開源授權）相關的協助。在 2013 年，GitHub <a href="https://github.blog/2013-07-15-choosing-an-open-source-license/">發佈了一個小網站</a> 叫 <a href="https://choosealicense.com/">choosealicense.com</a>，用簡單的條列介紹各開源授權條款的特色，並且藉由一些問答互動來幫助開發者挑選開源軟體授權條款。</p>
<p>而到了 2016 年，GitHub 更進一步提供了<a href="https://github.blog/2016-09-21-license-now-displayed-on-repository-overview/">授權條款的偵測功能</a>，只要你的程式庫裡面有正確的授權條款資訊（像是 LICENSE 檔案），然後使用的條款也在偵測的範圍內，那在 GitHub 上就會顯示該專案所使用的授權條款，也會同時提供該授權條款的特色給訪客參考，不過這個偵測功能，能偵測到的授權條款只有一些，更精確的說，就是只有 choosealicense 網站上的那些。</p>
<p>在 GitHub 推出授權條款偵測功能後沒多久，我就發現到 Vim 所使用的 Vim License 並不在偵測的範圍內。Vim License 是一個很特別的授權條款，是 Vim 的作者 Bram Moolenaar 專為 Vim 使用而寫的，雖然內文是針對 Vim 本身寫的，不過其實有很多的 Vim Script 也是標注使用 Vim License，甚至常常是寫 &quot;Same as Vim&quot;，所以實際上使用的專案並不少，所以我就一直想著，是不是有可能讓 GitHub 可以支援偵測 Vim License 呢？</p>
</b:mainContent>
				<b:extendContent><p>我一直把這念頭放在心裡，後來終於有一天有時間有衝動，認真去研究要怎樣新增支援的授權條款，簡單來說，GitHub 用來偵測專案所使用的授權條款的工具，是一套用 Ruby 寫的，叫做 <a href="https://licensee.github.io/licensee/">Licensee</a>（我都當成 license + see）的工具，而這個工具所使用來參考比對的條款文本，則是從 choosealicense 專案來的（使用 git submodule 引入），如果要加新的授權條款到 choosealicense 裡面，有些<a href="https://github.com/github/choosealicense.com/blob/gh-pages/CONTRIBUTING.md#adding-a-license">條件</a>要先達到：</p>
<ul>
<li>要有 SPDX License Identifier</li>
<li>要名列在幾個主要的開源授權清單中</li>
<li>至少要有一千個專案使用它</li>
<li>要列舉三個使用該授權條款的有名的專案（作為網站上的範例）</li>
</ul>
<p>我研究了一會兒，大部分條件沒問題，就是那個一千個專案的需求我也不是很確定，根據搜尋結果可以保證有數百個，但是有沒有一千個實在無法保證，不過我還是去開了個 <a href="https://github.com/github/choosealicense.com/issues/498">issue</a> 建議說要加入 Vim License，其中一千個專案那個條件的部分則是提供我的所知（各種搜尋結果和 Vim 生態的狀態，推論應該會有達標），時間是 2017/03/26，當時我想的是 Vim 這麼有名，應該開個需求就會有人處理了吧，然後 choosealicense 的主要貢獻者之一 Mike Linksvayer，跟我來往幾次討論之後，我就放置在那幾乎忘了他，結果過了一年後，那個 issue 就因沒有動靜被關掉了！</p>
<p>我開的第一張 issue 被關掉的當下當然是有點震驚的，直白一點的說我心中的想法大概是：「原來 Vim 這麼有名也是沒有特權的啊！」總之之後我還是繼續放著，直到大概又過了一年，到了 2019 年六月，我才又開始重新投入到這件事情，既然開 issue 沒人做，那就只好改開 PR 了，於是我才開始認真的研究，目標當然就是把 Vim License 推進 choosealicense 裡面，所以就是先認真的要提供的文本檔案的格式，首先我發現的是，授權條款的文本裡面，除了那些 metadata 之外，文本本身是可以有替換字串（substitution）的，像是常見的年份、名稱等：</p>
<pre><code>MIT License

Copyright (c) [year] [fullname]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

...
</code></pre>
<p>其中，用 <code>[]</code> 包起來的像是 <code>[year]</code>、<code>[fullname]</code> 就是要替換掉的字串，發現這點之後，我也覺得需要重新檢視 Vim License 的文字是不是也有這種地方，然而一旦認真看待這點，便發現問題不小，而這個問題就是 Vim License 不是 context free 的，而是高度和 Vim 耦合在一起的，一般而言，開源授權都是 context free 的，怎樣算是 context free 的授權條款呢？就是那個條款文字要拿去哪個專案，都可以直接用，不需要去修改文字內容，頂多是修改頭尾的名稱、年份和所有權人的資訊，但是 Vim License 不是，光是 <strong>Vim</strong> 這個單字，就在文本內出現了 29 次，而這些 Vim 單字，大部分時候代表的是使用這個授權的軟體的名稱，所以假設我今天是 vim-pathogen 要使用 Vim License，那就應該要在 LICENSE 文件內把 Vim 單字都換成 pathogen.vim 才對，不過在這堆 Vim 之中，還有一些地方是代表不一樣的意義，這些地方就是在作為 <strong>Vim Maintainer</strong> 的時候，所以到底，這麼多的 Vim 都應該要改為替換的字串嗎？為此我就去問了 Vim 的作者，當然同時也是 Vim License 的作者 Bram Moolenaar，其實我蠻快就<a href="https://groups.google.com/g/vim_dev/c/DlTVMew1ZSo/m/b9QCTlXgEAAJ">得到答案</a>了，結論就是，Vim Maintainer 需要保留原樣，但是其他時候在作為代表使用該授權的軟體時，<strong>Vim</strong> 應該要改為該軟體的名稱。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177608139/" title="Discuss Vim License with Bram by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177608139_7e1d12cf42_b.jpg" width="1024" height="684" alt="Discuss Vim License with Bram" srcset="https://live.staticflickr.com/65535/53177608139_fd6999e91a_k.jpg 2x" /></a></p>
<p>那麼為什麼會出現 Vim Maintainer 呢？這邊就要來介紹一下 Vim License 的內容了，條款內容簡單翻譯（非正式翻譯，請勿用於法律用途）如下：</p>
<ol>
<li>可以自由任意的散佈未修改過的 Vim；</li>
<li>如果要散佈修改過的 Vim，需要符合以下條件之一；
<ol>
<li>發佈時同時提供聯絡方式，當 Vim Maintainer 向你索取你的修改，你必須無償提供，並且 Vim Maintainer 保留把你的修改加進官方版本 Vim 的權力；</li>
<li>如果你取得經由前一條所述方式散佈的 Vim，你可以不受限制的散佈該版本，如果有新的修改，則需依照相同的方式散佈；</li>
<li>發佈時同時提供和原始版本的原始碼差異；</li>
<li>使用前一條的方式發佈時，符合以下所有條件時可以不用提供原始碼；
<ul>
<li>你所使用的授權條款不會讓 Vim Maintainer 無法免費取得你修改的內容；</li>
<li>你必須保留你修改的內容（原始碼的差異）至少三年，如果使用者或是 Vim Maintainer 在這段時間內跟你索取修改的內容，你必須要提供；</li>
<li>你必須確保你所提供的聯絡方式在三年內是有效的。</li>
</ul>
</li>
<li>如果你的修改使用 GPL，你可以使用 GPLv2 發佈你修改過的版本。</li>
</ol>
</li>
<li>如果你發佈修改過的 Vim，強烈建議你使用 Vim License 並把修改的原始碼提供給 Vim Maintainer；</li>
<li>不可把授權條款移除。</li>
</ol>
<p>仔細看下來，其實這份文件，主要目標就是在確保 Vim Maintainer 能取得其他人的修改，如果不是 Vim 使用這份授權條款的話，不管你使用這份條款的軟體是什麼，有修改再發佈的話，你都必須要讓 Vim Maintainer 可以無償取得你的軟體原始碼，並且 Vim Maintainer 可以決定是否要給原軟體使用，而這也造成了 Vim License 成為了少見的，不是 context free 的開源授權，而這個細節我相信是在我跟 Bram 的討論後才是第一次闡明，當時討論時我有舉了一個極端的例子來確認：假設我有一個軟體 X，使用 Vim License 授權，後來有人修改我的 X 後改為 Y 發佈但是沒有開源，有權力去取得 Y 的修改內容並決定要不要給 X 的，其實是 Vim Maintainer，而不是我（X 的作者）。</p>
<p>知道哪些地方才是可以替換掉之後就簡單了，我快速的準備好要用來發 PR 的 vim.txt 檔案，然後想說先來測試一下，結果，偵測竟然失敗了！研究再三，發現偵測出來的相似度只有 97.x%，而 Licensee 設定的閾值是 98%，至於會造成相似度這麼低的原因，其實是因為文本內有太多的替換字串了，當時的 Licensee 對於替換字串的比對處理的不太好，替換前後文字的長短差異也會有影響，知道原因後我就在想要來怎麼處理，當然最簡單的方法就是用特例處理，我當時的作法就是如果是在偵測 Vim License 的話，就會降低判斷用的閾值，本地測試沒問題後，就準備提交回去給 Licensee 了，不過因為我還不確定這樣的作法好不好，所以我先開了個 issue，解釋了前因後果然後附上我目前的修改，想說問問看負責的人的想法，如果他們覺得可以接受我再發 PR，結果，Mike Linksvayer 又出現了！我才發現 choosealicense 和 Licensee 他都是主要貢獻者！至於知道他的經歷則是在 COSCUP 分享後才聽 Bobchao 說的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177406736/" title="vim.txt in Licensee by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177406736_71659e1fd6_b.jpg" width="1024" height="684" alt="vim.txt in Licensee" srcset="https://live.staticflickr.com/65535/53177406736_7ce7bb487f_k.jpg 2x" /></a></p>
<p><a href="https://en.wikipedia.org/wiki/Mike_Linksvayer">Mike Linksvayer</a> 當時是 GitHub 的 Policy Director 專門負責公共相關的事務，而在之前則是當過 CC 的 CTO 和 VP，也曾擔任過數個不同組織的董事會成員，像是 OpenHatch、Software Freedom Conservancy 和 Open Definition Advisory Council，所以可以說是已經在自由開源領域活躍已久，甚至是特長於授權條款相關的領域。不過其實當時我不知道，也沒想說要去了解，主要對他的印象是頭像看起來有點嚴肅，一直給我 T1000 的感覺，加上我後來就是幾乎都是跟他往來為主（應該說我提交的貢獻就是他在把關的），所以某些層面上來看我其實是對他有點心生畏懼的。</p>
<p>Mike 在 Licensee 這邊提出的問題是，我在 Vim License 裡面定的那些替換字串，並沒有出現在 <a href="https://spdx.org/licenses/Vim.html">SPDX License List</a> 那邊，SPDX 全名是 Software Package Data Exchange，其實這是屬於一般開發者比較少接觸的到的東西，目前最常看到的應用扣除 License List 之外，應該是軟體供應鍊相關的東西，不過其實他們所維護的 <a href="https://spdx.org/licenses/">SPDX License List</a> 幾乎已經成為業界標準，尤其是那個 license 的 identifier 更是到處都看得到，像是 npm 的 <a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-json#license">package.json</a> 裡面就是使用它。然後其實 SPDX License List 這邊的檔案格式（自訂的 XML）和 Licensee 用的檔案格式（自訂的純文字）不一樣，不過由於 SPDX License List 已經是一個大家都會當作參考索引的資料源頭，所以也自然的成為 choosealicense 的上游（upstream），這次經驗我也讓我了解到開源的圈子真的是蠻重視 upstream 的，之前我也在 neovim 遇過類似的情形，總之也因此我應該要先去提交 PR 修改 SPDX License List，然後才發 PR 給 choosealicense，所以我就整理整理後去那邊發了 PR 加上這些替換字串，然後，<strong>Mike Linksvayer</strong> 又出現了！他也是 SPDX License List 的貢獻者之一！</p>
<p>接<a href="https://blog.othree.net/log/2023/09/11/vim-license-2/">下一篇</a>。</p>
</b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
