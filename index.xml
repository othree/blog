<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>i</b:listType>
			<b:listData listID="index"/>
		</b:entriesMeta>

		<b:entry entryID="000783" baseName="w3c-validator-suite">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-12-25</b:date>
				<b:time>22:13:16</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>W3C Validator Suite</b:title>
			<b:content>
				<b:summary>W3C 不知道何時推出了 Validator Suite，有別於 Markup Validator，這次是個收費服務，目前註冊帳號會送 20 個使用額度，收費也是買使用額度，而不是算時間的，Validator Suite，是基於 Markup Validator 而發展的，本身是 close source，兩者最主要的差別在於 Validator Suite 是可以一口氣檢查大量網頁的，你丟網址給它，它可以一直往下深入檢查每個子頁面，Markup Validator 則是一次只有一頁，這樣設計的目標對象其實應該是商業網站之類的，至於 W3C 的 Markup Validator 則是 open source 的，這幾年也一直有更新，整個進步很多，很多新標準的支援都很快，像是 itemprop、itemscope 之類的屬性都能真正的判斷是否有正確使用，而不只是單純的判斷是不是個合法的屬性。...</b:summary>
				<b:mainContent><p>W3C 不知道何時推出了 <a href="https://validator-suite.w3.org/">Validator Suite</a>，有別於 <a href="http://validator.w3.org/">Markup Validator</a>，這次是個收費服務，目前註冊帳號會送 20 個使用額度，收費也是買使用額度，而不是算時間的，Validator Suite，是基於 Markup Validator 而發展的，本身是 close source，兩者最主要的差別在於 Validator Suite 是可以一口氣檢查大量網頁的，你丟網址給它，它可以一直往下深入檢查每個子頁面，Markup Validator 則是一次只有一頁，這樣設計的目標對象其實應該是商業網站之類的，至於 W3C 的 Markup Validator 則是 open source 的，這幾年也一直有更新，整個進步很多，很多新標準的支援都很快，像是 itemprop、itemscope 之類的屬性都能真正的判斷是否有正確使用，而不只是單純的判斷是不是個合法的屬性。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11547188533/" title="W3C Validator Suite by othree, on Flickr"><img src="//farm8.staticflickr.com/7397/11547188533_3c7063ebd6_b.jpg" width="1024" height="759" alt="W3C Validator Suite" src-1="(max-width: 768px)  //farm8.staticflickr.com/7397/11547188533_3c7063ebd6.jpg 1x, //farm8.staticflickr.com/7397/11547188533_3c7063ebd6_b.jpg 2x"  /></a></p>
</b:mainContent>
				<b:extendContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11547188043/" title="W3C Validator Suite by othree, on Flickr"><img src="//farm8.staticflickr.com/7429/11547188043_349956d8f8_b.jpg" width="1024" height="759" alt="W3C Validator Suite" src-1="(max-width: 768px)  //farm8.staticflickr.com/7429/11547188043_349956d8f8.jpg 1x, //farm8.staticflickr.com/7429/11547188043_349956d8f8_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11547187753/" title="W3C Validator Suite by othree, on Flickr"><img src="//farm8.staticflickr.com/7375/11547187753_caccfa7ac7_b.jpg" width="1024" height="759" alt="W3C Validator Suite" src-1="(max-width: 768px)  //farm8.staticflickr.com/7375/11547187753_caccfa7ac7.jpg 1x, //farm8.staticflickr.com/7375/11547187753_caccfa7ac7_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11547187353/" title="W3C Validator Suite by othree, on Flickr"><img src="//farm8.staticflickr.com/7344/11547187353_5f87f77d7d_b.jpg" width="1024" height="759" alt="W3C Validator Suite" src-1="(max-width: 768px)  //farm8.staticflickr.com/7344/11547187353_5f87f77d7d.jpg 1x, //farm8.staticflickr.com/7344/11547187353_5f87f77d7d_b.jpg 2x"  /></a></p>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000782" baseName="asmjs-1half-x-slower-than-native">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-12-24</b:date>
				<b:time>00:59:41</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>asm.js 效能再提昇</b:title>
			<b:content>
				<b:summary> Mozilla 之前發表 asm.js 後，公佈的速度大約是原生應用是的兩倍慢，不過最近這個數字又變好了，根據 20 日 Mozilla Hacks 發表的文章，現在這個數字已經變成 1.5 倍了，主要是歸功於 float32 數值處理最佳化，不過目前還不建議直接使用這個新的 float32 最佳化機制，Mozilla Blog 有一篇文章則是在講比較技術面的內容，大概看一下，應該是犧牲精確度來換取速度。本來我是覺的要真的和 native 一樣快不太可能，不過看到新的 benchmark 結果，覺的這天或許不會太久就會到來吧。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11517198133/" title="asm1.5b by othree, on Flickr"><img src="//farm6.staticflickr.com/5520/11517198133_293174bb1e_b.jpg" width="1024" height="509" alt="asm1.5b" src-1="(max-width: 768px)  //farm6.staticflickr.com/5520/11517198133_293174bb1e.jpg 1x, //farm6.staticflickr.com/5520/11517198133_293174bb1e_b.jpg 2x"  /></a></p>

<p>Mozilla 之前發表 asm.js 後，公佈的速度大約是原生應用是的兩倍慢，不過最近這個數字又變好了，根據 20 日 Mozilla Hacks 發表的<a href="https://hacks.mozilla.org/2013/12/gap-between-asm-js-and-native-performance-gets-even-narrower-with-float32-optimizations/">文章</a>，現在這個數字已經變成 1.5 倍了，主要是歸功於  float32 數值處理最佳化，不過目前還不建議直接使用這個新的 float32 最佳化機制，Mozilla Blog 有一篇<a href="https://blog.mozilla.org/javascript/2013/11/07/efficient-float32-arithmetic-in-javascript/">文章</a>則是在講比較技術面的內容，大概看一下，應該是犧牲精確度來換取速度。本來我是覺的要真的和 native 一樣快不太可能，不過看到新的 benchmark 結果，覺的這天或許不會太久就會到來吧。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000781" baseName="ipad-air">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-12-21</b:date>
				<b:time>22:06:51</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>iPad Air</b:title>
			<b:content>
				<b:summary> 前陣子入手的 iPad Air 真是很讓人滿意，歷代最輕，更好的螢幕，這些大家都知道的部份就不用說了，所以我要來說的是 smart cover 的部份。這次隨著 iPad 尺寸的改變，也推出了新版的 smart cover，針對之前的使用者回報做了許多的改進，官方有說到的就是和 iPad 接觸連接的地方有加上保護層，不會像以前一樣刮傷 iPad 表面，另外我還發現兩點改進比較少人講到。 這次發售前就已經可以發現，新版的 smart cover 的折線少了一條變成只有兩條，以前有三條四面，然後可以組成一個可以固定住的三角形，不過新版的只有三面，照理說三角形會不能固定，所以發表時我就開始很好奇會怎樣讓三角形固定，結果蘋果是用磁鐵來讓三角形固定住，真的是沒想到可以在邊邊還加磁鐵啊。 另外一個則是如果把 smart cover 翻到 iPad 後面，在主機的後面也有隱藏的磁鐵來幫你把 smart cover 定位好，說定位不是固定其實是因為雖然有磁鐵，但是這邊用的比較弱，像照片那樣其實很容易掉下來，但是手拿時好拿很多，也比較不會因為長期這樣拿而讓 smart cover 的轉軸那邊變形。 我覺的這些改進雖然小，但是卻可以表現出蘋果確實有在根據使用者習慣來改進產品，感覺不錯。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11453059264/" title="iPad Air by othree, on Flickr"><img src="//farm8.staticflickr.com/7331/11453059264_69bdb81298_b.jpg" width="1024" height="683" alt="iPad Air" src-1="(max-width: 768px)  //farm8.staticflickr.com/7331/11453059264_69bdb81298.jpg 1x, //farm8.staticflickr.com/7331/11453059264_69bdb81298_b.jpg 2x" src-2="//farm8.staticflickr.com/7331/11453059264_c8c4363402_k.jpg 2x" /></a></p>

<p>前陣子入手的 iPad Air 真是很讓人滿意，歷代最輕，更好的螢幕，這些大家都知道的部份就不用說了，所以我要來說的是 smart cover 的部份。這次隨著 iPad 尺寸的改變，也推出了新版的 smart cover，針對之前的使用者回報做了許多的改進，官方有說到的就是和 iPad 接觸連接的地方有加上保護層，不會像以前一樣刮傷 iPad 表面，另外我還發現兩點改進比較少人講到。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11452986475/" title="iPad Air by othree, on Flickr"><img src="//farm8.staticflickr.com/7449/11452986475_ca2f9dcf9c_b.jpg" width="1024" height="683" alt="iPad Air" src-1="(max-width: 768px)  //farm8.staticflickr.com/7449/11452986475_ca2f9dcf9c.jpg 1x, //farm8.staticflickr.com/7449/11452986475_ca2f9dcf9c_b.jpg 2x" src-2="//farm8.staticflickr.com/7449/11452986475_12bddee1a9_k.jpg 2x" /></a></p>

<p>這次發售前就已經可以發現，新版的 smart cover 的折線少了一條變成只有兩條，以前有三條四面，然後可以組成一個可以固定住的三角形，不過新版的只有三面，照理說三角形會不能固定，所以發表時我就開始很好奇會怎樣讓三角形固定，結果蘋果是用磁鐵來讓三角形固定住，真的是沒想到可以在邊邊還加磁鐵啊。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11478998005/" title="iPad Air smart cover by othree, on Flickr"><img src="//farm4.staticflickr.com/3772/11478998005_4ea7cae18c_b.jpg" width="1024" height="683" alt="iPad Air smart cover" src-1="(max-width: 768px)  //farm4.staticflickr.com/3772/11478998005_4ea7cae18c.jpg 1x, //farm4.staticflickr.com/3772/11478998005_4ea7cae18c_b.jpg 2x" src-2="//farm4.staticflickr.com/3772/11478998005_68fce9a600_k.jpg 2x" /></a></p>

<p>另外一個則是如果把 smart cover 翻到 iPad 後面，在主機的後面也有隱藏的磁鐵來幫你把 smart cover 定位好，說定位不是固定其實是因為雖然有磁鐵，但是這邊用的比較弱，像照片那樣其實很容易掉下來，但是手拿時好拿很多，也比較不會因為長期這樣拿而讓 smart cover 的轉軸那邊變形。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11479017524/" title="iPad Air smart cover by othree, on Flickr"><img src="//farm4.staticflickr.com/3690/11479017524_4a81b2693e_b.jpg" width="1024" height="683" alt="iPad Air smart cover" src-1="(max-width: 768px)  //farm4.staticflickr.com/3690/11479017524_4a81b2693e.jpg 1x, //farm4.staticflickr.com/3690/11479017524_4a81b2693e_b.jpg 2x" src-2="//farm4.staticflickr.com/3690/11479017524_53b6672b6d_k.jpg 2x" /></a></p>

<p>我覺的這些改進雖然小，但是卻可以表現出蘋果確實有在根據使用者習慣來改進產品，感覺不錯。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000780" baseName="javascript-promise">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-12-21</b:date>
				<b:time>00:13:01</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>JavaScript Promise</b:title>
			<b:content>
				<b:summary>最近 JavaScript 圈很熱的一則消息就是要有原生的 Promise 了，不過這個時間點再來介紹 Promise 物件好像有點重複且不必要了，所以想來講一下標準這部份的發展。 在繼續下去前要先作些名詞統一，因為實際上 spec 用的名詞和 jQuery 用的不太一樣，首先是 promise、deferred 甚至是 future 在這邊其實都是同義詞，而 fulfill 則是 jQuery 的 resolve 那樣的動作，reject 就沒有不一樣詞彙，最後是 thenable，代表的是可以丟進 Promise 裡一起 chaining 的物件，只要有定義 then function 就可以算了。 之前的文章也有提過，JavaScript 領域的 Promise 基本上是 jQuery Deferred 實作後才開始受到廣為注目，而 jQuery 實作的說是基於...</b:summary>
				<b:mainContent><p>最近 JavaScript 圈很熱的一則<a href="http://www.html5rocks.com/en/tutorials/es6/promises/">消息</a>就是要有原生的 Promise 了，不過這個時間點再來介紹 Promise 物件好像有點重複且不必要了，所以想來講一下標準這部份的發展。</p>

<p>在繼續下去前要先作些名詞統一，因為實際上 spec 用的名詞和 jQuery 用的不太一樣，首先是 promise、deferred 甚至是 future 在這邊其實都是同義詞，而 fulfill 則是 jQuery 的 resolve 那樣的動作，reject 就沒有不一樣詞彙，最後是 thenable，代表的是可以丟進 Promise 裡一起 chaining 的物件，只要有定義 then function 就可以算了。</p>

<p>之前的文章也有提過，JavaScript 領域的 Promise 基本上是 jQuery Deferred 實作後才開始受到廣為注目，而 jQuery 實作的說是基於 CommonJS <a href="http://wiki.commonjs.org/wiki/Promises">Promise/A</a> 這個標準，不過其實去看 Promise/A 會發現他內容根本就很少，不知道怎麼和 jQuery Deferred 扯上邊的，最近才了解，Promise/A 其實只有最基本的 Promise 的功能定義，而它的定義就只有說有個值未來會拿到，然後你要給他 <code>then</code> 這個 method。</p>

<p>而其它像是怎樣 fulfill，有沒有 <code>when</code> 那種功能之類的，都沒有定義，完全就是個自由發揮，所以 jQuery 的實作才會看起來和 Promise/A 比起來差距這麼多，不過更糟的是，第一版的 jQuery Deferred 卻還把 then 實作錯了，在 spec 中描述 then 的部份的第二段文字：</p>

<pre><code>This function should return a new promise that is fulfilled when the given fulfilledHandler or errorHandler callback is finished. This allows promise operations to be chained together. The value returned from the callback handler is the fulfillment value for the returned promise. If the callback throws an error, the returned promise will be moved to failed state.
</code></pre>

<p>這邊其實是在說 then 要回傳一個新的 promise 物件，然後你的 Promise 才會有 chaining 的特性，在 jQuery 一開始的版本，這個特性其實是要利用 <code>pipe</code> 來達成而不是 <code>then</code> 的，我想這也是後來為什麼 jQuery Deferred 把 then 的行為改成 pipe 的行為的原因，不過即使如此， jQuery 的 API 還是和 Promise/A 有些差距就是了，說來尷尬，Promise/A 只規範了 then，結果把 Promise 發揚光大的 jQuery 實作卻把 then 做錯了。</p>

<p>由於 Promise/A 只有描述行為，而不是詳細的實作，於是就有了 <a href="http://promises-aplus.github.io/promises-spec/">Promise/A+</a>，這個 spec 不是 CommonJS 的 spec，而是由一群人自主發起的，把 Promise/A 裡面所缺的詳細規範補齊，像是 Promise fulfill 時要怎樣處理之類的，定義得很詳細，這份標準完全沒宣告著作權，用的是 CC0，像 <a href="https://github.com/tildeio/rsvp.js">rsvp.js</a> 和 <a href="https://github.com/kriskowal/q">Q</a> 用的就是 Promise/A+ 標準來實作，不過 Promise/A+ 還是只有定義 then 的部份，怎樣 fulfill，怎樣 reject 部分的 API 還是沒碰，所以不同的實作都還是會有些差異。其實 Promise/A+ 組織的 github 帳號上可以看到有關於這部份的<a href="https://github.com/promises-aplus/resolvers-spec">討論</a>，雖然是沒寫出任何草案，我想應該就是直接進了 TC39 的 <a href="https://github.com/domenic/promises-unwrapping">Promise spec</a> 了吧，畢竟好像編輯有重複的<a href="https://twitter.com/domenic">人</a>。</p>

<p>TC39 的 Promise 就和 Promise/A+ 的差不多一樣，fulfill 和 reject 的 API 設計就是用他們討論時的其中一個選項，結果是和 rsvp.js 的時作比較接近，fulfill 和 reject function 是在 promise 物件的建構時給的 callback 裡面才會拿到，和 jQuery Deferred 物件可以從外面來 resolve/reject 的設計不一樣：</p>

<pre><code>new Promise(function (fulfill, reject, progress) {
    // blah....
});
</code></pre>

<p>我對於 JavaScript 原生要支援 Promise 這件事是非常樂觀看待啦，畢竟常常只想要它又不想要 jQuery 或是另外引入其他 Library，以後原生支援就省事很多了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000779" baseName="accessibility_in_us">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-12-10</b:date>
				<b:time>20:49:02</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>Accessibility in US</b:title>
			<b:content>
				<b:summary> 這次去美國因為有人受傷，讓我體會到美國的無障礙設施真的是完善很多，而且很早就開始弄了，當然有很多情形是他們地很大，要對輪椅友善相對簡單，像是 Mozilla 舊金山辦公室，前身是間酒館，旁邊入口處都有給輪椅上下用的電梯。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/10321024516/" title="Mozilla San Francisco by othree, on Flickr"><img src="//farm4.staticflickr.com/3683/10321024516_32e0e491b0_b.jpg" width="683" height="1024" alt="Mozilla San Francisco" src-1="(max-width: 768px)  //farm4.staticflickr.com/3683/10321024516_32e0e491b0.jpg 1x, //farm4.staticflickr.com/3683/10321024516_32e0e491b0_b.jpg 2x" src-2="//farm4.staticflickr.com/3683/10321024516_99f1e526ab_k.jpg 2x" /></a></p>

<p>這次去美國因為有人受傷，讓我體會到美國的無障礙設施真的是完善很多，而且很早就開始弄了，當然有很多情形是他們地很大，要對輪椅友善相對簡單，像是 Mozilla 舊金山辦公室，前身是間酒館，旁邊入口處都有給輪椅上下用的電梯。</p>
</b:mainContent>
				<b:extendContent><p>在舊金山似乎所有的公車都可以讓輪椅上下，雖然沒搭到公車，不過有搭這種輕軌電車：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/10320984554/" title="San Francisco by othree, on Flickr"><img src="//farm6.staticflickr.com/5545/10320984554_c5c03d7a0a_b.jpg" width="1024" height="683" alt="San Francisco" src-1="(max-width: 768px)  //farm6.staticflickr.com/5545/10320984554_c5c03d7a0a.jpg 1x, //farm6.staticflickr.com/5545/10320984554_c5c03d7a0a_b.jpg 2x" src-2="//farm6.staticflickr.com/5545/10320984554_4484805db9_k.jpg 2x" /></a></p>

<p>一樣可以讓輪椅上下車：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/10321009585/" title="San Francisco by othree, on Flickr"><img src="//farm4.staticflickr.com/3712/10321009585_303e7f3c12_b.jpg" width="1024" height="683" alt="San Francisco" src-1="(max-width: 768px)  //farm4.staticflickr.com/3712/10321009585_303e7f3c12.jpg 1x, //farm4.staticflickr.com/3712/10321009585_303e7f3c12_b.jpg 2x" src-2="//farm4.staticflickr.com/3712/10321009585_5db07ecaea_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/milkway_gdh/10374452826/" title="R0022113 by 極地狐, on Flickr"><img src="//farm8.staticflickr.com/7354/10374452826_bfddf5db6f_b.jpg" width="1024" height="768" alt="R0022113" src-1="(max-width: 768px)  //farm8.staticflickr.com/7354/10374452826_bfddf5db6f.jpg 1x, //farm8.staticflickr.com/7354/10374452826_bfddf5db6f_b.jpg 2x" src-2="//farm8.staticflickr.com/7354/10374452826_a49329f54c_k.jpg 2x" /></a></p>

<p>另外在 Costco 他們提供給行動不便會員的是有購物籃的電動車：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/milkway_gdh/10373701944/" title="San Fransico by 極地狐, on Flickr"><img src="//farm8.staticflickr.com/7440/10373701944_7439a62b24_b.jpg" width="1024" height="768" alt="San Fransico" src-1="(max-width: 768px)  //farm8.staticflickr.com/7440/10373701944_7439a62b24.jpg 1x, //farm8.staticflickr.com/7440/10373701944_7439a62b24_b.jpg 2x" src-2="//farm8.staticflickr.com/7440/10373701944_ddb19c35a6_k.jpg 2x" /></a></p>

<p>在環球影城 Universal 也是備受禮遇，和柯博文拍照不用排隊：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/10353215904/" title="Universal by othree, on Flickr"><img src="//farm8.staticflickr.com/7408/10353215904_3252d737fd_b.jpg" width="1024" height="683" alt="Universal" src-1="(max-width: 768px)  //farm8.staticflickr.com/7408/10353215904_3252d737fd.jpg 1x, //farm8.staticflickr.com/7408/10353215904_3252d737fd_b.jpg 2x" src-2="//farm8.staticflickr.com/7408/10353215904_3a5f8bf6b5_k.jpg 2x" /></a></p>

<p>所有遊樂設施的通路也都沒階梯，輪椅通行無阻：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/10353214124/" title="Universal by othree, on Flickr"><img src="//farm4.staticflickr.com/3779/10353214124_6c21c43259_b.jpg" width="1024" height="683" alt="Universal" src-1="(max-width: 768px)  //farm4.staticflickr.com/3779/10353214124_6c21c43259.jpg 1x, //farm4.staticflickr.com/3779/10353214124_6c21c43259_b.jpg 2x" src-2="//farm4.staticflickr.com/3779/10353214124_6c543e859a_k.jpg 2x" /></a></p>

<p>另外在 Outlet 時，去借輪椅時順便問一下，這樣我們可以停殘障車位嘛？結果他說因為我們沒有殘障停車證，要是停的話還是會收到罰單，這點我覺得很有趣，因為 Outlet 的停車場應該算是私人的地方，但是美國那邊警察顯然還是可以進來開這種違規單，相較之下台灣的警察對於這種私人領域的交通違規似乎是很沒有力。</p>

<p>其實以上只有講到行動不便需要輪椅的人，講到無障礙其實是有很多種狀況的，本來也沒繼續去看其他不同殘疾的人有沒有一樣友善的環境。回國後我看到一篇文章：<a href="http://disable.yam.org.tw/node/4053">聾人的資訊平權(一)</a>，講到聽障在美國和在台灣的處境差異，還蠻意外手語在美國是第三大外語，而且美國這麼大只有<a href="http://en.wikipedia.org/wiki/American_Sign_Language">一種</a>手語系統，小小的台灣不知道為什有三種的樣子，不過總之，美國在這方面真的是比我們完善很多，也已經行之有年，難怪美國 1986 就提出 <a href="http://www.section508.gov/">Section 508</a>，台灣現狀就...不說也罷了。</p>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000778" baseName="mutation-observer">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-12-08</b:date>
				<b:time>21:28:13</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Mutation Observer</b:title>
			<b:content>
				<b:summary>DOM Level 4 裡面提出了一個新的 DOM Mutation 的對應機制，叫做 Mutation Observer，顧名思義，它是 observer pattern 的一種，和以前的 Mutation Event 比起來有不少優點，現在大家也都建議使用 Mutation Obeserver 而不要用 Mutation Events 了。主要的差異是： Observer 是非同步的，效能比較好 DOM change 整理成 mutation record 給你 可以察看所有的 DOM 變動，也可以只注意想要的變動 這邊要先解釋第一點，可能會有人覺得 Mutation Event 也是非同步的，不過實際上，在 event callback 的 function...</b:summary>
				<b:mainContent><p><a href="https://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#mutation-observers">DOM Level 4</a> 裡面提出了一個新的 DOM Mutation 的對應機制，叫做 Mutation Observer，顧名思義，它是 observer pattern 的一種，和以前的 <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-mutationevents">Mutation Event</a> 比起來有不少優點，現在大家也都建議使用 Mutation Obeserver 而不要用 Mutation Events 了。主要的差異是：</p>

<ol>
<li>Observer 是非同步的，效能比較好</li>
<li>DOM change 整理成 mutation record 給你</li>
<li>可以察看所有的 DOM 變動，也可以只注意想要的變動</li>
</ol>

<p>這邊要先解釋第一點，可能會有人覺得 Mutation Event 也是非同步的，不過實際上，在 event callback 的 function call 內，整個算是一個同步的執行 process，也就是說一個 mutation event 發生後，一定會執行對應的 event callback，而且開始執行後中間不會插入其他的東西，這樣的行為有個缺點就是，如果我要在一個 function process 中一口氣砍掉 100 個節點，然後又有綁 mutation event 來作對應的處理，不過如果這個對應的處理動作可以等到最後在執行就好的話，用 Mutation Event 就會被迫多執行 99 次。但是 Mutation Observer 則是非同步的機制，就是不會你的 DOM 有一點變動就會引發它去執行 callback，而是等你的 function process 結束，timer 空出來時才會去檢查，然後一口氣把所有變動整理好丟到 callback 裡面。</p>

<p>目前<a href="http://caniuse.com/#feat=mutationobserver">支援</a>的程度也還不錯，Mutation Observer 用起來也不難，只是它就真的是一個獨立的觀察者物件，剛開始看到可能會不太習慣，可以參考 Dev.Opera 的 <a href="http://dev.opera.com/articles/view/mutation-observers-tutorial/">Getting to know mutation observers</a> 這篇文章，講的蠻詳細，包括怎樣偵測瀏覽器有沒有支援，如果是沒有支援的瀏覽器，一是可以 fallback 到 Mutation Event 做事，另一個則是可以用 Polymer 的 Mutation Observer <a href="https://github.com/Polymer/MutationObservers">polyfill</a>，底層也是用 Mutation Event 來達成的就是。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

	</b:entries>
</b:blog>
