<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>s</b:listType>
			<b:listData listID="000864" baseName="ssh-agent-forward">SSH Agent Forward</b:listData>

			<b:previous>
				<b:mTitle>九州鐵道</b:mTitle>
				<b:mDate>2016-04-05</b:mDate>
				<b:mBase>kyushu-rail</b:mBase>
			</b:previous>


			<b:next>
				<b:mTitle>Pure.css</b:mTitle>
				<b:mDate>2016-04-08</b:mDate>
				<b:mBase>purecss</b:mBase>
			</b:next>

		</b:entriesMeta>
		<b:entry entryID="000864" baseName="ssh-agent-forward">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2016-04-05</b:date>
				<b:time>22:22:39</b:time>
			</b:datetime>
			<b:category>server</b:category>

			<b:CommentsAccepted>0</b:CommentsAccepted>


			<b:PingsAccepted>0</b:PingsAccepted>

			<b:title>SSH Agent Forward</b:title>
			<b:content>
				<b:summary> 最近對於 blog 的另外一個改動就是檔案權限的修改，我用的 Blog 系統是 MovableType，它的其中一個特色就是會產生好靜態的檔案，而這些檔案其實我都有丟上 Github 和 Bitbucket 備份，以前我基本上都用 root 來做這些事情，所以沒有權限問題，不過這次重灌後想順便把這問題處理一下，所以做了一番研究，首先在 ArchLinux 上，預設給 HTTP 等相關服務例如 nginx、php 等用的帳號是 http，所以我希望讓這些檔案的 owner 就是 http，一來可以確保所有的網路服務需要這些檔案時，都可以正確的存取，因為我嘗試過用 group 來設定權限共有，不過結果不太順利；二來 MovableType 產生的檔案 owner 也都是 http，可以保持一致性，也不用常常在那邊改檔案的 owner。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26226715966/" title="少年バット by othree, on Flickr"><img src="https://farm2.staticflickr.com/1544/26226715966_bcd656f05b_b.jpg" width="1024" height="576" alt="少年バット" srcset="https://farm2.staticflickr.com/1544/26226715966_bcd656f05b_b.jpg 1024w, https://farm2.staticflickr.com/1544/26226715966_1afbf9905d_h.jpg 1600w" /></a></p>

<p>最近對於 blog 的另外一個改動就是檔案權限的修改，我用的 Blog 系統是 MovableType，它的其中一個特色就是會產生好靜態的檔案，而這些檔案其實我都有丟上 Github 和 Bitbucket 備份，以前我基本上都用 root 來做這些事情，所以沒有權限問題，不過這次重灌後想順便把這問題處理一下，所以做了一番研究，首先在 ArchLinux 上，預設給 HTTP 等相關服務例如 nginx、php 等用的帳號是 <strong>http</strong>，所以我希望讓這些檔案的 owner 就是 http，一來可以確保所有的網路服務需要這些檔案時，都可以正確的存取，因為我嘗試過用 group 來設定權限共有，不過結果不太順利；二來 MovableType 產生的檔案 owner 也都是 http，可以保持一致性，也不用常常在那邊改檔案的 owner。</p>
</b:mainContent>
				<b:extendContent><p>不過 http 這個帳號是沒有 shell 的，也就是不可以用這個帳號登入，當然會這樣預設也是安全性的考量，我並不想改掉他，所以第一個遇到的問題就是，我要怎樣用 http 帳號來執行指令，像是 <code>git commit</code> 之類的，研究一陣子之後，發現可以用 <code>sudo</code> 來辦到：</p>

<pre><code>sudo -u http -s /bin/sh -c "git commit"
</code></pre>

<p>其中 <code>-u</code> 是設定要換到那個帳號， <code>-s</code> 就是關鍵的指定 shell 了，最後的 <code>-c</code> 則是要執行的指令，如果加上這個設定則不會真的換過去該帳號，而是只是用該帳號執行一次指令而已，解決第一個問題後，馬上來的就是第二個問題了，要 <code>git push</code> 時，要怎麼使用有權限的 ssh private key，最簡單的方法就是丟到 http 帳號的 home 目錄下，不過我覺得這不太安全，所以想著要用其他方法來把 key 傳過去，當然把其他帳號的 key 的檔案權限調寬鬆並不可行，權限不對的 key 會無法使用，找到唯一比較接近的設計就是 <a href="https://ihower.tw/blog/archives/7837">SSH Agent Forward</a> 了，可以把本機的 ssh key pair 帶上遠端主機，然後就可以從遠端主機利用這個帶上去的 key 連線到其他地方，使用方法很簡單，只要在連上遠端主機的時候，多加一個 <code>-A</code> 的參數就可以了：</p>

<pre><code>ssh -A user@othree.net
</code></pre>

<p>或是修改 <code>.ssh/config</code> 的設定：</p>

<pre><code>Host othree
  HostName othree.net
  ForwardAgent yes
</code></pre>

<p>不過可能會需要先把 key 加進去可以 forward 的清單中：</p>

<pre><code>ssh-add
</code></pre>

<p>然後連上遠端主機之後，遠端的 login session 就會多一個環境變數 <code>$SSH_AUTH_SOCK</code>，印出來看內容會像是：</p>

<pre><code> /tmp/ssh-7UJdnvSdy0/agent.18493
</code></pre>

<p>實際上是個檔案路徑，指到一個 unix socket 檔案，理論上 ssh 在連線時會去這邊找 key pair 然後用來做認證，不過我看 <code>ssh -vvv</code> 的時候是沒有相關訊息出現，連線是可以正確建立就是，透過 agent forward，的機制，我就可以達成某種程度的 key 共用，不過在遠端主機上要使用的帳號是個沒有 shell 也沒有密碼可以登入的帳號，這就成了另外一個問題，遠端能拿到 key 的帳號不是我要用的帳號，所以第三個問題就是我要如何讓這個 key 能夠轉移到 http 帳號下可用的狀態。</p>

<p>這個問題的<a href="http://serverfault.com/questions/442048/accessing-ssh-auth-sock-from-another-non-root-user">解決方法</a>是在 StackOverflow 上找到的，用的其實是 <a href="http://linux.vbird.org/linux_basic/0410accountmanager.php#acl_talk">ACL</a> 這套比較新的檔案權限管理機制，指令大致如下，先把 unix socket 的檔案權限用 ACL 開給 http 帳號：</p>

<pre><code>setfacl -m u:http:rw $SSH_AUTH_SOCK
setfacl -m u:http:x $(dirname $SSH_AUTH_SOCK)
</code></pre>

<p>然後 sudo 時把 <code>$SSH_AUTH_SOCK</code> 帶過去：</p>

<pre><code>sudo -u http env SSH_AUTH_SOCK=$SSH_AUTH_SOCK
</code></pre>

<p>因為 http 帳號沒有 shell，所以實際上指令會變成：</p>

<pre><code> sudo -u http -s /bin/sh -c "env SSH_AUTH_SOCK=$SSH_AUTH_SOCK git pull"
</code></pre>

<p>不過這樣執行起來有點麻煩，其實 sudo 可以設定要帶哪些環境變數過去，所以可以去修改 <code>/etc/sudoers</code> 加上一行：</p>

<pre><code>Defaults    env_keep+=SSH_AUTH_SOCK
</code></pre>

<p>然後在遠端 <strong>user</strong> 帳號下的 <code>~/.ssh/rc</code> 檔案裡面加上 facl 那兩行指令（尚未確認可行性），加上本機端設定好自動 ForwardAgent，整個流程中比較麻煩一點的就只有 sudo 那行指令而已：</p>

<pre><code> sudo -u http -s /bin/sh
</code></pre>

<p>就結果而言，這個作法的安全性反而比我本來的預期更進一步，因為我的 ssh key 就不用放上遠端主機，只要在本機端有一份就好了。</p>
</b:extendContent>
			</b:content>
			<b:comments commentCount="0">

			</b:comments>
			<b:trackbacks trackbackCount="0" trackbackURL="">

			</b:trackbacks>
		</b:entry>
	</b:entries>
</b:blog>