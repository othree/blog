<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>m</b:listType>
			<b:listData listID="2020-11">November 2020</b:listData>

			<b:previous>
				<b:mTitle>August 2020</b:mTitle>
				<b:mDate>2020/08</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>May 2021</b:mTitle>
				<b:mDate>2021/05</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000975" baseName="intrinsic-aspect-ratio-of-incomplete-image">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2020-11-29</b:date>
				<b:time>23:05:12</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>HTML 文件圖片預設寬高比</b:title>
			<b:content>
				<b:summary> 我在 2018 年有篇文章 Intrinsic Size 媒體寬高比，介紹一個標準的草案 intrinsicsize ，為什麼會需要這東西在那篇文章也有講，主要就是要搭配像是： img { max-width: 100%; height: auto; } 這種寫法非常通用，但是在圖片讀取完成前，&lt;img /&gt; 標籤的佔位會無法先知道，這會造成頁面在圖片讀取完成後瀏覽器會需要比較大的重新繪製的工作。 這幾天想起來去查了一下近況，發現竟然早早就停止發展了，caniuse 那邊 也顯示瀏覽器都把一些實驗中的支援都拿掉了，細看下去，發現 Firefox 的人當時說要開始試驗另一個比較優雅的方法，也有和 CSS WG 的人開始討論，他們當時的想法就是直接用 width 和 height 屬性來計算寬高比（aspect ratio），不過之後就都沒有標準文件相關的發展細節或連結了。 搜尋一番後，發現 Firefox 在 71 開始就已經發佈這個修改了，當時的 release note 其實有寫，而且...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50660948372/" title="Intrinsic aspect ratio of incomplete image by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50660948372_745a2dd865_b.jpg" width="1024" height="718" alt="Intrinsic aspect ratio of incomplete image" srcset="https://live.staticflickr.com/65535/50660948372_745a2dd865_b.jpg 1024w, https://live.staticflickr.com/65535/50660948372_7b5b33b5cd_h.jpg 1600w" /></a></p>
<p>我在 2018 年有篇文章 <a href="https://blog.othree.net/log/2018/09/21/intrinsic-size/">Intrinsic Size 媒體寬高比</a>，介紹一個標準的草案 <code>intrinsicsize</code> ，為什麼會需要這東西在那篇文章也有講，主要就是要搭配像是：</p>
<pre><code class="language-css">img {
  max-width: 100%;
  height: auto;
}
</code></pre>
<p>這種寫法非常通用，但是在圖片讀取完成前，<code>&lt;img /&gt;</code> 標籤的佔位會無法先知道，這會造成頁面在圖片讀取完成後瀏覽器會需要比較大的重新繪製的工作。</p>
<p>這幾天想起來去查了一下近況，發現竟然早早就停止發展了，caniuse <a href="https://caniuse.com/mdn-html_elements_img_intrinsicsize">那邊</a> 也顯示瀏覽器都把一些實驗中的支援都拿掉了，<a href="https://github.com/WICG/intrinsicsize-attribute/issues/16">細看下去</a>，發現 Firefox 的人當時說要開始試驗另一個比較優雅的方法，也有和 CSS WG 的人開始討論，他們當時的想法就是直接用 <code>width</code> 和 <code>height</code> 屬性來計算寬高比（aspect ratio），不過之後就都沒有標準文件相關的發展細節或連結了。</p>
<p>搜尋一番後，發現 Firefox 在 71 開始就已經發佈這個修改了，當時的 <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/71#CSS">release note</a> 其實有寫，而且 MDN 上還有一篇文章：<a href="https://developer.mozilla.org/en-US/docs/Web/Media/images/aspect_ratio_mapping">Mapping the width and height attributes of media container elements to their aspect-ratio</a>，也有介紹這個修改要解決的問題以及技術上是怎樣處理的，簡單一點形容就是：</p>
<pre><code class="language-css">img { 
  aspect-ratio: attr(width) / attr(height); 
}
</code></pre>
<p>不過實際上不是真的使用這條 User Agent style 來實作就是了，因為這個透過  <code>width</code> 和  <code>height</code> 計算出來的寬高比只有在圖片還沒讀取的時候會有效，圖片讀取完成後就會改成用圖片實際的尺寸來計算怎麼顯示了，所以要說它是預設的寬高比也不太正確。</p>
<p>在 CSS Image 這個 Module 的第四章：<a href="https://drafts.csswg.org/css-images/#sizing">Sizing Images and Objects in CSS</a> 中，有詳細的定義要怎樣決定圖片在繪製在網頁上時要怎樣處理，還定義了一些專有名詞：</p>
<ul>
<li><strong>Intrinsic dimensions</strong> 簡單一點形容就是圖片的原始尺寸，尺寸包含了寬（intrinsic width）、高和寬高比，不一定會全部都有，像是向量圖就只有寬高比，另外 intrinsic 中文翻譯是固有、或是根本的，所以 intrinsic dimentions 也不是真的就是圖片原始尺寸，它的文字敘述是：a preferred or natural size of the object itself。</li>
<li><strong>Specified size</strong> 使用 CSS 設定的物件大小。</li>
<li><strong>Concrete object size</strong> 根據上面兩個資訊所決定的實際上物件要繪製的大小，也就是我們眼睛所會看到的圖片呈現的大小。</li>
</ul>
<p>所以主要就是在寫怎樣計算 concrete object size 了，大概計算過程就是和各位腦袋中想的不會差距太大。不過在這個地方，有一個細節是在 CSS 文件中故意沒有講出來的，就是怎樣取得 intrinsic dimensions，CSS 文件中沒有明確的說 intrinsic width 是來自圖片標籤的 <code>width</code> 屬性，或是圖片的實際寬度（早在 CSS 2.1 就有<a href="https://www.w3.org/TR/CSS21/conform.html#intrinsic">寫出</a> CSS 文件不定義怎樣取得該數值了）。其實 HTML 圖片的 intrinsic dimensions 要怎麼取得是放在 HTML 文件的 <a href="https://html.spec.whatwg.org/multipage/rendering.html#dimRendering">15.4.3</a>，15 章都在講 rendering，15.4 則是 replaced elements，也就是圖片、影片之類的內容會整個替換掉的元素，15.4.3 最後一段的第一點是說圖片如果有抓下來的話就直接用圖片的 intrinsic aspect ratio，而第二點是這樣寫的：「If img's <code>width</code> and <code>height</code> attribute values, when parsed using the rules for parsing dimension values), are both not an error, not a percentage, and non-zero, then use   the ratio resulting from dividing the <code>width</code> attribute value   by the <code>height</code> attribute value.」這邊就明確的寫到用兩個屬性來計算 intrinsic aspect ratio 了，不過針對這個圖片讀取完成前的 intrinsic aspect ratio，並沒有定義一個專有名詞，所以可以看到 cnaiuse 用一個<a href="https://caniuse.com/mdn-html_elements_img_aspect_ratio_computed_from_attributes">複雜的文字</a>來敘述這項修改，要是我的話應該會把這個值命名為 intrinsic aspect ratio of incomplete image 之類的吧。</p>
<p>最後整理一下：</p>
<ul>
<li>圖片讀取完成前，如果有設定正確的數值的 width 和 hieght 的話，瀏覽器會先它們來計算 intrinsic aspect ratio</li>
<li>圖片讀取完成後，瀏覽器會用圖片原始的寬高比來作為 intrinsic aspect ratio</li>
<li>本來是希望能用在所有的 replaced elements，不過會造成既有網站壞掉所以目前限制在 <code>&lt;img&gt;</code> 標籤</li>
<li>以上的修改是大約是今年前半年才進入瀏覽器的</li>
</ul>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000974" baseName="scroll-margin-padding">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2020-11-25</b:date>
				<b:time>22:18:02</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>Scroll Margin/Padding</b:title>
			<b:content>
				<b:summary>這篇文章要介紹一組算是蠻新的 CSS 屬性，分別是 scroll-margin 和 scroll-padding，這兩個屬性是在 Scroll Snap Module Level 1 裡面定義的，目前主要的瀏覽器都有支援，IE 完全不支援，Safari 則是還在使用舊的非標準的屬性名稱，為什麼要介紹這兩個屬性呢？因為它除了原來 scroll-snap 微調的需求之外，還順便解決了一個存在已久的問題，也就是如果網頁的設計有固定浮動在頁面頂端的 header 時（Sticky/Fixed Header），使用 link 的 fragment 直接定位到頁面特定位置的時候，最上面一部份想顯示給訪客的內容會被 header 覆蓋到。 這個問題大概是從 Sticky Header 出現時就存在了，Stack Overflow 上就可以找到十年前的發問，以前的主要的解決方法就是讓連結的目標有看不到的高度，像是用 padding-top，比較乾淨一點是用 pseudo-element 的 :before 來把內容往下推，不過這幾個方法雖然有用，但是對我來說卻一直不是個最佳解，所以一直以來我都期待能有更漂亮的解決方案，有事沒事就會搜尋一下，然後，終於我發現了這組 CSS 屬性可以用來讓瀏覽器自己捲動到目標時有指定的偏移。 scroll-margin 是用在你想要捲動到的目標元件上，也就是有...</b:summary>
				<b:mainContent><p>這篇文章要介紹一組算是蠻新的 CSS 屬性，分別是 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin"><code>scroll-margin</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding"><code>scroll-padding</code></a>，這兩個屬性是在 <a href="https://stackoverflow.com/questions/4086107/fixed-page-header-overlaps-in-page-anchors">Scroll Snap Module Level 1</a> 裡面定義的，目前主要的瀏覽器都有<a href="https://caniuse.com/mdn-css_properties_scroll-margin">支援</a>，IE 完全不支援，Safari 則是還在使用舊的非標準的屬性名稱，為什麼要介紹這兩個屬性呢？因為它除了原來 scroll-snap 微調的需求之外，還順便解決了一個存在已久的問題，也就是如果網頁的設計有固定浮動在頁面頂端的 header 時（Sticky/Fixed Header），使用 link 的 fragment 直接定位到頁面特定位置的時候，最上面一部份想顯示給訪客的內容會被 header 覆蓋到。</p>
<p>這個問題大概是從 Sticky Header 出現時就存在了，Stack Overflow 上就可以找到<a href="https://stackoverflow.com/questions/4086107/fixed-page-header-overlaps-in-page-anchors">十年前的發問</a>，以前的主要的解決方法就是讓連結的目標有看不到的高度，像是用 <code>padding-top</code>，比較乾淨一點是用 pseudo-element 的 <code>:before</code> 來把內容往下推，不過這幾個方法雖然有用，但是對我來說卻一直不是個最佳解，所以一直以來我都期待能有更漂亮的解決方案，有事沒事就會搜尋一下，然後，終於我發現了這組 CSS 屬性可以用來讓瀏覽器自己捲動到目標時有指定的偏移。</p>
<p><code>scroll-margin</code> 是用在你想要捲動到的目標元件上，也就是有 id 的那個，像我的 blog 就是 <code>&lt;article&gt;</code> 標籤，給它加個 <code>scroll-margin-top: 56px;</code> 就可以了：</p>
<pre><code class="language-css">article {
  scroll-margin-top: 56px;
}
</code></pre>
<p><code>scroll-padding</code> 則是要用在 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Scroll_container">scroll container</a> 上的，而不是目標的父母層，舉例來說，在我這邊，沒有特別設定任何 <code>overflow</code> 的情形下，scroll container 會落在 <code>&lt;html&gt;</code> 元件上，而不是 <code>&lt;article&gt;</code> 外面的 <code>&lt;main&gt;</code>，所以設定就要改成：</p>
<pre><code class="language-css">html {
  scroll-padding-top: 56px;
}
</code></pre>
<p>這組 CSS 屬性我是今年才發現的，不過其實 CSS Trick 在去年就有文章介紹了：<a href="https://css-tricks.com/fixed-headers-on-page-links-and-overlapping-content-oh-my/">Fixed Headers, On-Page Links, and Overlapping Content, Oh My! </a>，真是太後知後覺了（其實也是因為我現在沒用 RSS reader 的關係）。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000973" baseName="realforce-r2-mac-key-mapp">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2020-11-20</b:date>
				<b:time>23:40:43</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>Realforce R2 Mac Key Mapping</b:title>
			<b:content>
				<b:summary> 換了 Realforce R2 TKL(Tenkeyless) 其實好一陣子了，本來是沒有特別要發一篇文章的，不過前陣子因故裝起了 Divvy 和 Karabiner-Elements，然後接著的一些設定和發現可以作為之後買新鍵盤的一些參考，所以還是發個一篇文章來紀錄一下。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50624884456/" title="system-preference-switch by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50624884456_79c8476838_b.jpg" intrinsicsize="1024x891" width="1024" height="891" alt="system-preference-switch" srcset="https://live.staticflickr.com/65535/50624884456_79c8476838_b.jpg 1024w, https://live.staticflickr.com/65535/50624884456_be71932787_h.jpg 1336w" /></a></p>
<p>換了 Realforce R2 TKL(Tenkeyless) 其實好一陣子了，本來是沒有特別要發一篇文章的，不過前陣子因故裝起了 <a href="https://mizage.com/divvy/">Divvy</a> 和 <a href="https://karabiner-elements.pqrs.org/">Karabiner-Elements</a>，然後接著的一些設定和發現可以作為之後買新鍵盤的一些參考，所以還是發個一篇文章來紀錄一下。</p>
</b:mainContent>
				<b:extendContent><p>Divvy 是用來調整視窗大小的付費軟體，Karabiner-Elements 則是鍵盤按鍵功能的定義軟體，是開源的，而且算是同類型軟體的佼佼者，支援到複雜的 mapping 設定，例如可以定義組合鍵送出完全不一樣的 key code。一開始的想法只是因為 Divvy 有支援 global hotkey，所以想說要設定一組給它，不過苦思不到一個適合的按鍵組合，剛好 Karabiner-Elements 有一組內建的 complex rule 就是把 <kbd>Caps Lock</kbd> 改成 <kbd>Command</kbd> + <kbd>Control</kbd> + <kbd>Option</kbd> + <kbd>Shift</kbd>，這樣就不會和任何預設的組合鍵相衝，然後我也沒在用 <kbd>Caps Lock</kbd>，所以就決定來用這個組合了。</p>
<p>然後用一陣子之後，突然發現我本來在系統偏好設定那邊有設定好的 <kbd>Alt</kbd> 當成 <kbd>Command</kbd> 和 <kbd>Windows</kbd> 鍵當成 <kbd>Option</kbd> 鍵的設定失效了，大概是因為 Karabiner-Elements 把系統設定覆蓋掉了，所以就改成用它的 Simple Modification 來做這兩個按鍵的互換。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50624138548/" title="karabiner-switch by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50624138548_9557d9789d_b.jpg" intrinsicsize="1024x586" width="1024" height="586" alt="karabiner-switch" srcset="https://live.staticflickr.com/65535/50624138548_9557d9789d_b.jpg 1024w, https://live.staticflickr.com/65535/50624138548_a31149ed34_h.jpg 1600w" /></a></p>
<p>然後又過沒多久，發現我在 VSCode 蠻常用的 <kbd>F12</kbd> 失效了，然後我才發現其實在系統偏好設定的鍵盤那邊，有個選項是「使用 F1、F2 等按鍵作為標準功能鍵」，預設應該是勾選的，沒勾選的話會變成特殊功能，也就是調整亮度、媒體音量控制等等，但是現在失效了，應該也是設定被覆蓋掉了，我就去 Karabiner-Elements 翻找一翻，在 Function keys 那邊底部有個「Use all F1, F2, etc. Keys as standard function keys」，把它勾選後就正常了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50624986862/" title="system-prefernce-function-keys by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50624986862_050714ab3d_b.jpg" intrinsicsize="1024x891" width="1024" height="891" alt="system-prefernce-function-keys" srcset="https://live.staticflickr.com/65535/50624986862_050714ab3d_b.jpg 1024w, https://live.staticflickr.com/65535/50624986862_4d5aff0687_h.jpg 1336w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50624986782/" title="karabiner-function-keys by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50624986782_46509ed75f_b.jpg" intrinsicsize="1024x586" width="1024" height="586" alt="karabiner-function-keys" srcset="https://live.staticflickr.com/65535/50624986782_46509ed75f_b.jpg 1024w, https://live.staticflickr.com/65535/50624986782_5432237a9c_h.jpg 1600w" /></a></p>
<p>然後我就想說，乾脆把 <kbd>F12</kbd> 右邊的按鍵也照蘋果的鍵盤那樣定義成 <kbd>F13</kbd>、<kbd>F14</kbd>、<kbd>F15</kbd> 吧，結果，發現 <kbd>F14</kbd> 那個中間位置的按鍵，本來是 <kbd>Num Lock</kbd> 兼 <kbd>Scroll Lock</kbd> 的按鍵，在 Realforce R2 上有硬體的功能，它同時會送出 <code>keypad_num_lock</code> 和改變鍵盤的配置，會把主要打字區一小塊改成 Keypad，結果就是這樣根本會無法正常使用，而且 R2 TKL 不像是以前的 87U 有 DIP Switch 可以把 <kbd>Num Lock</kbd> 關掉（不過外殼到是有保留那個位置），所以只好放棄 <kbd>F13</kbd> 到 <kbd>F15</kbd>，反正本來也沒特別用途就是。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50624138438/" title="realforce-r2-tkl-dip by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50624138438_314a720657_b.jpg" intrinsicsize="1024x569" width="1024" height="569" alt="realforce-r2-tkl-dip" srcset="https://live.staticflickr.com/65535/50624138438_314a720657_b.jpg 1024w, https://live.staticflickr.com/65535/50624138438_efccbffe2c_h.jpg 1600w" /></a></p>
<p>既然弄到 <kbd>F1</kbd>、<kbd>F2</kbd>，我就想到可以趁這個機會把一直很想設定起來的 global 的媒體控制快速鍵設定起來，畢竟 Mac 本來的鍵盤就有這個功能，如果是直接用筆電的鍵盤就是 <kbd>F7</kbd>、<kbd>F8</kbd>、<kbd>F9</kbd> 這幾個，然後看情況可能要用 <kbd>fn</kbd> 組合一下而已，蘋果自己的鍵盤的話就有個 <kbd>fn</kbd> 鍵，然後我就想說，Realforce R2 也有個 <kbd>Fn</kbd> 鍵，不是很方便嗎，結果才發現，那個 <kbd>Fn</kbd> 鍵只有硬體功能，像是可以 <kbd>Fn</kbd> + <kbd>F7</kbd>，然後就會硬體把 <kbd>Caps Lock</kbd> 和 <kbd>Ctrl</kbd> 互換，但是單獨按不會送出 <code>fn</code> 的 key code 給電腦！結果只能望 <kbd>Fn</kbd> 鍵興歎，看著好久之後，發現到現在 Apple 的全尺寸鍵盤，一般鍵盤 <kbd>Insert</kbd> 鍵的位置（<kbd>Delete</kbd> 上面）是 <kbd>fn</kbd> 鍵！於是我就決定從善如流，把它改過去了，反正我也沒有過幾次真的要用 Insert 的經驗。弄到這樣其實差不多了，我後來還加了一組 Spotlight 的快速鍵，用 <kbd>Caps Lock</kbd> 加 <kbd>Space</kbd>，本來預設的那組會和常用的切換上一個輸入法相衝突。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50624884566/" title="apple-full-keyboard by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50624884566_2314df07fd_b.jpg" intrinsicsize="1024x512" width="1024" height="512" alt="apple-full-keyboard" srcset="https://live.staticflickr.com/65535/50624884566_2314df07fd_b.jpg 1024w, https://live.staticflickr.com/65535/50624884566_04036e6b65_h.jpg 1600w" /></a></p>
<p>其實我中間還有去研究了一下 Realforce R2 Mac 版，它的鍵位就是根據 Mac 設計的，所以就沒有硬體 Num Lock 功能，本來右下的 <kbd>Fn</kbd> 就換成了一個特殊鍵，用來切換 F1、F2 那排按鍵是普通功能還是特殊功能，其實整體而言要是以 Mac 使用為主，應該還是買 Mac 版比較好，不過對於細節我還是有不少不滿意的地方：</p>
<ol>
<li>首先是顏色感覺不對，一開始想說哪來的銀色，後來發現他是仿照現在的 Apple Magic Keyboard 的配色，只是 Apple 的鍵帽沒有深度，整體就搭配的比較和諧，Realforce R2 Mac 版整個厚度不一樣，看起來就是有違和感，還不如模仿<a href="https://commons.wikimedia.org/wiki/File:Apple_Wireless_Keyboard_(A1016).png">前兩代全白的設計</a>；</li>
<li>右上燈號那邊太過擁擠，有點不合整體的感覺；</li>
<li><kbd>F1</kbd>、<kbd>F2</kbd> 那排還是一樣四個一組，但是會讓 <kbd>F7</kbd> 到 <kbd>F9</kbd> 預設是控制媒體，<kbd>F10</kbd> 到 <kbd>F12</kbd> 是控制音量，是三個一組，被切開感覺不太好。</li>
</ol>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50624138443/" title="realforce-r2-mac by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50624138443_c125ab0fb2_b.jpg" intrinsicsize="1024x410" width="1024" height="410" alt="realforce-r2-mac" srcset="https://live.staticflickr.com/65535/50624138443_c125ab0fb2_b.jpg 1024w, https://live.staticflickr.com/65535/50624138443_241e71a355_h.jpg 1600w" /></a></p>
<p>如果不買 Mac 版，還有一個方法就是換鍵帽，不過 Realforce 的很難找，也有賣轉 Cherry 鍵帽的轉接環，我是沒用過就是了，販賣的商品中，目前看到比較好的就是 <a href="https://kbdfans.com/collections/electrostatic-capacitive-keycaps/products/kbdfans-ec-keycaps-set">KDBFANS</a> 了吧，但是因為 R2 的空白鍵寬度是新的，所以目前買的到的組合都不支援，不過有說有在設計中了，或許之後可以買一組來換吧。</p>
</b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
