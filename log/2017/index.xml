<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>y</b:listType>
			<b:listData listID="2017">2017</b:listData>

			<b:previous>
				<b:mTitle>2016</b:mTitle>
				<b:mDate>2016</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>2018</b:mTitle>
				<b:mDate>2018</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000913" baseName="web-f2e-and-python-syntax">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-12-05</b:date>
				<b:time>18:39:38</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Web F2E 看 Python Syntax</b:title>
			<b:content>
				<b:summary> 雖然主業是 Web Front End，不過其實要搞好 Front End，後端也不可不知，所以我工作內容其實也寫 Python 寫了不少，最近終於可以跟 Flake8 相安無事，所以想來記錄一些對我來說很有趣的 Python Syntax，不全是喜歡的就是了，以下內容以 2.7 為主。 內建支援 String Formatting 第一個我覺得很棒的是，Python 內建有 String Formatting Operations 可以用，超方便的，所以我只要寫： '%d: The answer to the ultimate question of life, the universe and everything' % 42 就可以把...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/mrtopf/3681678882/" title="Bruce Eckel's keynote by MrTopf, on Flickr"><img src="https://farm3.staticflickr.com/2655/3681678882_1211d131ce_b.jpg" width="1024" height="576" alt="Bruce Eckel's keynote, " srcset="https://farm3.staticflickr.com/2655/3681678882_1211d131ce_b.jpg 1024w" /></a></p>
<p>雖然主業是 Web Front End，不過其實要搞好 Front End，後端也不可不知，所以我工作內容其實也寫 Python 寫了不少，最近終於可以跟 <a href="https://pypi.python.org/pypi/flake8">Flake8</a> 相安無事，所以想來記錄一些對我來說很有趣的 Python Syntax，不全是喜歡的就是了，以下內容以 2.7 為主。</p>
<h4>內建支援 String Formatting</h4>
<p>第一個我覺得很棒的是，Python 內建有 <a href="https://docs.python.org/2/library/stdtypes.html#string-formatting">String Formatting Operations</a> 可以用，超方便的，所以我只要寫：</p>
<pre><code class="language-python">'%d: The answer to the ultimate question of life, the universe and everything' % 42
</code></pre>
<p>就可以把 42 填進去字串裡面了，雖然我第一次看到 <code>％</code> 放最後面還以為是什麼奇妙的註解符號；傳統的 formatting 用來做翻譯字串就會發現，如果有多個變數，它們的順序在不同的語言可能有不同，傳統的 formatting 只能處理固定順序，不適合這種情景，這時候還有新的 <code>format()</code> 可以用，幫變數命名好、然後丟參數進去就可以了，例如：</p>
<pre><code class="language-python">'{author} wrote {name}'.format(author='JRR', name='TLOR')
</code></pre>
<p>雖然 Python 的 string format 很好用，不過文件寫得太高深了，所以還有人做了 <a href="https://pyformat.info/">pyformat.info</a> 這個站，收集了不少實用的範例幫助大家理解，而且仔細看過之後發現舊的格式也可以用 dict 格式丟命名變數進去。</p>
<h4>Multiline String</h4>
<p>多行字串也是我蠻喜歡的，像是要弄 template 的時候就很方便，JavaScript 一直到 ES6 的 tempalte string 才算是有內建，Python 就用三個引號框起來就可以了：</p>
<pre><code class="language-python">template_string = &quot;&quot;&quot;&lt;div&gt;
                       Wow
                     &lt;/div&gt;&quot;&quot;&quot;
</code></pre>
<p>不過很理所當然的，那些為了縮排所填入的空白，就都是真的字串內容，所以 <code>Wow</code> 前面就是有 23 個空白字元，如果字串在 class 或是 function 定義裡面，那空白就會更多，在一些使用情境下，空白數量是影響很大的，所以就會有到底該怎樣排的問題，StackOverflow 上就可以找到相關的<a href="https://stackoverflow.com/questions/2504411/proper-indentation-for-python-multiline-strings">問題</a>，還好我處理 HTML template 的話，影響不大，當然結果會造成一些多餘的資料傳輸啦。</p>
<h4>Keyword Arguments</h4>
<p>很久以前我寫過一篇 <a href="https://blog.othree.net/log/2013/06/19/options-object/">options object</a> 的文章，為的就是處理參數太多造成程式碼不好解讀的問題，沒想到 Python 可以在呼叫函數的時候，傳入參數的名稱，例如以下的函數：</p>
<pre><code class="language-python">def func(a, b, c, d):
    return a + b + c + d
</code></pre>
<p>呼叫的時候可以分別說明每個參數的 key 和 value 對應關係：</p>
<pre><code class="language-python">func(a=1, b=2, c=3, d=4)
</code></pre>
<p>而且也可以混用：</p>
<pre><code class="language-python">func(1, 2, c=3, d=4)
</code></pre>
<p>覺得這語法真是領先超多，當然 ECMAScript 現在可以用 destructing assignment 的語法做到類似效果，不過我覺得還是有些差距。</p>
<p>而針對 Keyword Argument 其實還有特殊的 syntax 是 <code>**kwargs</code>，其實我一開始是先看到這個語法的，想說 Python 怎麼有個很像 C++ 指標的東西，看了許久，某天終於會意到 kw 是 keyword 的意思，然後才終於理解是怎麼回事，後來查資料才知道還有 <a href="https://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/"><code>*args</code></a>，現在的 ECMAScript 的話可以用 <code>...</code> spread operator 做到。</p>
<h4>Circular Dependency</h4>
<p>恩，可以做到循環相依，第一次看到真是覺得不可思議，不過後來慢慢瞭解限制，大概也知道怎麼實際上是如何跑的了。</p>
<h4>Ternary Operator</h4>
<p>三元運算，Python 的語法真的是比較特別一點，其它語言比較常看到的是用 <code>?</code>，不過 Python 是用後置的 <code>if else</code>：</p>
<pre><code class="language-python">reality = True if isReal else False
</code></pre>
<p>其實我還蠻喜歡後置的 <code>if</code> 語句，第一次看到這種寫法是在 CoffeeScript，我很常用在一些參數特殊狀況的處理，一樣 CoffeeScript，不用後置 <code>if</code> 的時候：</p>
<pre><code class="language-coffeescript">filename = file.name

if file.hash
  filename = filename + '-' + file.hash
  
if file.ext
  filename = filename + '.' + file.ext
</code></pre>
<p>用了後置 <code>if</code> 的話可以寫成：</p>
<pre><code class="language-coffeescript">filename = file.name

filename = filename + '-' + file.hash if file.hash

filename = filename + '.' + file.ext if file.ext
</code></pre>
<p>看起來整齊許多，視覺上(?)少了一層縮排，不過 Python 的三元運算，和 CoffeeScript 的後置 <code>if</code> 語法是不一樣的東西，雖然可以用來做類似的事情，但是因為他是三元運算，所以一定要提供 <code>else</code> 區段：</p>
<pre><code class="language-python">filename = filename + '.' + file.ext if file.ext else filename
</code></pre>
<p>就比較不喜歡這樣就是了。</p>
<h4>Tuple</h4>
<p>Python 的 List 資料型態可以比做 JS 的 Array、Dict 可以比做 Object，兩種資料型態分別是使用中括號和大括號，不過在 Python 語言裡，還有一種用小括號的 Tuple 資料型態。</p>
<p>Tuple 資料型態似乎還蠻少見的，我第一次聽到這個名詞的時候是在學校學資料庫系統的時候，一筆資料稱為一個 Tuple，不知道為什麼印象很深，然後第一次看到使用 tuple 的程式碼自然是不太理解，不過還算直觀看的懂，後來不知道為什麼查到這種語法其實是一種資料型態叫 Tuple 的，意義上和資料庫系統的 Tuple 感覺還蠻像的，理解這是個資料型態之後用起來覺得順手很多，而且 Python 還蠻自由，很多地方和 List 都可以用一樣的操作，像是 <code>in</code> 運算，或是作為 function 的多個回傳值（多回傳值的函數也蠻方便的）。</p>
<h4>in 運算</h4>
<p>上面提到的 <code>in</code> 運算，用來判斷一個 List 或 Tuple 是否包含特定元素：</p>
<pre><code class="language-python">if target.stat in ('ACTIVE', 'PREMIUM')
    ok()
</code></pre>
<p>對於常在古早 JS 開發的人，真的是超羨慕的，可能有人說可以用 <code>indexOf</code> 做，雖然 JS String 的 indexOf 很早就有了，但是 Array 的 indexOf 卻是到 ES5.1 才正式進標準，IE9 之前的都不支援，所以要用他來判斷一個元素是否在一個陣列內，首先要確定你不支援 IE8 之前的瀏覽器，不過就算支援，其實程式碼也沒 <code>in</code> 運算來的漂亮，後來 ES2015 有個比較好一點的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"><code>Array.includes</code></a> 可以用就是了。</p>
<h4>Dict</h4>
<p>Dict 可以比做 JS 的 Object 比較好理解，對於這個我不能適應的有兩個地方，一是 Dict 不是 class，所以不能直接用 <code>.</code> 取屬性，一定要用 <code>[]</code> 或是內建的 <code>get()</code> ，再來就是用 <code>[]</code> 取屬性的時候，一定要 key 存在，用到不存在的 key 就會噴錯誤，如果一定要這樣操作就要改用 <code>get()</code>，get 還有一個特點是可以給 default 值，如果是複雜的結構，想要一口氣很深入就可以寫成：</p>
<pre><code class="language-python">data.get('attr1', {}).get('attr2', {}).get('attr3', None)
</code></pre>
<p>實在是有點難看，CoffeeScript 是有 Existential Operator 可以做這種多階層的取值：</p>
<pre><code class="language-coffeescript">data.attr1?.attr2?.attr3?
</code></pre>
<p>在 TC39 的草案也有類似的 <a href="https://github.com/TC39/proposal-optional-chaining">Optional Chainging</a>，這兩樣都是上一篇文章有提到的東西。</p>
<h4>Unix Timestamp</h4>
<p>內建的 datetime 似乎沒有支援直接輸出 Unix Timestamp，是說目前有需要都用 <a href="https://pendulum.eustace.io/">Pendulum</a>，還蠻好用的，API 介面也蠻直接，也有完整的時區、Period、Duration 等觀念。</p>
<h4>PEP8, Flake8</h4>
<p>文章一開始提到的 Flake8 把好幾個 code checker 包進去，包括了官方的 <a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a>、PyFlakes、pycodestyle 等，我用 Vim 的 <a href="https://github.com/vim-syntastic/syntastic">Syntastic</a> 都有支援，只要有安裝就會偵測到執行檔，然後就可以用來檢查了，一開始裝起來的時候就和第一次用 JSLint 一樣傷感情，不過兩個月過後到是還蠻適應的，其中比較和以往習慣不一樣的就是 function 參數的值，不論是定義時的 default value 還是呼叫時的 keyword argument，<code>=</code> 的左右兩邊都是不加空白的，例如：</p>
<pre><code class="language-python">def hello(name='John'):
  return 'Hello ' + name

hello(name='Hancock')
</code></pre>
<p>另外就是特殊情況需要循環相依，或是 import 但是不使用時，會需要關閉一些檢查，可以在該行末端加上註解關閉特定項目：</p>
<pre><code class="language-python">import pages  # noqa: F401
</code></pre>
<p>錯誤的編號可以參考 Flake8 的<a href="http://flake8.pycqa.org/en/latest/user/error-codes.html">文件</a>。</p>
<h4>Python Enhancement Proposals (PEPs)</h4>
<p>之前在研究 Joda Time 的時候，發現 Java 有個 <a href="https://jcp.org/en/jsr/all">JSR</a> (Java Specification Requests)，在找 Python 的 coding style 的時候則是發現了 <a href="https://www.python.org/dev/peps/">PEPs</a> (Python Enhancement Proposals)，不過 ECMAScript 目前是沒有類似的、完整的收集並編目各個 Proposal 文件的地方，甚至連語言本身的官網都沒有啊...XDrz</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000912" baseName="question-mark-in-es">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-11-19</b:date>
				<b:time>00:06:30</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>問號出頭天</b:title>
			<b:content>
				<b:summary> 剛剛掃了一下 TC39 新的草案，發現和 ? 相關的還不少，稍微來介紹一下這幾個很初期的草案吧：首先第一個是已經見過一陣子的 Optional Chaining，第一次看到這種語法是 CoffeeScript，在 CoffeeScript 現在是叫 Existential Operator，不知道是不是以前就這個名字，對付多階層的物件特別好用： let zip = lottery.drawWinner?.()?.address?.zipcode 可以像這樣用，中間任何一層回傳 falsy value 就會直接把值給 zip 變數，而不會繼續往下找，不會造成 Script 執行錯誤，不過目前看起來對於 function 的處理比 CoffeeScript 麻煩一點，要寫成 ?.()，而不是 ?()，其實我覺得也比較醜一些。 第二個是 Nullish Coalescing，這是正港的用來設定變數 default 值用的，以前通常的作法是用 ||： function (option =...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37786653964/" title="Mario by othree, on Flickr"><img src="https://farm5.staticflickr.com/4517/37786653964_3a7bc2cef2_b.jpg" width="1024" height="576" alt="Mario" srcset="https://farm5.staticflickr.com/4517/37786653964_3a7bc2cef2_b.jpg 1024w, https://farm5.staticflickr.com/4517/37786653964_44fc722b32_h.jpg 1600w" /></a></p>
<p>剛剛掃了一下 TC39 新的草案，發現和 <code>?</code> 相關的還不少，稍微來介紹一下這幾個很初期的草案吧：首先第一個是已經見過一陣子的 Optional Chaining，第一次看到這種語法是 <a href="http://coffeescript.org/">CoffeeScript</a>，在 CoffeeScript 現在是叫 Existential Operator，不知道是不是以前就這個名字，對付多階層的物件特別好用：</p>
<pre><code class="language-javascript">let zip = lottery.drawWinner?.()?.address?.zipcode
</code></pre>
<p>可以像這樣用，中間任何一層回傳 falsy value 就會直接把值給 zip 變數，而不會繼續往下找，不會造成 Script 執行錯誤，不過目前看起來對於 function 的處理比 CoffeeScript 麻煩一點，要寫成 <code>?.()</code>，而不是 <code>?()</code>，其實我覺得也比較醜一些。</p>
<p>第二個是 <a href="https://github.com/tc39-transfer/proposal-nullish-coalescing">Nullish Coalescing</a>，這是正港的用來設定變數 default 值用的，以前通常的作法是用 <code>||</code>：</p>
<pre><code class="language-javascript">function (option = {}) {
  let quick = option.quick || true;
}
</code></pre>
<p>在上面的範例中，<code>quick</code> 預期是 boolean 值，可能是 <code>true</code> 或 <code>flase</code> ，預期的預設值是 <code>true</code>，不過這樣寫其實，如果傳 <code>false</code> 進來會誤判，結果會變成用預設值的 <code>true</code>，新的 Nullish Coalescing 就是要來解決這個問題，把 <code>||</code> 換成 <code>??</code>：</p>
<pre><code class="language-javascript">function (option = {}) {
  let quick = option.quick ?? true;
}
</code></pre>
<p>這樣傳 <code>false</code> 時就不會被當成沒傳值，只有 <code>null</code> 和 <code>undefined</code> 才會用預設值，其實判斷的方式和第一個 Optional Chaining 一樣。</p>
<p>第三個是 <a href="https://github.com/rbuckton/proposal-partial-application">Partial Application</a>，其實就是字面上的意思，不過是從 syntax 上就支援 partial 執行 function：</p>
<pre><code class="language-javascript">function add(x, y) { return x + y; }

const addOne = add(1, ?); // apply from the left
addOne(2); // 3
</code></pre>
<p>我覺得用 <code>?</code> 這招還蠻漂亮的，雖然我還不太有機會用到 就是。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000911" baseName="naming-cases">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-11-16</b:date>
				<b:time>12:31:26</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Naming Cases</b:title>
			<b:content>
				<b:summary> 整理一下各種多單字 identifier 命名慣例（規則）： CamelCase CamelCase 應該是最有名的了，單字的首字母大寫，其它字母小寫，然後其實還分為 UpperCamelCase 和 lowerCamelCase，UpperCamelCase 是指第一個單字的首字母大寫；lowerCamelCase 則相反，其中 UpperCamelCase 又稱為 Pascal Case，因為是 Pascal 語言當中常用的命名慣例，而因為有 PascalCase 這名稱代表 UpperCamelCase，所以也很多人直接用 camelCase 代表 lowerCamelCase；此外，也有 Dromedary Case 的講法，不過現在應該只要只剩下 Pascal Case 和 Camel Case 的說法比較有人用吧，Lower Camel Case 在 JavaScript Standard 裡面是命名變數用、Upper Camel...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/renaud44/5286648292/" title="Camel by Réno, on Flickr"><img src="https://farm6.staticflickr.com/5009/5286648292_f03dd7c973_b.jpg" width="1024" height="731" alt="Camel, " srcset="https://farm6.staticflickr.com/5009/5286648292_f03dd7c973_b.jpg 1024w" /></a></p>
<p>整理一下各種多單字 identifier <a href="https://www.itworld.com/article/2833265/cloud-computing/don-t-go-into-programming-if-you-don-t-have-a-good-thesaurus.html">命名</a>慣例（規則）：</p>
<h5>CamelCase</h5>
<p>CamelCase 應該是最有名的了，單字的首字母大寫，其它字母小寫，然後其實還分為 UpperCamelCase 和 lowerCamelCase，UpperCamelCase 是指第一個單字的首字母大寫；lowerCamelCase 則相反，其中 UpperCamelCase 又稱為 Pascal Case，因為是 Pascal 語言當中常用的命名慣例，而因為有 PascalCase 這名稱代表 UpperCamelCase，所以也很多人直接用 camelCase 代表 lowerCamelCase；此外，也有 Dromedary Case 的講法，不過現在應該只要只剩下 Pascal Case 和 Camel Case 的說法比較有人用吧，Lower Camel Case 在 JavaScript Standard 裡面是命名變數用、Upper Camel Case 則是大部分語言推薦的建構函示和 Class 的命名慣例。</p>
<p>CamelCase 應該也是最早有名稱的，而且其實還有很多的別名，而除了 CamelCase 外，其它命名慣例都是有用個符號分隔單字，其中最常見到的就是 snake_case 了。</p>
<h5>snake_case</h5>
<p>snake_case 是用底線符號 <code>_</code> 做分隔，通常是全小寫，名稱應該由其外觀而來，是 Ruby 社群那<a href="https://groups.google.com/forum/#!msg/comp.lang.ruby/ra5WDzNGwGU/oe_mnvRVclUJ">邊出</a>來的，應該可以算是象形文字的一個分支。在 Python 的 PEP 8 和 <a href="http://perldoc.perl.org/perlstyle.html">perlstyle</a> 是用 snake_case 來命名 function。</p>
<h5>MACRO_CASE</h5>
<p>snake_case 的另一種形式是全大寫字母，因為 C 語言的 MACRO 使用，所以稱為 MACRO_CASE，偶爾有人稱之為 ALL_CAPS（不過其實全部大寫就可以稱為 ALL CAPS 了），也有一種說法叫 SCREAMING_SNAKE_CASE，通常是常數使用的命名慣例，另外像是 Bash 的環境變數、C 語言的 MACRO 等也是這個形式。</p>
<p>以底線為分隔的，在 perlstyle 裡面還有定義一種不常見的形式，首字母大寫加上底線分隔的 Some_Caps_Snake_Case，作為模組內的 global/static 變數，另外在 wikipedia 上有看到 Ada 語言也是用這種命名慣例，這種形式目前似乎沒有慣用的稱呼方式。</p>
<h5>lisp-case</h5>
<p>lisp-case 則是用連字號（hyphens） <code>-</code> 做分隔，也一樣通常是全小寫，和 PascalCase 一樣因為程式語言 lisp 而得名，其實大部分語言都不支援 lisp-case，因為 <code>-</code> 同時是運算符號， parse 起來會蠻有問題的，除了 lisp 外我看過支援的還有 livescript，好像都還蠻偏 functional language 的，除了程式語言外，其實 URL 的路徑很常用，雖然主要是為了 SEO 效果，另外就是 HTML、XML 裡面的 attribute、id、class 也蠻容易見到用 lisp-case 的，而除了 lisp-case 這個名字外外，還有一個也很知名的稱呼是 kebab-case，和 snake_case 一樣是外觀而來的名稱。</p>
<h5>COBOL-CASE</h5>
<p>用連字號做分隔，但是全大寫的則是叫 COBOL-CASE，一樣是從 COBOL 語言而來。</p>
<h5>Train-Case</h5>
<p>以 hyphens 為分隔的，在 wikipedia 上還有看到首字母大寫的形式叫 Train-Case，不過沒有標註名稱出處，不多人用這個名稱，不過也沒其它名稱，以後應該也只有這個名稱吧，不常在程式語言內見到，Windows Power Shell 的指令是用這種規則命名的，另外一個比較常見的地方就是 HTTP Header 的 field name 了。</p>
<p>我自己其實是最喜歡 lisp-case，編寫 HTML 的時候 id、class 我都是用 lisp-case，次之是 snake_case，偏偏 JavaScript Standard 是用 camelCase 的，其實掙扎了一陣子，不過現在已經比較習慣一點了。</p>
<p>這些不同命名規則間的轉換其實有不少工具可以協助，Ian Storm Taylor 在 NPM 上有<a href="https://github.com/ianstormtaylor/to-case">一整個系列的工具</a>，支援很多種規則的轉換，還包括了書寫用的 <a href="https://lists.w3.org/Archives/Public/www-style/2011Feb/0634.html"><strong>Title Case</strong></a>，講到這個就要提一下 CSS 裡面的 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform"><code>text-transform</code></a> 的 capitalize，其實這個屬性只處理每個單字的第一個字母，也就是說，如果你本來是全大寫的 <strong>TITLE</strong>，用 capitalize 轉換後，還是 <strong>TITLE</strong>，如果要純 CSS 方案的，其它字母轉小寫，一個單字的話勉強可以配合 <code>::first-letter</code> 來辦到，不然就是輸出到 HTML 之前要先處理過，而且，capitalize 不是 Title Case，精確的 Title Case 是不會把一些介係詞、冠詞轉大寫的，例如「I Have an Apple」裡面的 <strong>an</strong>，這問題目前就是沒有 CSS 解法，有搜尋過一下發現，沒做的<a href="https://lists.w3.org/Archives/Public/www-style/2011Feb/0634.html">主因</a>應該是因為 Title Case 幾乎只有英語用的上。</p>
<p>在 Vim 上如果要轉換一個變數名稱的命名規則，我是用 <a href="https://github.com/AndrewRadev/switch.vim">switch.vim</a> 然後加上一組自訂的轉換設定：</p>
<pre><code class="language-vim">let g:switch_custom_definitions =
    \ [
    \   {
    \     '\&lt;\(\l\)\(\l\+\(\u\l\+\)\+\)\&gt;': '\=toupper(submatch(1)) . submatch(2)',
    \     '\&lt;\(\u\l\+\)\(\u\l\+\)\+\&gt;': &quot;\\=tolower(substitute(submatch(0), '\\(\\l\\)\\(\\u\\)', '\\1_\\2', 'g'))&quot;,
    \     '\&lt;\(\l\+\)\(_\l\+\)\+\&gt;': '\U\0',
    \     '\&lt;\(\u\+\)\(_\u\+\)\+\&gt;': &quot;\\=tolower(substitute(submatch(0), '_', '-', 'g'))&quot;,
    \     '\&lt;\(\l\+\)\(-\l\+\)\+\&gt;': &quot;\\=substitute(submatch(0), '-\\(\\l\\)', '\\u\\1', 'g')&quot;,
    \   }
    \ ]
</code></pre>
<p>這組設定是 <code>MACRO_CASE</code>、<code>lisp-case</code>、<code>camelCase</code>、<code>PascalCase</code>、<code>snake_case</code> 這樣的順序循環切換，還蠻方便的，不用花大腦思考要轉成哪種規則然後下不同指令，就一直連打 <code>-</code> 就好。</p>
<p>其實一開始只是在想有多少種組合才開始查的，結果幾乎一般組合都有地方使用，只差符號分隔單字加 camelCase 的兩種形式吧，最後放一些參考連結：</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Naming_convention_(programming)#Multiple-word_identifiers">Multiple-word identifiers</a></li>
<li><a href="https://en.wikipedia.org/wiki/Naming_convention_(programming)">Naming convention (programming)</a></li>
<li><a href="https://www.reddit.com/r/learnprogramming/comments/3wcne1/where_does_the_term_kebabcase_come_from/">Where does the term kebab-case come from</a></li>
<li><a href="https://en.wikipedia.org/wiki/Letter_case">Letter case</a></li>
</ul>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000910" baseName="apple-phone-support">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-10-23</b:date>
				<b:time>23:02:46</b:time>
			</b:datetime>
			<b:category>mac</b:category>
			<b:title>Apple 電話支援</b:title>
			<b:content>
				<b:summary> 前陣子蘋果發表 iPhone 8 和 X 後，我趁機幫我爸買了 iPhone 7，因為是我爸第一次用 iPhone，所以就由我幫忙設定，想不到遇上了要電話聯繫客服的狀況，因為用了蘋果產品這麼久，還是第一次聯繫客服，所以特別紀錄一下。 遇到的狀況是，一開始覺得我爸沒有 Apple ID，所以就直接在手機上走註冊流程，使用的是我爸一直在使用的 gmail，沒想到走到後來，發現這個帳號已經存在了，這時還想說是不是以前幫他裝 iTunes 時有註冊過，不過嘗試登入都沒辦法成功，後來走忘記密碼的流程成功進去了，沒想到，裡面的資訊都是韓文，像是姓名、地址、app store 國家、安全問題等，很像是被盜用後把資料改成自己的樣子，然後我就一個一個慢慢改回正確的資料和設定，不過即使我區域設定到台灣，語言是中文，還是有一個地方改不動，那就是安全提示問題，依然保持韓文的題目，而因為我不知道問題的答案是什麼，也沒辦法重設，也無法開啟兩步驟驗證，據蘋果文件說明，開啟兩步驟驗證就會停用安全提示問題，而一個月後會把之前設定的安全提示問題刪除。 遇到這種狀況也只能聯絡客服了，一開始尋找入口不會太困難，不過蘋果不是直接留個號碼給你撥，而是有個表單請你填寫，他會打電話給你，一般看到這種做法的都會覺得是不是要很久以後才會有回應，不過其實完全相反，他在表單上就寫了大約兩分鐘後就會有人撥電話過去給你，而且這是真的！除了致電迅速外，蘋果這種做法其實還有兩個優點，一個是對客戶來說，不用電話費，另一個則是對蘋果來說，他們還是掌握主控權的。 接通電話之後，第一位服務人員無法處理這個狀況，跟他溝通一下後他轉給專門負責帳號的人員，請我等一下，然後我等了沒多久就換第二位接手，他接手時已經大概知道我的問題，不過我還是有把細節又交待一次，交待完之後，對方就表達了說叫我們不用擔心，一定會盡力幫我們解決問題，他本來有想請我做一些操作，不過知道我幾乎都做過後，也沒有要求我再嘗試一次，這時候他有提到最簡單的方法就是建立一個新的 Apple ID，不過我還是不太希望這樣，一時也沒別的信箱適合（那時候忘了 gmail 有 + 的別名可以用，後來想到時決定當最後備案），他二話不說，就要幫忙把我們的問題轉給主管，這次他有先說因為假日的關係要等比較久，結果真的等了蠻久，等待時是用手機開擴音所以還好不會太累，話筒端就播著蘋果風格的音樂，然後我也趁著這時間翻翻我爸過去收到的 Apple 的信，看一看覺得或許一開始我們沒申請過 Apple ID，而是有個韓國人申請錯帳號，然後我們收到信都是韓文也看不懂，不小心就點了連結然後帳號就開通了⋯ 等待時，前一位還有再回來關心一下，甚至他還試著幫忙翻譯了安全提示問題，想要看看會不會是我們以前設定的忘記了，這點我蠻意外的，不過因為真的沒印象所以也沒用，所以他也完全沒勉強我們測試，而且其實我已經亂測被鎖了，另外我也跟他說了目前推測可能是因為以前亂點到信件連結造呈現在的狀況。最後等了應該有半小時吧，終於等到了，這位主管的聲音聽起來和前一位差不多年輕，有點意外，再來就是他接電話前，已經跟前面那位交接好我的問題了，所以我不用再重新說明一次，而且是最新的狀況，最後這段過程我有點忘記，不過基本上就是，他會找工程師看有什麼法可以處理這個狀況，然後會再跟我聯絡，有約好傍晚在撥，不過沒隔一個小時他就又回撥了，他要請我收信然後回報信件內的六碼 code，不過我剛好在騎車移動，就還是請他六點在撥，後來收到的那個六碼 code 是高強度的，英數大小寫有別，看起來是個特殊的流程給 Apple Support 團隊確認帳號信箱所有權用的，回報確認之後，他就說要請我們等兩三天時間。 然後過了兩三天後，我爸接到電話說帳號已經可以使用了，我就去測試了一下，結果變無法登入，所以我推測是帳號砍掉了，測試過後就發現真的變成可以註冊的狀態，就趕快把他重新註冊起來，中間這段時間，我猜是去翻 archive 起來的使用者...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34475448783/" title="Apple Store Taipei 101 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4198/34475448783_fc97f7bfaa_b.jpg" width="1024" height="683" alt="Apple Store Taipei 101, " srcset="https://farm5.staticflickr.com/4198/34475448783_fc97f7bfaa_b.jpg 1024w, https://farm5.staticflickr.com/4198/34475448783_2de7ddb630_h.jpg 1600w" /></a></p>
<p>前陣子蘋果發表 iPhone 8 和 X 後，我趁機幫我爸買了 iPhone 7，因為是我爸第一次用 iPhone，所以就由我幫忙設定，想不到遇上了要電話聯繫客服的狀況，因為用了蘋果產品這麼久，還是第一次聯繫客服，所以特別紀錄一下。</p>
<p>遇到的狀況是，一開始覺得我爸沒有 Apple ID，所以就直接在手機上走註冊流程，使用的是我爸一直在使用的 gmail，沒想到走到後來，發現這個帳號已經存在了，這時還想說是不是以前幫他裝 iTunes 時有註冊過，不過嘗試登入都沒辦法成功，後來走忘記密碼的流程成功進去了，沒想到，裡面的資訊都是韓文，像是姓名、地址、app store 國家、安全問題等，很像是被盜用後把資料改成自己的樣子，然後我就一個一個慢慢改回正確的資料和設定，不過即使我區域設定到台灣，語言是中文，還是有一個地方改不動，那就是安全提示問題，依然保持韓文的題目，而因為我不知道問題的答案是什麼，也沒辦法重設，也無法開啟兩步驟驗證，據蘋果文件說明，開啟兩步驟驗證就會停用安全提示問題，而一個月後會把之前設定的安全提示問題刪除。</p>
<p>遇到這種狀況也只能聯絡客服了，一開始尋找入口不會太困難，不過蘋果不是直接留個號碼給你撥，而是有個表單請你填寫，他會打電話給你，一般看到這種做法的都會覺得是不是要很久以後才會有回應，不過其實完全相反，他在表單上就寫了大約兩分鐘後就會有人撥電話過去給你，而且這是真的！除了致電迅速外，蘋果這種做法其實還有兩個優點，一個是對客戶來說，不用電話費，另一個則是對蘋果來說，他們還是掌握主控權的。</p>
<p>接通電話之後，第一位服務人員無法處理這個狀況，跟他溝通一下後他轉給專門負責帳號的人員，請我等一下，然後我等了沒多久就換第二位接手，他接手時已經大概知道我的問題，不過我還是有把細節又交待一次，交待完之後，對方就表達了說叫我們不用擔心，一定會盡力幫我們解決問題，他本來有想請我做一些操作，不過知道我幾乎都做過後，也沒有要求我再嘗試一次，這時候他有提到最簡單的方法就是建立一個新的 Apple ID，不過我還是不太希望這樣，一時也沒別的信箱適合（那時候忘了 gmail 有 + 的別名可以用，後來想到時決定當最後備案），他二話不說，就要幫忙把我們的問題轉給主管，這次他有先說因為假日的關係要等比較久，結果真的等了蠻久，等待時是用手機開擴音所以還好不會太累，話筒端就播著蘋果風格的音樂，然後我也趁著這時間翻翻我爸過去收到的 Apple 的信，看一看覺得或許一開始我們沒申請過 Apple ID，而是有個韓國人申請錯帳號，然後我們收到信都是韓文也看不懂，不小心就點了連結然後帳號就開通了⋯</p>
<p>等待時，前一位還有再回來關心一下，甚至他還試著幫忙翻譯了安全提示問題，想要看看會不會是我們以前設定的忘記了，這點我蠻意外的，不過因為真的沒印象所以也沒用，所以他也完全沒勉強我們測試，而且其實我已經亂測被鎖了，另外我也跟他說了目前推測可能是因為以前亂點到信件連結造呈現在的狀況。最後等了應該有半小時吧，終於等到了，這位主管的聲音聽起來和前一位差不多年輕，有點意外，再來就是他接電話前，已經跟前面那位交接好我的問題了，所以我不用再重新說明一次，而且是最新的狀況，最後這段過程我有點忘記，不過基本上就是，他會找工程師看有什麼法可以處理這個狀況，然後會再跟我聯絡，有約好傍晚在撥，不過沒隔一個小時他就又回撥了，他要請我收信然後回報信件內的六碼 code，不過我剛好在騎車移動，就還是請他六點在撥，後來收到的那個六碼 code 是高強度的，英數大小寫有別，看起來是個特殊的流程給 Apple Support 團隊確認帳號信箱所有權用的，回報確認之後，他就說要請我們等兩三天時間。</p>
<p>然後過了兩三天後，我爸接到電話說帳號已經可以使用了，我就去測試了一下，結果變無法登入，所以我推測是帳號砍掉了，測試過後就發現真的變成可以註冊的狀態，就趕快把他重新註冊起來，中間這段時間，我猜是去翻 archive 起來的使用者 log 判斷是不是可以砍帳號吧。</p>
<p>最後總結一下，這次過程我覺的蘋果電話客服有以下特色，不過大概也不會是每個公司都複製的起來的：</p>
<ol>
<li>由他們掌握主控權，但是又完全免費，而且填表後真的很快就會接到電話</li>
<li>每個要等待的階段都會先讓使用者有預期</li>
<li>除了第一位外言談都蠻誠懇的</li>
<li>完全相信（至少表現起來是）客戶，不會強迫做一些嘗試過的操作</li>
<li>連砍帳號都可以辦到</li>
</ol>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000909" baseName="osx-admin-account-missing">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-09-16</b:date>
				<b:time>23:02:54</b:time>
			</b:datetime>
			<b:category>mac</b:category>
			<b:title>OSX Admin Account 消失</b:title>
			<b:content>
				<b:summary> 昨天晚上終於收齊拖了一段時間的 HITCON 2017 CMT 照片，根據莫非定律，這時候一定會有異象發生，果然，我的 iMac 就第一次出問題了，基本狀況是帳號消失，然後我剛好就一個主要帳號同時是 admin，所以狀況就升級成 admin 帳號消失了。 首先說一下背景，平常我是沒關電腦也沒休眠的，就是用螢幕熱點關閉顯示器而已，然後加上顯示器關閉太久之後回來需要密碼，不用休眠的主要原因是外接鍵盤休眠後就會抓不到，然後昨天晚上，安裝了 Adobe Bridge 後，無法使用，重複移除安裝了兩次結果依舊，於是我就先把照片作簡單的整理，然後丟上 NAS 做備份（NAS 還會丟上 Google Drive 做二號備份），接著我去忙其他事情之後回來，發現登入不了，說密碼錯誤，試了很多次都一樣，而這段時間也不可能進來幫我改密碼的，由於我之前還開了一個一般帳號，所以可以切換成其它使用者，然後就在我按了「切換使用者」之後，我的主要帳號就不見了！ 總之我就試著登入另一個帳號，中間還看到幾次鑰匙圈損毀的訊息，大概可以確定這次的狀況就是這個原因，然後 OSX 不知道怎麼判斷就認為沒這個帳號了，搜尋了一下網路，看到一些解法，最後我的處理方式如下： 重開機同時按著 cmd+s 進入 single user mode 用 single user mode 的 CLI 介面刪除 /var/db/.AppleSetupDone 這個檔案 執行...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37260875515/" title="Mac OSX single user mode by othree, on Flickr"><img src="https://farm5.staticflickr.com/4367/37260875515_4399b64e42_b.jpg" width="1024" height="683" alt="Mac OSX single user mode" srcset="https://farm5.staticflickr.com/4367/37260875515_4399b64e42_b.jpg 1024w, https://farm5.staticflickr.com/4367/37260875515_07dbc0b069_h.jpg 1600w" /></a></p>
<p>昨天晚上終於收齊拖了一段時間的 HITCON 2017 CMT 照片，根據莫非定律，這時候一定會有異象發生，果然，我的 iMac 就第一次出問題了，基本狀況是帳號消失，然後我剛好就一個主要帳號同時是 admin，所以狀況就升級成 admin 帳號消失了。</p>
<p>首先說一下背景，平常我是沒關電腦也沒休眠的，就是用螢幕熱點關閉顯示器而已，然後加上顯示器關閉太久之後回來需要密碼，不用休眠的主要原因是外接鍵盤休眠後就會抓不到，然後昨天晚上，安裝了 Adobe Bridge 後，無法使用，重複移除安裝了兩次結果依舊，於是我就先把照片作簡單的整理，然後丟上 NAS 做備份（NAS 還會丟上  Google Drive 做二號備份），接著我去忙其他事情之後回來，發現登入不了，說密碼錯誤，試了很多次都一樣，而這段時間也不可能進來幫我改密碼的，由於我之前還開了一個一般帳號，所以可以切換成其它使用者，然後就在我按了「切換使用者」之後，我的主要帳號就不見了！</p>
<p>總之我就試著登入另一個帳號，中間還看到幾次鑰匙圈損毀的訊息，大概可以確定這次的狀況就是這個原因，然後 OSX 不知道怎麼判斷就認為沒這個帳號了，搜尋了一下網路，看到一些解法，最後我的處理方式如下：</p>
<ol>
<li>重開機同時按著 <code>cmd</code>+<code>s</code> 進入 single user mode</li>
<li>用 single user mode 的 CLI 介面刪除 <code>/var/db/.AppleSetupDone</code> 這個檔案</li>
<li>執行 <code>reboot</code> 重開機，這樣會進入初次開機的狀態</li>
<li>重新建立帳號，我是用相同的帳號名稱，會執行的有點久，最後會說失敗，原因應該是因為該帳號的 home 目錄已經存在了</li>
<li>再次重開機，結果會進入正常的登入畫面，可以登入新建的帳號，發現 home 目錄的東西幾乎都可以正常讀入</li>
</ol>
<p>最後，為什麼會鑰匙圈損毀呢，我推測是硬碟東西塞太多加上當時在上傳資料才造成問題的，不過也就是個推測而已啦。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000908" baseName="sublime-text-3">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-09-14</b:date>
				<b:time>22:59:57</b:time>
			</b:datetime>
			<b:category>software</b:category>
			<b:title>Sublime Text 3</b:title>
			<b:content>
				<b:summary> 今天除了任天堂發表 Mario Odyssey 新情報並開放預約之外，還有一個令人意外的消息，就是 Sublime Text 3 正式版 release 了，官網也整個更新了，就我記憶所及，Sublime Text 最活躍的時期應該也是 Rails 正火熱的那段時間，雖然是閉源的半商業軟體，不過它確實是引入了很多先進的機制進入純文字編輯器世界，例如 Command-T（不過我推薦用 ctrlp.vim）、Command Palette、Multi Cursor 應該也是吧，或許大部分人會覺得我應該是 Vim 為主力的，應該對 Sublime 興趣不大吧，不過事實上我有買他的 license，其實當初購買的原因是我的博士論文是用 Latex 格式的文件，然後用 Vim 寫這麼大份文本有點辛苦，所以後來都是用 Sublime Text 2，後來畢業就決定花錢買個 license 以茲感謝，而即使到今天也還是會有用到，算是和 Vim 不同用途。 其實本來以為作者已經不太想繼續了，沒想到實際上是偷偷的一直開發，最新這版和上次 Beta 已經相隔一年了，有興趣的可以看看 Changelog...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37224534155/" title="Sublime Text 3 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4372/37224534155_19ea953001_b.jpg" width="1024" height="670" alt="Sublime Text 3, " srcset="https://farm5.staticflickr.com/4372/37224534155_19ea953001_b.jpg 1024w, https://farm5.staticflickr.com/4372/37224534155_6dc29751a4_h.jpg 1600w" /></a></p>
<p>今天除了任天堂發表 Mario Odyssey 新情報並開放預約之外，還有一個令人意外的消息，就是 Sublime  Text 3 正式版 release 了，官網也整個<a href="https://www.sublimetext.com">更新</a>了，就我記憶所及，Sublime Text 最活躍的時期應該也是 Rails 正火熱的那段時間，雖然是閉源的半商業軟體，不過它確實是引入了很多先進的機制進入純文字編輯器世界，例如 <a href="https://github.com/wincent/command-t">Command-T</a>（不過我推薦用 <a href="https://github.com/kien/ctrlp.vim">ctrlp.vim</a>）、<a href="https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette">Command Palette</a>、Multi Cursor 應該也是吧，或許大部分人會覺得我應該是 Vim 為主力的，應該對 Sublime 興趣不大吧，不過事實上我有買他的 license，其實當初購買的原因是我的博士論文是用 Latex 格式的文件，然後用 Vim 寫這麼大份文本有點辛苦，所以後來都是用 Sublime Text 2，後來畢業就決定花錢買個 license 以茲感謝，而即使到今天也還是會有用到，算是和 Vim 不同用途。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37224533955/" title="Sublime Text 3 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4411/37224533955_ccc97a9e2b_b.jpg" width="325" height="168" alt="Sublime Text 3, " srcset="https://farm5.staticflickr.com/4411/37224533955_ccc97a9e2b_b.jpg 650w" /></a></p>
<p>其實本來以為作者已經不太想繼續了，沒想到實際上是偷偷的一直開發，最新這版和上次 Beta 已經相隔一年了，有興趣的可以看看 <a href="https://www.sublimetext.com/3">Changelog</a> ，然後整個視覺設計也改很大，最上面那張是 Adaptive 主題的樣子，Default 的則是：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37052309552/" title="Sublime Text 3 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4384/37052309552_68f8a32300_b.jpg" width="1024" height="670" alt="Sublime Text 3, " srcset="https://farm5.staticflickr.com/4384/37052309552_68f8a32300_b.jpg 1024w, https://farm5.staticflickr.com/4384/37052309552_0318a85a9c_h.jpg 1600w" /></a></p>
<p>似乎很多人不習慣淺灰色的地方就是，另外就是 icon 也換了：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37224612235/" title="Sublime Text 3 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4386/37224612235_91a13883c4_b.jpg" width="256" height="256" alt="Sublime Text 3, " srcset="https://farm5.staticflickr.com/4386/37224612235_91a13883c4_b.jpg 1024w" /></a></p>
<p>我今天也因此好幾次找不到就是了...</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000907" baseName="196">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-08-18</b:date>
				<b:time>23:54:40</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>196</b:title>
			<b:content>
				<b:summary> 這篇文章是在寫 temporal 那篇文章時，找資料發現的有趣東西，在那篇文章當中，我有說到目前 date 物件的各種問題，其中第六點是「不支援 Gregorian Calendar（格里曆）以外的日曆（例如農曆）」 ，然後我就好奇起來了，現在還有什麼其他的曆法在用呢？結果找著找著，就看到有個網站提供了很多曆法了線上轉換，像是 Julian Calendar（儒略曆）、Hebrew Calendar（希伯來曆）、Islamic Calendar（伊斯蘭曆）、Persian Calendar（波斯曆）等，用 JavaScript 寫的，而且在程式碼裡面宣告貢獻到 public domain。 由於整個網站非常老派，我就對作者起了興趣，發現這個網站 fourmilab.ch 的所有者是 John Walker，Autodesk 的 founder 之一，他現在已經退休搬到瑞士去了，然後 fourmilab.ch 上就放了他的各種記錄，像是文章，其實就是 blog，看他結構感覺也是個 MovableType 站，還有閱讀清單，旅遊照片，例如他去過南極一趟，還有些他寫的書，例如 Hacker's Diet、The Autodesk File 等。 然後，我在 fourmilab.ch 上看到了「Three Years...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/36512922821/" title="196 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4360/36512922821_91c0a76194_b.jpg" width="1024" height="683" alt="196" srcset="https://farm5.staticflickr.com/4360/36512922821_91c0a76194_b.jpg 1024w, https://farm5.staticflickr.com/4360/36512922821_a17aefd061_h.jpg 1600w" /></a></p>
<p>這篇文章是在寫 <a href="http://blog.othree.net/log/2017/08/12/temporal-is-next-date/">temporal</a> 那篇文章時，找資料發現的有趣東西，在那篇文章當中，我有說到目前 date 物件的各種問題，其中第六點是「不支援 Gregorian Calendar（格里曆）以外的日曆（例如農曆）」 ，然後我就好奇起來了，現在還有什麼其他的曆法在用呢？結果找著找著，就看到有個<a href="http://www.fourmilab.ch/documents/calendar/">網站</a>提供了很多曆法了線上轉換，像是 Julian Calendar（儒略曆）、Hebrew Calendar（希伯來曆）、Islamic Calendar（伊斯蘭曆）、Persian Calendar（波斯曆）等，用 JavaScript 寫的，而且在程式碼裡面宣告貢獻到 public domain。</p>
<p>由於整個網站非常老派，我就對作者起了興趣，發現這個網站 fourmilab.ch 的所有者是 <a href="https://en.wikipedia.org/wiki/John_Walker_(programmer)">John Walker</a>，Autodesk 的 founder 之一，他現在已經退休搬到瑞士去了，然後 fourmilab.ch 上就放了他的各種記錄，像是<a href="http://www.fourmilab.ch/fourmilog/">文章</a>，其實就是 blog，看他結構感覺也是個 MovableType 站，還有<a href="http://www.fourmilab.ch/documents/reading_list/">閱讀清單</a>，旅遊照片，例如他去過<a href="http://www.fourmilab.ch/images/antarctica_2013/S015.html">南極一趟</a>，還有些他寫的書，例如 <a href="ttps://www.fourmilab.ch/hackdiet/">Hacker's Diet</a>、<a href="http://www.fourmilab.ch/autofile/">The Autodesk File</a> 等。</p>
<p>然後，我在 fourmilab.ch 上看到了「<a href="http://fourmilab.ch/documents/threeyears/threeyears.html">Three Years Of Computing</a>」這篇文章，標題就吸引了我進去仔細閱讀，這篇文章是在說迴文數（palindrome）挑戰，什麼是迴文數呢，「95277259」就是迴文數，不論是從頭開始還是反過來從尾開始都是相同的數字，那什麼是迴文數問題呢？首先你要拿到一個非迴文數的十進位數字，例如 <strong>362</strong> 好了，把他和自己的反轉相加：</p>
<pre><code>&gt;
   362
+  263
------
   625
</code></pre>
<p>結果不是迴文數，那繼續一樣的反轉相加運算：</p>
<pre><code>&gt;
   625
+  526
------
  1151
+ 1511
------
  1661
</code></pre>
<p>最後得到了一個迴文數 <strong>1661</strong>，迴文數問題就是，是否所有的正整數都可以透過這樣的運算，不管幾次，最終可以得到迴文數，如果有數字無法透過這個過程變成迴文數，那這數字也可以稱為 <a href="https://zh.wikipedia.org/wiki/%E5%88%A9%E5%85%8B%E7%91%9E%E5%B0%94%E6%95%B0">Lychrel Number</a>，不過因為目前無法從理論證明一個十進位數是 Lychrel Number，就只能想辦法反證它（註：我有看到說二進位數有證明）。</p>
<p>文裡說到，所有小於一萬的數字都已經被測試過，大部分的數字都可以用很少的次數就得到迴文數，其中，最小的可能的 Lychrel Number: <strong>196</strong> ，到目前還無法讓它經由反轉相加的過程變為迴文數，John Walker 那個跑了三年的程式就是在驗證 196 到底能不能透過反轉相加的過程。他在 1987 年用他的 Sun 工作站開始跑，結果跑了三年後的 1990，達到他當初設的停止條件，100 萬位，總共反轉相加了 2415836 次，他還放上他的程式碼還有計算的結果，如果有人有興趣可以從這邊開始接手繼續算下去，事實上，當初他跑這程式的工作站性能和現在的電腦比起來差距實在很大，在其它人後來的<a href="http://jasondoucette.com/worldrecords.html">挑戰</a>當中，就有提到一些性能數字，例如 Ian J. Peter 的程式只需要 5 小時就可以計算到一百萬位，用的電腦大約是 500 MHz 的 CPU。</p>
<p>John Walker 在 1990 年跑到一百萬位，結果還沒得到迴文數，那麼現在最新的紀錄是多少呢？<a href="http://www.p196.org/news.html">p196.org</a> 這網站收集了很多相關的資訊，對這議題有興趣的人還可以去看看，而它站上的紀錄是 <strong>413,930,770</strong>，四億多位，總共反轉相加了十億次；至於我目前看到的最高紀錄，是在「<a href="http://www.dolbeau.name/dolbeau/p196/p196.html">The p196_mpi page</a>」這裡，提供了平行版的程式，而據作者 Romain Dolbeau 所說，他在 2015 年 2 月已經計算到十億位了，不過他沒提供相關資料，有提供的只有 2012 年的六億位結果。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000906" baseName="temporal-is-next-date">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-08-12</b:date>
				<b:time>10:41:06</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Temporal - 下個世代的 Date</b:title>
			<b:content>
				<b:summary>這篇文章寫到快寫完的時候，決定到 Modern Web 2017 分享，所以就比較晚發佈 ，其實 Modern Web 演講內容比較多，文末有放相關參考資料。 JSConf EU 2017 前陣子放出演講影片，蠻多場次都不錯，這篇要主要是從其中的一場演講而來，演講是「 The Past, Present, and Future of JavaScript Date and Time APIs」，講者是 Matt Johnson，Moment.js 的作者，下面是這場演講的影片： 長度不長，推薦可以看一下，主要是在談 JavaScript 的 Datetime，提出這老東西的問題，我覺得可以稱為 WAT JavaScript 的 Datetime 篇，像是 0 起始的月份、不支援 Time Zone、難以運算、是...</b:summary>
				<b:mainContent><p>這篇文章寫到快寫完的時候，決定到 <a href="http://modernweb.tw/">Modern Web 2017</a> 分享，所以就比較晚發佈 ，其實 Modern Web 演講內容比較多，文末有放相關參考資料。</p>
<p>JSConf EU 2017 前陣子放出演講影片，蠻多場次都不錯，這篇要主要是從其中的一場演講而來，演講是「 The Past, Present, and Future of JavaScript Date and Time APIs」，講者是 Matt Johnson，<a href="http://momentjs.com/">Moment.js</a> 的作者，下面是這場演講的影片：</p>
<div class="embed_16_9">
  <iframe width="853" height="480" src="https://www.youtube.com/embed/aVuor-VAWTI?rel=0" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>長度不長，推薦可以看一下，主要是在談 JavaScript 的 Datetime，提出這老東西的問題，我覺得可以稱為 WAT JavaScript 的 Datetime 篇，像是 0 起始的月份、不支援 Time Zone、難以運算、是 mutable 物件等等，接著介紹了目前檯面上比較多人用的幾個 library 和他們的特色，都是品質不錯的 library，有需求的可以從中選用，包括了：</p>
<ul>
<li><a href="http://momentjs.com/">Moment.js</a></li>
<li><a href="https://date-fns.org/">date-fns</a></li>
<li><a href="https://js-joda.github.io/js-joda/">js-joda</a></li>
</ul>
<p>最後則是提到他們目前在進行的，改進 JavaScript Datetime 的計畫，也就是新的 ECMAScript Datetime 的 proposal，叫 <a href="https://github.com/tc39/proposal-temporal">temporal</a>，除了 Matt Johnson 之外，還有一位 Microsoft 的 Maggie Pint 也是目前草案的主力推手，他的 blog 上就有兩篇相關的<a href="https://maggiepint.com/2017/04/09/fixing-javascript-date-getting-started/">文</a><a href="https://maggiepint.com/2017/04/11/fixing-javascript-date-web-compatibility-and-reality/">章</a>，裡面有列出目前 <code>Date</code> 的主要問題：</p>
<ol>
<li>不支援 timezone，只有 UTC 和 local</li>
<li>Parser （轉譯日期字串轉成日期物件）的行為不可靠且難以使用</li>
<li>Date object 是 mutable 物件</li>
<li>日光節約時間的行為無法預期</li>
<li>日期計算 API 很難用</li>
<li>不支援 <a href="https://jonathanou.wordpress.com/2005/06/02/gregorian-calendar/">Gregorian</a> 以外的日曆（例如農曆）</li>
</ol>
<p>事實上，目前的 Date 物件，當初 Brendan Eich 因為時間緊迫，所以 Datetime 的 API 是直接參考 Java 的，當時是 1995，參考的應該是 Beta 版 Java 的 <code>java.util.Date</code>，後來 1996 年 1 月 Java 1.0 發佈，但是到了 1997 年 2 月的 Java 1.1 發佈時，<code>java.util.Date</code> 大部分的設計都被捨棄了，然後 1997 年 6 月，ECMAScript 標準 1.0 發佈，結果這個在 Java 語言只活了 1 年多的設計，就活在 JavaScript 世界活了 20 年之久，相信有用過的人都能多少都知道使用起來的痛苦。</p>
<p>不過要改善 JavaScript 從來就不是一件容易的事情，最大的困難點就是你不能隨便改動任何已有的東西，像是已經存在 20 年的 <code>Date</code>，即使它設計不好，隨便改動都可能造成大量的網站壞掉，不像是 Java 1.0 升級到 Java 1.1 那樣，各自用各自的，在改善 JavaScript 時基本上就是要當成有人從不升級，不能有 broken change，最簡單的方法就是增加新的東西，而不要去修改舊的，這也是目前 temporal 的方向（其實 ES 5.1 後，舊有的東西該修的東西大概都修完，之後就是一直加新的而已），在 draft 文件已經有一點基礎和預期的 code sample 了：</p>
<pre><code class="language-javascript">var ldt = new CivilDateTime(2017, 12, 31, 23, 59);

var addHours = new CivilDateTime(2017, 12, 31, 23, 00)
    .add(2, 'hours');

var zdt = ldt.withZone('America/New_York');
</code></pre>
<p>可以看到有方便的加減時間的 API、immutable 特性、還有時區支援等等。事實上這份草案還非常初步而已，還缺非常多細節，預期會有的物件目前已經有八種了，不過這八種物件的 API 也都還沒定義完，不過也正因為如此，想參與的人反而這時候比較有機會提供想法，推薦有興趣的人可以關注關注，給點意見。</p>
<p>最後列一些參考文件：</p>
<ul>
<li>Web Rebels 2017 <a href="https://twitter.com/jxxf">@jxxf</a> 的「<a href="https://www.webrebels.org/#talk-8">Time and Time Again: Fixing Dates in JS</a>」 花了很多時間在講 JavaScript Date 缺少的 concept</li>
<li>林信良（良葛格）介紹 Java 的 Joda-Time 和 JSR310 的<a href="http://www.codedata.com.tw/tag/jodatime/">相關文章</a>，Joda-Time 是 Java 上很廣為使用的時間套件，由 Stephen Colebourne 為主開發的，他也參與了 <a href="https://jcp.org/en/jsr/detail?id=310">JSR 310: Date and Time API</a> 的制訂，並在 JDK 8 開始可以用</li>
<li>temporal 目前主要作者之一的 Maggie Pint 的文章：<a href="https://maggiepint.com/2017/04/11/fixing-javascript-date-web-compatibility-and-reality/">Fixing JavaScript Date - Web Compatibility and Reality</a></li>
<li><a href="https://www.youtube.com/watch?v=oVVXW7lmwtw">Understanding Dates, Times, and Time Zones, with Maggie Pint, Matt Johnson, and Jon Skeet</a></li>
</ul>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000905" baseName="wat-javascript-date">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-08-12</b:date>
				<b:time>00:13:59</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>WAT JavaScript Date</b:title>
			<b:content>
				<b:summary>週四在 Modern Web 2017 分享的投影片 /* A_A */...</b:summary>
				<b:mainContent><p>週四在 Modern Web 2017 分享的投影片</p>
<script async="async" class="speakerdeck-embed" data-id="5cf2c2b7e3734425b660781da7a9e57a" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000904" baseName="ipad-pro-105-inch">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-08-03</b:date>
				<b:time>22:17:48</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>iPad Pro 10.5-inch</b:title>
			<b:content>
				<b:summary> 本來其實就一直想要為了四喇叭升級 iPad Pro 了，不過手上機器還可以用就沒下手，最近因緣際會終於要下手升級了，考慮了一陣子卻遲遲無法決定要買 12.9 吋還是剛發表的新款 10.5 吋，直到前天終於我買了 10.5 吋，兩個推手： 有 n 個人跟我說 12.9 吋太重，雖然我去店面拿起來感覺是還好； 我自己店面試用有覺得體積是有點過大。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35936571200/" title="iPad Pro 10.5 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4353/35936571200_fc44613220_b.jpg" width="1024" height="683" alt="iPad Pro 10.5, " srcset="https://farm5.staticflickr.com/4353/35936571200_fc44613220_b.jpg 1024w, https://farm5.staticflickr.com/4353/35936571200_e0c6c415db_h.jpg 1600w" /></a></p>
<p>本來其實就一直想要為了四喇叭升級 iPad Pro 了，不過手上機器還可以用就沒下手，最近因緣際會終於要下手升級了，考慮了一陣子卻遲遲無法決定要買 12.9 吋還是剛發表的新款 10.5 吋，直到前天終於我買了 10.5 吋，兩個推手：</p>
<ol>
<li>有 n 個人跟我說 12.9 吋太重，雖然我去店面拿起來感覺是還好；</li>
<li>我自己店面試用有覺得體積是有點過大。</li>
</ol>
</b:mainContent>
				<b:extendContent><p>然後最後一根稻草是 Apple Store 沒有 12.9 吋的現貨，所以我最後是拿了 iPad Pro 玫瑰金、Wifi、256GB 的版本，回來之後覺得實在是有感升級，雖然我上一台是 Air ，不是 iPad Pro 9.7，還是來介紹一下這次的 10.5 有哪些地方不同。</p>
<p>首先是尺寸，本來單獨看 10.5 吋機種，還以為是 9.7 吋的大小塞進比較大的螢幕，事實上 10.5 吋是比 9.7 吋大一點的：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35524354283/" title="iPad Pro 10.5 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4345/35524354283_a0e736ea4d_b.jpg" width="1024" height="683" alt="iPad Pro 10.5, " srcset="https://farm5.staticflickr.com/4345/35524354283_a0e736ea4d_b.jpg 1024w, https://farm5.staticflickr.com/4345/35524354283_2330336dc7_h.jpg 1600w" /></a></p>
<p>結果就是保護殼類的周邊例如 Smart Cover 都不能沿用，尺寸不對，我看<a href="https://www.cool3c.com/article/127342">癮科技</a>有測試鍵盤還是可以接上，就是大小不合而已。另外厚度比 Air 薄不是新聞了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35524353103/" title="iPad Pro 10.5 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4362/35524353103_692ba4dc52_b.jpg" width="1024" height="683" alt="iPad Pro 10.5" srcset="https://farm5.staticflickr.com/4362/35524353103_692ba4dc52_b.jpg 1024w, https://farm5.staticflickr.com/4362/35524353103_0f21f121d2_h.jpg 1600w" /></a></p>
<p>重量其實照規格上寫的是沒比較輕，差個十來公克吧，不過我覺得整體拿起來感覺是比較輕盈的。</p>
<p>再來四喇叭是我一開始主要想要升級 Pro 的原因，因為我現在使用很大比例是拿橫的看影片，這時候四喇叭就有差了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/36164320082/" title="iPad Pro 10.5 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4401/36164320082_259c2422dd_b.jpg" width="1024" height="683" alt="iPad Pro 10.5" srcset="https://farm5.staticflickr.com/4401/36164320082_259c2422dd_b.jpg 1024w, https://farm5.staticflickr.com/4401/36164320082_cf26af2c73_h.jpg 1600w" /></a></p>
<p>相機也有升級，可以錄到 4K 30fps，後相機還多了閃燈，有光學變焦和防手震，藍寶石水晶玻璃，相對的鏡頭有凸出，不過我是沒什麼拿 iPad 拍照啦。</p>
<p>支援 Apple Pay，但是我不想要拿著 iPad 去付款..</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/36164319222/" title="iPad Pro 10.5 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4415/36164319222_192e05cf58_b.jpg" width="1024" height="683" alt="iPad Pro 10.5" srcset="https://farm5.staticflickr.com/4415/36164319222_192e05cf58_b.jpg 1024w, https://farm5.staticflickr.com/4415/36164319222_4c8603e28b_h.jpg 1600w" /></a></p>
<p>然後就是最大亮點的螢幕了，還可以分幾個特色來看：</p>
<ol>
<li>螢幕的抗指紋塗層似乎有升級，我看<a href="https://www.apple.com/tw/ipad-pro/specs/">產品規格</a>還有特別寫「防指印疏油外膜」，應該是和以前有差吧，觀察看看能撐多久；</li>
<li>反光減少很多很多，規格也是有特別寫了一條「抗反射鍍膜」，不知道和 Pro 9.7 比如何，我找了一下以前的報導發現是 Air 2 開始有的，剛好我的 Air 還沒有（補充，根據 m01 上一篇<a href="https://www.mobile01.com/newsdetail/22121/10-5-ipad-pro-one-week-review">比較</a>，和 Pro 9.7 比也差很多）；</li>
<li>P3 廣色域高亮度和 True Tone，True Tone 拍照的時候比較會有明顯感覺吧，基本上就是要讓肉眼感覺不到差異的功能；</li>
<li>120 Hz 就是 120fps 的意思啦，之前看這麼高 frame rate 的就是去看李安的「比利·林恩的中場戰事」了，這規格的動畫真的有點有趣，我在店面玩得的時候還沒感覺，回來開始設定的時候，突然覺得好像哪裡不太一樣，大概就是當初看比利·林恩的中場戰事時的那種，有不一樣，大腦有感覺，但是那種差異實在是無法描述，蘋果網站上也說是 &quot;The world's most advanced display.&quot;</li>
</ol>
<p>綜合以上的特點，我覺得這次升級是很有感啦。</p>
<p>最後來補個 Apple Store 消費記錄，發現他們查庫存全部都用手機終端查，即使重開軟體也不放棄！不過這是有原因的，要搶貨也要靠手機終端，甚至店員 A 點下去之後，就會有店員 B 把東西送過來！然後第二次用 Android Pay 總算成功了。</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000903" baseName="nihombashi-ningyocho">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-08-01</b:date>
				<b:time>22:00:29</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>日本橋人形町</b:title>
			<b:content>
				<b:summary> 前陣子去東京有些時間可以自己安排，後來因為也沒特別有什麼目標，就決定排個可以比較悠閒的行程，就是去人形町逛逛，其實很早之前就知道人形町了，後來真的比較有印像是看了新參者這部小說，這本小說的舞台就圍繞在人形町，後來阿部寬有主演日劇版，更是大大帶起該地區最近的知名度，除了新參者之外，我偶爾會看有吉君的正直散步，也是有一兩集散步到那附近，所以就把目標放在人形町了。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35737121375/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4238/35737121375_528bc4b723_b.jpg" width="1024" height="683" alt="日本橋, " srcset="https://farm5.staticflickr.com/4238/35737121375_528bc4b723_b.jpg 1024w, https://farm5.staticflickr.com/4238/35737121375_659ce1f602_h.jpg 1600w" /></a></p>
<p>前陣子去東京有些時間可以自己安排，後來因為也沒特別有什麼目標，就決定排個可以比較悠閒的行程，就是去人形町逛逛，其實很早之前就知道人形町了，後來真的比較有印像是看了新參者這部小說，這本小說的舞台就圍繞在人形町，後來阿部寬有主演日劇版，更是大大帶起該地區最近的知名度，除了新參者之外，我偶爾會看有吉君的正直散步，也是有一兩集散步到那附近，所以就把目標放在人形町了。</p>
</b:mainContent>
				<b:extendContent><p>當天到達人形町時其實中午了，所以第一個目標就是先去找午餐，人形町其實範圍不大，熱鬧的就是人形町站到水天宮之間那段，再加上橫向的甘酒橫丁，範圍不大，慢慢走也只要兩三個小時就可以晃完，我走沒兩下就發現甘酒橫丁，就灣進去找吃的了，結果發現有一間排了不少人的燒鳥，叫久助。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567894502/" title="日本橋 久助 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4263/35567894502_0425356b57_b.jpg" width="683" height="1024" alt="日本橋 久助, " srcset="https://farm5.staticflickr.com/4263/35567894502_0425356b57_b.jpg 683w, https://farm5.staticflickr.com/4263/35567894502_f3811fa8fd_h.jpg 1067w" /></a></p>
<p>我又繼續往前看了幾間，晃了一下回來發現排隊的人潮消化的差不多了，就決定吃這間，其實當時店內還蠻滿的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34895894774/" title="日本橋 久助 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4216/34895894774_291cd15b71_b.jpg" width="1024" height="683" alt="日本橋 久助, " srcset="https://farm5.staticflickr.com/4216/34895894774_291cd15b71_b.jpg 1024w, https://farm5.staticflickr.com/4216/34895894774_4bd74d1d27_h.jpg 1600w" /></a></p>
<p>吃的就是午間套餐的燒鳥飯</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567878502/" title="日本橋 久助 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4259/35567878502_fe412df9b0_b.jpg" width="1024" height="683" alt="日本橋 久助, " srcset="https://farm5.staticflickr.com/4259/35567878502_fe412df9b0_b.jpg 1024w, https://farm5.staticflickr.com/4259/35567878502_fa88f2ce77_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567875592/" title="日本橋 久助 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4258/35567875592_4046348975_b.jpg" width="1024" height="683" alt="日本橋 久助, " srcset="https://farm5.staticflickr.com/4258/35567875592_4046348975_b.jpg 1024w, https://farm5.staticflickr.com/4258/35567875592_2dd4c91e07_h.jpg 1600w" /></a></p>
<p>烤的很剛好，還有花椒粉芥末粉可以加，我覺得最厲害的是淋的醬汁的量超剛好，飯幾乎都有沾到醬汁，但是吃完整個飯盒就是表面濕濕的狀況，完全沒有醬汁積成一攤，所以完全不會吃到後來覺得太鹹之類的，飯量其實還可以選擇，這師傅實在是經驗老到，可以控制得這麼精準。</p>
<p>吃完飯後，其實對面就是有名的草家屋煎餅了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35349493920/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4258/35349493920_0402646e71_b.jpg" width="1024" height="683" alt="日本橋, " srcset="https://farm5.staticflickr.com/4258/35349493920_0402646e71_b.jpg 1024w, https://farm5.staticflickr.com/4258/35349493920_8dd2cdbe86_h.jpg 1600w" /></a></p>
<p>還有柳屋鯛燒</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35349486260/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4260/35349486260_f4d721976c_b.jpg" width="1024" height="683" alt="日本橋, " srcset="https://farm5.staticflickr.com/4260/35349486260_f4d721976c_b.jpg 1024w, https://farm5.staticflickr.com/4260/35349486260_df7a7504d5_h.jpg 1600w" /></a></p>
<p>兩間都在新參者中出現過，不過我只有買些仙貝，因為剛吃完飯就沒買鯛燒，有點可惜，即使是中午剛過，店內都還是一直都是排著人。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35737108935/" title="水天宮 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4098/35737108935_ddca1cb1a3_b.jpg" width="1024" height="683" alt="水天宮, " srcset="https://farm5.staticflickr.com/4098/35737108935_ddca1cb1a3_b.jpg 1024w, https://farm5.staticflickr.com/4098/35737108935_4d9a1c1cd5_h.jpg 1600w" /></a></p>
<p>接著我就慢慢沿著人形町通逛，走到尾巴的水天宮，水天宮是很有名求子求安產的神社，回來才聽說前兩年還在整修，不過這新蓋好的水天宮實在很厲害，從對面看：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35737107425/" title="水天宮 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4258/35737107425_d5b5c5d43b_b.jpg" width="1024" height="683" alt="水天宮, " srcset="https://farm5.staticflickr.com/4258/35737107425_d5b5c5d43b_b.jpg 1024w, https://farm5.staticflickr.com/4258/35737107425_9dec05af6a_h.jpg 1600w" /></a></p>
<p>旁邊那條走道：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567844992/" title="水天宮 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4278/35567844992_7fbca9ec43_b.jpg" width="1024" height="683" alt="水天宮, " srcset="https://farm5.staticflickr.com/4278/35567844992_7fbca9ec43_b.jpg 1024w, https://farm5.staticflickr.com/4278/35567844992_016f383709_h.jpg 1600w" /></a></p>
<p>門口，要爬樓梯往上：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35696854726/" title="水天宮 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4133/35696854726_2c4d79e580_b.jpg" width="1024" height="683" alt="水天宮, " srcset="https://farm5.staticflickr.com/4133/35696854726_2c4d79e580_b.jpg 1024w, https://farm5.staticflickr.com/4133/35696854726_2c5c4bcc56_h.jpg 1600w" /></a></p>
<p>到了上面才發現別有洞天。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35605763291/" title="水天宮 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4288/35605763291_2e2645f1ca_b.jpg" width="1024" height="683" alt="水天宮, " srcset="https://farm5.staticflickr.com/4288/35605763291_2e2645f1ca_b.jpg 1024w, https://farm5.staticflickr.com/4288/35605763291_eeb728066d_h.jpg 1600w" /></a></p>
<p>事實上，整個神社木造建築是蓋在一層現在的防震結構上的，而且現代結構的部分也不是只有防震，而是還有做為辦公室、販賣商品等用途的部分在，我覺得他們這種結合兩種風格卻不衝突的設計真的是非常厲害，最後是從平台上往回拍大門的方向。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35696855446/" title="水天宮 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4254/35696855446_36afcaa201_b.jpg" width="1024" height="683" alt="水天宮, " srcset="https://farm5.staticflickr.com/4254/35696855446_36afcaa201_b.jpg 1024w, https://farm5.staticflickr.com/4254/35696855446_cf87394e2c_h.jpg 1600w" /></a></p>
<p>到達水天宮後我就往回走了，去了一開始就有看到的 RON 咖啡館。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35737102345/" title="RON by othree, on Flickr"><img src="https://farm5.staticflickr.com/4264/35737102345_0b45307f57_b.jpg" width="683" height="1024" alt="RON" srcset="https://farm5.staticflickr.com/4264/35737102345_0b45307f57_b.jpg 683w, https://farm5.staticflickr.com/4264/35737102345_ee380df5e2_h.jpg 1067w" /></a></p>
<p>這間也是當地的老店，店內應該是完整開店當時的裝潢保存到現在吧：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34895831914/" title="RON by othree, on Flickr"><img src="https://farm5.staticflickr.com/4287/34895831914_a437d008e2_b.jpg" width="1024" height="683" alt="RON" srcset="https://farm5.staticflickr.com/4287/34895831914_a437d008e2_b.jpg 1024w, https://farm5.staticflickr.com/4287/34895831914_9a11659f3b_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34927502753/" title="RON by othree, on Flickr"><img src="https://farm5.staticflickr.com/4212/34927502753_20624b18b6_b.jpg" width="1024" height="683" alt="RON" srcset="https://farm5.staticflickr.com/4212/34927502753_20624b18b6_b.jpg 1024w, https://farm5.staticflickr.com/4212/34927502753_0ad220fc0d_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34895826844/" title="RON by othree, on Flickr"><img src="https://farm5.staticflickr.com/4213/34895826844_6007a7f647_b.jpg" width="1024" height="683" alt="RON" srcset="https://farm5.staticflickr.com/4213/34895826844_6007a7f647_b.jpg 1024w, https://farm5.staticflickr.com/4213/34895826844_624aa76f44_h.jpg 1600w" /></a></p>
<p>店員也是老老的，是不是也是年輕做到現在的呢。</p>
<p>在 RON 咖啡休息一陣子之後，因為時間還早，就決定去日本橋看看，日本橋</p>
<p>是日本<a href="https://zh.wikipedia.org/wiki/File:The_Kilometre_Zero_of_road_in_Japan_in_Nihonbashi,_Chuo,_Tokyo.jpg">道路起點</a>，一直都是很繁榮的地方，是很有歷史意義的地點，不過 1964 年為了舉辦奧運而蓋的首都高，把日本橋蓋住了，之後就一直維持這樣的狀況。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35696816036/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4285/35696816036_06150b18cb_b.jpg" width="1024" height="683" alt="日本橋" srcset="https://farm5.staticflickr.com/4285/35696816036_06150b18cb_b.jpg 1024w, https://farm5.staticflickr.com/4285/35696816036_45589e1ca2_h.jpg 1600w" /></a></p>
<p>橋上可以看到日本道路原標地點，不過人走不過去就是了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34927459313/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4033/34927459313_28eb8ebcff_b.jpg" width="683" height="1024" alt="日本橋" srcset="https://farm5.staticflickr.com/4033/34927459313_28eb8ebcff_b.jpg 683w, https://farm5.staticflickr.com/4033/34927459313_7727619d42_h.jpg 1067w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567779372/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4139/35567779372_eaaef3e123_b.jpg" width="1024" height="683" alt="日本橋" srcset="https://farm5.staticflickr.com/4139/35567779372_eaaef3e123_b.jpg 1024w, https://farm5.staticflickr.com/4139/35567779372_3915bc5598_h.jpg 1600w" /></a></p>
<p>現在的橋據說是 1911 年蓋的第十九代了，橋柱上有些非常華麗的裝飾，也常出現在電視上。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35696808136/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4057/35696808136_faf4f68e39_b.jpg" width="1024" height="683" alt="日本橋" srcset="https://farm5.staticflickr.com/4057/35696808136_faf4f68e39_b.jpg 1024w, https://farm5.staticflickr.com/4057/35696808136_555145da7a_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567766362/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4014/35567766362_07a50f6734_b.jpg" width="683" height="1024" alt="日本橋" srcset="https://farm5.staticflickr.com/4014/35567766362_07a50f6734_b.jpg 683w, https://farm5.staticflickr.com/4014/35567766362_08fa80913a_h.jpg 1067w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34895801964/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4259/34895801964_c0ecd60ba9_b.jpg" width="1024" height="683" alt="日本橋" srcset="https://farm5.staticflickr.com/4259/34895801964_c0ecd60ba9_b.jpg 1024w, https://farm5.staticflickr.com/4259/34895801964_df476986e8_h.jpg 1600w" /></a></p>
<p>最近日本有開始有些<a href="http://asahichinese-f.com/travel/scenery/11153530">聲音</a>說希望能夠恢復日本橋景區的天空，主要方法是把首都高地下化，東京其實已經有一些地下高速公路了，技術上不是問題，雖然經費很貴，我猜他們真的會做下去吧，如果成真的化應該就會找個藍天的日子再去個一趟了。</p>
<p>日本橋的對面就是新光三越本館了：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567761352/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4068/35567761352_df9c042901_b.jpg" width="1024" height="683" alt="日本橋" srcset="https://farm5.staticflickr.com/4068/35567761352_df9c042901_b.jpg 1024w, https://farm5.staticflickr.com/4068/35567761352_3abc7f27c5_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34895760694/" title="三越 本館 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4021/34895760694_992703c33a_b.jpg" width="1024" height="683" alt="三越 本館" srcset="https://farm5.staticflickr.com/4021/34895760694_992703c33a_b.jpg 1024w, https://farm5.staticflickr.com/4021/34895760694_fe57311267_h.jpg 1600w" /></a></p>
<p>遠遠看就覺得氣勢不凡，進去逛一逛發現這間真的是不同凡響：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35737023025/" title="三越 本館 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4214/35737023025_a821b3dde4_b.jpg" width="1024" height="683" alt="三越 本館" srcset="https://farm5.staticflickr.com/4214/35737023025_a821b3dde4_b.jpg 1024w, https://farm5.staticflickr.com/4214/35737023025_131119eb13_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34895759084/" title="三越 本館 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4208/34895759084_0a60ba06d8_b.jpg" width="683" height="1024" alt="三越 本館" srcset="https://farm5.staticflickr.com/4208/34895759084_0a60ba06d8_b.jpg 683w, https://farm5.staticflickr.com/4208/34895759084_5786a48d02_h.jpg 1067w" /></a></p>
<p>在百貨公司裡面開了這麼大的挑高室內空間，還放這麼大的固定式藝術品，真的是完全無法想像，然後本來想說去逛一下生活用品那層好了，結果映入眼簾的都是高級進口餐具之類的，我一整個跑錯棚的感覺。</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000902" baseName="svg">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-07-29</b:date>
				<b:time>11:14:28</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>SVG</b:title>
			<b:content>
				<b:summary> 最近網站的 icon 都盡量改用 SVG 向量檔了，網路上也有不少資源，像是 Material Icons，累積了一些心得可以記錄一下，其實早在 GitHub 開使用 icon font 之前，大部分的瀏覽器就都有支援 SVG 了，只不過當時的支援還不夠完備，會各自有一些問題，這應該也是 Github 當年不先用 SVG，而是用 icon font 先檔了幾年的主因，總之現在比較不用擔心這些問題了，所以 GitHub 又開槍轉用 SVG icon 了。 GitHub 的用法是 inline SVG 為主，我自己則是用 &lt;picture&gt; 比較多： &lt;picture&gt; &lt;source srcset=&quot;/path/to/icon.svg&quot; type=&quot;image/svg+xml&quot;&gt; &lt;img src=&quot;/path/to/icon.png&quot; alt=&quot;&quot;...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35882767130/" title="SVG by othree, on Flickr"><img src="https://farm5.staticflickr.com/4300/35882767130_abb5a7e7b3_b.jpg" width="1024" height="782" alt="SVG" srcset="https://farm5.staticflickr.com/4300/35882767130_2848f09cbc_k.jpg 2x" /></a></p>
<p>最近網站的 icon 都盡量改用 SVG 向量檔了，網路上也有不少資源，像是 <a href="https://material.io/icons/">Material Icons</a>，累積了一些心得可以記錄一下，其實早在 GitHub 開使用 icon font 之前，大部分的瀏覽器就都有支援 SVG 了，只不過當時的支援還不夠完備，會各自有一些<a href="http://voormedia.com/blog/2012/10/creating-svg-vector-graphics-for-maximum-browser-compatibility">問題</a>，這應該也是 Github 當年不先用 SVG，而是用 icon font 先檔了幾年的主因，總之現在比較不用擔心這些問題了，所以 GitHub 又開槍轉用 SVG icon 了。</p>
<p>GitHub 的用法是 inline SVG 為主，我自己則是用 <code>&lt;picture&gt;</code> 比較多：</p>
<pre><code class="language-html">&lt;picture&gt;
  &lt;source srcset=&quot;/path/to/icon.svg&quot; type=&quot;image/svg+xml&quot;&gt;
  &lt;img src=&quot;/path/to/icon.png&quot; alt=&quot;&quot; width=&quot;32&quot; height=&quot;32&quot; /&gt;
&lt;/picture&gt;
</code></pre>
<p>CSS Trick 有一篇文章 <a href="https://css-tricks.com/a-complete-guide-to-svg-fallbacks/">A Complete Guide to SVG Fallbacks</a> 則介紹了各種在網頁內放入 SVG 圖檔的古老方法，用 <code>&lt;picture&gt;</code> 是比較新的，沒列在其中，而我是為了向下相容選擇用 <code>&lt;picture&gt;</code>，因為支援<code>&lt;picture&gt;</code>標籤的瀏覽器都很新了，對於 SVG 的支援度很夠，剩下少數（大概都是 IE）就讓他直接吃 png 之類的（PS: pngquant 處理過的 PNG 很多可以直接在 IE6 上顯示透明色），這樣用起來就像是一般 <code>&lt;img&gt;</code> 一樣，SVG 檔可以先用 <a href="https://github.com/svg/svgo">svgo</a> 工具處理過，除此之外，我通常會先用 Adobe Illustrator 把不必要的圖層階層刪除，圖層在 SVG 原始碼裡面通常是會 <code>&lt;g&gt;</code> 標籤，另外也記得要把圖層名稱（id）改成 ASCII only 的名稱，甚至直接編輯原始碼刪除 id，因為 svgo 不會處理這部分。</p>
<p>用外部 SVG 檔案好處是可以善用 browser cache 減少傳輸量，尤其是大量重複使用的圖片，不過也會犧牲一些 SVG 的特性，例如會因此不能直接用 CSS 來調整樣式，做 transition，做動畫等等，所以有時候也是會用 inline SVG，就可以搭配 CSS、JS 弄出很多不錯的效果（Safari 偶爾還有遇到無解 bug），不過要讓 inline SVG fallback 回一般圖片就比較麻煩些了，在做這件事之前可以先看一下是不是有需要<a href="http://caniuse.com/#feat=svg-html5">支援</a>，以前是 iOS 不支援，現在還有機會碰到的大概還是 IE（6-8）吧，總之，如果有需要的話，就是參考 CSS Trick 的 <a href="https://css-tricks.com/svg-fallbacks/">SVG Fallbacks</a> 這篇文章，使用</p>
<pre><code class="language-html">&lt;svg width=&quot;96&quot; height=&quot;96&quot;&gt;
  &lt;image xlink:href=&quot;svg.svg&quot; src=&quot;svg.png&quot; width=&quot;96&quot; height=&quot;96&quot; /&gt;
&lt;/svg&gt;
</code></pre>
<p>這是個很有趣的技巧，首先 <code>&lt;image&gt;</code> 標籤是<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image">合法的 SVG 元素</a>，所以放在 SVG 不成問題，但是不支援 SVG 的瀏覽器，照理說也不應該認得 <code>&lt;image&gt;</code> 標籤啊，其實，<code>&lt;image&gt;</code> 在很久以前就一直是 <code>&lt;img&gt;</code> 的別名了，甚至在 WHATWG 的 parse HTML 文件的<a href="https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inbody">流程</a>裡都還有提到處理的方式，而經過測試也都證實了以前的瀏覽器確實是這樣的行為，文裡也有各瀏覽器的行為和支援狀況，不支援 inline SVG 的就會顯示替代的 png 或 jpg 。</p>
<p>文章裡面還有提到背景圖使用 SVG 的處理方式，不過因為我沒這樣使用，所以沒什麼實做到，另外最近也有人用外部 SVG 加上 CSS filter 來改變 <a href="https://codepen.io/noahblon/post/coloring-svgs-in-css-background-images">SVG icon 顏色</a>，不過這太技巧太新了，考慮到支援度我也是沒有用過。</p>
<p>親和力問題的部分，一樣 CSS Tricks 有篇文章 <a href="https://css-tricks.com/accessible-svgs/">Accessible SVG</a> 在講相關的作法，像是用 <code>&lt;title&gt;</code> 加替代文字，加上 <code>role=&quot;img&quot;</code> 等；如果要自己編寫 SVG，W3C 還有份 <a href="http://w3c.github.io/svgwg/specs/svg-authoring/">Authering Guide</a> 可以參考，除了親和力相關的資訊外還有不少技巧可以參考。</p>
<p>最後整理一下，拿到 svg 檔案後我的處理過程：</p>
<ol>
<li>用 Adobe Illustrator 先開來整理一下，修改圖層名稱、刪去合併不必要的圖層</li>
<li>輸出成 SVG 和 1x 解析度的 PNG</li>
<li>SVG 檔用 <code>svgo</code> 最佳化、PNG 會用 <code>pngquant</code> 和 <code>zopflipng</code> 處理過</li>
</ol>
<p>使用方式則還是當成一般外部圖片為主，需要動畫效果才會用 inline SVG。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000901" baseName="form-practice">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-06-13</b:date>
				<b:time>22:42:42</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>表單 Practice</b:title>
			<b:content>
				<b:summary> 這邊是我最近對於表單的一些作法，因為內化還不夠，每次都會漏掉一些，所以花了些時間整理整理，適合的情境不是 single page application 就是了，比較偏傳統形式網頁的表單，然後可能也包括不少大家早就知道(?)的細節就是了。 首先，我現在偏好不用 JavaScript 做表單檢查，而是先做好最基本的 server side 檢查，然後加上 HTML5 的表單檢查，會這樣決定的主因是： JavaScript 的表單檢查 library 用起來都不太順手，而且不想花時間處理串接，且能少點 library 總是好的； 幾個常用的 type，像是 email, url 比較不需要擔心檢查的 pattern 有不周全的地方，我想很多人都有上網搜尋過這些欄位的 regular expression pettern 的經驗； 支援度已經不是大問題了，事實上我的工作上還需要支援 IE 10, 9 之類的，其實這些非 modern browser 的量都已經非常少了，所以就靠個 server...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34947056856/" title="Form Validation by othree, on Flickr"><img src="https://farm5.staticflickr.com/4274/34947056856_e1ae234f6c_b.jpg" width="500" height="270" alt="Form Validation" srcset="https://farm5.staticflickr.com/4274/34947056856_e1ae234f6c_b.jpg 500w" /></a></p>
<p>這邊是我最近對於表單的一些作法，因為內化還不夠，每次都會漏掉一些，所以花了些時間整理整理，適合的情境不是 single page application 就是了，比較偏傳統形式網頁的表單，然後可能也包括不少大家早就知道(?)的細節就是了。</p>
<p>首先，我現在偏好不用 JavaScript 做表單檢查，而是先做好最基本的 server side 檢查，然後加上 <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation">HTML5 的表單檢查</a>，會這樣決定的主因是：</p>
<ol>
<li>JavaScript 的表單檢查 library 用起來都不太順手，而且不想花時間處理串接，且能少點 library 總是好的；</li>
<li>幾個常用的 type，像是 email, url 比較不需要擔心檢查的 pattern 有不周全的地方，我想很多人都有上網搜尋過這些欄位的 regular expression pettern 的經驗；</li>
<li>支援度已經不是大問題了，事實上我的工作上還需要支援 IE 10, 9 之類的，其實這些非 modern browser 的量都已經非常少了，所以就靠個 server side 檢查對付他們就好，使用體驗稍微差一點也還可以接受，這也是種 graceful degradation（優雅降級）；</li>
<li>HTML5 的表單檢查可以說是 web developer 當年對抗網路標準發展遲緩一大勝利指標，當然應該要好好用一下。</li>
</ol>
<p>而用 HTML5 表單檢查還有個意外的好處是基本的錯誤訊息自動有翻譯（看使用者瀏覽器的語言），另外如果有自製的輸入元件，也有 <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validating_forms_using_JavaScript">API</a> 可以串接，當然訊息就要自己提供就是了。</p>
<p>用 HTML5 表單檢查當然也不是完全沒有問題，例如目前 email 欄位還沒有瀏覽器支援 <a href="https://github.com/w3c/html/issues/538">IDN domain 的信箱</a>；另外就是上傳檔案的 file input 的值不能從 server 端直接給，這限制是因為會有安全性問題，而這限制所衍生的問題是：表單送到 server side 檢查後發現有錯誤時（例如 captcha 錯），使用者就一定要重新選取上傳的檔案，對於使用者體驗算是個扣分（而且上傳檔案大的話很花時間，然後另外還有個上傳檔案大小限制、就又是另外一個議題了），要解決這問題一般來說就是靠 JavaScript 做些加強，例如針對 captcha 可以先用 ajax call 檢查 captcha ，正確的話就換個 session token 之類的回來，不過即使這樣，還是逃不了完整的 server side 表單檢查，所以也還要處理 ajax submit 後的表單錯誤訊息顯示。</p>
<p>不管是 server side 檢查後產生的錯誤訊息，還是 ajax call 之前檢查產生的錯誤訊息，理所當然都會放在欄位附近，不過還要讓訊息和欄位之間建立關聯，才好進一步做一些處理，例如使用者有更新欄位值之後會把錯誤訊息隱藏之類的，或許很多人會用父層 DOM 節點加上特殊的 class 包起來找，不過我比較偏好用 <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute"><code>aria-describedby</code></a>，大概會看起像是：</p>
<pre><code class="language-html">&lt;input id=&quot;mail&quot; name=&quot;mail&quot; type=&quot;email&quot; aria-describedby=&quot;mail-field-info&quot; /&gt;
&lt;span id=&quot;mail-field-info&quot;&gt;Required field!&lt;/span&gt;
</code></pre>
<p>這樣只要找的到 <code>#mail</code> 欄位，就可以透過他的 <code>aria-describedby</code> 屬性找到該欄位的相關訊息的 DOM 節點，另外值得注意的是，aria-describedby 值的格式是 <a href="https://www.w3.org/TR/wai-aria/states_and_properties#valuetype_idref_list">IDRefList</a>，不是單一個 ID，而是一個用空白切分的 ID 指標們，所以如果有這種情形，還可以在錯誤訊息的那個 DOM 節點加上  <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role"><code>role=&quot;alert&quot;</code></a> 給它用來辨識，其實就算只有一個 ID 也還是可以加上 role 屬性啦。如果真的需要用透過父層 DOM 節點來找的話，之前研究的結論是可以在預期的父層標籤用 <code>role=&quot;section&quot;</code>來方便定位，用 jQuery 大概會像是：</p>
<pre><code class="language-javascript">$fieldSection = $field.closest('[role=&quot;section&quot;]');
</code></pre>
<p>這個標籤下應該會包括欄位的標籤（label）、欄位的 input element 以及相關的資訊（說明、錯誤訊息）等。</p>
<p>另外還有一點，就是要用 ajax 上傳檔案的話，需要有支援 <a href="http://caniuse.com/#feat=xhr2">FormData</a> 的瀏覽器，並且如果用 jQuery 送 FormData 的話記得要加點設定：</p>
<pre><code class="language-javaascript">contentType: false,
processData: false
</code></pre>
<p>還有就是 ajax 送表單的目標 URL，我目前比較喜歡的作法是讀 <code>&lt;form&gt;</code> 的 <code>action</code> 屬性，也就是和瀏覽器自己送的 URL 一樣，然後透過 HTTP content negotiation 機制來決定回傳的格式，比較正確的作法是看 <code>Accept</code>，以 jQuery 來說，如果要 server 回 JSON 格式的話，可以加上：</p>
<pre><code class="language-javascript">dataType: 'json'
</code></pre>
<p>這樣送出的 request 就會帶上正確的 <code>Accept</code> header，向 server 端要求 <code>application/json</code> ，不過 <code>Accept</code> 的值解析起來比較麻煩些，其實是可以送出說 client 端可以接受多種格式，然後還加上個優先度的，也因此也有很多人是看 <code>X-Requested-With</code>，一般 library 如果是透過 XHR 發的 request 都會有這個 header；還有就是送出的資料格式（Content-Type），即使是 ajax call，我目前也都不用 JSON 了，還是用 <code>application/x-www-form-urlencoded</code> 為主，另外要上傳檔案的話當然一定要用 <code>multipart/form-data</code>，主要是因為：</p>
<ol>
<li>送 JSON 的話就不會是 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Simple_requests">simple request</a> 了，有些時候會比較麻煩，例如 Cross Origin 時會需要發 preflight，然後就可能遇到 AWS 以前不支援 preflight request 的 bug；</li>
<li>用這幾個老的 Content-Type 支援度還是比較高，對於 server 端實做和 client 端實做其實都相對友善一點，例如 jQuery 預設就依然是 form-urlencoded，没特别需求還是用標準一點的格式，特殊需求是例如 GraphQL，不過一般表單發送應該不會走 GraphQL 吧。</li>
</ol>
<p>其實 JSON 雖然已經有 RFC 規範了，不過在 Web 標準的世界還沒相當深入內化，不知道以後有沒有機會更加的內化整合進去。</p>
<p>前面有提到 ajax call 送出的目標 URL 我會偏好從，<code>&lt;form&gt;</code> 裡面讀，不過或許有的情境會讓 ajax call 必須要自己用不一樣的 API URL，這時候我建議還是把 API URL 寫在 <code>&lt;form&gt;</code> 的屬性裡面，這樣可以讓 JavaScript 的邏輯比較乾淨，也不用作什麼 mapping 或是常數來儲存 API 的 URL，維護修改時也不用兩邊檢查，屬性名稱可以用例如：<code>data-action</code> 之類的屬性，<code>data-*</code>屬性正好適合來做這些事情，不但有 DOM API 支援，jQuery 也可以用 <code>.data()</code> method 來讀取，命名上，如果覺得有個標準參考比較好，可以看看 <a href="https://github.com/rails/jquery-ujs">jQuery-ujs</a> 的設計，雖然比較長一點，它用的是：<a href="https://github.com/rails/jquery-ujs/blob/master/src/rails.js#L117"><code>data-ujs:submit-button-formaction</code></a>，我是覺得有些不正確啦，畢竟要送出表單不一定是點擊 submit button。</p>
<p>其實假設送出表單的動作都是滑鼠點擊 submit button 這是個親和力問題，如果只把 ajax call 送的函式 bind 在 submit button 的 click 事件上，這其實是不太好的，因為其實瀏覽器預設的行為是可以在很多地方用鍵盤送出表單，例如在 text input 上按下 Enter 鍵，或是在 submit button 上按下空白鍵之類的，所以針對表單還是要去 bind form submit 事件才是正解，至於 jQuery-ujs，其實也是這樣做的，它是用 delegate event 的形式去監聽傳遞到 document 上的 submit 事件，然後才去做後續的處理，只是命名上讓人覺得不太正確。</p>
<p>最後一項，前面說不用 JavaScript 做表單檢查（不看自訂輸入元件的話），其實有一個例外，就是上傳檔案的大小檢查，因為沒做對使用體驗的影響比較大，然後就是要還要記得針對 ajax call 送表單加上 <a href="https://tools.ietf.org/html/rfc7231#section-6.5.11">HTTP 413</a> Status Code 的錯誤訊息處理。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000900" baseName="a11y">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-06-07</b:date>
				<b:time>00:09:19</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>a11y</b:title>
			<b:content>
				<b:summary> 標題的 a11y 其實是 accessibility （親和力）的縮寫，現在英文世界似乎很大量的使用這個簡稱，今年的 JSConf EU 前陣子放出演講錄影，其中有一場是在講網路親和力的議題「YES, your site too can (and should) be accessible.」： 講者是 Laura Carvajal，在 Financial Times 工作，而這場演講就是他們改進 ft.com 網站親和力的過程和一些想法，我覺得精華在後半，前面是介紹自動化工具 Pa11y，a11y 是 accessibility，至於首字母的 P，看 README 應該是 pal 的意思；他們把這個自動化工具整合進他們的開發流程，然後慢慢的修改，直到把回報的問題都修完，其實現在自動化工具已經很強了，連顏色對比度夠不夠都能算出來（瀏覽器的開發工具以後也會有相關資訊），不過要驗證親和力做的如何，還是有很大量的驗證其實是需要手動測試。 手動測試的部分他們是請了 DAC (Digital Accessibility Centre) 來做，演講中還有一些測試者的測試影片，每位測試者都會先說他身體有怎樣的障礙，然後他邊測試會邊口述他在做什麼，遇到怎樣的問題，建議可以怎麼處理，感覺就是很專業的測試員。總之，在他們處理完所有 Pa11y...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34944175192/" title="Pa11y Dashboard by othree, on Flickr"><img src="https://farm5.staticflickr.com/4251/34944175192_71a6475ca3_b.jpg" width="1024" height="595" alt="Pa11y Dashboard, " srcset="https://farm5.staticflickr.com/4251/34944175192_71a6475ca3_b.jpg 1024w, https://farm5.staticflickr.com/4251/34944175192_32efc09322_h.jpg 1600w" /></a></p>
<p>標題的 a11y 其實是 accessibility （親和力）的縮寫，現在英文世界似乎很大量的使用這個簡稱，今年的 JSConf EU 前陣子放出演講錄影，其中有一場是在講網路親和力的議題「YES, your site too can (and should) be accessible.」：</p>
<div class="embed_16_9">
<iframe width="853" height="480" src="https://www.youtube.com/embed/H4FzW9oFObs?rel=0&amp;showinfo=0" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>講者是 Laura Carvajal，在 <a href="https://ft.com">Financial Times</a> 工作，而這場演講就是他們改進 ft.com 網站親和力的過程和一些想法，我覺得精華在後半，前面是介紹自動化工具 <a href="http://pa11y.org/">Pa11y</a>，a11y 是 accessibility，至於首字母的 <strong>P</strong>，看 README 應該是 pal 的意思；他們把這個自動化工具整合進他們的開發流程，然後慢慢的修改，直到把回報的問題都修完，其實現在自動化工具已經很強了，連顏色對比度夠不夠都能算出來（瀏覽器的開發工具以後也會有相關資訊），不過要驗證親和力做的如何，還是有很大量的驗證其實是需要手動測試。</p>
<p>手動測試的部分他們是請了 <a href="http://digitalaccessibilitycentre.org/">DAC</a> (Digital Accessibility Centre) 來做，演講中還有一些測試者的測試影片，每位測試者都會先說他身體有怎樣的障礙，然後他邊測試會邊口述他在做什麼，遇到怎樣的問題，建議可以怎麼處理，感覺就是很專業的測試員。總之，在他們處理完所有 Pa11y 檢測到的問題後，才請 DAC 做親和力評估驗證，結果還是收到了一份兩百多頁的測試報告，回報了各種 ft.com 網站上的親和力問題，之後又花了幾個月的時間來處理這些問題，最後終於得到 DAC 的<a href="http://digitalaccessibilitycentre.org/index.php/financial-times">認證</a>，這份認證資訊還蠻完整的，還說明了他們認證時網站的狀況，還有哪些問題待解決，甚至連可能會使用到但是還沒處理過親和力問題的同組織的網站（服務）都有列出來，另外在 ft.com 的<a href="https://www.ft.com/accessibility">親和力聲明</a>也可以看到 DAC 的認證。</p>
<p>接著 Laura Carvajal 介紹到如何實際體會（參與）這些親和力問題，其中一個很經典的狀態就是只用鍵盤做所有的控制，他提供了一些強迫自己只能用鍵盤操控的方法，並且在這種狀態下工作，其它還有像是使用 Mac 的 VoiceOver 做為 ScreenReader、使用 Windows 的高對比模式等等，他建議可以實際自己去體驗看看的，甚至強迫自己使用一陣子，會對這些問題更有體會，除此之外，他還透過一些活動來讓其他公司內的人也來參與，像是模擬一個障礙者會面臨的環境，以他的例子來說是把網頁模糊化，模擬視力障礙的使用者狀態，然後在這個狀態下請人去完成一些任務，像是填一個表單，並且有提供些獎勵增加參與人數，記得他們是提供 Amazon Credit，這樣可以讓更多人體會到需要依靠輔具來上網的不便，長久下來也可以讓這些工作的推動更加順利。</p>
<p>這幾天我也試著裝起了 <a href="https://github.com/pa11y/dashboard">Pa11y Dashboard</a> 開始做些檢測，看到的 Error 加上 Warning 數量真是有點驚人，再來慢慢處理吧...</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000899" baseName="graceful-degradation-background">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-05-24</b:date>
				<b:time>22:05:27</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>Graceful Degradation Background</b:title>
			<b:content>
				<b:summary> 昨天解了一個其實困擾蠻久的問題，就是在蘋果開始支援 Retina Display（HiDPI）之後，網站上使用的圖片也跟著要提升解析度，一般網頁會使用的圖片基本上就是 &lt;img /&gt; 標籤的圖片和用 CSS 設定的背景圖，對於 &lt;img /&gt; 標籤來說，提供高解析度的圖片並不會有向下相容的問題，當然瀏覽器和作業系統不支援的，抓了比較大的圖下來是比較浪費，也為此有 &lt;picture&gt; 標籤、srcset 屬性和 Client Hints 等標準來處理這個問題，不過我的需求只要圖片都能正常且正確的顯示。 &lt;img /&gt; 標籤只要有設定寬高，圖片顯示出來就會是預期的大小，但是 background-image 就不是了，在 background-size 出來前，背景圖多大，它在網頁上就會照那樣的尺寸下去畫，所以在不支援 background-size 的瀏覽器（IE6-8）上用 HiDPI 的背景圖就會很悲劇，雖然可以用 media query 來處理，不過解析度相關的 media query，如果要考慮到以前的瀏覽器，變化有點多，從早期的 device pixel ratio 到 dppx 到現在...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34733787991/" title="Rockman by othree, on Flickr"><img src="https://farm5.staticflickr.com/4224/34733787991_2076c3d7b5_b.jpg" width="1024" height="1024" alt="Rockman" srcset="https://farm5.staticflickr.com/4224/34733787991_2076c3d7b5_b.jpg 1024w, https://farm5.staticflickr.com/4224/34733787991_0ee7b95f3b_h.jpg 1600w" /></a></p>
<p>昨天解了一個其實困擾蠻久的問題，就是在蘋果開始支援 Retina Display（HiDPI）之後，網站上使用的圖片也跟著要提升解析度，一般網頁會使用的圖片基本上就是 <code>&lt;img /&gt;</code> 標籤的圖片和用 CSS 設定的背景圖，對於 <code>&lt;img /&gt;</code> 標籤來說，提供高解析度的圖片並不會有向下相容的問題，當然瀏覽器和作業系統不支援的，抓了比較大的圖下來是比較浪費，也為此有 <code>&lt;picture&gt;</code> 標籤、<code>srcset</code> 屬性和 <a href="http://blog.othree.net/log/2016/02/28/device-pixel-ratio-header/">Client Hints</a> 等標準來處理這個問題，不過我的需求只要圖片都能正常且正確的顯示。</p>
<p><code>&lt;img /&gt;</code> 標籤只要有設定寬高，圖片顯示出來就會是預期的大小，但是 <code>background-image</code> 就不是了，在 <code>background-size</code> 出來前，背景圖多大，它在網頁上就會照那樣的尺寸下去畫，所以在不支援 <code>background-size</code> 的瀏覽器（IE6-8）上用 HiDPI 的背景圖就會很悲劇，雖然可以用 media query 來處理，不過解析度相關的 media query，如果要考慮到以前的瀏覽器，變化有點多，從早期的 device pixel ratio 到 dppx 到現在 resoulution 用的 dpi，還要加上 vendor prefix，自己寫起來有點痛苦，而且原始碼變醜很多，當然，如果有用 PostCSS 就可以用 autoprefixer 解決，不過其實我不太喜歡寫 Media Query，所以都是能少則少（針對 CSS 的 polyfill 也是不太喜歡用），並且有些舊的專案沒有 PostCSS，所以就一直有這個問題，以前的處理方法就是幾種：</p>
<ul>
<li>真的寫 Media Query</li>
<li>用 <code>&lt;img /&gt;</code> 標籤模擬背景圖，也很麻煩（也可以用 polyfill，不過個人不想用）</li>
<li>大家一起用標準解析度的圖</li>
</ul>
<p>這些方法對我來說都算是 workaround 的方式，一直想找個漂亮乾淨一點的解法，直到昨天終於想到了，首先整理一下我的需求：</p>
<ul>
<li>可以有兩張圖不同解析度的圖</li>
<li>不要用 Media Query</li>
<li>有機會支援 HiDPI 的環境就用 HiDPI 的圖</li>
<li>舊瀏覽器顯示正確</li>
</ul>
<p>其實這些需求可以簡化成：**不支援 <code>background-size</code> 的就乖乖看低解析度的圖片吧**，其中隱含著一個現實狀況是，不支援 <code>background-size</code> 的瀏覽器都只能在不支援 HiDPI 的環境下跑，實做上基本的構想是先寫好一個基本背景的定義，然後再加上一個只有新瀏覽器看的懂得定義，這構想有了很久，卻到昨天才想到怎麼寫，結果如下：</p>
<pre><code class="language-css">background: #123456 url('the-bg.png') center center;
background: #123456 url('the-bg@2x.png') center center/32px 32px;
</code></pre>
<p>用了 <code>background</code> 可以把全部背景相關屬性寫在一起，而且如果解析失敗就整條失效的特性，以前因為我都會 <code>background-size</code> 單獨寫（有另外的原因），這種寫法就落入我的盲區，所以過了這麼久才想到，不過這方法不是萬能，還有些限制和使用時機：</p>
<ul>
<li>有需要支援 IE6-8 才需要，IE9 以上就有支援 <code>background-size</code></li>
<li>不考慮 HiDPI 時其實不需要 <code>background-size</code>，例如固定大小區塊的背景、用背景的 icon、有重複排列的背景等</li>
<li><code>background-size: cover;</code> 依然需要靠 polyfill 之類的來處理</li>
</ul>
<p>想出來之後，有開了 IE8 來測試，結果一如預期，這樣應該是 IE6-7 也會正確吧。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000898" baseName="telegram-instant-view">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-05-21</b:date>
				<b:time>23:45:17</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Telegram Instant View</b:title>
			<b:content>
				<b:summary> Telegram 前幾天發佈了 4.0，有幾個比較大的功能，包括了 Video Message、Payment for Bots 還有就是 Instant View 準備要開放給所有網頁使用了，Instant View 目的和 Facebook 的 Instant Article 以及 Google 的 AMP 一樣，都是為了提升使用者體驗，讓使用者能夠快的看到文章的內容，不過之前沒有開放，所以一直不知道背後的運作原理是怎樣，直到這次 4.0 發佈才得以一窺其原理，和 Instant Article 與 AMP 不一樣，不再是提供另一個新的版本，而是透過一種新的 template 語言來協助 Telegram service 把自己的網頁內容轉譯成 Instant Article 的內容（Instant View page...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34366696420/" title="Telegram Instant View by othree, on Flickr"><img src="https://farm5.staticflickr.com/4194/34366696420_ced4830286_b.jpg" width="1024" height="592" alt="Telegram Instant View, " srcset="https://farm5.staticflickr.com/4194/34366696420_ced4830286_b.jpg 1024w, https://farm5.staticflickr.com/4194/34366696420_83f48bbf29_h.jpg 1600w" /></a></p>
<p>Telegram 前幾天發佈了 4.0，有幾個比較大的功能，包括了 <a href="https://telegram.org/blog/video-messages-and-telescope">Video Message</a>、<a href="https://telegram.org/blog/payments">Payment for Bots</a> 還有就是 <a href="https://telegram.org/blog/instant-view">Instant View</a> 準備要<a href="https://telegram.org/blog/instant-view-contest-200K">開放給所有網頁使用</a>了，Instant View 目的和 Facebook 的 Instant Article 以及 Google 的 AMP 一樣，都是為了提升使用者體驗，讓使用者能夠快的看到文章的內容，不過之前沒有開放，所以一直不知道背後的運作原理是怎樣，直到這次 4.0 發佈才得以一窺其原理，和 Instant Article 與 AMP 不一樣，不再是提供另一個新的版本，而是透過一種新的 template 語言來協助 Telegram service 把自己的網頁內容轉譯成 Instant Article 的內容（Instant View page object），不完全算是程式語言，裡面比較像是一些定義，加上用 <a href="https://zh.wikipedia.org/zh-tw/XPath">XPath</a> 來做文件內容的選取，蠻意外會用 XPath 的，還好我對 XPath 有點經驗，就花了一點時間研究了一下，也把自己 blog 的 tempalte 基本版做出來了：</p>
<pre><code>?exists:  //article/div[@id=&quot;comments&quot;]

author:  &quot;othree&quot;
channel: &quot;@othree&quot;

body:     //article
title:    $body//h3[1]

cover: $body/section[@itemprop=&quot;articleBody&quot;]/p[1]/a[@itemprop=&quot;image&quot;]/img

published_date: $body/header/time[@itemprop=&quot;datePublished dateModified&quot;]/@datetime

@remove: //article/header
@remove: //article/footer
@remove: //article/div[@id=&quot;comments&quot;]
@remove: //noscript
@remove: //a[has-class(&quot;dsq-brlink&quot;)]
</code></pre>
<p>語法還算蠻好理解的，官方也提供了幾個有完整註解的<a href="https://instantview.telegram.org/samples/">範例</a>，仔細一看似乎之前其實也只有 medium 是非官方有支援的網站，也因為這個實做方式，對不同的網站就要有不同的 template 來處理，所以官方辦了個競賽，搶先替<a href="https://instantview.telegram.org/contest">清單上的網站</a>做出可用的 template 就會有獎金，目前個人網站雖然已經可以在官方的 editor 做 template、驗證並發測試連結，不過還要等 domain 被加進白名單後才會真的啟用，目前這個關卡還沒開放就是。</p>
<p>其實我是比較喜歡這種實做方式的，不用為了增加支援一個新的網路服務就多做一個版本，不會影響原本的網頁原始碼，不會讓  <code>&lt;head&gt;</code> 越來越肥大，當然缺點就是網站改版，HTML 結構有變化的話就要跟著修改 template，不過我是認為這個實做方法對於網路生態是比較好一些的。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000897" baseName="movabletype-and-commonmark">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-05-07</b:date>
				<b:time>09:47:24</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>MovableType and CommonMark</b:title>
			<b:content>
				<b:summary> 我這邊用的 blog 系統是 MovableType 不是新聞了，然後也因為用 MovableType 我一直都只能用最初版的 markdown 引擎，沒錯，就是 Daring Fireball 作者 John Gruber 的那一版，這個版本其實已經可以滿足我大部分的需求了，不過當我想要用 Typora 寫文章的時候，就遇到問題了，Typora 在輸出成 Markdown 文件時，code block 只支援三個 ``` 包起來的 Fenced Code Block，而不支援 Indented Code Block，剛好初版的 Markdown 格式只有 Indented Code Block，兩者其實要比的話，我是比較喜歡 Indented Code Block 的，比較符合...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33655820694/" title="Typora by othree, on Flickr"><img src="https://farm5.staticflickr.com/4175/33655820694_e30f901655_b.jpg" width="650" height="622" alt="Typora" srcset="https://farm5.staticflickr.com/4175/33655820694_e30f901655_b.jpg 1024w" /></a></p>
<p>我這邊用的 blog 系統是 <a href="https://www.movabletype.org/">MovableType</a> 不是新聞了，然後也因為用 MovableType 我一直都只能用最初版的 markdown 引擎，沒錯，就是 Daring Fireball 作者 John Gruber 的<a href="http://daringfireball.net/projects/markdown/">那一版</a>，這個版本其實已經可以滿足我大部分的需求了，不過當我想要用 <a href="https://typora.io/">Typora</a> 寫文章的時候，就遇到問題了，Typora 在輸出成 Markdown 文件時，code block 只支援三個 ``` 包起來的 <a href="http://spec.commonmark.org/0.27/#fenced-code-block">Fenced Code Block</a>，而不支援 <a href="http://spec.commonmark.org/0.27/#indented-code-block">Indented Code Block</a>，剛好初版的 Markdown 格式只有 Indented Code Block，兩者其實要比的話，我是比較喜歡 Indented Code Block 的，比較符合 Markdown 的 sense，不過用 Fenced Code Block 有個優點是可以指定程式碼的語言，也因此才能夠有 syntax highlight 的效果。</p>
<p>總之，因為這個原因，用 Typora 寫技術文章對我來說就很不方便，一直以來都有想解決這個問題，前兩天還去 Typora 發 issue 說希望他們可以支援 Indented Code Block，結果發完沒多久，躺在床上快要睡覺的時候突然想到，CommonMark 這麼多語言有實做，搞不好有 Perl 的啊，結果快速搜尋了一下，還真的有一個 <a href="https://github.com/nwellnhof/perl-commonmark">perl-commonmark</a>，橋接 Perl 和 <a href="https://github.com/jgm/cmark">cmark</a>，也有發佈到 CPAN 上，當下心裡就盤算著，隔天起來要來把它接到 MovableType 去看看。</p>
<p>結果隔天實做起來是沒花我太多時間，雖然對 Perl 不熟，但是可以直接拿初版 Markdown.pl 來修改，原本的 Markdown.pl 這個檔案裡面實際上自己是一個 Markdown 的 Perl Package，同時也可以作為 MovableType 的 plugin script，我只需要把 plugin script 的部分留下，然後把最後做轉換的 function 換掉就好了，當然系統要裝好 cmark 和 Perl 的 CommonMark，cmark 應該很多環境都有了，我在 archlinux 上是直接用 pacman 裝：</p>
<pre><code class="language-bash">pacman -S cmark
</code></pre>
<p>然後 CommonMark 是用 CPAN 裝，本來要用 cpanminus 的不知道為何用它會抓不到 package：</p>
<pre><code class="language-bash">sudo CPAN CommonMark
</code></pre>
<p>我的 nginx 跑 CGI 時用的 perl 不是系統預設位置的，所以 CPAN 執行檔的路徑我是特別指定給他的，這樣 MovableType 執行的時候才找的到 CommonMark Module，實際上沒花多少功夫，我就把 MovableType 和 CommonMark 串起來了，當下心情真的是非常難以言喻，一來是這個問題其實存在已經許久了，二是我竟然把第一個支援 Markdown 的部落格系統接上 2017 年最新的 CommonMark 實做，雖然現在應該是也幫不到什麼人了。不過沒高興多久，就發現在 UTF-8 字元似乎有些狀況，有中文的文章會爛掉，或是 Dashboard 那頁的文字會變亂碼，後來為了這個問題又弄了好幾個小時，推測問題應該是因為 cmark 那邊回來的字串已經失去編碼的 metadata，所以在做 summary 切文字的時候，就會出現切錯地方的狀況，花了很多時間交叉比對和測試，最後的結果只是用 Perl 的 Encoding 把 cmark 傳回來的字串重新 encode 過而已，其實很簡單。除此之外，我其實還有試著想接看看 <a href="https://github.com/github/cmark">cmark-gfm</a>，因為它還多支援了 Table，不過幾次測試都不太順利，就沒繼續嘗試下去了。</p>
<p>目前的成果放在 GitHub 上，取名叫 <a href="https://github.com/othree/MT-CommonMark">MT-CommonMark</a>，附上簡單的安裝說明，暫時是沒打算發去 movabletype.org 那邊。</p>
<p>做好之後 MT-CommonMark 之後，我就開始在部落格上測試程式碼的 syntax highlight了，研究一陣子之後選擇的是 <a href="http://prismjs.com/">prismjs</a>，選擇它的原因很多，不過有兩個是比較主要的：</p>
<ul>
<li>作者有 <a href="http://lea.verou.me/">Lea Verou</a></li>
<li>支援的 class name 格式剛好和 cmark 輸出的一樣</li>
</ul>
<p>結果兩者也很順利的搭配起來，中間就沒有再遇到什麼問題了。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000896" baseName="test-commonmark">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-05-05</b:date>
				<b:time>11:17:36</b:time>
			</b:datetime>
			<b:category>about</b:category>
			<b:title>Test CommonMark syntax</b:title>
			<b:content>
				<b:summary>Fenced code block var a = 1;...</b:summary>
				<b:mainContent><p>Fenced code block</p>
<pre><code class="language-javascript">var a = 1;
</code></pre>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000895" baseName="vim-packages">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-05-02</b:date>
				<b:time>23:05:39</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Vim Packages</b:title>
			<b:content>
				<b:summary>Vim 8 有兩個我覺得比較大的新功能，一是開始有 Asynchronous I/O，二是開始有官方的 package 機制了，這篇主要想介紹這官方的 package 機制，眾所周知，以前 Vim 實在很難管理自己裝的 Vim script 和 plugin（後文以 plugin 為主），因為原始的設計是自己把檔案丟到 runtime 目錄下的對應位置，裝的東西一多，就會開始混亂起來，最常發生的就是越來越多垃圾，不知道還需不需要用，再來就是可能會有檔名重複的情形，所以升級某個 plugin 遇到有檔名重複時，直接覆蓋過去可能也會出錯，這個問題直到 Tim Pope 推出 pathogen.vim 後才被解決，pathogen 是藉由修改 runtimepath 變數（有點像是系統的 PATH 環境變數，可以有多個路徑）來讓不同的 Vim plugin 可以放在各自的子目錄內，從此一舉解決了 Vim plugin 的管理問題，當然現在很多人用的 Vundle、neobundle、vim-plug 等，基礎原理應該都是一樣的。 Vim...</b:summary>
				<b:mainContent><p>Vim 8 有兩個我覺得比較大的<a href="http://vimhelp.appspot.com/version8.txt.html">新功能</a>，一是開始有 <a href="http://vimhelp.appspot.com/channel.txt.html">Asynchronous I/O</a>，二是開始有官方的 package 機制了，這篇主要想介紹這官方的 package 機制，眾所周知，以前 Vim 實在很難管理自己裝的 Vim script 和 plugin（後文以 plugin 為主），因為原始的設計是自己把檔案丟到 <a href="http://vimhelp.appspot.com/options.txt.html#%27runtimepath%27">runtime 目錄</a>下的對應位置，裝的東西一多，就會開始混亂起來，最常發生的就是越來越多垃圾，不知道還需不需要用，再來就是可能會有檔名重複的情形，所以升級某個 plugin 遇到有檔名重複時，直接覆蓋過去可能也會出錯，這個問題直到 Tim Pope 推出 <a href="https://github.com/tpope/vim-pathogen">pathogen.vim</a> 後才被解決，pathogen 是藉由修改 <code>runtimepath</code> 變數（有點像是系統的 <code>PATH</code> 環境變數，可以有多個路徑）來讓不同的 Vim plugin 可以放在各自的子目錄內，從此一舉解決了 Vim plugin 的管理問題，當然現在很多人用的 <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a>、<a href="https://github.com/Shougo/neobundle.vim">neobundle</a>、<a href="https://github.com/junegunn/vim-plug">vim-plug</a> 等，基礎原理應該都是一樣的。</p>
<p>Vim 8 推出的 package 機制，雖然其基本原理也是增加 runtimepath，不過它其實定位和 pathogen 不一樣，設計上是再高一個階層，不過也因此和 pathogen 的路徑設計不相容，pathogen 之類的都是把 plugin 分目錄放到 <code>~/.vim/bundle</code> 這，例如：</p>
<pre><code>~/.vim/bundle/html5.vim
~/.vim/bundle/yajs.vim
</code></pre>
<p>然後會去把這些路徑加到 <code>runtimepath</code> 內（有些 plugin 是全自動、有些要設定、有些可以加條件），寫成 glob 型式大概是 <code>~/.vim/bundle/*</code>，不過新的 package 定義上是數個 plugin 的組合，所以一個 package 下是可能有多個 plugin 的，放 package 的路徑一樣在 <code>~/.vim</code> 下面，預設在 <code>~/.vim/pack</code>，也可以修改 <code>packpath</code> 來換位置，不過東西不是直接放進去就好了，一開始會被加進去 runtimepath 的路徑實際上是 <code>~/.vim/pack/*/start/*</code>，在這個 glob 表示式中，第一個 <code>*</code> 是 package 層，第二個 <code>*</code> 則是 package 裡面的 plugins，例如我可以建立一個自己在編輯 JavaScript 時用的 plugin 組合，就先叫 <strong>my-js</strong> 好了，我就把東西都丟到 <code>~/.vim/pack/my-js/start/*</code> ，大概像是：</p>
<pre><code>~/.vim/pack/my-js/start/yajs.vim
~/.vim/pack/my-js/start/javascript-libraries-syntax.vim
~/.vim/pack/my-js/start/simple-javascript-indenter
</code></pre>
<p>至於中間的 <code>start</code> 則是表示啟動就會去讀進來的意思，類似於以前 pathogen 的流程，而除了 <code>start</code>之外，還有一個路徑是 <code>opt</code>，是 optional 的意思，放在 <code>opt</code> 下面的 package 不會在啟動時就讀進來，而是要下 <code>packadd</code> 指令，例如 <code>packadd foo</code> 就會去找 <code>~/.vim/pack/*/opt/foo/</code> 這些位置有沒有東西可以用，文件上提供的一個使用情境是根據 Vim 版本決定要讀入哪一個 optional plugin，可以用 Vim script 做一些判斷來決定要讀那些，或是使用者自己執行 packadd，不過我思考一下是覺得後者的情境似乎不太有用，所以這個設計主要的目標應該還是做一些自動化判斷並讀入 plugin 為主吧。</p>
<p>當然，package 也可以只包一個 plugin，理論上可以直接這樣發佈 Vim plugin，不過現在這樣發佈，就會不相容於目前使用量最大的 pathogen 架構，所以我也還沒看過有人這樣直接發佈的，像 vim-css3-syntax 就還是用舊的資料匣架構，但是在 README 內加上對應 Vim package 的<a href="https://github.com/hail2u/vim-css3-syntax/blob/master/README.md#vim-package">安裝方式</a>，這是我目前覺的對於 Vim package 普及化的最大阻力；另外還有一個缺點是，如果完全用 Vim package 機制來裝 plugin，那其實也沒有地方紀錄你安裝了那些東西，和最早的時候，或是單純只有 pathogen 時一樣，要裝新機器什麼的就有點麻煩。目前我是覺得 Vim package 還不會很快普及，它比較像是出來取代 pathogen 的功能，應該接著要等有基於 Vim package 的 package manager 出來才會開始有普及的機會吧。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000894" baseName="japan-self-drive">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-04-29</b:date>
				<b:time>22:58:39</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>日本自駕</b:title>
			<b:content>
				<b:summary> 這篇想要記錄一下第一次去日本自駕，就前陣子去了沖繩一趟，當然就選擇租車自駕，這篇用條列式記錄一下： 租車公司是 OTS，因為第一次的關係，所以就盡量走大眾路線 不過 OTS 因為比較大間，位置離機場也比較遠，其實比較花時間 租的車款是 Toyota C-HR，看到有特價加上早鳥，不過也還是比一般車款貴 不免俗的離開租車公司時要刷一下雨刷 大約第二天就不太有左右駕習慣問題了，回國後也沒有左右問題 沖繩比較偏遠，部分路段的路面狀況其實也不好 幾乎所有路口都可以右轉，有右轉道，可能是沖繩才這樣 晚上山路其實沒什麼路燈，交通號誌反光效果超強的，強到覺得會刺眼 不過一部份應該是因為車燈很亮，倒是號誌都很乾淨是真的 以後應該還想要東北、北海道也去試試看自駕 針對 Toyota C-HR 的部分： 後座空間真的小、後座車窗也小 四人三個行李箱有點勉強，後行李箱只能放兩個中 size 的行李箱 一大一中也不行，剩下一個大的是把後座一個位子拉倒才放進去 有個自動切換遠光燈（AHB）的功能，正確性很高，實在很方便 不過車門在開動車子後不會自動上鎖 開鎖的時候地上會有投影，有點騷包(?) 開起來感覺其實是還不錯啦...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34028951701/" title="沖繩 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2805/34028951701_c6d1936940_b.jpg" width="1024" height="683" alt="沖繩" srcset="https://farm3.staticflickr.com/2805/34028951701_c6d1936940_b.jpg 1024w, https://farm3.staticflickr.com/2805/34028951701_5720ab1710_h.jpg 1600w" /></a></p>

<p>這篇想要記錄一下第一次去日本自駕，就前陣子去了沖繩一趟，當然就選擇租車自駕，這篇用條列式記錄一下：</p>

<ul>
<li>租車公司是 OTS，因為第一次的關係，所以就盡量走大眾路線</li>
<li>不過 OTS 因為比較大間，位置離機場也比較遠，其實比較花時間</li>
<li>租的車款是 Toyota C-HR，看到有特價加上早鳥，不過也還是比一般車款貴</li>
<li>不免俗的離開租車公司時要刷一下雨刷</li>
<li>大約第二天就不太有左右駕習慣問題了，回國後也沒有左右問題</li>
<li>沖繩比較偏遠，部分路段的路面狀況其實也不好</li>
<li>幾乎所有路口都可以右轉，有右轉道，可能是沖繩才這樣</li>
<li>晚上山路其實沒什麼路燈，交通號誌反光效果超強的，強到覺得會刺眼 <br />
不過一部份應該是因為車燈很亮，倒是號誌都很乾淨是真的</li>
<li>以後應該還想要東北、北海道也去試試看自駕</li>
</ul>

<p>針對 Toyota C-HR 的部分：</p>

<ul>
<li>後座空間真的小、後座車窗也小</li>
<li>四人三個行李箱有點勉強，後行李箱只能放兩個中 size 的行李箱 <br />
一大一中也不行，剩下一個大的是把後座一個位子拉倒才放進去</li>
<li>有個自動切換遠光燈（<a href="http://www.toyota-global.com/innovation/safety_technology/safety_technology/technology_file/active/ahb.html">AHB</a>）的功能，正確性很高，實在很方便</li>
<li>不過車門在開動車子後不會自動上鎖</li>
<li>開鎖的時候地上會有投影，有點騷包(?)</li>
<li>開起來感覺其實是還不錯啦</li>
</ul>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33201465513/" title="沖繩 okinawa by othree, on Flickr"><img src="https://farm3.staticflickr.com/2946/33201465513_939151304d_b.jpg" width="1024" height="683" alt="沖繩 okinawa, " srcset="https://farm3.staticflickr.com/2946/33201465513_939151304d_b.jpg 1024w, https://farm3.staticflickr.com/2946/33201465513_ea0cd7f8c5_h.jpg 1600w" /></a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000893" baseName="first-contribution-to-nginx">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-04-26</b:date>
				<b:time>14:35:29</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>My First Contribution to Nginx</b:title>
			<b:content>
				<b:summary> 因為工作上的需要，所以其實我還蠻常會編輯 nginx configuration file 的，理所當然的編輯器是用 vim，然後就會對 nginx 設定檔的支援有意見，一般人用的 nginx 設定檔的 vim script 其實是 nginx repository 的 contrib 目錄裡面的那份，這份 vim script 其實本來也是獨立的，不過原作者好像把他捐進去 nginx 裡面，之後就一直都在裡面了，也因此之後更新就很不頻繁。 然後因為檔案都放在 nginx repository 裡面，Vim 要使用其實不太方便，所以 Github 上還看的到不少人單獨抽出來，我一開始也是 fork mosky 的來用，後來就直接在自己的 repository 上面修改了，改一陣子之後就開始想要推回 upstream，也就是 nginx 的程式庫，然後就開始了這段協工旅程(?)。 要發修改上...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/25580381505/" title="nginx conf by othree, on Flickr"><img src="https://farm2.staticflickr.com/1525/25580381505_0825ef9c24_b.jpg" width="570" height="427" alt="nginx conf" srcset="https://farm2.staticflickr.com/1525/25580381505_0825ef9c24_b.jpg 1024w" /></a></p>

<p>因為工作上的需要，所以其實我還蠻常會編輯 nginx configuration file 的，理所當然的編輯器是用 vim，然後就會對 nginx 設定檔的支援有意見，一般人用的 nginx 設定檔的 vim script 其實是 nginx repository 的 contrib 目錄裡面的那份，這份 vim script 其實本來也是獨立的，不過原作者好像把他捐進去 nginx 裡面，之後就一直都在裡面了，也因此之後更新就很不頻繁。</p>

<p>然後因為檔案都放在 nginx repository 裡面，Vim 要使用其實不太方便，所以 Github 上還看的到不少人單獨抽出來，我一開始也是 fork <a href="https://github.com/moskytw/nginx-contrib-vim">mosky</a> 的來用，後來就直接在<a href="https://github.com/othree/nginx-contrib-vim">自己的 repository</a> 上面修改了，改一陣子之後就開始想要推回 upstream，也就是 nginx 的程式庫，然後就開始了這段協工旅程(?)。</p>

<p>要發修改上 upstream，第一步自然是看一下<a href="http://nginx.org/en/docs/contributing_changes.html">如何貢獻</a>，節錄這邊幾個重點：</p>

<ol>
<li>用 <a href="http://mailman.nginx.org/mailman/listinfo/nginx-devel">nginx-devel</a> 這個 mailing list 做討論</li>
<li>發 patch 前有一些注意事項，不過我改 vim script 比較沒關係</li>
<li>Patch 也是用 email 發到 nginx-devel，有範例</li>
<li>推薦用 <a href="https://www.mercurial-scm.org/wiki/PatchbombExtension">patchbomb</a></li>
<li>要先簽 <a href="https://www.nginx.com/resources/wiki/contributing/cla/">CLA</a>（不過目前這條已經不見了，改成最後說發 patch 等於同意用他們專案的 LCIENSE）</li>
</ol>

<p>總之我就照這份，先去訂閱了 nginx-devel 觀察一陣子，然後就直接把我的<a href="http://mailman.nginx.org/pipermail/nginx-devel/2017-February/009489.html">修改</a>整個丟上去了，一開始是直接用 Gmail 發，把 patch 檔內容直接複製貼過去，產生 patch 檔的方法是：</p>

<pre><code>hg export &gt; something.patch
</code></pre>

<p><code>hg export</code> 會直接輸出最後一個 commit 的 patch 內容到 STDOUT，然後就直接用 Gmail 發過去，結果 review 的 <a href="http://mdounin.ru/">Maxim Dounin</a> 說他沒辦法 apply patch，可能是因為我的 mail client 的關係，建議我用 <a href="https://www.mercurial-scm.org/wiki/PatchbombExtension">patchbomb</a> 發，所以就研究搜尋了一下，發現他是直接發 email 的機制，所以要把帳號密碼都寫到設定內，找了一篇 Gmail 的<a href="http://blog.sidkalra.com/2009/02/using-gmail-with-hgs-patchbomb-extension/">設定範例</a>，搭配 Google account 的應用程式密碼，設定範例如下：</p>

<pre><code>[extensions]
hgext.patchbomb =

[email]
from=othree &lt;othree@gmail.com&gt;
to=nginx-devel@nginx.org
cc=othree@gmail.com
method=smtp

[smtp]
host=smtp.gmail.com
port=587
username=othree@gmail.com
password=[gmail_password]
tls=True
</code></pre>

<p>把這些資訊填入 <code>.hg/hgrc</code> 這個檔案內，然後就可以用 <code>hg email -o --test</code> 來測試看看，這個指令會把完整的原始信件內容，包括 header 等都顯示出來（丟到 STDOUT），如果正式要發就把 <code>--test</code> 拿掉就好了。</p>

<p>確認一切沒問題後，我就改用 patchbomb 發 patch 到 nginx-devel 了，結果還是被拒絕了，問題主要是這個 patch 一次修改太多，理想上應該是不同目的的修改放到不同 patch 內，當然這和我一開始的預想不一樣就是了，我一開始的想法是因為 contrib 這邊的東西，相對於 nginx 本體的原始碼來說比較次要，所以盡量減少 commit 數，其實如果我有先去問過應該是可以少繞這段路，總之，為了一個一個修改送出，我又開了一個 github repository，叫做 <a href="https://github.com/othree/nginx-contrib-vim-patch">nginx-contrib-vim-patch</a>，想要慢慢把我的 nginx-contrib-vim 內的更動搬過去，接著開始的，就是漫長的 review 和溝通了。</p>

<p>其實我完全沒想到 Maxim Dounin 會這麼認真的 review，不止會看我這樣改是要達到什麼目的，還有認真測試，結果被抓出一堆問題，雖然都是奇妙的 conf 寫法，合語法，但是應該不會有人這樣寫的 case，這些 case 我也開始慢慢收集到 github 上的 <a href="https://github.com/othree/nginx-conf-test">nginx-conf-test</a>，方便之後測試用，總之來回許久，終於有一部分比較簡單的東西先進去 nginx repository 了，然後我發現外部貢獻者都會在 <a href="https://nginx.org/en/CHANGES">change log</a> 那邊被感謝，我貢獻進去的目前應該都在 1.11.11 那版，其實只有把新的 directive 補上（core modules, 3rd party modules）和幾個 protocol 參數的 highlight，至於其他的修改還進不去，目前看起來會是一場長期抗戰，主要是因為 reviewer 對於期望的目標和我不一樣，目前大概會維持兩個版本吧，一邊弄<a href="https://github.com/othree/nginx-contrib-vim">自己希望的</a>，一邊抽東西送回去 upstream，不得不說主事者控制太緊會讓貢獻者動力被削減不少。</p>

<p>貢獻 nginx 的過程讓我體會到以前的開源協做的模式（應該是吧？），用 mailing list 溝通，發 Patch、code review、做討論，這些點來看，nginx 的流程其實是非常老派，和現在用 Github 做溝通、協做 的流程差很大，門檻也高不少，當然這不一定是壞事，還是要看專案性質，在 Github 這類平台上做這些協做流程的話，門檻降低了，其實可能隨之而來的問題就是太多人進來造成貢獻品質落差很大，反而會吃掉主力人員的時間，剛好今天也看到知乎上有一篇「<a href="https://www.zhihu.com/question/36292298/answer/160028010">維護一個大型開源專案是怎樣的體驗？</a>」，裡面就有提到 VSCode 的狀況，變成還需要排人專門處理 issue 和 PR，感覺就很可怕。</p>

<p>順帶一題，nginx 的固定貢獻者當中不少中國人啊。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000892" baseName="japan-new-year">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-04-11</b:date>
				<b:time>22:06:08</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>日本跨年</b:title>
			<b:content>
				<b:summary> 去年年底臨時冒出了個去日本關西跨年的行程，由於之前有聽聞日本新年可能會變空城，所以就認真的研究了一下行程，主要擔心的是 12/31 和 1/1 兩天，這趟住的地點是在大阪，考慮了幾個行程，其中 12/31 的選項是： 晚上早點買超市的晚餐回飯店看紅白，要跨年再看要不要去神社參拜 去京都一天，因為 12/31 到 1/1 終夜交通不會中斷，所以還可以考慮跨年參拜完才回來 1/1 則是： 環球影城玩整天 去看還很白的姬路城，1/1 有特別免費開放 後來的決定是 12/31 去京都一天，不過結果沒待到跨年，大概十二點前就回到大阪了，然後 1/1 去姬路城，因為環球影城 1/1 預期人會很多，連 pass 都買不到了，加上以後來應該也還不會有損失，但是姬路城應該只會越來越不白，不過後來才發現環球影城有顆金氏世界記錄的聖誕樹 最後一年展出... 總之，以下是 12/31 的清水寺：...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32146540906/" title="八坂神社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/470/32146540906_eb9801be18_b.jpg" width="1024" height="683" alt="八坂神社, " srcset="https://farm1.staticflickr.com/470/32146540906_eb9801be18_b.jpg 1024w, https://farm1.staticflickr.com/470/32146540906_8915765235_h.jpg 1600w" /></a></p>

<p>去年年底臨時冒出了個去日本關西跨年的行程，由於之前有聽聞日本新年可能會變空城，所以就認真的研究了一下行程，主要擔心的是 12/31 和 1/1 兩天，這趟住的地點是在大阪，考慮了幾個行程，其中 12/31 的選項是：</p>

<ul>
<li>晚上早點買超市的晚餐回飯店看紅白，要跨年再看要不要去神社參拜</li>
<li>去京都一天，因為 12/31 到 1/1 終夜交通不會中斷，所以還可以考慮跨年參拜完才回來</li>
</ul>

<p>1/1 則是：</p>

<ul>
<li>環球影城玩整天</li>
<li>去看還很白的姬路城，1/1 有特別免費開放</li>
</ul>

<p>後來的決定是 12/31 去京都一天，不過結果沒待到跨年，大概十二點前就回到大阪了，然後 1/1 去姬路城，因為環球影城 1/1 預期人會很多，連 pass 都買不到了，加上以後來應該也還不會有損失，但是姬路城應該只會越來越不白，不過後來才發現環球影城有顆金氏世界記錄的<a href="https://twitter.com/hashtag/USJ%E3%83%A9%E3%82%B9%E3%83%88%E3%83%84%E3%83%AA%E3%83%BC?src=hash">聖誕樹</a> 最後一年展出...</p>

<p>總之，以下是 12/31 的清水寺：</p>
</b:mainContent>
				<b:extendContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31374251433/" title="清水寺 by othree, on Flickr"><img src="https://farm1.staticflickr.com/455/31374251433_6516d8d58c_b.jpg" width="1024" height="683" alt="清水寺" srcset="https://farm1.staticflickr.com/455/31374251433_6516d8d58c_b.jpg 1024w, https://farm1.staticflickr.com/455/31374251433_0e5c7490cb_h.jpg 1600w" /></a></p>

<p>還有整修到一半的地方可以拍：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31343174914/" title="清水寺 by othree, on Flickr"><img src="https://farm1.staticflickr.com/681/31343174914_1c15753116_b.jpg" width="1024" height="683" alt="清水寺, " srcset="https://farm1.staticflickr.com/681/31343174914_1c15753116_b.jpg 1024w, https://farm1.staticflickr.com/681/31343174914_f777bcf9e3_h.jpg 1600w" /></a></p>

<p>二年坂、三年坂：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31374231273/" title="京都 by othree, on Flickr"><img src="https://farm1.staticflickr.com/372/31374231273_9d0dd55e07_b.jpg" width="1024" height="683" alt="京都, " srcset="https://farm1.staticflickr.com/372/31374231273_9d0dd55e07_b.jpg 1024w, https://farm1.staticflickr.com/372/31374231273_ae454b0cb8_h.jpg 1600w" /></a></p>

<p>人是很多，不過好像也沒比櫻花季多就是，午餐就在這邊路上的茶寮都路里吃的，沿路還買了不少東西吃，八坂神社那邊也不少攤販。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32146503696/" title="八坂神社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/632/32146503696_ebdb936c70_b.jpg" width="1024" height="683" alt="八坂神社, " srcset="https://farm1.staticflickr.com/632/32146503696_ebdb936c70_b.jpg 1024w, https://farm1.staticflickr.com/632/32146503696_a86795c18c_h.jpg 1600w" /></a></p>

<p>然後很多車站都有貼當天限定的終夜電車時刻表，下面是在稻荷大社拍的：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31809406240/" title="京都 by othree, on Flickr"><img src="https://farm1.staticflickr.com/769/31809406240_89f640caf8_b.jpg" width="1024" height="683" alt="京都, " srcset="https://farm1.staticflickr.com/769/31809406240_89f640caf8_b.jpg 1024w, https://farm1.staticflickr.com/769/31809406240_679d92aeb9_h.jpg 1600w" /></a></p>

<p>還準備了臨時入口要應付人潮：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32184301305/" title="伏見稻荷大社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/259/32184301305_9297a52a44_b.jpg" width="1024" height="683" alt="伏見稻荷大社, " srcset="https://farm1.staticflickr.com/259/32184301305_9297a52a44_b.jpg 1024w, https://farm1.staticflickr.com/259/32184301305_45cbb30bd6_h.jpg 1600w" /></a></p>

<p>不過我們去的時間還蠻早的，所以還沒啟用，倒是有些攤位都已經開張了：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31809385180/" title="伏見稻荷大社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/760/31809385180_16ea7bf524_b.jpg" width="1024" height="683" alt="伏見稻荷大社, " srcset="https://farm1.staticflickr.com/760/31809385180_16ea7bf524_b.jpg 1024w, https://farm1.staticflickr.com/760/31809385180_20fa389ed0_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32066349271/" title="伏見稻荷大社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/685/32066349271_9eaa940677_b.jpg" width="1024" height="683" alt="伏見稻荷大社, " srcset="https://farm1.staticflickr.com/685/32066349271_9eaa940677_b.jpg 1024w, https://farm1.staticflickr.com/685/32066349271_70fa8d00ae_h.jpg 1600w" /></a></p>

<p>特別要說這個就是所謂的厚切牛舌：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31343022084/" title="伏見稻荷大社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/261/31343022084_14ba10cdbb_b.jpg" width="1024" height="683" alt="伏見稻荷大社, " srcset="https://farm1.staticflickr.com/261/31343022084_14ba10cdbb_b.jpg 1024w, https://farm1.staticflickr.com/261/31343022084_665fcb63a8_h.jpg 1600w" /></a></p>

<p>烤好的：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32066327651/" title="伏見稻荷大社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/634/32066327651_f573b06301_b.jpg" width="1024" height="683" alt="伏見稻荷大社, " srcset="https://farm1.staticflickr.com/634/32066327651_f573b06301_b.jpg 1024w, https://farm1.staticflickr.com/634/32066327651_de5f4d1bfc_h.jpg 1600w" /></a></p>

<p>要回大阪前，發現平常往觀光區（清水寺）的那排公車站，全部變成往北野天滿宮的專車：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31342958224/" title="京都 by othree, on Flickr"><img src="https://farm1.staticflickr.com/491/31342958224_41f40fd676_b.jpg" width="1024" height="683" alt="京都, " srcset="https://farm1.staticflickr.com/491/31342958224_41f40fd676_b.jpg 1024w, https://farm1.staticflickr.com/491/31342958224_60a74a1982_h.jpg 1600w" /></a></p>

<p>據說北野天滿宮的新年參拜人潮是全日本最多的，看來所言不假。</p>

<p>然後是 1/1 的姬路，雖然百貨商場都沒開，不過商店街還是有些店面和吃的有開，而且挑到還不錯吃的穴子魚專門店，<a href="http://www.himeji-anago-iccyoura.com/">一張羅</a>：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32060711152/" title="姬路 by othree, on Flickr"><img src="https://farm1.staticflickr.com/441/32060711152_a8487254e4_b.jpg" width="1024" height="683" alt="姬路, " srcset="https://farm1.staticflickr.com/441/32060711152_a8487254e4_b.jpg 1024w, https://farm1.staticflickr.com/441/32060711152_80efe75024_h.jpg 1600w" /></a></p>

<p>姬路城城區很大，看起來保存的很完整，從車站出來就看的到，很漂亮：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31833769060/" title="姬路城 by othree, on Flickr"><img src="https://farm1.staticflickr.com/303/31833769060_d804c1c92b_b.jpg" width="1024" height="683" alt="姬路城, " srcset="https://farm1.staticflickr.com/303/31833769060_d804c1c92b_b.jpg 1024w, https://farm1.staticflickr.com/303/31833769060_351363a411_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32171317826/" title="姬路城 by othree, on Flickr"><img src="https://farm1.staticflickr.com/637/32171317826_e1ed4da92b_b.jpg" width="1024" height="683" alt="姬路城, " srcset="https://farm1.staticflickr.com/637/32171317826_e1ed4da92b_b.jpg 1024w, https://farm1.staticflickr.com/637/32171317826_c076c179ab_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31368031054/" title="姬路城 by othree, on Flickr"><img src="https://farm1.staticflickr.com/631/31368031054_aae9f81d44_b.jpg" width="1024" height="683" alt="姬路城, " srcset="https://farm1.staticflickr.com/631/31368031054_aae9f81d44_b.jpg 1024w, https://farm1.staticflickr.com/631/31368031054_03f7e53465_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31399045233/" title="姬路城 by othree, on Flickr"><img src="https://farm1.staticflickr.com/721/31399045233_f8c12f10b4_b.jpg" width="1024" height="683" alt="姬路城, " srcset="https://farm1.staticflickr.com/721/31399045233_f8c12f10b4_b.jpg 1024w, https://farm1.staticflickr.com/721/31399045233_f8524d845c_h.jpg 1600w" /></a></p>

<p>不過天守閣我就覺得沒這麼值得了，一來當天免費，所以排隊的人很多，花了很多時間在這，二來上去之後，窗戶的鐵網格子超小的，看外面的東西都覺得很受干擾：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31399067753/" title="姬路城 by othree, on Flickr"><img src="https://farm1.staticflickr.com/665/31399067753_d268766291_b.jpg" width="1024" height="683" alt="姬路城, " srcset="https://farm1.staticflickr.com/665/31399067753_d268766291_b.jpg 1024w, https://farm1.staticflickr.com/665/31399067753_67e151a152_h.jpg 1600w" /></a></p>

<p>回到大阪後發現 Yodobashi 梅田有開，所以晚餐就在那邊解決，順便逛了一下，還買到九折的 iTunes 點數（剛好有活動），就這樣順利的度過了 1/1，然後 1/2 開始各家百貨和商店就都開始營業了，到處都是福袋，日本人也都全部出來採買，看到比較特別的像是麵包店的、Mister Donut，還有 Pokemon Center 等都有，不過這次是都沒買啦，小可惜。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31399160683/" title="姬路 by othree, on Flickr"><img src="https://farm1.staticflickr.com/402/31399160683_35252ba95d_b.jpg" width="1024" height="683" alt="姬路, " srcset="https://farm1.staticflickr.com/402/31399160683_35252ba95d_b.jpg 1024w, https://farm1.staticflickr.com/402/31399160683_edcc508d72_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31418206723/" title="Pokemon Center by othree, on Flickr"><img src="https://farm1.staticflickr.com/372/31418206723_715d2f3017_b.jpg" width="1024" height="683" alt="Pokemon Center, " srcset="https://farm1.staticflickr.com/372/31418206723_715d2f3017_b.jpg 1024w, https://farm1.staticflickr.com/372/31418206723_a1ee511845_h.jpg 1600w" /></a></p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000891" baseName="github-flavored-markdown">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-03-27</b:date>
				<b:time>20:41:56</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>GitHub Flavored Markdown 標準規範</b:title>
			<b:content>
				<b:summary> 前陣子看到 DK 提到 GitHub 的 Markdown：GitHub Flavored Markdown 發表正式的 spec 了，當時有大概看了一下內容，不過昨天才有空寫出來（然後今天也看到碼天狗有提到這件事），基本上這份 spec 是基於 CommonMark 的，只是多了一些語法，包括： 刪除線 表格 待辦清單 自動連結（包括網址和 email） Raw HTML 黑名單： &lt;title&gt; &lt;textarea&gt; &lt;style&gt; &lt;xmp&gt; &lt;iframe&gt; &lt;noembed&gt; &lt;noframes&gt; &lt;script&gt; &lt;plaintext&gt; 新增的部分都有很顯眼的標註，其中 Raw HTML 黑名單的 HTML 標籤的 &lt;...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15576500626/" title="Github Markdown Cheat Sheet by othree, on Flickr"><img src="https://farm6.staticflickr.com/5599/15576500626_b56732d883_b.jpg" width="1024" height="683" alt="Github Markdown Cheat Sheet" srcset="https://farm6.staticflickr.com/5599/15576500626_b56732d883_b.jpg 1024w, https://farm6.staticflickr.com/5599/15576500626_e0027ae0fb_h.jpg 1600w" /></a></p>
<p>前陣子看到 DK <a href="https://blog.gslin.org/archives/2017/03/16/7187/">提到</a> GitHub 的 Markdown：<a href="https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown">GitHub Flavored Markdown</a> <a href="https://githubengineering.com/a-formal-spec-for-github-markdown/">發表正式的 spec</a> 了，當時有大概看了一下內容，不過昨天才有空寫出來（然後今天也看到碼天狗有提到這件事），基本上這份 <a href="https://github.github.com/gfm/">spec</a> 是基於 <a href="http://commonmark.org/">CommonMark</a> 的，只是多了一些語法，包括：</p>
<ul>
<li>刪除線</li>
<li>表格</li>
<li><a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments">待辦清單</a></li>
<li>自動連結（包括網址和 email）</li>
<li>Raw HTML 黑名單：
<ul>
<li><code>&lt;title&gt;</code></li>
<li><code>&lt;textarea&gt;</code></li>
<li><code>&lt;style&gt;</code></li>
<li><code>&lt;xmp&gt;</code></li>
<li><code>&lt;iframe&gt;</code></li>
<li><code>&lt;noembed&gt;</code></li>
<li><code>&lt;noframes&gt;</code></li>
<li><code>&lt;script&gt;</code></li>
<li><code>&lt;plaintext&gt;</code></li>
</ul>
</li>
</ul>
<p>新增的部分都有很顯眼的標註，其中 Raw HTML 黑名單的 HTML 標籤的 <code>&lt;</code> 都會被轉成 entity，基本上看起來是安全性考量，不過不太確定為何有些很老的標籤出現，感覺上和安全性比較沒關係。另外我還注意到 <a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/#using-emoji">emoji</a>和<a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests">reference link</a>沒包含在這份 spec 內，emoji 或許是因為實做上的問題，轉成 unicode 字元相容性不好，要用 img 會有不少相依性問題，而 reference link 大概是因這是比較針對 GitHub 網站的特性。</p>
<p>GitHub 轉換 Markdown 引擎的過程也有在文中說明，這次 Markdown 引擎是從 <a href="https://github.com/vmg/sundown">Sundown</a>（更早是 Ruby 實做的 <a href="https://github.com/vmg/redcarpet">redcarpet</a> 的樣子）改成 <a href="https://github.com/jgm/cmark">cmark</a>，當然為了這些新語法，他們 fork 了<a href="https://github.com/github/cmark">自己的版本出來</a>，然後在真的套上 GitHub 本站前，有先做過測試，結果發現有 1% 的文件（所有的 Markdown 文件，包括 user comment、issue...etc）會受到影響，而且判斷方法不是單純 diff 輸出結果，而是 diff 正規化過的 HTML 文件樹，不過即使只有 1% 的文件，那也是很大量，後來他們又更仔細分析，發現會受影響的幾乎都是 issue、user comment 之類的內容，是存放在 GitHub 資料庫內的，而不是 repository 內的文件，所以他們可以直接修改，如果是 repository 內的文件，因為要看 sha1 hash，所以是改不了的，後來他們魔改 Sundown，讓它吃舊文件然後吐出符合新 spec 的 Markdown 文件，接著跑了幾天把全部需要修改的舊文件（1%）都轉完，所以現在除了少數文件外，剩下的文件都是符合 GFM spec 的文件了。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000890" baseName="github-license-summary">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-03-26</b:date>
				<b:time>20:16:11</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>GitHub 提供專案授權簡介與概要</b:title>
			<b:content>
				<b:summary> 大概上週看到有人在 Twitter 講到 GitHub 現在會在專案上顯示該專案所使用授權條款的摘要，長的像是上面那樣，官方也有發表公告，其實這個修改是結合之前的授權偵測和 Choose a License。 Choose a License 也是一個 GitHub 的附加服務，用來協助使用者挑選適合的授權條款，現在在 GitHub 建立新的專案時，可以順便初始化專案，包括建立 README、產生 .gitignore 和挑選要使用的授權條款： 授權條款旁邊的 i 點下去其實就會送到 Choose a License 網站去了（不過兩邊沒有連動接起來就是），Choose a License 網站則針對每種條款都一份重點摘要，分為 Permissions、Conditions 和 Limitations 三個區塊，分別條列出該條款可以做什麼（例如商業使用）、有什麼條件（例如需要也使用相同條款授權）和條款的限制（例如免責），而現在 GitHub 上顯示的條款摘要其實就是這邊的資訊搬過來的： Choose a License 網站其實有很多授權條款的整理，而不是只有常見的幾種，可以看...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32722736844/" title="Do What The F*ck You Want To Public License by othree, on Flickr"><img src="https://farm3.staticflickr.com/2898/32722736844_c977dc8ff8_b.jpg" width="1024" height="595" alt="Do What The F*ck You Want To Public License, " srcset="https://farm3.staticflickr.com/2898/32722736844_c977dc8ff8_b.jpg 1024w, https://farm3.staticflickr.com/2898/32722736844_e56ae26374_h.jpg 1600w" /></a></p>
<p>大概上週看到有人在 Twitter 講到 GitHub 現在會在專案上顯示該專案所使用授權條款的摘要，長的像是上面那樣，官方也有發表<a href="https://github.com/blog/2335-open-source-license-descriptions-and-metadata">公告</a>，其實這個修改是結合之前的<a href="https://github.com/blog/2252-license-now-displayed-on-repository-overview">授權偵測</a>和 <a href="https://choosealicense.com/">Choose a License</a>。</p>
<p>Choose a License 也是一個 GitHub 的附加服務，用來協助使用者挑選適合的授權條款，現在在 GitHub 建立新的專案時，可以順便初始化專案，包括建立 README、產生 <code>.gitignore</code> 和挑選要使用的授權條款：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33495590202/" title="Initialize Project by othree, on Flickr"><img src="https://farm4.staticflickr.com/3953/33495590202_f04d677f58_b.jpg" width="722" height="141" alt="Initialize Project" srcset="https://farm4.staticflickr.com/3953/33495590202_f04d677f58_b.jpg 1024w" /></a></p>
<p>授權條款旁邊的 i 點下去其實就會送到 Choose a License 網站去了（不過兩邊沒有連動接起來就是），Choose a License 網站則針對每種條款都一份重點摘要，分為 Permissions、Conditions 和 Limitations 三個區塊，分別條列出該條款可以做什麼（例如商業使用）、有什麼條件（例如需要也使用相同條款授權）和條款的限制（例如免責），而現在 GitHub 上顯示的條款摘要其實就是這邊的資訊搬過來的：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33495653292/" title="Choose a License by othree, on Flickr"><img src="https://farm4.staticflickr.com/3770/33495653292_b2822ac569_b.jpg" width="1024" height="601" alt="Choose a License" srcset="https://farm4.staticflickr.com/3770/33495653292_b2822ac569_b.jpg 1024w, https://farm4.staticflickr.com/3770/33495653292_0a6bd0bf6e_h.jpg 1600w" /></a></p>
<p>Choose a License 網站其實有很多授權條款的整理，而不是只有常見的幾種，可以看 <a href="https://choosealicense.com/appendix/">appendix</a> 頁面有完整清單，可惜裡面沒有 <a href="https://github.com/vim/vim/blob/master/runtime/doc/uganda.txt">Vim License</a>，另外特別想說的是 GitHub 自己（應該沒錯）提供的 <a href="https://choosealicense.com/licenses/unlicense/">Unlincense</a>，相似於創作領域的 <a href="http://creativecommons.tw/cc0">CC0</a>，就類似丟到 Public Domain 的意思，不過保留了免責條款，講到免責聲明，就還要順便提一下 <a href="https://choosealicense.com/licenses/wtfpl/">WTFPL</a>，它其實也是超自由的 License，差別就是連免責聲明都沒，其實是更加接近丟到 Public Domain 吧？</p>
<p>最後想說的是 GitHub 用來判斷專案使用的授權，用的是 <a href="https://github.com/benbalter/licensee">licensee</a> 這個 Ruby Gem，看起來完全就是為了做這些事情寫的，我看好像也沒其他類似功能的專案，作者 Ben Balter 其實也是 GitHub 員工。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000889" baseName="gitdags-git">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-03-25</b:date>
				<b:time>21:49:34</b:time>
			</b:datetime>
			<b:category>software</b:category>
			<b:title>Gitdags, Git 示意圖工具</b:title>
			<b:content>
				<b:summary> 最近因緣際會，需要畫些圖來教 Git，不是要拿真的 repository 來畫，當然可以用繪圖軟體刻，不過時間不夠，而且覺得應該之前就有人有需求了，應該有現成的工具，所以我就找了一下看有沒有方便的工具可以畫，結果很幸運的，沒多久就找到了 gitdags 這個 Latex 的 package，專門就是用來畫教學用的 Git 圖，而且圖的樣版還蠻接近 Pro Git v1 書內的樣子（v2 的樣版改的更簡潔了），看起來還蠻 ok 的，它是基於 TikZ 這個 package，是 Latex 上的繪圖 library，可以產生出向量格式的圖，所以我可以用 pdf2latex 先轉成 pdf，pdf 檔案就可以給 Keynote 用了，不過要通用一點，還可以用 pdf2svg 生成 SVG 圖檔，SVG 內容看起來也還蠻乾淨的，tex 文件內容大概像這樣： \documentclass[preview]{standalone} \usepackage{gitdags} \begin{document}...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33595934396/" title="cherrypick-2 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2881/33595934396_3da08a8f62_b.jpg" width="1024" height="384" alt="cherrypick-2" srcset="https://farm3.staticflickr.com/2881/33595934396_3da08a8f62_b.jpg 1024w, https://farm3.staticflickr.com/2881/33595934396_96d863038c_h.jpg 1600w" /></a></p>
<p>最近因緣際會，需要畫些圖來教 Git，不是要拿真的 repository 來畫，當然可以用繪圖軟體刻，不過時間不夠，而且覺得應該之前就有人有需求了，應該有現成的工具，所以我就找了一下看有沒有方便的工具可以畫，結果很幸運的，沒多久就找到了 <a href="https://github.com/Jubobs/gitdags">gitdags</a> 這個 Latex 的 package，專門就是用來畫教學用的 Git 圖，而且圖的樣版還蠻接近 Pro Git v1 書內的<a href="https://git-scm.com/book/en/v1/Git-Branching-Basic-Branching-and-Merging">樣子</a>（v2 的樣版改的更<a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">簡潔</a>了），看起來還蠻 ok 的，它是基於 <a href="http://www.texample.net/tikz/">TikZ</a> 這個 package，是 Latex 上的繪圖 library，可以產生出向量格式的圖，所以我可以用 pdf2latex 先轉成 pdf，pdf 檔案就可以給 Keynote 用了，不過要通用一點，還可以用 pdf2svg 生成 SVG 圖檔，SVG 內容看起來也還蠻乾淨的，tex 文件內容大概像這樣：</p>
<pre><code>\documentclass[preview]{standalone}
\usepackage{gitdags}

\begin{document}
    \centering
    \begin{tikzpicture}
      % Commit DAG
      \gitDAG[grow right sep = 2em]{
        0 -- {
          1 -- 2 -- 3 -- 4,
          A
        }
      };
      \gitbranch
        {master}     % node name and text 
        {above=of 4} % node placement
        {4}          % target
      \gitbranch
        {for-rebase} % node name and text 
        {below=of A} % node placement
        {A}          % target
      \gitHEAD
        {below=of for-rebase} % node placement
        {for-rebase} 
      \end{tikzpicture}
\end{document}
</code></pre>
<p>產生的圖片就像是最上面的圖，gitdags 是用 <a href="http://ethanschoonover.com/solarized">solarized</a> 來配色，我覺得顏色不是很精緻，不過還可以接受，另外我有自己調整一版黑底用的，把線條和邊框改淺，還有把 commit node 的形狀調整了一下，也放在 <a href="https://github.com/othree/gitdags">GtiHub 上</a>。使用 gitdags 的過程，比較大的問題就是文件和範例不足，所以我把自己畫的部分<a href="https://github.com/othree/git-graph">全部丟上 GitHub</a> 了，後來發現原作者也有<a href="https://github.com/Jubobs/talks/tree/e1cfbd07587ac90c1602a6901260a798b858e727/corkdev-oct2015">一些 sample</a> 可以參考，作者自己兩年前是說有要寫文件和準備範例，不過後來就都沒動靜就是了。如果要在 Mac 上處理 Latex 文件，一般就是建議直接裝 <a href="http://www.tug.org/mactex/">MacTeX</a> 就好，不過 gitdags 沒包在裡面，所以要自己安裝，或是把 sty 檔案和 Tex 文件放在同一個目錄也可以。</p>
<p>不過用 pdf2svg 產生的 SVG 檔我用 AI 要編輯時會發現有些問題，我有另外試著用 <a href="https://inkscape.org/en/">inkscape</a> 做轉換，出來的文字大小是正常的，不過看起來字形和間距不太正確就是，如果要轉 PNG 之類的非向量格式是可以直接用 Preview 或是 convert 轉換，不過解析度要設定一下，通常預設的 150，輸出的圖片大小是不太夠就是了，上面那張我是設定 450。</p>
<p>最後，gitdags 這名字裡面的 dag 應該是<a href="http://www.csie.ntnu.edu.tw/%7Eu91029/DirectedAcyclicGraph.html">有向無環圖</a>（Directed Acyclic Graph）的意思，這種圖剛好可以用來描述 Git 裡面 commit、branch 等東西之間的關係。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000888" baseName="docker">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-03-18</b:date>
				<b:time>23:46:02</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>Docker 雜談</b:title>
			<b:content>
				<b:summary>最近使用的一些感想和疑問 --name 自動會變 network 內的 hostname，蠻方便 Image build 失敗，還是會產生一個東西在那邊，要 rm 掉才能重新 build... Service 還不支援 update 修改 network DB container 的資料要開 volume 掛比較保險（免得不小心砍到 container） 在多個 node 上開 replica，掛 volume 的話都是在該 node 上找，目前似乎沒有透過網路共享 volume container 這種事 很多服務的官方 docker 都是用環境變數做設定，不知道是不是本來就有的慣例 一直更新 registry 上的...</b:summary>
				<b:mainContent><p>最近使用的一些感想和疑問</p>
<ul>
<li><code>--name</code> 自動會變 network 內的 hostname，蠻方便</li>
<li>Image build 失敗，還是會產生一個東西在那邊，要 rm 掉才能重新 build...</li>
<li>Service 還不支援 update 修改 network</li>
<li>DB container 的資料要開 volume 掛比較保險（免得不小心砍到 container）</li>
<li>在多個 node 上開 replica，掛 volume 的話都是在該 node 上找，目前似乎沒有透過網路共享 volume container 這種事</li>
<li>很多服務的官方 docker 都是用環境變數做設定，不知道是不是本來就有的慣例</li>
<li>一直更新 registry 上的 image 好像會越來越多垃圾，不知道是不是有清理機制</li>
<li>整體而言，我覺得 docker service 介面是個很容易讓 fat finger 造成服務爆炸設計，不過架構規劃的好的話，應該不會太難修復就是</li>
</ul>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000887" baseName="guetzli-new-os-jpeg-encoder">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-03-17</b:date>
				<b:time>12:57:34</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Guetzli: A New Open Source JPEG Encoder</b:title>
			<b:content>
				<b:summary> 今天一早起來就看到 Google 發表的新的 JPEG 壓縮程式，叫 Guetzli（一種瑞士餅乾），這是 Google 繼 Zopfli、Brotli 之後，算是第三個比較容易被大家廣為使用的新的節省網路流量的工具，這次主要針對 JPEG 圖片格式，和之前 Mozilla 的 mozjpeg 的作法一樣，保持目前 JPEG decoder 的相容性，然後看能加強 JPEG 圖檔到什麼程度，我稍微測試了一下，結果還不錯，目前還沒有 homebrew formula，如果要自己 build 的可以參考這篇，基本上就是用 bazel 來編譯，然後可能會需要先裝 libpng 和 gflags，這兩個可以用 homebrew 安裝： brew install libpng gflags 然後裝 bazel brew...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33444227946/" title="Guetzli by othree, on Flickr"><img src="https://farm4.staticflickr.com/3665/33444227946_858cf890f3_b.jpg" width="773" height="699" alt="Guetzli" srcset="" /></a></p>
<p>今天一早起來就看到 Google <a href="https://research.googleblog.com/2017/03/announcing-guetzli-new-open-source-jpeg.html">發表</a>的新的 JPEG 壓縮程式，叫 Guetzli（一種瑞士餅乾），這是 Google 繼 <a href="https://github.com/google/zopfli">Zopfli</a>、<a href="https://github.com/google/brotli">Brotli</a> 之後，算是第三個比較容易被大家廣為使用的新的節省網路流量的工具，這次主要針對 JPEG 圖片格式，和之前 Mozilla 的 <a href="https://github.com/mozilla/mozjpeg">mozjpeg</a> 的作法一樣，保持目前 JPEG decoder 的相容性，然後看能加強 JPEG 圖檔到什麼程度，我稍微測試了一下，結果還不錯，目前還沒有 homebrew formula，如果要自己 build 的可以參考<a href="https://agileblaze.com/google-guetzli-image-compression-setup-on-macos/">這篇</a>，基本上就是用 bazel 來編譯，然後可能會需要先裝 libpng 和 gflags，這兩個可以用 homebrew 安裝：</p>
<pre><code class="language-bash">brew install libpng gflags 
</code></pre>
<p>然後裝 <a href="https://bazel.build/">bazel</a></p>
<pre><code class="language-bash">brew install bazel
</code></pre>
<p>然後到專案目錄下執行編譯指令：</p>
<pre><code class="language-bash">bazel build -c opt //:guetzli
</code></pre>
<p>結果就會把執行檔放到 <code>bazel-bin/guetzli</code> 這位置，就可以拿來用了，不過其實官方 GitHub repo 上的 <a href="https://github.com/google/guetzli/releases">release</a> 那邊就有編譯好的版本，抓下來用 Terminal 執行 <code>chmod +x</code> 也可以用（我是自己丟到 <code>/usr/local/bin/</code> 裡面），指令很簡單，可以加上 <code>--quality</code>，預設是 95，不過最小只能 84，設更小的值會跟你說，真的想要的話自己去改原始碼...</p>
<p>速度就如大家所說的，和其它工具比起來真的慢很多，感覺是有一些 recursive 找最佳解的過程，輸出的結果我覺得最讓人印象深刻的是對於純色色塊的處理，也比 mozjpeg 好上不少，輸出檔案的大小不一定會是最小的，不過品質好很多，差異是達到我可以放棄這點容量差距，而寧願要這畫質改進，然後就是 Quality 100 可能會體積暴漲，我隨便測試了幾張圖片，看起來設到 90 品質就蠻不錯的，看來目前通行的圖片最佳化工具又要有一輪更新了。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000886" baseName="vscode-copy-with-syntax">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-03-02</b:date>
				<b:time>23:59:31</b:time>
			</b:datetime>
			<b:category>mac</b:category>
			<b:title>Visual Studio Code Copy with Syntax Highlighting</b:title>
			<b:content>
				<b:summary>今天 Visual Studio Code 出了 1.10，包含了很多讓人期待的功能，其中讓我比較注意到的是 Copy with syntax highlighting，這在 Mac 上可是讓人等了很久，我的主要目的是做投影片時，可以不用再特別處理程式碼的顏色了，以前只有 SubEthaEdit 有支援，不過這款軟體真的蠻貴的，好不容易有免費版的軟體支援了，就趕快來測試一下，基本上步驟就是，先挑選一下顏色主題，看你的投影片背景是亮的還是暗的，選擇 Menubar 最左邊的 Code &gt; 喜好設定 &gt; 色彩布景主題，快速鍵是 CMD + K, CMD + T： 選好程式碼，然後輸入 CMD + Shift + P 叫出命令面板，打入 copysyn 就可以找到 Copy with syntax highlighting：...</b:summary>
				<b:mainContent><p>今天 <a href="https://code.visualstudio.com/">Visual Studio Code</a> 出了 1.10，包含了很多讓人期待的功能，其中讓我比較注意到的是 <a href="https://code.visualstudio.com/updates/v1_10#_copy-with-syntax-highlighting">Copy with syntax highlighting</a>，這在 Mac 上可是讓人等了很久，我的主要目的是做投影片時，可以不用再特別處理程式碼的顏色了，以前只有 <a href="https://www.codingmonkeys.de/subethaedit/">SubEthaEdit</a> 有支援，不過這款軟體真的蠻貴的，好不容易有免費版的軟體支援了，就趕快來測試一下，基本上步驟就是，先挑選一下顏色主題，看你的投影片背景是亮的還是暗的，選擇 Menubar 最左邊的 Code &gt; 喜好設定 &gt; 色彩布景主題，快速鍵是 <code>CMD + K</code>, <code>CMD + T</code>：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33159251516/" title="VSCode Copy with Sytax Highlighting by othree, on Flickr"><img src="https://farm4.staticflickr.com/3672/33159251516_61635294c4_b.jpg" width="1024" height="768" alt="VSCode Copy with Sytax Highlighting" srcset="https://farm4.staticflickr.com/3672/33159251516_bacbf3f4f1_k.jpg 2x" /></a></p>
<p>選好程式碼，然後輸入 <code>CMD + Shift + P</code> 叫出命令面板，打入 <code>copysyn</code> 就可以找到 <strong>Copy with syntax highlighting</strong>：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33159251456/" title="VSCode Copy with Sytax Highlighting by othree, on Flickr"><img src="https://farm3.staticflickr.com/2838/33159251456_4946fca7f0_b.jpg" width="1024" height="768" alt="VSCode Copy with Sytax Highlighting" srcset="https://farm3.staticflickr.com/2838/33159251456_406eb36017_k.jpg 2x" /></a></p>
<p>去 Word 貼上就可以了：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33159251396/" title="VSCode Copy with Sytax Highlighting by othree, on Flickr"><img src="https://farm1.staticflickr.com/608/33159251396_27f9174f1f_b.jpg" width="640" height="787" alt="VSCode Copy with Sytax Highlighting" srcset="" /></a></p>
<p>不過我的目標其實是要貼上 Keynote，結果測試後發現貼到 Keynote 會沒有樣式，但是如果從 Word 那邊重新複製一次，就可以正確的貼到 Keynote 了：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33159251346/" title="VSCode Copy with Sytax Highlighting by othree, on Flickr"><img src="https://farm1.staticflickr.com/749/33159251346_bfcf683406_b.jpg" width="875" height="711" alt="VSCode Copy with Sytax Highlighting" srcset="" /></a></p>
<p>這個問題我已經去 GitHub 開 <a href="https://github.com/Microsoft/vscode/issues/21686#issuecomment-283558495">issue</a> 了，看起來是因為只有提供 HTML 內容而不是 RTF 內容的關係，希望之後能修正，就可以更方便的使用了。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000885" baseName="data-on-web-best-practice">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-03-01</b:date>
				<b:time>00:02:14</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>網路發佈資料之最佳實踐</b:title>
			<b:content>
				<b:summary> 前幾天 W3C 發佈了這份文件 Data on the Web Best Practices （DWBP），內容是關於在網路上發佈資料時的最佳實踐（公開或非公開的都適用），讓我想到了之前的 g0v summit 羅佩琪分享提到的一個重點，開放是有成本的，當時演講的影片： 稍微看過這份文件後，覺得之前確實蠻缺乏這份整理好的文件，每點看了就都覺得，確實是應該要這樣的，不過沒有這種整理好的 checklist 其實真的要做的時候還蠻容易漏東漏西的，然後就是，每一點都是成本啊！！ 整份文件還蠻有翻譯的價值的，比較不像是 HTML Spec 會常常更新，不過我自然沒這麼多時間可以翻譯，所以就先把重點標題翻起來放，以後有人要開始就先有個基礎了，DWBP 整份文件有 35 點 Best Practice，每一點都有標題、簡述、原因、預期結果、可能實做方法、如何測試、證據、好處、範例等內容，其中好處的部分是分成八種： Comprehension，人類容易理解理解 Processability，可程式自動處理 Discoverability，可讓程式自動發現 Reuse，容易重複使用 Trust，可靠 Linkability，可連結 Access，容易存取 Interoperability，容易互動（發佈者和使用者之間） 我只翻譯了其中的標題和簡述，順便附上每一點的好處（上面的八種好處），以下就是這 35 點 Best Practice：...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32951614622/" title="Data on the Web Best Practices by othree, on Flickr"><img src="https://farm3.staticflickr.com/2901/32951614622_395e8d1b32_b.jpg" width="1024" height="576" alt="Data on the Web Best Practices" srcset="https://farm3.staticflickr.com/2901/32951614622_395e8d1b32_b.jpg 1024w" /></a></p>
<p>前幾天 W3C 發佈了這份文件 <a href="https://www.w3.org/TR/dwbp/">Data on the Web Best Practices</a> （DWBP），內容是關於在網路上發佈資料時的最佳實踐（公開或非公開的都適用），讓我想到了之前的 g0v summit 羅佩琪分享提到的一個重點，開放是有成本的，當時演講的影片：</p>
<div class="embed_16_9">
<iframe width="853" height="480" src="https://www.youtube.com/embed/aIuHcEmKZ2I" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>稍微看過這份文件後，覺得之前確實蠻缺乏這份整理好的文件，每點看了就都覺得，確實是應該要這樣的，不過沒有這種整理好的 checklist 其實真的要做的時候還蠻容易漏東漏西的，然後就是，每一點都是成本啊！！</p>
<p>整份文件還蠻有翻譯的價值的，比較不像是 HTML Spec 會常常更新，不過我自然沒這麼多時間可以翻譯，所以就先把重點標題翻起來放，以後有人要開始就先有個基礎了，DWBP 整份文件有 35 點 Best Practice，每一點都有標題、簡述、原因、預期結果、可能實做方法、如何測試、證據、好處、範例等內容，其中好處的部分是分成八種：</p>
<ul>
<li>Comprehension，人類容易理解理解</li>
<li>Processability，可程式自動處理</li>
<li>Discoverability，可讓程式自動發現</li>
<li>Reuse，容易重複使用</li>
<li>Trust，可靠</li>
<li>Linkability，可連結</li>
<li>Access，容易存取</li>
<li>Interoperability，容易互動（發佈者和使用者之間）</li>
</ul>
<p>我只翻譯了其中的標題和簡述，順便附上每一點的好處（上面的八種好處），以下就是這 35 點 Best Practice：</p>
</b:mainContent>
				<b:extendContent><ul>
<li>Metadata<br />
詮釋資料
<ul>
<li>Provide metadata<br />
提供詮釋資料(metadata)<br />
Provide metadata for both human users and computer applications.<br />
提供可讓人類閱讀和程式可處理的詮釋資料<br />
優點：R, C, D, P</li>
<li>Provide descriptive metadata<br />
提供資料介紹的詮釋資料<br />
Provide metadata that describes the overall features of datasets and distributions.<br />
提供介紹資料集整體特性和發佈資訊的詮釋資料<br />
優點：R, C, D</li>
<li>Provide structural metadata<br />
提供資料結構的詮釋資料<br />
Provide metadata that describes the schema and internal structure of a distribution.<br />
每次發佈都提供資料綱要(schema)和資料結構的詮釋資料<br />
優點：R, C, P</li>
</ul>
</li>
<li>Data Licenses<br />
資料授權
<ul>
<li>Provide data license information<br />
提供資料授權的資訊<br />
Provide a link to or copy of the license agreement that controls use of the data.<br />
提供鏈節到資料所使用授權的協議文件<br />
優點：R, T</li>
</ul>
</li>
<li>Data Provenance<br />
資料發佈者
<ul>
<li>Provide data provenance information<br />
提供資料發佈者的訊息<br />
Provide complete information about the origins of the data and any changes you have made.<br />
提供完整的資料發佈者的訊息以及所有的修改紀錄<br />
優點：R, C, T</li>
</ul>
</li>
<li>Data Quality<br />
資料品質
<ul>
<li>Provide data quality information<br />
提供資料品質資訊<br />
Provide information about data quality and fitness for particular purposes.<br />
提供資料針對特定用途的品質和適應性資訊<br />
優點：R, T</li>
</ul>
</li>
<li>Data Versioning<br />
資料版本
<ul>
<li>Provide a version indicator<br />
提供明確版本號<br />
Assign and indicate a version number or date for each dataset.<br />
提供每個資料集的明確版本號或是發佈日期<br />
優點：R, T</li>
<li>Provide version history<br />
提供版本歷史<br />
Provide a complete version history that explains the changes made in each version.<br />
提供完整的版本歷史，說明每個版本的變動<br />
優點：R, T</li>
</ul>
</li>
<li>Data Identifiers<br />
資料識別符
<ul>
<li>Use persistent URIs as identifiers of datasets<br />
使用固定的 URI 作為資料集的識別符(identifier)<br />
Identify each dataset by a carefully chosen, persistent URI.<br />
為每個資料集都謹慎的挑選一個永久固定的 URI 作為識別用<br />
優點：R, L, D, I</li>
<li>Use persistent URIs as identifiers within datasets<br />
在資料集之間使用 URI 做為連結的識別符<br />
Reuse other people's URIs as identifiers within datasets where possible.<br />
連結其它資料集時，盡可能使用其它資料集既存的 URI 作為資料集之間連結的識別符<br />
優點：R, L, D, I</li>
<li>Assign URIs to dataset versions and series<br />
提供特定版本和最新版本的的識別用 URI<br />
Assign URIs to individual versions of datasets as well as to the overall series.<br />
每個版本都提供一個獨立的識別用 URI，整個系列的資料也要提供一個特定的識別 URI<br />
優點：R, D, T</li>
</ul>
</li>
<li>Data Formats<br />
資料格式
<ul>
<li>Use machine-readable standardized data formats<br />
使用程式可處理的標準格式<br />
Make data available in a machine-readable, standardized data format that is well suited to its intended or potential use.<br />
提供程式可處理的標準資料格式，並且是適合資料預期及潛在應用的格式<br />
優點：R, P</li>
<li>Use locale-neutral data representations<br />
使用非地區性的資料表現形式<br />
Use locale-neutral data structures and values, or, where that is not possible, provide metadata about the locale used by data values.<br />
使用非地區性的資料結構和形式，否則需提供所使用資料形式的詮釋資料<br />
優點：R, C</li>
<li>Provide data in multiple formats<br />
提供多種格式<br />
Make data available in multiple formats when more than one format suits its intended or potential use.<br />
如果資料預期及潛在的應用有不只一種適合的格式，則都提供<br />
優點：R, P</li>
</ul>
</li>
<li>Data Vocabularies<br />
資料詞彙
<ul>
<li>Reuse vocabularies, preferably standardized ones<br />
盡量重複使用詞彙，並優先使用標準有定義的詞彙<br />
Use terms from shared vocabularies, preferably standardized ones, to encode data and metadata.<br />
在資料本體和詮釋資料中，盡量使用已經有人使用的詞彙，並優先使用標準有定義的詞彙<br />
優點：R, P, C, T, I</li>
<li>Choose the right formalization level<br />
選擇正確的數據尺度<br />
Opt for a level of formal semantics that fits both data and the most likely applications.<br />
為資料挑選一個適當的尺度，以符合資料本身的意義和它最可能的應用<br />
優點：R, C, I</li>
</ul>
</li>
<li>Data Access<br />
資料取得
<ul>
<li>Provide bulk download<br />
提供打包下載<br />
Enable consumers to retrieve the full dataset with a single request.<br />
讓使用者可以只用一個請求就取得全部的資料集<br />
優點：R, A</li>
<li>Provide Subsets for Large Datasets<br />
大資料集要單獨提供子集<br />
If your dataset is large, enable users and applications to readily work with useful subsets of your data.<br />
如果你的資料集很大，讓使用者可以針對他的應用只下載一部分的子集<br />
優點：R, L, A, P</li>
<li>Use content negotiation for serving data available in multiple formats<br />
使用內容協商機制來決定提供的資料格式<br />
Use content negotiation in addition to file extensions for serving data available in multiple formats.<br />
除了副檔名之外，還可以使用 HTTP 的內容協商機制來決定提供的資料格式<br />
優點：R, A</li>
<li>Provide real-time access<br />
提供及時的存取<br />
When data is produced in real time, make it available on the Web in real time or near real-time.<br />
如果資料是即時產生的，也提供可以取得即時資料的方法<br />
優點：R, A</li>
<li>Provide data up to date<br />
提供最新版的資料<br />
Make data available in an up-to-date manner, and make the update frequency explicit.<br />
總是提供到最新版本的資料，並且固定更新的頻率<br />
優點：R, A</li>
<li>Provide an explanation for data that is not available<br />
無法提供的資料要說明原因<br />
For data that is not available, provide an explanation about how the data can be accessed and who can access it.<br />
針對無法直接提供的資料，說明如何取得及誰可以取得<br />
優點：R, T</li>
<li>Make data available through an API<br />
讓資料可以透過 API 取得<br />
Offer an API to serve data if you have the resources to do so.<br />
如果有足夠的資源，提供 API 服務來供應資料<br />
優點：R, P, I, A</li>
<li>Use Web Standards as the foundation of APIs<br />
使用網路標準作為 API 的基礎<br />
When designing APIs, use an architectural style that is founded on the technologies of the Web itself.<br />
設計 API 服務時，使用網路基礎的技術作為架構核心<br />
優點：R, L, I, D, A, P</li>
<li>Provide complete documentation for your API<br />
提供完整的 API 文件<br />
Provide complete information on the Web about your API. Update documentation as you add features or make changes.<br />
在網路上提供完整的 API 文件，並且在 API 有更新時即時更新文件<br />
優點：R, T</li>
<li>Avoid Breaking Changes to Your API<br />
避免 API 有不向前相容的變動<br />
Avoid changes to your API that break client code, and communicate any changes in your API to your developers when evolution happens.<br />
避免重大的 API 更新造成應用端程式錯誤，更改 API 時都要跟開發人員溝通<br />
優點：T, I</li>
</ul>
</li>
<li>Data Preservation<br />
資料保存
<ul>
<li>Preserve identifiers<br />
保留識別符<br />
When removing data from the Web, preserve the identifier and provide information about the archived resource.<br />
當從網路上移除資料時，保留該資料的識別符，並且提供該資料歸檔保存的資訊<br />
優點：R, T</li>
<li>Assess dataset coverage<br />
評估資料集覆蓋率<br />
Assess the coverage of a dataset prior to its preservation.<br />
評估資料集的覆蓋率來做為歸檔保存時的參考<br />
優點：R, T</li>
</ul>
</li>
<li>Feedback<br />
回饋
<ul>
<li>Gather feedback from data consumers<br />
從資料使用者收集回饋意見<br />
Provide a readily discoverable means for consumers to offer feedback.<br />
提供一個容易發現的方式讓使用者提供意見回饋<br />
優點：R, C, T</li>
<li>Make feedback available<br />
公開回饋意見<br />
Make consumer feedback about datasets and distributions publicly available.<br />
公開使用者對資料集和發佈方式的回饋意見<br />
優點：R, T</li>
</ul>
</li>
<li>Data Enrichment<br />
加強資料
<ul>
<li>Enrich data by generating new data<br />
增加新資料來加強現有資料集<br />
Enrich your data by generating new data when doing so will enhance its value.<br />
當新資料可以提升資料集的價值時，就著手產生新資料<br />
優點：R, C, T, P</li>
<li>Provide Complementary Presentations<br />
提供補充的內容來展示資料<br />
Enrich data by presenting it in complementary, immediately informative ways, such as visualizations, tables, Web applications, or summaries.<br />
提供資料的各種用例，像是視覺化呈現、表格、網路應用程式或是摘要等來讓資料更多元<br />
優點：R, C, A, T</li>
</ul>
</li>
<li>Republication<br />
再散佈
<ul>
<li>Provide Feedback to the Original Publisher<br />
提供回饋意見給原發佈者<br />
Let the original publisher know when you are reusing their data. If you find an error or have suggestions or compliments, let them know.<br />
讓資料的原發佈者資料你有再利用他的資料，如果有發現任何錯誤或可以改進的地方，也讓他知道<br />
優點：R, I, T</li>
<li>Follow Licensing Terms<br />
遵照授權條款<br />
Find and follow the licensing requirements from the original publisher of the dataset.<br />
確認原始發佈資料集的授權條款，並遵守之<br />
優點：R, T</li>
<li>Cite the Original Publication<br />
標註原發佈者<br />
Acknowledge the source of your data in metadata. If you provide a user interface, include the citation visibly in the interface.<br />
在詮釋資料內標註資料來源，如果有建立使用者介面，也要在上面顯示資料來源<br />
優點：R, D, T</li>
</ul>
</li>
</ul>
<p>翻譯可能有問題，Patch Welcome。最後附上一些翻譯時參考的資料：</p>
<ul>
<li><a href="https://w3c-html-ig-zh.github.io/w3c-glossary/">https://w3c-html-ig-zh.github.io/w3c-glossary/</a></li>
<li><a href="http://terms.naer.edu.tw/">http://terms.naer.edu.tw/</a></li>
<li><a href="http://www.lac.org.tw/law/documents/02/06231.pdf">http://www.lac.org.tw/law/documents/02/06231.pdf</a></li>
</ul>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000884" baseName="2016">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-02-17</b:date>
				<b:time>23:27:50</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>2016</b:title>
			<b:content>
				<b:summary> 又到了一年一度的照片回顧了，一樣也是一個月基本上挑一張。首先是一月的北京天安門，當時是去參加公司年會，這張照片拍攝的位置是無法步行走到的，我是搭巴士經過的時候拍的，那天的空氣也還不錯，隔天晚上空氣品質整個就爆炸了。 二月則是我第一次參加的 SITCON，也是記錄組，其實我覺得 SITCON 這幾年的活動完成度都蠻高的啊，我想一部分原因也是因為學生比較有時間能投入吧，2016 的 SITCON 我印象最深刻的是整套的過場畫面，基本上觀眾是看不到切換畫面的，一切都有做到無縫轉換。 三月是剛購入的 Ricoh Theta 拍的，本來也想要寫篇文章介紹一下，不過目前難產中，之後看看有沒有時間吧。 四月的照片是五月舉辦的 g0v summit 在四月辦的工人同樂會，其實五月 g0v 也有 一張 很喜歡不過後來還是選了另外一張。 五月的照片則是挑了 PF24 的綾波零的 cosplay，今年拍的 cosplayer 是比較沒有印象深刻的，最近也越來越少去了，去得太頻繁的話其實也會看到很多重複出場的玩家，感覺有點浪費時間XD。 六月因為 HKOSC 的關係去了一趟香港。 七月是 HITCON CMT 的工人大會，實際上活動是八月辦的，今年我只有協助 CMT 的部分，年底的 Pacific 就沒進去幫忙了，主要是現在工作比較忙碌，而且常常去幫幾個整天後就會生病，只好減少場次。 八月是 iTHome...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/25004748819/" title="北京天安門 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1532/25004748819_666aa8a544_b.jpg" width="1024" height="683" alt="北京天安門" srcset="https://farm2.staticflickr.com/1532/25004748819_a5173f01f5_k.jpg 2x" /></a></p>

<p>又到了一年一度的照片回顧了，一樣也是一個月基本上挑一張。首先是一月的北京天安門，當時是去參加公司年會，這張照片拍攝的位置是無法步行走到的，我是搭巴士經過的時候拍的，那天的空氣也還不錯，隔天晚上空氣品質整個就爆炸了。</p>

<p>二月則是我第一次參加的 SITCON，也是記錄組，其實我覺得 SITCON 這幾年的活動完成度都蠻高的啊，我想一部分原因也是因為學生比較有時間能投入吧，2016 的 SITCON 我印象最深刻的是整套的過場畫面，基本上觀眾是看不到切換畫面的，一切都有做到無縫轉換。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26152430382/" title="SITCON 2016 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1602/26152430382_64036500c8_b.jpg" width="1024" height="683" alt="SITCON 2016" srcset="https://farm2.staticflickr.com/1602/26152430382_e3b9c44c65_k.jpg 2x" /></a></p>

<p>三月是剛購入的 Ricoh Theta 拍的，本來也想要寫篇文章介紹一下，不過目前難產中，之後看看有沒有時間吧。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26369570082/" title="101 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1450/26369570082_9afaaec8ee_b.jpg" width="1024" height="512" alt="101" srcset="https://farm2.staticflickr.com/1450/26369570082_4c45da1a96_k.jpg 2x" /></a></p>

<p>四月的照片是五月舉辦的 g0v summit 在四月辦的工人同樂會，其實五月 g0v 也有 <a href="https://www.flickr.com/photos/othree/26634526804/in/album-72157665323715403/">一張</a> 很喜歡不過後來還是選了另外一張。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26402986700/" title="g0v summit 2016 工人同樂會 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1684/26402986700_26d5e78a85_b.jpg" width="1024" height="683" alt="g0v summit 2016 工人同樂會" srcset="https://farm2.staticflickr.com/1684/26402986700_e2da4e3684_k.jpg 2x" /></a></p>

<p>五月的照片則是挑了 PF24 的綾波零的 cosplay，今年拍的 cosplayer 是比較沒有印象深刻的，最近也越來越少去了，去得太頻繁的話其實也會看到很多重複出場的玩家，感覺有點浪費時間XD。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26800559021/" title="PF24 Cosplay by othree, on Flickr"><img src="https://farm8.staticflickr.com/7023/26800559021_d2fb252a2b_b.jpg" width="683" height="1024" alt="PF24 Cosplay" srcset="https://farm8.staticflickr.com/7023/26800559021_980ba21c55_k.jpg 2x" /></a></p>

<p>六月因為 HKOSC 的關係去了一趟香港。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/27938866055/" title="香港 2016 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7291/27938866055_d86c2c9a77_b.jpg" width="683" height="1024" alt="香港 2016, " srcset="https://farm8.staticflickr.com/7291/27938866055_d86c2c9a77_b.jpg 683w, https://farm8.staticflickr.com/7291/27938866055_e82afbe9a3_h.jpg 1067w" /></a></p>

<p>七月是 HITCON CMT 的工人大會，實際上活動是八月辦的，今年我只有協助 CMT 的部分，年底的 Pacific 就沒進去幫忙了，主要是現在工作比較忙碌，而且常常去幫幾個整天後就會生病，只好減少場次。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/28104209765/" title="HITCON 2016 CMT 工人大會 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7329/28104209765_ac1bea5d44_b.jpg" width="1024" height="683" alt="HITCON 2016 CMT 工人大會" srcset="https://farm8.staticflickr.com/7329/28104209765_a81d0d2930_k.jpg 2x" /></a></p>

<p>八月是 iTHome 辦的 Modern Web 研討會會場，會場在松山菸廠那邊的台北文創大樓，平常不太有機會可以進去，會議廳那邊有大片落地窗可以看到停工的大巨蛋，主辦單位則是很善用這片玻璃窗，讓他變成留言板，可以用<a href="https://www.flickr.com/photos/othree/29171045152/in/album-72157673058020715/">白板筆留言</a>。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/28656546354/" title="Modern Web by othree, on Flickr"><img src="https://farm9.staticflickr.com/8083/28656546354_aaae1debd6_b.jpg" width="1024" height="683" alt="Modern Web" srcset="https://farm9.staticflickr.com/8083/28656546354_2c82f6f554_k.jpg 2x" /></a></p>

<p>九月整個月沒有拍照，所以改拿六月去的瑞士，特別挑的照片是歐洲最高峰少女峰，不過一共有三張，第一張是少女峰車站的近照，最左邊的山峰就是少女峰了，右下小點就是觀光客了。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/29573834391/" title="Jungfraujoch by othree, on Flickr"><img src="https://farm9.staticflickr.com/8128/29573834391_d65bc44d32_b.jpg" width="1024" height="683" alt="Jungfraujoch" srcset="https://farm9.staticflickr.com/8128/29573834391_72591a2446_k.jpg 2x" /></a></p>

<p>第二張則是回程在山腳下拍的少女峰車站，可以下載原始檔案找找看車站在哪，然後第三張是在差不多地方用望遠鏡頭拍的，可以比較一下大小差異。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/29544124212/" title="Jungfraujoch by othree, on Flickr"><img src="https://farm9.staticflickr.com/8042/29544124212_4ac50870a0_b.jpg" width="1024" height="683" alt="Jungfraujoch" srcset="https://farm9.staticflickr.com/8042/29544124212_a015770bde_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/29028819514/" title="Jungfraujoch by othree, on Flickr"><img src="https://farm9.staticflickr.com/8693/29028819514_9a3b2f6359_b.jpg" width="1024" height="683" alt="Jungfraujoch" srcset="https://farm9.staticflickr.com/8693/29028819514_b7b09c5d5f_k.jpg 2x" /></a></p>

<p>十月是在往 MOPCON 的火車上，突然發現到，台鐵車上跑馬燈的點陣字形還蠻不錯的，字體蠻好看之外，中英文混排也沒也有不協調的問題（不過照片上沒有），有人說可能是以前倚天系統的點陣字集。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/30483464980/" title="台鐵 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5723/30483464980_7d3a850342_b.jpg" width="1024" height="683" alt="台鐵" srcset="https://farm6.staticflickr.com/5723/30483464980_58b5f22986_k.jpg 2x" /></a></p>

<p>十一月是 Firefox 慶生會，今年是第十二年了，地點是摩茲工寮。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/30843698921/" title="Happy Birthday Firefox by othree, on Flickr"><img src="https://farm6.staticflickr.com/5484/30843698921_f74ac860ff_b.jpg" width="1024" height="683" alt="Happy Birthday Firefox" srcset="https://farm6.staticflickr.com/5484/30843698921_2010d66bbb_k.jpg 2x" /></a></p>

<p>十二月是月底去日本跨年的照片，這是第一次在日本跨年，也第一次逛了一下日本的神社祭典攤位，雖然時間比較早，和新年參拜的人潮錯開，不過也因此可以歸在 2016 年十二月～</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32066349271/" title="伏見稻荷大社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/685/32066349271_9eaa940677_b.jpg" width="1024" height="683" alt="伏見稻荷大社" srcset="https://farm1.staticflickr.com/685/32066349271_093f1e3a14_k.jpg 2x" /></a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000883" baseName="nodejs-es-module">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-01-14</b:date>
				<b:time>12:22:32</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>NodeJS and ES Module</b:title>
			<b:content>
				<b:summary> 今天看了 TC39 一月會議的 Agenda 後才注意到，nodejs 用的 CommonJS Module 和 ECMAScript Module(ES Module) 在特定情況下會有混淆的情形發生，所謂的特定情形就是沒有 import/require 也沒 export/exports 的模組，例如寫東西在 root 物件上，只產生 side effect 的模組： (function (root) { root.lib = {}; }(this)); 像這樣的檔案，Parser 就無法判斷他是 CommonJS Module 還是 ES Module，這樣會產生什麼問題呢，其實 ES Module 有一些特色，例如它必須要使用...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/27325803313/" title="香港 2016 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7286/27325803313_0fd50750d0_b.jpg" width="1024" height="683" alt="香港 2016" srcset="https://farm8.staticflickr.com/7286/27325803313_0fd50750d0_b.jpg 1024w, https://farm8.staticflickr.com/7286/27325803313_daa4621d44_h.jpg 1600w" /></a></p>
<p>今天看了 TC39 一月會議的 Agenda 後才注意到，nodejs 用的 <a href="https://nodejs.org/docs/latest/api/modules.html">CommonJS Module</a> 和 <a href="https://hacks.mozilla.org/2015/08/es6-in-depth-modules/">ECMAScript Module</a>(ES Module) 在特定情況下會有混淆的情形發生，所謂的特定情形就是沒有 <code>import/require</code> 也沒 <code>export/exports</code> 的模組，例如寫東西在 root 物件上，只產生 side effect 的模組：</p>
<pre><code class="language-javascript">(function (root) {

  root.lib = {};

}(this));
</code></pre>
<p>像這樣的檔案，Parser 就無法判斷他是 CommonJS Module 還是 ES Module，這樣會產生什麼問題呢，其實 ES Module 有一些特色，例如它必須要使用 strict mode 來解析並執行，而光是這個差異，就會讓相同的程式碼有不一樣的執行結果了，而需要同時支援 CommonJS Module 和 ES Module 的主要是 NodeJS 環境，當然它目前還沒有兩種都支援，但是勢必需要支援 ES Module 的，所以 NodeJS 需要能夠百分之百正確的判斷每個 JavaScript 程式碼是屬於 CommonJS Module 還是 ES Module，這在目前是辦不到的，也因為這個問題所以 NodeJS 雖然已經支援大部分的 ES2015 的新功能，但卻遲遲還無法支援 ES Module，相關的討論至少也半年有了，當時還提出了新的副檔名 <code>.mjs</code> <a href="https://github.com/nodejs/node-eps/blob/5dae5a537c2d56fbaf23aaf2ae9da15e74474021/002-es6-modules.md#51-determining-if-source-is-an-es-module">這種解法</a>，多一種副檔名聽起來有點不可思議，也引此還有個 Twitter <a href="https://twitter.com/nodemjs">帳號專門</a>在關注相關情報的，不過目前最新的解決方法，則是 ES Spec <a href="https://github.com/bmeck/UnambiguousJavaScriptGrammar">修改</a> Module 的 Grammer 來解決這個問題，修改的方式是就是以後 ES Module 一定要至少有一個 <code>import</code> 或是 <code>export</code> statement，如果是上面那種沒有需要 import 也沒有 export 的模組，那就要加上 <code>export {}</code>，變成：</p>
<pre><code class="language-javascript">(function (root) {

  root.lib = {};

}(this));

export {};
</code></pre>
<p>語意上剛好等於沒有匯出任何東西，所以不會和現在的 ES2015 版的 Module 有衝突，這份提案已經是 accept 狀態了，所以沒意外應該今年的 ES2017 就會包含進去了，當然這會影響到以前寫出這種 ES Module 的程式碼，不過目前也還沒有那個環境有直接使用 ES Module 的能力，都還是先過 bundler 轉成現在環境可以使用的形式，Web 的 <code>&lt;script type=&quot;module&quot;&gt;</code> 也才正要有瀏覽器支援，所以這個時間點做出這個修改影響還算是很小，之後大概就是有記得應該就沒問題了，我自己是比較期待 nodejs 能快點原生支援 ES Module 啦。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000882" baseName="smartypants-js">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-01-10</b:date>
				<b:time>22:47:59</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>smartypants.js</b:title>
			<b:content>
				<b:summary> SmartyPants 這個東西也是很久了，和 Markdown 差不多時期，都是 John Gruber 幫當時的網路文字出版軟體（ex: MovableType）所做的，而 SmartyPants 是用來處理一些標點符號的，其中，最容易被人注意到的就是引號「"」的轉換了。 雖然鍵盤上的引號按鍵只有一個，但是傳統的文書寫作上，引號是有分左邊（開始）的「&#8220;」和右邊（結束）的「&#8221;」，只不過早期為了減少鍵盤按鍵數，還有字元編碼上的限制，所以合併成為只有一個，不過隨著計算機的發展，可以使用的字元編碼資料量增加後，就還是有定義了開始和結束的兩種引號，並且有單引號和雙引號兩種： 左單引號 &#8216; 右單引號 &#8217; 左雙引號 &#8220; 右雙引號 &#8221; 理想上，寫作文章時也應該正確的使用這些引號，不過其實因為輸入上比較麻煩，一般人打字也不會特別注意，所以常常被忽略，比較常見的是軟體本身在使用者輸入文字時自動做轉換，例如 Apple 的 Pages、Keynote、微軟的 Skype 等等，講到 Keynote 自動轉換引號這點就要另外岔題一下，就是偶爾都會看到頭影片裡面的程式碼，其中的引號也被轉換過，其實就是因為貼上 code 到 Keynote 的時候被轉換了，如果作者沒有注意到的話就直接釋出，然後讀者 copy 程式碼出來試試看時，就會編譯失敗而無法執行。回到標點符號上，這類標點符號其實不止有引號，SmartyPants 可以處理的還包括： -- 轉成 en-dash &#8211; ---...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31387550094/" title="大阪新年 by othree, on Flickr"><img src="https://farm1.staticflickr.com/293/31387550094_01791b5764_b.jpg" width="1024" height="683" alt="大阪新年" srcset="https://farm1.staticflickr.com/293/31387550094_01791b5764_b.jpg 1024w, https://farm1.staticflickr.com/293/31387550094_6f388b3f83_h.jpg 1600w" /></a></p>

<p><a href="https://daringfireball.net/projects/smartypants/">SmartyPants</a> 這個東西也是很久了，和 Markdown 差不多時期，都是 John Gruber 幫當時的網路文字出版軟體（ex: MovableType）所做的，而 SmartyPants 是用來處理一些標點符號的，其中，最容易被人注意到的就是引號「"」的轉換了。</p>

<p>雖然鍵盤上的引號按鍵只有一個，但是傳統的文書寫作上，引號是有分左邊（開始）的「&#8220;」和右邊（結束）的「&#8221;」，只不過早期為了減少鍵盤按鍵數，還有字元編碼上的限制，所以合併成為只有一個，不過隨著計算機的發展，可以使用的字元編碼資料量增加後，就還是有定義了開始和結束的兩種引號，並且有單引號和雙引號兩種：</p>

<ul>
<li>左單引號 &#8216;</li>
<li>右單引號 &#8217;</li>
<li>左雙引號 &#8220;</li>
<li>右雙引號 &#8221;</li>
</ul>

<p>理想上，寫作文章時也應該正確的使用這些引號，不過其實因為輸入上比較麻煩，一般人打字也不會特別注意，所以常常被忽略，比較常見的是軟體本身在使用者輸入文字時自動做轉換，例如 Apple 的 Pages、Keynote、微軟的 Skype 等等，講到 Keynote 自動轉換引號這點就要另外岔題一下，就是偶爾都會看到頭影片裡面的程式碼，其中的引號也被轉換過，其實就是因為貼上 code 到 Keynote 的時候被轉換了，如果作者沒有注意到的話就直接釋出，然後讀者 copy 程式碼出來試試看時，就會編譯失敗而無法執行。回到標點符號上，這類標點符號其實不止有引號，SmartyPants 可以處理的還包括：</p>

<ul>
<li><code>--</code> 轉成 en-dash &#8211;</li>
<li><code>---</code> 轉成 em-dash &#8212;</li>
<li><code>...</code> 轉成 ellipsis &#8230;</li>
</ul>

<p>而且它對於引號的轉換還算是聰明，會判斷是不是真的用來包起文字的，還支援用 backtick 來模擬的雙引號，看起來像：</p>

<pre><code>``quoted string''
</code></pre>

<p>另為也會針對年代的特殊寫法做處理，例如 <code>'80s</code> 會轉成 &#8217;80s，並且會避開 HTML 標籤的部分，不會把 HTML 標籤裡面的屬性值的引號也做轉換，像是 <code>&lt;html lang="en"&gt;</code> 這種。前陣子因為工作上要處理翻譯字串，想要順便好好的處理這些符號，所以就想到了這個工具，因為我一般寫小 script 做事情是用 JavaScript 然後用 node 來執行，所以要用 SmartyPants 就沒辦法那麼直接了，一開始先找 JavaScript 的 solution，找到一個簡單的，只用幾條 regular epxression 的<a href="https://gist.github.com/danburzo/1cc866400cb4f810c493">版本</a>，其實運作的也還不錯，但是無法避開不處理 HTML 標籤，所以產生出來的結果也不能用，接著改成用 STDIO 丟給 John Gruber 的 Perl 版，結果這效率實在太差，所以又繼續研究一番，發現還有一套叫 <a href="https://www.npmjs.com/package/typogr">typogr</a> 的文字處理工具有實做，不過不想要太多功能，所以最後我決定自己把 Perl 版 SmartyPants 移植成 NPM module，也因此有了 <a href="https://github.com/othree/smartypants.js">smartypants.js</a>。</p>

<p>這次開發我選擇的語言是 TypeScript，原因可以參考我上一篇文章 <a href="https://blog.othree.net/log/2016/11/18/20k-for-of/">20k-for-of</a>，然後用 Makefile 加上一些指令轉成類似 <a href="https://github.com/jquery/jquery/blob/master/src/wrapper.js">jQuery UMD</a> 形式的 JavaScript 檔案發佈到 NPM 上，目前的 smartypants.js 是完完全全把 Perl 版的邏輯翻過來，不過只有實作轉換編碼的部分加上 CLI 的介面，另外 Perl 版的只能轉換成 HTML entity 的格式，不過現在 UTF-8 已經算是很廣泛應用的文字編碼了，所以我還加上了一個轉成 UTF-8 字元的版本，用 UTF-8 編碼的雙引號其實很不錯，在 JSON 或是 csv 裡面也不用 escape，肉眼看起來也美觀許多。</p>

<p>實做過程比較緊張的地方大概就是要把 Perl 的 regular expression 轉成 JavaScript 的版本了，一度看到沒看過的用法都覺得會不會沒辦法用 JavaScript 做起來，還好沒用到很神奇的語法。另外它處理 HTML 語法的部分，其實是先過一個簡單的 lexer 轉成 token list，裡面兩種 token 分別就是一般文字和 HTML 標籤兩種，接著只針對一般文字 token 來做標點符號轉換，不過其實這個 tokenize 的部分有 bug，例如：</p>

<pre><code>&lt;span title="&gt;"&gt;HAHA&lt;/span&gt;
</code></pre>

<p>就會被分解成如下的 token：</p>

<ul>
<li><code>&lt;span title="&gt;</code></li>
<li><code>"&gt;HAHA</code></li>
<li><code>&lt;/span&gt;</code></li>
</ul>

<p>而且這種方法就也無法處理到一些文字內容的 HTML 屬性，例如 title 和 alt 等，所以接下來還可以做的改進，一個就是改進這部分的 lexer，然後也要對這些屬性值轉換標點符號，大概需要建立一個白名單，另外還有一個想加強的地方就是補上 test case 了，目前完全沒有相關的 test case 可以用，所以其實也沒很正式的驗證過，不過總之目前是都還運作正常，如果有相似需求的人可以參考一下。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
