<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>c</b:listType>
			<b:listData listID="web">web</b:listData>
		</b:entriesMeta>

		<b:entry entryID="000959" baseName="robots-exclusion-protocol">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2019-07-02</b:date>
				<b:time>12:35:06</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Robots Exclusion Protocol</b:title>
			<b:content>
				<b:summary>Google Webmaster Central Blog 昨天發表了 Formalizing the Robots Exclusion Protocol Specification 這篇文章，介紹到 Robots Exclusion Protocol (REP) 這個正在標準化的草案，REP 其實就是已經被廣泛使用的 robots.txt 檔案，robots.txt 誕生至今已經 25 年了，當初是由 Martijn Koster 所設計，早期網路的東西基本上就是先做，設計的不錯大家就跟著抄，不一定會有什麼標準的文件，robots.txt 就是這樣其實一直都沒正式的標準文件，我以前還真的有懷疑過怎麼找不到，直到 Google 這篇文章才確定了，真的一直以來是沒標準的，雖然 Google 衝網路標準太快讓人有不少意見，不過這次我倒是覺得樂觀其成，而且他們也還公開了他們的 robots.txt 的 parser matcher lib。 消息來源...</b:summary>
				<b:mainContent><p>Google Webmaster Central Blog 昨天發表了 <a href="https://webmasters.googleblog.com/2019/07/rep-id.html">Formalizing the Robots Exclusion Protocol Specification</a> 這篇文章，介紹到 Robots Exclusion Protocol (REP) 這個正在標準化的<a href="https://tools.ietf.org/html/draft-rep-wg-topic-00">草案</a>，REP 其實就是已經被廣泛使用的 <a href="https://support.google.com/webmasters/answer/6062608?hl=zh-Hant">robots.txt</a> 檔案，robots.txt 誕生至今已經 25 年了，當初是由 <a href="https://en.wikipedia.org/wiki/Martijn_Koster">Martijn Koster</a> 所設計，早期網路的東西基本上就是先做，設計的不錯大家就跟著抄，不一定會有什麼標準的文件，robots.txt 就是這樣其實一直都沒正式的標準文件，我以前還真的有懷疑過怎麼找不到，直到 Google 這篇文章才確定了，真的一直以來是沒標準的，雖然 Google 衝網路標準太快讓人有不少意見，不過這次我倒是覺得樂觀其成，而且他們也還公開了他們的 robots.txt 的 <a href="https://github.com/google/robotstxt">parser matcher lib</a>。</p>
<p><a href="https://twitter.com/igrigorik/status/1145778175898599424">消息來源</a></p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000956" baseName="incrementally-better-cookies">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2019-05-27</b:date>
				<b:time>22:48:46</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>SameSite Cookie</b:title>
			<b:content>
				<b:summary> Cookie 的規格是 RFC 文件所定義的，其實一直以來都有在演化，目前為止已經有三個版本，照順序分別是 RFC2109、RFC2965 和最新的 RFC6265，像是 HttpOnly 就是 RFC6265 才出現的，而最近最新的屬性，就是 SameStie 了，其實它和 HttpOnly 的起源很接近，都是近年來比較被人重視的安全性和隱私的原因，Google 的 web.dev 有一篇圖文並茂的文章介紹的很詳細－ SameSite cookies explained，建議還不清楚什麼是 SameSite cookie 的可以先去看一下。 SameSite Cookie 的標準文件其實還未正式定稿，目前還算是草稿 RFC6265bis（bis 在 The Tao of IETF 有解釋），不過主流瀏覽器都已經支援了，然後其實這篇文章我想說的是最近在 W3C TAG 看到的 Issue 373：SameSite=Lax...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/47943015586/" title="Cookie Time by othree, on Flickr"><img src="https://live.staticflickr.com/65535/47943015586_16cebae79f_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="Cookie Time" srcset="https://live.staticflickr.com/65535/47943015586_16cebae79f_b.jpg 1024w, https://live.staticflickr.com/65535/47943015586_2368c831dc_h.jpg 1600w" /></a></p>
<p>Cookie 的規格是 RFC 文件所定義的，其實一直以來都有在演化，目前為止已經有三個版本，照順序分別是 <a href="https://tools.ietf.org/html/rfc2109">RFC2109</a>、<a href="https://tools.ietf.org/html/rfc2965">RFC2965</a> 和最新的 <a href="https://tools.ietf.org/html/rfc6265">RFC6265</a>，像是 <code>HttpOnly</code> 就是 RFC6265 才出現的，而最近最新的屬性，就是 <code>SameStie</code> 了，其實它和 <code>HttpOnly</code> 的起源很接近，都是近年來比較被人重視的安全性和隱私的原因，Google 的 web.dev 有一篇圖文並茂的文章介紹的很詳細－ <a href="https://web.dev/samesite-cookies-explained/">SameSite cookies explained</a>，建議還不清楚什麼是 SameSite cookie 的可以先去看一下。</p>
<p>SameSite Cookie 的標準文件其實還未正式定稿，目前還算是草稿 <a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-5.3.7">RFC6265bis</a>（bis 在 <a href="https://www6.ietf.org/tao#rfc.section.6.3">The Tao of IETF</a> 有解釋），不過主流瀏覽器都已經支援了，然後其實這篇文章我想說的是最近在 W3C TAG 看到的 Issue 373：<a href="https://github.com/w3ctag/design-reviews/issues/373">SameSite=Lax by default</a>，是由 Google 的 Mike West 提案要把 SameSite 的預設值改為 Lax，現在 Google Chrome 已經有這個實驗選項了，而且除了 SameSite 預設值的改變之外，其實還有一個修改目標是 <code>SameSite</code> 要在 <code>Secure</code> 的時候才能設為 <code>None</code>，這項改變相對而言是影響比較大的，所以提案的<a href="https://mikew%C3%AF%C2%BC%C2%8Cest.github.io/cookie-incrementalism/draft-west-cookie-incrementalism.html">文件</a>（Incrementally Better Cookies）也有提到可以分步進行，另外就是 Firefox 也表示<a href="https://groups.google.com/forum/#!msg/mozilla.dev.platform/nx2uP0CzA9k/BNVPWDHsAQAJ">有意願來實做</a>，看起來至少 SameSite 預設改為 Lax 這件事應該是不會太久之後就會發生了。</p>
<p>在花時間看一些文件內的參考資料後，發現 Mike West 還有其它幾份相關的草案：</p>
<ul>
<li><a href="https://mikewest.github.io/first-party-sets/">first-party-set</a> 是用 <code>/.well-known/</code> URL 來跟客戶端溝通，可以提供 first party 的域名清單；</li>
<li><a href="https://tools.ietf.org/html/draft-west-cookie-samesite-firstparty-00">First-Party Sets and SameSite Cookies</a> 利用上面的 first-party-set 資訊，然後提供兩種新的 SameSite 值：<code>FirstPartyLax</code> 和 <code>FirstPartyStrict</code>；</li>
<li><a href="https://tools.ietf.org/html/draft-west-http-state-tokens-00">HTTP State Tokens</a> 定義了個標準化的 session token，是由瀏覽器端產生的 token，而不是 Web API，至於怎麼傳遞到 server 端，怎樣溝通有效期等都有寫在規範內，Incrementally Better Cookies 的想法也是從這份草案中的特性而來。</li>
</ul>
<p>這些草案都還蠻有趣的，至於會不會定稿成為規範甚至大家都開始實做，目前就還很難斷定了。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000946" baseName="browser-diversity">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-12-27</b:date>
				<b:time>22:47:53</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>瀏覽器多樣性 Browser Diversity</b:title>
			<b:content>
				<b:summary>前陣子大事就是微軟要放棄自家的 EdgeHTML 引擎，轉用 Chromium 專案為基礎來開發新版的 Edge Browser 了，風聲剛出來的時候，我注意到微軟官方完全沒做出回應，也沒有任何微軟員工出來講話，加上有些媒體早就發現到有 Edge 的開發成員在貢獻 Chromium，我就覺得是真的了，後來十二月六日微軟正式回應，還有一份比較長的聲明，Mozilla 也有回應，其實這件事情對於網路生態算是很大的衝擊，不過一般使用者可能沒什麼感覺，加上都沒看到中文的文章寫這件事情的影響，所以只好我來寫一下了。 首先，我講可能沒什麼公信力，所以可以直接來看一下 Google(?) 其中一集 HTTP 203 短片，標題是 Browser Monoculture，Monoculture 剛好是 Diversity 的相對，mono 是單一，單聲道或是黑白影像都是用 mono，culture 就是文化，Monoculture 的意思自然可以明白： 事實上，當微軟放棄 EdgeHTML 引擎之後，現在整個生態圈只剩下 Firefox 的 Gecko 引擎和 WebKit 家族（Safari 的 WebKit 和 Chrome...</b:summary>
				<b:mainContent><p>前陣子大事就是微軟要放棄自家的 EdgeHTML 引擎，轉用 Chromium 專案為基礎來開發新版的 Edge Browser 了，風聲剛出來的時候，我注意到微軟官方完全沒做出回應，也沒有任何微軟員工出來講話，加上有些媒體早就發現到有 Edge 的開發成員在貢獻 Chromium，我就覺得是真的了，後來十二月六日微軟<a href="https://blogs.windows.com/windowsexperience/2018/12/06/microsoft-edge-making-the-web-better-through-more-open-source-collaboration/">正式回應</a>，還有一份比較長的<a href="https://github.com/MicrosoftEdge/MSEdge">聲明</a>，Mozilla 也有<a href="https://blog.mozilla.org/blog/2018/12/06/goodbye-edge/">回應</a>，其實這件事情對於網路生態算是很大的衝擊，不過一般使用者可能沒什麼感覺，加上都沒看到中文的文章寫這件事情的影響，所以只好我來寫一下了。</p>
<p>首先，我講可能沒什麼公信力，所以可以直接來看一下 Google(?) 其中一集 HTTP 203 短片，標題是 Browser Monoculture，Monoculture 剛好是 Diversity 的相對，mono 是單一，單聲道或是黑白影像都是用 mono，culture 就是文化，Monoculture 的意思自然可以明白：</p>
<div class="embed_16_9">
  <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/IskiTVqHp18" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>事實上，當微軟放棄 EdgeHTML 引擎之後，現在整個生態圈只剩下 Firefox 的 Gecko 引擎和 WebKit 家族（Safari 的 WebKit 和 Chrome 的 Blink ），而 WebKit 家族現在的市佔率已經是超過八成的獨大局面，行動裝置領域更是嚴重，如果扣除 iOS 的 Mobile Safari 則幾乎都是 Chrome 的天下了，幾乎是回到 IE 壟斷的時光，不過其實我覺得現在狀況又比那時候更險峻一點，有兩個問題：第一個是現在的 Web Platform 已經太複雜了，HTML 本身還算是單純的部分，但是各種 CSS、Web API 的推陳出新，再加上安全性、親和力、網路連線、Extensible Web 等等，到底有多少東西呢？可以參考我之前貼過的 <a href="https://blog.othree.net/log/2018/09/16/web-platform/">Web Platform</a> 那篇文章中 <a href="https://www.chromestatus.com/features">Google Chrome 的 Platform Status</a>，光這邊登記在案的，現在就有 1255 個功能，還有不少面向的東西不會列在這邊，像是效能、開發工具、WebDriver 等，其實我已經不認為現在有什麼其他第三方勢力還有辦法維護一個獨自的瀏覽器引擎了，就算是 Google 一開始也是從 WebKit，Mozilla 也是從 Gecko 來發展，微軟今天放棄繼續開發 EdgeHTML 之後，可能過一兩年就會讓它難以再次跟上標準的發展，其實微軟當年能從把 IE 重構成現在的 Edge 我覺得實在很厲害了，不過未來這種事情難度只會越來越高。</p>
<p>第二個是如果 Chrome 已經佔有率這麼高，它是不是可以自己開始亂搞加功能呢？就像是以前的 IE。答案其實是<strong>可以</strong>，只是現在手法已經進化了，以下舉個例子，不過先消毒，我不是指控 Google Chrome 團隊這件事是 be evil，而是假設要 be evil，這已經是可行的方法，或是換個角度，他們其實不覺得自己在 be evil，只是結果就是這樣了。</p>
<p>我要舉的例子是前兩週 Chrome 發表了他們支援 Background Fetch 這個新標準的<a href="https://developers.google.com/web/updates/2018/12/background-fetch">消息</a>，我第一時間反應其實是，WTF 我怎麼完全沒聽過這東西，然後我就去查查怎麼回事，然後了解到：</p>
<ol>
<li>看介紹大概就了解這個需求確實是有的</li>
<li>Chrome 外其他家都還沒有說要支援（根據 <a href="https://www.chromestatus.com/feature/5712608971718656">Chrome Platform Status</a>）</li>
<li>標準文件的兩位編輯都是 Google 的人，主要應該是 Jake Archibald</li>
<li>WICG <a href="https://discourse.wicg.io/t/proposal-background-fetch/1994">那邊</a>是去年二月也是由 Jake Archibald 提的，然後 W3C 那邊根據 blink-dev 的正向回饋就決定接收提案了</li>
</ol>
<p>這狀況有點讓我聯想到「進化的獨裁者」，一切該有的過程其實都有，但是就都是他們的人，自己提案說有這需求，有寫好文件了，在自己家的討論區得到正向回饋，然後實做起來馬上就有市場 80% 的支援度了，這樣要不要直接算正式的網路標準了，其他家（aka Firefox）又情何以堪。事實上 Chrome 這樣衝網路標準的狀況也好一陣子了，早在 2015 年 ppk 就已經有提出對於標準發展太快的疑慮而發了一篇 <a href="https://www.quirksmode.org/blog/archives/2015/07/stop_pushing_th.html">Stop pushing the web forward</a>。</p>
<p>而除了快速的發展新功能之外，還有一種狀況是擱置他們覺得不重要的 Web API 開發，然後因為已經獨大了，所以開發者就算很想要這個新的 Web API 也是無能為力，這其實也就是 HTTP 203 短片有提到的，多樣性意味著開發者有選擇的權力，而有這個力量才能讓兩邊對等。</p>
<p>而除了這兩個問題之外，也有人提出我之前沒想過的安全性問題，剛好就在微軟發佈消息之後沒多久就爆發出 <a href="https://www.zdnet.com/article/sqlite-bug-impacts-thousands-of-apps-including-all-chromium-based-browsers/">SQLite 漏洞</a>，ZDNet 的標題提到影響到所有以 Chromium 為基礎的瀏覽器，這也是一個我之前沒想到過的問題，如果獨大的軟體有嚴重的漏洞，那一下就直接影響超多人，不過其實這次的漏洞連 Firefox 也有受影響，然後也還好不是直接可以遠端就下手的漏洞，其實佔有率高的軟體或服務都一直是駭客的目標，想必 Chromium 的 Blink 核心之後勢必會更加受到駭客關注吧。</p>
<p>這陣子這個圈子很多人都已經發表過看法了，像是 <a href="https://www.quirksmode.org/blog/archives/2018/12/chromedge_and_h.html">ppk</a> 和 <a href="https://www.zeldman.com/2018/12/07/browser-diversity-starts-with-us/">Zeldman</a> 都出來發表意見，如果有人不知道這兩位是誰，趁機介紹一下，Jeffery Zeldman 是 <a href="https://en.wikipedia.org/wiki/Designing_with_Web_Standards">Designing with Web Standards</a> 的作者，A List Apart（A Book Apart, An Event Apart 等）和 <a href="https://www.webstandards.org/">Web Standards Project</a> 的發起人，也是當年推動瀏覽器實做應該回歸網路標準的意見領袖，ppk 也是那個時期蠻活躍的，做了很多相容性測試，著有 ppk on JavaScript，當年是很棒的入門書。大部分的人其實都是針對 monoculture 論述，然後建議大家現在就開始行動，包括確保你的網站支援 Firefox、開始使用 Firefox 等等，不過 Lea Verou 有則評論則是針對那些覺得少一個瀏覽器要測試很高興的開發者，講的比較重：</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">If you think a WebKit monoculture is good for web developers or the Web, you're incredibly short-sighted (and likely inexperienced), sorry.</p>- Lea Verou (@LeaVerou) <a href="https://twitter.com/LeaVerou/status/301727973273391104?ref_src=twsrc%5Etfw">February 13, 2013</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>至於事主之一的 Google 則就裝死當沒他的事。總之，現在雖然 Firefox 還有個 10% 左右的佔有率，光看數字還比 IE 那時候好，但是我卻覺得情勢更加險峻，很難再有新的競爭者出來，只能希望 Google  don't be evil，還有 Mozilla 能夠堅持下去，真是有點想念還有五大主流瀏覽器的時候啊。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000943" baseName="chrome-privacy-issue">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-09-27</b:date>
				<b:time>13:56:07</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Chrome 10 週年</b:title>
			<b:content>
				<b:summary> Chrome 10 週年 Google 真的是很精心的規劃要幫它慶祝啊，我猜大概是找了個很有狼性的 PM 來，最近一下就被發現兩個問題，第一個小一點點，就是 Clear browser data 的地方，全部清除的功能不會幫你清除 Google 的資料喔： "Clear all Cookies except Google Cookies", thanks Chrome. /cc @matthew_d_green pic.twitter.com/tR0UJjtPFL-- Christoph Tavan (@ctavan) September 24, 2018 第二個問題比較大一點，灣區日報看到的 Why I'm done with Chrome，問題就是 Chrome 69 開始，登入網頁版的...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31070118768/" title="Chrome 10 Years by othree, on Flickr"><img src="https://farm2.staticflickr.com/1977/31070118768_f2335fb367_b.jpg" intrinsicsize="960x540" width="960" height="540" alt="Chrome 10 Years" srcset="" /></a></p>
<p>Chrome 10 週年 Google 真的是很精心的規劃要幫它慶祝啊，我猜大概是找了個很有狼性的 PM 來，最近一下就被發現兩個問題，第一個小一點點，就是 Clear browser data 的地方，全部清除的功能不會幫你清除 Google 的資料喔：</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">"Clear all Cookies except Google Cookies", thanks Chrome. /cc <a href="https://twitter.com/matthew_d_green?ref_src=twsrc%5Etfw">@matthew_d_green</a> <a href="https://t.co/tR0UJjtPFL">pic.twitter.com/tR0UJjtPFL</a></p>-- Christoph Tavan (@ctavan) <a href="https://twitter.com/ctavan/status/1044282084020441088?ref_src=twsrc%5Etfw">September 24, 2018</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>第二個問題比較大一點，灣區日報看到的 <a href="https://wanqu.co/a/6982/why-im-done-with-chrome/">Why I'm done with Chrome</a>，問題就是 Chrome 69 開始，登入網頁版的 Google 服務會自動把 Chrome 瀏覽器端的 Google 帳號也登入，然後根據 Google 工程師所說，這樣還不會觸發同步備份密碼和 autofill 等隱私資料（包括密碼、信用卡資料），不過在這狀態下你很可能不小心就觸發了，由於這個機制官方沒說過，介面上也沒明顯提示，就只有大頭那邊的頭像會變，幾乎都會被使用者忽略，而會不會自動備份隱私資料只是一部份，比較嚴重的點還是這個行為是破壞使用者的信任，事情鬧出來之後 Google 有<a href="https://www.blog.google/products/chrome/product-updates-based-your-feedback/">官方回應</a> 說下一版會有修改讓使用者可以關閉（不過預設還是開啟啦～～），登入後的介面也有相對應的修改讓狀態更清楚，另外就是刪除所有 Cookie 不會保留 Google 的了，以上這些修改都要等十月中的 Chrome 70。</p>
<p>最後就是，隨著這次事件才注意到有 <a href="https://github.com/Eloston/ungoogled-chromium">ungoogled-chromium</a> 這個專案啊。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000940" baseName="intrinsic-size">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-09-21</b:date>
				<b:time>22:08:14</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Intrinsic Size 媒體寬高比</b:title>
			<b:content>
				<b:summary>HTML 文件在編寫插入 &lt;img&gt; 時，通常都會順便加上寬高的資訊，早期這樣做除了指定圖片呈現時的大小外，還有一個好處是提升頁面繪製的速度，不用在圖片讀取好、知道實際寬高時，又重新排版重畫版面，不過這個狀況在用 CSS 設定動態寬度時，就又回到原點了，像是設定 width: 100%; 這種，因為沒辦法設定相對於圖片寬度的高度值，所以瀏覽器只能自己先隨便決定一個高度，等圖片抓好再重排一次。 一直以來這問題都沒好的方案處理，在排版上比較多人採用的是外面多一層 block 元素然後用 padding-top 來把空間先佔好，不過這也只算是個替代方案，真的要處理應該還是要從 HTML 或是 CSS 下手，然後前兩天才終於看到有個不錯的方案 Chrome 要來實做了，叫做 Intrinsic Size： &lt;img intrinsicsize=&quot;250 x 200&quot; src=&quot;cat.jpg&quot;&gt; 就是一個長乘寬的概念，中間那個乘號其實是小寫的 x，然後提供的長寬資訊其實是等於預先給的 naturalWidth、naturalHeight，為什麼不用 aspect ratio 呢？在提案的文件裡面其實都有寫到，基本上就是這種設計提供的資訊更多，有更多好處，例如都沒設定寬高時，可以拿 intrinsicsize 來先用之類的，intrinsicsize目前設計只能用在圖片和影片上，Chrome 預計在 71 的時候推出這個功能，也已經做好有貓的測試網頁了，感覺一切都箭在弦上了，不過這新提案在 WICG 上幾乎沒討論，提案者是...</b:summary>
				<b:mainContent><p>HTML 文件在編寫插入 <code>&lt;img&gt;</code> 時，通常都會順便加上寬高的資訊，早期這樣做除了指定圖片呈現時的大小外，還有一個好處是提升頁面繪製的速度，不用在圖片讀取好、知道實際寬高時，又重新排版重畫版面，不過這個狀況在用 CSS 設定動態寬度時，就又回到原點了，像是設定 <code>width: 100%;</code> 這種，因為沒辦法設定相對於圖片寬度的高度值，所以瀏覽器只能自己先隨便決定一個高度，等圖片抓好再重排一次。</p>
<p>一直以來這問題都沒好的方案處理，在排版上比較多人採用的是外面多一層 block 元素然後用 <code>padding-top</code> 來把空間先佔好，不過這也只算是個替代方案，真的要處理應該還是要從 HTML 或是 CSS 下手，然後前兩天才終於看到有個不錯的方案 Chrome 要來實做了，叫做 <a href="https://github.com/ojanvafai/intrinsicsize-attribute">Intrinsic Size</a>：</p>
<pre><code class="language-html">&lt;img intrinsicsize=&quot;250 x 200&quot; src=&quot;cat.jpg&quot;&gt;
</code></pre>
<p>就是一個長乘寬的概念，中間那個乘號其實是小寫的 <code>x</code>，然後提供的長寬資訊其實是等於預先給的 naturalWidth、naturalHeight，為什麼不用 aspect ratio 呢？在提案的文件裡面其實都有寫到，基本上就是這種設計提供的資訊更多，有更多好處，例如都沒設定寬高時，可以拿 <code>intrinsicsize</code> 來先用之類的，<code>intrinsicsize</code>目前設計只能用在圖片和影片上，Chrome <a href="https://www.chromestatus.com/feature/4704436815396864">預計</a>在 71 的時候推出這個功能，也已經做好<strong>有貓</strong>的<a href="https://googlechrome.github.io/samples/intrinsic-size/index.html">測試網頁</a>了，感覺一切都箭在弦上了，不過這新提案在 WICG 上幾乎沒<a href="https://discourse.wicg.io/t/layout-of-img-canvas-and-video-for-any-elements-suggestion/1595/2">討論</a>，提案者是 WICG 也是 Chromium 成員就是，另外就是另外三家的 web platform status 都還查不到，並且，其實也有一個 CSS 的 <code>aspect-ratio</code> <a href="https://www.xanthir.com/blog/b4810">提案</a>，所以到底會怎樣還很難說啊（不過我覺得是會變標準啦）。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000939" baseName="extensible-web-2018">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-09-18</b:date>
				<b:time>21:31:27</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Extensible Web at 2018</b:title>
			<b:content>
				<b:summary> 2013 年有一份 Extensible Web 宣言，簽署人同意致力於開發 Web Platform 更底層的介面，讓開發者可以自己擴展 Web Platform，而構成 Web 介面的基本三要素其實就是 HTML、CSS、JavaScript。 其實我在當時就覺得很奇妙，我可以想像的到開發者自己擴充 HTML 標籤，不過卻想像不出來到底 JavaScript 和 CSS 要如何讓開發者擴充，沒想到今天回過頭來看，整個網路標準的發展方向真的是有在朝這方向前進，首先來看 HTML 的部分，其實就是 Web Component，包括了 Custom Element、Shadow DOM、Template、HTML Import 等標準，透過這些新的 Web API，開發者很容易就可以做出可重複利用，有自訂行為的自製標籤了。 JavaScript 的部分，其實在上一篇文章介紹那一串 ES6 新功能的最後，有提到 meta programming 的新功能，雖然不是完完全全想擴充什麼就擴充什麼，但是 JavaScript...</b:summary>
				<b:mainContent><p><img src="https://i.imgur.com/YsbKHg1.gif" alt="" width="275" height="252" /></p>
<p>2013 年有一份 Extensible Web 宣言，簽署人同意致力於開發 Web Platform 更底層的介面，讓開發者可以自己擴展 Web Platform，而構成 Web 介面的基本三要素其實就是 HTML、CSS、JavaScript。</p>
<p>其實我在當時就覺得很奇妙，我可以想像的到開發者自己擴充 HTML 標籤，不過卻想像不出來到底 JavaScript 和 CSS 要如何讓開發者擴充，沒想到今天回過頭來看，整個網路標準的發展方向真的是有在朝這方向前進，首先來看 HTML 的部分，其實就是 <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">Web Component</a>，包括了 Custom Element、Shadow DOM、Template、HTML Import 等標準，透過這些新的 Web API，開發者很容易就可以做出可重複利用，有自訂行為的自製標籤了。</p>
<p>JavaScript 的部分，其實在上一篇文章介紹<a href="https://blog.othree.net/log/2018/09/17/ecmascript-2015-rel-of-features/">那一串 ES6 新功能</a>的最後，有提到 meta programming 的新功能，雖然不是完完全全想擴充什麼就擴充什麼，但是 JavaScript 確實是慢慢的有些可以讓開發者比較深入底層的介面可以用。</p>
<p>最後 CSS 的部分，就是 CSS Houdini 了，Houdini 其實就是史上最偉大魔術師胡迪尼，從名稱就可以感受到這個東西有多 <em>magic</em> 了，其實 Houdini 不是一個標準，而是一個 <a href="https://wiki.mozilla.org/CSS/Houdini">W3C Working Group</a>，他們主要的目標就是建構出一整套 API 讓 CSS 可以擴充，而目前也已經有些<a href="https://drafts.css-houdini.org/">成果</a>了，我自己是看了去年一場演講的影片才對 Houdini 有了初步的認識：</p>
<div class="embed_16_9">
    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/r-Hc3hN9e6I?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>現在最主要是已經有 Chrome 把 Paint API 實做出來，所以已經可以用 Canvas 畫圖了，雖然整個計畫離完成還要很久，不過看到 CSS 真的可以開始擴充了，還是覺得很 Magic~</p>
<p>Image Source: <a href="https://imgur.com/gallery/YsbKHg1">https://imgur.com/gallery/YsbKHg1</a></p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000936" baseName="web-platform">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-09-16</b:date>
				<b:time>16:49:51</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Web Platform</b:title>
			<b:content>
				<b:summary>這篇記錄一下現在主要四個瀏覽器核心對於新標準的支援計畫的狀態網站，不然每次都要重新查。 Chrome https://www.chromestatus.com/features Edge https://developer.microsoft.com/en-us/microsoft-edge/platform/status/ Firefox https://platform-status.mozilla.org/ Safari/WebKit https://webkit.org/status/ Chrome 的應該是最多人看過，其實看過這個就能了解現在幾乎是無法從 0 開始開發一個瀏覽器了，Google Chrome 從 WebKit 的基礎開始，到現在也花了十年。...</b:summary>
				<b:mainContent><p>這篇記錄一下現在主要四個瀏覽器核心對於新標準的支援計畫的狀態網站，不然每次都要重新查。</p>
<ul>
<li>Chrome <a href="https://www.chromestatus.com/features">https://www.chromestatus.com/features</a></li>
<li>Edge <a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/status/">https://developer.microsoft.com/en-us/microsoft-edge/platform/status/</a></li>
<li>Firefox <a href="https://platform-status.mozilla.org/">https://platform-status.mozilla.org/</a></li>
<li>Safari/WebKit <a href="https://webkit.org/status/">https://webkit.org/status/</a></li>
</ul>
<p>Chrome 的應該是最多人看過，其實看過這個就能了解現在幾乎是無法從 0 開始開發一個瀏覽器了，Google Chrome 從 WebKit 的基礎開始，到現在也花了十年。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000933" baseName="web-fe-news-service-ofrontend">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-08-22</b:date>
				<b:time>23:42:43</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Web 前端文章廣播服務 ofrontend</b:title>
			<b:content>
				<b:summary> 前陣子弄了一個 web 前端文章的廣播服務，現在沒有正式的服務名稱，不過 code base 和一些帳號都叫 ofrontend，所以就先這樣稱呼它吧，現在這服務有兩個末端： Twitter Telegram Channel 會轉發的文章主要就是我看到和前端相關的為主，也會有少量其他的技術文章，大約 80% 英文、20 % 中文，不過不一定是我讀過覺得要推薦的，也是有過一些剛看標題覺得好像不錯，結果找到時間看完覺得沒什麼的文章，不介意的話可以 follow 一下。 目前資訊來源包括了： Twitter 上的 follows 和 Facebook 上自己的 Timeline GitHub 上的 follows、watching（沒有 public 的頁面）我有 watch 一些標準文件的 repository，像是 TC39、CSS-WG 等，現在蠻多資訊可以在 GitHub issue 內看到了，以前都要訂閱 mailing-list...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/30332209388/" title="frontend-news by othree, on Flickr"><img src="https://farm2.staticflickr.com/1897/30332209388_f956381a2d_b.jpg" width="512" height="512" alt="frontend-news" srcset="https://farm2.staticflickr.com/1897/30332209388_f956381a2d_b.jpg 1024w" /></a></p>
<p>前陣子弄了一個 web 前端文章的廣播服務，現在沒有正式的服務名稱，不過 code base 和一些帳號都叫 <a href="https://github.com/othree/ofrontend">ofrontend</a>，所以就先這樣稱呼它吧，現在這服務有兩個末端：</p>
<ul>
<li><a href="https://twitter.com/ofrontend">Twitter</a></li>
<li><a href="https://t.me/ofrontend">Telegram Channel</a></li>
</ul>
<p>會轉發的文章主要就是我看到和前端相關的為主，也會有少量其他的技術文章，大約 80% 英文、20 % 中文，不過不一定是我讀過覺得要推薦的，也是有過一些剛看標題覺得好像不錯，結果找到時間看完覺得沒什麼的文章，不介意的話可以 follow 一下。</p>
<p>目前資訊來源包括了：</p>
<ul>
<li>Twitter 上的 <a href="https://twitter.com/following">follows</a> 和 Facebook 上自己的 Timeline</li>
<li>GitHub 上的 <a href="https://github.com/othree?tab=following">follows</a>、watching（沒有 public 的頁面）我有 watch 一些標準文件的 repository，像是 TC39、CSS-WG 等，現在蠻多資訊可以在 GitHub issue 內看到了，以前都要訂閱 mailing-list</li>
<li>跟的 <a href="https://blog.othree.net/blogroll/">Feed</a>，有記得才會去看，線上這份 Feed 清單沒有隨時更新</li>
<li>Facebook 上的社團：
<ul>
<li><a href="https://www.facebook.com/groups/enjoyfonts/">字嗨</a></li>
<li><a href="https://www.facebook.com/groups/javascript.tw/">JavaScript.tw</a></li>
<li><a href="https://www.facebook.com/groups/vim.tw/">Vim 正體中文社群</a></li>
<li><a href="https://www.facebook.com/groups/augularjs.tw/">Angular Taiwan</a></li>
<li><a href="https://www.facebook.com/groups/1249720198386038/">Fire-and-Forget 前端轉貼總部</a></li>
<li><a href="https://www.facebook.com/groups/142197385837507/">Ruby Taiwan</a></li>
<li><a href="https://www.facebook.com/groups/521085554595481/">Front-End Developers Taiwan</a></li>
<li><a href="https://www.facebook.com/groups/168537393167684/">Perl 台灣</a></li>
<li><a href="https://www.facebook.com/groups/830853873715381/">Markdown 台灣</a></li>
<li><a href="https://www.facebook.com/groups/262800543746083/">node.js台灣</a></li>
<li><a href="https://www.facebook.com/groups/1439747729634154/">ReactJS.tw</a></li>
<li>...等</li>
</ul>
</li>
<li>訂閱的電子報：
<ul>
<li><a href="https://weekly.codetengu.com/">碼天狗</a></li>
<li><a href="https://weekly.techbridge.cc/">TechBridge 技術週刊</a></li>
<li><a href="https://javascriptweekly.com/">JavaScript Weekly</a></li>
<li><a href="https://nodeweekly.com/">Node Weekly</a></li>
<li><a href="https://frontendfoc.us/">Frontend Focus</a></li>
<li><a href="https://mobiledevweekly.com/">Mobile Dev Weekly</a></li>
<li><a href="https://webopsweekly.com/">WebOps Weekly</a></li>
<li><a href="https://www.pycoders.com/">Pycoder's Weekly</a></li>
<li><a href="https://rubyweekly.com/">Ruby Weekly</a></li>
<li><a href="https://golangweekly.com/">Golang Weekly</a></li>
<li><a href="https://wasmweekly.news/">WebAssembly Weekly</a></li>
<li>...等</li>
</ul>
</li>
<li>其它各種一時想不起來或是非預期的來源</li>
</ul>
<p>會做這個服務有幾個原因，一個是我其實本來就有在轉發前端相關的文章連結，不過大多丟在一些非公開的地方，並且這些文章連結都沒好好整理，一直都有想找個書籤服務弄起來，然後這陣子看到<a href="https://wanqu.co/">灣區日報</a>和<a href="https://t.me/JustShareChannel">吹水 Just Share</a> 覺得也可以來做類似的傳播管道，研究和思考了好一陣子，最後決定花錢訂閱了個 <a href="https://pinboard.in/">Pinboard</a> 服務來收集和管理連結，Pinboard 雖然介面沒找什麼設計師，看起來很陽春，不過其實他還蠻靈活的，API 很簡單可以用，不用 oauth，只要帶 token 發請求就可以，和 Telegram Bot 蠻像的，所以其實也不少工具可以用，Android、iOS、Firefox 都有，隨時看到相關的文章都可以很快的把連結丟進 Pinboard。</p>
<p>連結進 Pinboard 之後，就有個轉發的工具來把這連結丟去 Twitter 和 Telegram，轉發的程式也放在 GitHub 上，叫 <a href="https://github.com/othree/pinboardto">pinboardto</a>，Python 寫的，本來有想趁機玩玩看 Rust，不過研究一下覺得還是先用 Python 把基本款弄出來，裡面東西很簡單沒什麼技術難題，並且不依靠外部儲存（資料庫、檔案），同步的機制是靠系統時間和 cronjob，所以不知什麼原因錯過就錯過了，不過因為這服務也沒有這麼要求可靠性，所以還好。</p>
<p>Facebook 的部分，本來有想接到 Fire-and-Forget 前端轉貼總部 去的，可是 FB 那邊弄不到永久有效的 token 就放棄。</p>
<p>最後成本部分，這個服務其實對我來說蠻低成本的，主要固定支出就只有 Pinboard 的年費，不過本來就要好好收集算是本來就要花，轉發服務掛在現有的主機上，最後就是 iPad 上有花錢買一個 Pinboard 的 app，不過其實也還沒有滿意就是，不知道為什麼抓 Twitter 的網頁 title 都會抓錯。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000926" baseName="github-pages-custom-domain-https">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-05-04</b:date>
				<b:time>19:12:21</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>GitHub Pages Custom Domain HTTPS</b:title>
			<b:content>
				<b:summary> 等了好久終於出來的功能，追了蠻久，昨天 DK 也有提到，其實正式發佈前就看到有人已經可以用了，不過總之這篇稍微記錄一下如果已經是舊有的 GitHub Pages 還不能用可以怎麼處理，不過不完全有效，舊有的專案在設定看起來會像是： 下面有寫說因為用了 custom domain 就不能用，這時候把 custom domain 刪除，然後儲存重新加回去就會變成： 然後就等，我大概是等到隔天就有了（變成第一張圖的狀態），不過這幾天剛好完全沒空，到現在才有空檔紀錄一下。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41138623844/" title="GitHub Pages by othree, on Flickr"><img src="https://farm1.staticflickr.com/957/41138623844_b976542030_b.jpg" width="730" height="491" alt="GitHub Pages" srcset="https://farm1.staticflickr.com/957/41138623844_b976542030_b.jpg 1024w" /></a></p>
<p>等了好久終於出來的功能，<a href="https://github.com/isaacs/github/issues/156">追了蠻久</a>，昨天 DK 也有<a href="https://blog.gslin.org/archives/2018/05/02/8295/github-%E9%80%8F%E9%81%8E-lets-encrypt-%E6%8F%90%E4%BE%9B%E8%87%AA%E8%A8%82%E7%B6%B2%E5%9F%9F%E7%9A%84-https-%E6%9C%8D%E5%8B%99/">提到</a>，其實正式發佈前就看到有人已經可以用了，不過總之這篇稍微記錄一下如果已經是舊有的 GitHub Pages 還不能用可以怎麼處理，不過不完全有效，舊有的專案在設定看起來會像是：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41127813434/" title="GitHub Pages by othree, on Flickr"><img src="https://farm1.staticflickr.com/972/41127813434_4219cc0fa1_b.jpg" width="730" height="491" alt="GitHub Pages" srcset="https://farm1.staticflickr.com/972/41127813434_4219cc0fa1_b.jpg 1024w" /></a></p>
<p>下面有寫說因為用了 custom domain 就不能用，這時候把 custom domain 刪除，然後儲存重新加回去就會變成：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/40945601525/" title="GitHub Pages by othree, on Flickr"><img src="https://farm1.staticflickr.com/863/40945601525_2331845c36_b.jpg" width="730" height="512" alt="GitHub Pages" srcset="https://farm1.staticflickr.com/863/40945601525_2331845c36_b.jpg 1024w" /></a></p>
<p>然後就等，我大概是等到隔天就有了（變成第一張圖的狀態），不過這幾天剛好完全沒空，到現在才有空檔紀錄一下。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000924" baseName="tfn-domain-transfer-out">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-05-02</b:date>
				<b:time>12:13:08</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>TFN 域名轉出</b:title>
			<b:content>
				<b:summary> 我的 markdown.tw 在 TFN 註冊的，其實一直很想轉出，但是很怕轉的過程出意外，遲遲沒動手。不過剛剛看到 GitHub Pages 用 custom domain 也正式支援 HTTPS 了，如果是設定 A record 的話需要更新 DNS 設定，於是我就決定認真的來處理這件事，不意外的介面很難理解，決定記錄一下幫助眾生～...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41839613061/" title="dig markdown.tw by othree, on Flickr"><img src="https://farm1.staticflickr.com/908/41839613061_4caec6e31e_b.jpg" width="665" height="452" alt="dig markdown.tw, " srcset="https://farm1.staticflickr.com/908/41839613061_4caec6e31e_b.jpg 1024w" /></a></p>
<p>我的 markdown.tw 在 TFN 註冊的，其實一直很想轉出，但是很怕轉的過程出意外，遲遲沒動手。不過剛剛看到 GitHub Pages 用 custom domain 也正式支援 HTTPS 了，如果是設定 A record 的話需要更新 DNS 設定，於是我就決定認真的來處理這件事，不意外的介面很難理解，決定記錄一下幫助眾生～</p>
</b:mainContent>
				<b:extendContent><p>域名要轉出最重要的就是要從原註冊商拿到 authorization code，然後在新註冊商轉入的時候輸入，TFN 要轉出還好不是要聯絡客服，介面上有，然後我就點下去看：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26970973117/" title="TFN domain transfer by othree, on Flickr"><img src="https://farm1.staticflickr.com/959/26970973117_e94bf86d90_b.jpg" width="1024" height="846" alt="TFN domain transfer, " srcset="https://farm1.staticflickr.com/959/26970973117_e94bf86d90_b.jpg 1024w, https://farm1.staticflickr.com/959/26970973117_579cf5d5b0_h.jpg 1600w" /></a></p>
<p>馬上就卡關了，完全沒有說明，就要我輸入<strong>移轉中密碼</strong>，還是必填欄位，根據我一些以往經驗，我以為這邊是要輸入什麼先跟他們取得的安全驗證碼，然後才會拿到 authorization code，不過卻死活找找不到這個取得安全驗證碼的地方，鬼打牆半個鐘頭後，我決定作一個測試，就是把 <strong>移轉中密碼</strong> 當成就是 authorization code 來試試，然後自己想一個密碼輸入後：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41122773584/" title="TFN domain transfer by othree, on Flickr"><img src="https://farm1.staticflickr.com/944/41122773584_37384abe31_b.jpg" width="1024" height="846" alt="TFN domain transfer, " srcset="https://farm1.staticflickr.com/944/41122773584_37384abe31_b.jpg 1024w, https://farm1.staticflickr.com/944/41122773584_9dbf36d901_h.jpg 1600w" /></a></p>
<p>就得到成功訊息了！這時候眼尖的人會發現左邊的目錄多了個<strong>取消轉出</strong>的選項，看到這選項的我時在忍不住想看看裡面有什麼訊息，就點了下去：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41122773934/" title="TFN domain transfer by othree, on Flickr"><img src="https://farm1.staticflickr.com/976/41122773934_eba87c97b9_b.jpg" width="1024" height="846" alt="TFN domain transfer, " srcset="https://farm1.staticflickr.com/976/41122773934_eba87c97b9_b.jpg 1024w, https://farm1.staticflickr.com/976/41122773934_f040f1fe0f_h.jpg 1600w" /></a></p>
<p>恩恩，真是不意外的結果啊，總之我就重新操作一次，然後拿著我自己設定的密碼去 Gandi 那邊當 authorization code 轉入，弄完等了一陣子後，竟然就通過了！</p>
<p>所以結論是，TFN 域名轉出時要輸入的<strong>移轉中密碼</strong>其實就是給使用者自訂 authorization code，而且還有個蠻短的長度限制 XD，現在雖然 nameserver 都轉好了，不過我的 GitHub Pages HTTPS 還是沒生效啊～</p>
</b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
