<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>c</b:listType>
			<b:listData listID="web">web</b:listData>
		</b:entriesMeta>

		<b:entry entryID="000837" baseName="for-the-entire-web">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-03-28</b:date>
				<b:time>13:25:25</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>For the Entire Web</b:title>
			<b:content>
				<b:summary>這陣子有兩件事情引起我的一些注意，覺得值得寫下，兩件事情我覺得其實本質上是同一件事情，先來看一下第一件事情，就是 Daniel Yoder 寫了篇文章 React Is A Terrible Idea，這篇文章在 React 當紅的時間出現，自然引起很多人的不滿，隨便在 Google 上搜尋就可以找到一堆回應，我自己對於 React 其實是沒特別感覺，沒有喜歡也沒有覺得它做錯什麼，真的要說的話大概還有點覺得它方向正確，我是認為 React 和 Angular 的 directive 都在把 component 的觀念引入前端工程師的視野之中，而這對於 Web Component 的發展應該會是有正面影響的。 再回到 Terriable Idea 這篇文章，作者對 React 的評論我其實不完全認同，最後面有提到用 Web Component 而不要用 React，這部分我覺得是作者誤會了 React 的角色，不過有些地方有人說 React 明明就可以和...</b:summary>
				<b:mainContent><p>這陣子有兩件事情引起我的一些注意，覺得值得寫下，兩件事情我覺得其實本質上是同一件事情，先來看一下第一件事情，就是 Daniel Yoder 寫了篇文章 <a href="https://www.pandastrike.com/posts/20150311-react-bad-idea">React Is A Terrible Idea</a>，這篇文章在 React 當紅的時間出現，自然引起很多人的不滿，隨便在 Google 上搜尋就可以找到一堆回應，我自己對於 React 其實是沒特別感覺，沒有喜歡也沒有覺得它做錯什麼，真的要說的話大概還有點覺得它方向正確，我是認為 React 和 Angular 的 directive 都在把 component 的觀念引入前端工程師的視野之中，而這對於 Web Component 的發展應該會是有正面影響的。</p>

<p>再回到 Terriable Idea 這篇文章，作者對 React 的評論我其實不完全認同，最後面有提到用 Web Component 而不要用 React，這部分我覺得是作者誤會了 React 的角色，不過有些地方有人說 React 明明就可以和 Web Component 合作，還附上 ng-conf 的<a href="https://www.youtube.com/watch?v=g0TD0efcwVg">演講影片</a>，我到覺得他們也完全沒搞清楚作者的重點在哪裡；提到 Flipboard 的 <a href="https://github.com/flipboard/react-canvas">react-canvas</a> 那部分算是我認為最能表現出作者想要講什麼的，作者想說的重點是現在的網路環境有限制、有問題，但是遇到時不要用一些旁門左道的方法來處理，因為這些問題終究會被解決，而問題被解決時，你之前所花的時間和資源就等於是完全浪費掉，與其要浪費在走旁門左道，還不如把這些時間和資源用在從正確的地方解決這個問題，而最後受惠的不只是自己，還有所有網際網路的開發者、使用者，這是從一個很高等生命體的角度來看事情，就如同這篇文章的標題：「For the Entire Web」，要你犧牲自己的部分利益去成就整體網際網路的利益，當然這是有些理想化，很多商業公司可能要短時間就有產品出來，不太可能所有的開發在遇到問題時都停下來等瀏覽器或是標準齊備，但是對於不少的大型企業，我就覺得他們確實應該要好好正確的回饋網路環境來解決這些問題，像是文中提到 Facebook，還有接下來要說的 Google，不過他說 Facebook 是為了和 Google 競爭才開發 React 之類的論點我就不予評論了，太多臆測～</p>

<p>可能有人會說，有沒有這些資源的投入應該差距也不大吧，最近就剛好有另外一件事情可以佐證，<a href="http://news.dartlang.org/2015/03/dart-for-entire-web.html">Dart for the Entire Web</a> 這篇 Dart 官方的公告說到，Dart VM 將不會進入到 Chrome 裡面，也就是說要在瀏覽器上跑 Dart，將還是只有轉成 JavaScript 這個選項，這件事其實是蠻大的一件事，上一個在網頁裡面跑的另外一種語言是微軟的 VBScript，最大的問題不在於好不好寫，而是在於他被單一企業把持，不過後來結果大家也都知道，所以當 Google 推出 Dart 而且說以後 Chrome 會可以直接跑 Dart 的時候，我想大部分人都是都不看好的，甚至部分人是覺得 Google 怎麼做微軟做過的蠢事。而剛好在這個官方公告出來後幾天內，Brendan Eich 在 Hacker News 上回應一串討論<a href="https://news.ycombinator.com/item?id=9269355">回應</a>的蠻激動的，這串本來是在說 ECMAScript 新版本有很多東西根本是從 Dart 來的，Brendan Eich 則是反駁說很多東西在 Dart 出來前就已經在討論有 Proposal 了，然後到後來寫了一篇幾乎都在抱怨 Dart，還提到 V8 team reset 的事情，從這邊看起來，似乎是因為新的 V8 team 不打算作 Dart VM 進去，才有了 Dart 那篇公告；而 Brendan Eich 抱怨的重點，其實就是前面那段提到的，Google 花了超多人力資源去搞 Dart，而不是來幫忙改進既有的 ECMAScript，而這確實有實際的影響，他舉了一個例子，就是大數(<a href="http://wiki.ecmascript.org/doku.php?id=strawman:bignums">bignums</a>)的支援，Dart 有支援，在 ES 這邊目前有一點可能性會在 ES7(2016) 中出來，但這東西其實從 2010 就已經開始有討論了，如果有人來將這些討論規格化，並實做起來，那大數應該在現在的 ES6(2015) 就有了。</p>

<p>最後再回到 Terriable Idea 這篇文章，我雖然不完全認同他對 React 的看法，但是我認為他的重點沒錯，如果他拿 Dart 出來講可能就不會引出這麼多砲火吧（可是可能也比較沒人注意），其實 react-canvas 我覺得也是很有趣的實驗，不過做成正式產品上線就是另外一回事了，最大的問題，他為了終會被解決的次要問題（畫面不流暢）完全放棄了親和力的問題，而 Flipboard 這種內容為主的產品性質是不該放棄親和力的。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000831" baseName="accessibility-before-been-blind">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-01-31</b:date>
				<b:time>18:58:52</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>在盲人之前的親和力</b:title>
			<b:content>
				<b:summary>不少人還會直接把網站的親和力（無障礙）問題和盲人朋友直接連在一起，覺得應該來解除迷思一下，盲人朋友確實是最直接會想到的，各種有身心障礙人士的族群當中，盲人朋友使用電腦上網的難度也是最高的，不過在你把眼睛矇起來體驗盲人如何操作電腦之前，有不少事情是可以先做的，隨便把腦袋裡馬上想的到的列了一下： 首先是網頁的文字內容易讀性，易讀性有分兩個面向，第一個面向大家比較清楚，就是文字排版、字形挑選、顏色對比等等視覺上的易讀程度，這部分做的好的話除了對老花眼、近視或是弱視的朋友有幫助外，一般人也會受惠；另一個面向則是文字內容好不好理解的程度，如果網站上的文字說明太難懂，那就應該要用更好理解的文字來重新講一遍，或是加上圖表輔助，或是乾脆減少資訊量，通常自己看的懂，不代表別人看的懂，所以如果是重要的說明（尤其是政府網站一些流程、辦理辦法之類的），建議都要找人看過，最簡單的是找家中長輩，因為網路上理解力較低的族群中，長輩們佔不少。 第二個是操作介面好不好操作，通常是 Web App 才有這需求，一樣有不同的面向，第一個是你的操作介面應該設計的容易理解，讓人看了也不會疑惑應該點哪裡，其中一個很重要的原則是不要破壞使用者的習慣，第二個面向是有些人可能無法好好的控制滑鼠（要模擬這個比模擬盲人的情境還要難），點擊不精確，所以永遠要保留鍵盤操作的選項，如果是使用原生的輸入元件來做操作介面的話，沒有亂做什麼奇怪的事情應該是都可以用鍵盤來控制，但是如果要自己設計一個嶄新的控制元件，那記得要好好利用 WAI-ARIA 來讓鍵盤可以順利的控制，像是 Google 的 Gmail 就有完整的鍵盤操作支援，這個應該是這篇文章當中做起來最辛苦的一項吧。 第三個是表單行為，要把表單作的好填，本身是一門很大的學問，不過在深入的思考設計表單的 usability 之前，有一些很基本的功能是應該具備的，其中特別想說的是錯誤訊息的處理，使用者送出表單後，如果後端的檢查沒過被打回來，應該要伴隨著能幫助使用者更新資料的錯誤訊息，並且正確的顯示在正確的位置，不然使用者不知道發生什麼事情，除了告訴使用者哪裡有錯之外，更進一步是讓使用者能把輸入資料改好，例如帳號名稱有格式限制的話，就要明確的說明有哪些限制，另外表單檢查不通過之後，記得也不要把使用者剛剛填的資料清空（實做這點還需要特別記得安全性問題）。 最後一個是文件結構，正確的使用 HTML 標籤，還可以輔以 WAI-ARIA 的 role 屬性，這已經是講到爛的項目了，當然 single page application 算是特殊情形，不過只要你做的頁面還是接近傳統網頁有文字內容，有主要內容的話，把網頁的文件結構弄好還是有兩大好處的：一、SEO 的部分已經好了一大半了；二、所有輔具都可以根據你的文件結構快速的帶領使用者在文件中穿梭，不用多做什麼奇怪的導盲機制。要把這塊做好算是四點當中最簡單的，只要正確的依照語意使用 HTML 標籤，不夠的再看看 WAI-ARIA 有沒有可用的 role，不要亂用標籤，然後用檢視原始碼的功能看看好不好看，如果你能開始從 HTML 原始碼中感受到美感甚至有完美的感覺出來，相信你就在正確的方向上了。 其實以上四點都有一個特色，就是把這些地方做好，不只是身心障礙人士會受惠，文字易讀性就不用說了，操控介面如果支援鍵盤，有些正常人操作起來會更得心應手，表單的訊息也是不論是怎樣的使用者都很需要，而文件結構也是，弄得好的話，大家都好找到資料，站長應該也開心。所以其實在你想要為了提升親和力而去實際模擬身心障礙人士使用電腦的情境之前，是有很多東西是可以先做的， 相信還是有人會有興趣盲人朋友怎麼操控電腦的，曾經 HappyDesigner 有邀請有聲書協會的朋友來介紹，不過已經有點久了，我去年初剛好有機會在 Moztw Lab...</b:summary>
				<b:mainContent><p>不少人還會直接把網站的親和力（無障礙）問題和盲人朋友直接連在一起，覺得應該來解除迷思一下，盲人朋友確實是最直接會想到的，各種有身心障礙人士的族群當中，盲人朋友使用電腦上網的難度也是最高的，不過在你把眼睛矇起來體驗盲人如何操作電腦之前，有不少事情是可以先做的，隨便把腦袋裡馬上想的到的列了一下：</p>

<p>首先是網頁的文字內容易讀性，易讀性有分兩個面向，第一個面向大家比較清楚，就是文字排版、字形挑選、顏色對比等等視覺上的易讀程度，這部分做的好的話除了對老花眼、近視或是弱視的朋友有幫助外，一般人也會受惠；另一個面向則是文字內容好不好理解的程度，如果網站上的文字說明太難懂，那就應該要用更好理解的文字來重新講一遍，或是加上圖表輔助，或是乾脆減少資訊量，通常自己看的懂，不代表別人看的懂，所以如果是重要的說明（尤其是政府網站一些流程、辦理辦法之類的），建議都要找人看過，最簡單的是找家中長輩，因為網路上理解力較低的族群中，長輩們佔不少。</p>

<p>第二個是操作介面好不好操作，通常是 Web App 才有這需求，一樣有不同的面向，第一個是你的操作介面應該設計的容易理解，讓人看了也不會疑惑應該點哪裡，其中一個很重要的原則是不要破壞使用者的習慣，第二個面向是有些人可能無法好好的控制滑鼠（要模擬這個比模擬盲人的情境還要難），點擊不精確，所以永遠要保留鍵盤操作的選項，如果是使用原生的輸入元件來做操作介面的話，沒有亂做什麼奇怪的事情應該是都可以用鍵盤來控制，但是如果要自己設計一個嶄新的控制元件，那記得要好好利用 <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA">WAI-ARIA</a> 來讓鍵盤可以順利的控制，像是 Google 的 Gmail 就有完整的鍵盤操作支援，這個應該是這篇文章當中做起來最辛苦的一項吧。</p>

<p>第三個是表單行為，要把表單作的好填，本身是一門很大的學問，不過在深入的思考設計表單的 usability 之前，有一些很基本的功能是應該具備的，其中特別想說的是錯誤訊息的處理，使用者送出表單後，如果後端的檢查沒過被打回來，應該要伴隨著能幫助使用者更新資料的錯誤訊息，並且正確的顯示在正確的位置，不然使用者不知道發生什麼事情，除了告訴使用者哪裡有錯之外，更進一步是讓使用者能把輸入資料改好，例如帳號名稱有格式限制的話，就要明確的說明有哪些限制，另外表單檢查不通過之後，記得也不要把使用者剛剛填的資料清空（實做這點還需要特別記得安全性問題）。</p>

<p>最後一個是文件結構，正確的使用 HTML 標籤，還可以輔以 WAI-ARIA 的 <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques">role</a> 屬性，這已經是講到爛的項目了，當然 single page application 算是特殊情形，不過只要你做的頁面還是接近傳統網頁有文字內容，有主要內容的話，把網頁的文件結構弄好還是有兩大好處的：一、SEO 的部分已經好了一大半了；二、所有輔具都可以根據你的文件結構快速的帶領使用者在文件中穿梭，不用多做什麼奇怪的導盲機制。要把這塊做好算是四點當中最簡單的，只要正確的依照語意使用 HTML 標籤，不夠的再看看 WAI-ARIA 有沒有可用的 role，不要亂用標籤，然後用檢視原始碼的功能看看好不好看，如果你能開始從 HTML 原始碼中感受到美感甚至有完美的感覺出來，相信你就在正確的方向上了。</p>

<p>其實以上四點都有一個特色，就是把這些地方做好，不只是身心障礙人士會受惠，文字易讀性就不用說了，操控介面如果支援鍵盤，有些正常人操作起來會更得心應手，表單的訊息也是不論是怎樣的使用者都很需要，而文件結構也是，弄得好的話，大家都好找到資料，站長應該也開心。所以其實在你想要為了提升親和力而去實際模擬身心障礙人士使用電腦的情境之前，是有很多東西是可以先做的，</p>

<p>相信還是有人會有興趣盲人朋友怎麼操控電腦的，曾經 HappyDesigner 有邀請有聲書協會的朋友來介紹，不過已經有點久了，我去年初剛好有機會在 Moztw Lab 遇到 Fancy 示範，當時有簡單的錄下來，有興趣的朋友可以看一下：</p>

<iframe width="853" height="480" src="https://www.youtube.com/embed/fV2ufa2galY?rel=0" frameborder="0" allowfullscreen="allowfullscreen"></iframe>

<p>至於要怎麼體驗盲人怎麼操作呢？如果你是用 OSX 的話，系統有內建 Voice Over，品質很好，可以直接使用，Windows 有好幾套商業軟體，至於免費的比較有名的是 <a href="http://www.nvaccess.org/">NVDA</a>，這套也是開源軟體，一開始可能需要先當明眼人練習操作，另外它講的話一開始可能會聽不太懂，聲音合成引擎和商業軟體比起來有差，多聽幾次慢慢就聽的出來再講什麼了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000826" baseName="android-l-webview-fullscreen-api">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-01-05</b:date>
				<b:time>21:20:32</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Android L WebView Fullscreen API</b:title>
			<b:content>
				<b:summary>今天遇到一個問題是，本來好好的全螢幕影片播放功能，到了 Android L 的 Facebook App 裡的 webview 瀏覽器就壞掉了，而且透過開發工具看沒有錯誤訊息出來，查了一陣子終於發現，最新的 webview 改成使用 Chrome 核心後，有些 API 雖然 Chrome 有支援，但是在 WebView 裡面是沒開啟的。 其實我本來已經有用 feature detection 的寫法了，不過這個情形實際上，requestFullscreen 是找的到，可以執行，也不會有錯誤的，只是就是什麼事情都不會發生，後來才 發現 是要用 document.fullscreenEnabled 來做判斷，這個東西我之前一直覺得在手機上都用不到的東西（桌面瀏覽器通常會先問使用者是否願意讓網頁進入全螢幕），沒想到會在這邊派上用場啊。...</b:summary>
				<b:mainContent><p>今天遇到一個問題是，本來好好的全螢幕影片播放功能，到了 Android L 的 Facebook App 裡的 webview 瀏覽器就壞掉了，而且透過開發工具看沒有錯誤訊息出來，查了一陣子終於發現，最新的 webview 改成使用 Chrome 核心後，有些 API 雖然 Chrome 有支援，但是在 WebView 裡面是<a href="https://developer.chrome.com/multidevice/webview/overview#does_the_new_webview_have_feature_parity_with_chrome_for_android_">沒開啟</a>的。</p>

<p>其實我本來已經有用 feature detection 的寫法了，不過這個情形實際上，<code>requestFullscreen</code> 是找的到，可以執行，也不會有錯誤的，只是就是什麼事情都不會發生，後來才 <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode#Other_information">發現</a> 是要用 <code>document.fullscreenEnabled</code> 來做判斷，這個東西我之前一直覺得在手機上都用不到的東西（桌面瀏覽器通常會先問使用者是否願意讓網頁進入全螢幕），沒想到會在這邊派上用場啊。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000815" baseName="ie-video">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-10-24</b:date>
				<b:time>12:01:15</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>IE video 標籤記憶體問題</b:title>
			<b:content>
				<b:summary>最近遇到一個 IE 會 crash 的問題，找很久才發現是記憶體問題，然後因為那頁有用到大量的 &lt;video&gt; 標籤，所以就直接鎖定目標，結果發現果然 video 就是問題元兇，測試到 IE 11 還是同樣行為。 目前發現的問題有兩層，第一層問題是如果 IE 在遇到 video 沒有設定 poster 時，會自動初始化整個 video 元件，去把影片抓下來，只為了產生 poster 圖片，第二層問題，就是這個初始化 video 元件的動作，會吃掉很多的記憶體，即使我的影片只有五百多kb，IE 還是一個 video 就吃掉數十 mb 的記憶體，即使這些 video 都沒有播放，甚至還用 CSS 藏起來了，然後因為一個頁面上有很多的影片輪流播放，所以把記憶體吃光後就當掉了。 要解決這個問題，一開始是想說設定正確的 poster 圖片就好了，確實解決了第一層的問題，但是因為影片還是會輪撥，遲早會把記憶體吃光，所以試了幾個方法想要避免這種情形，像是把 dom node detach...</b:summary>
				<b:mainContent><p>最近遇到一個 IE 會 crash 的問題，找很久才發現是記憶體問題，然後因為那頁有用到大量的 <code>&lt;video&gt;</code> 標籤，所以就直接鎖定目標，結果發現果然 video 就是問題元兇，測試到 IE 11 還是同樣行為。</p>

<p>目前發現的問題有兩層，第一層問題是如果 IE 在遇到 video 沒有設定 poster 時，會自動初始化整個 video 元件，去把影片抓下來，只為了產生 poster 圖片，第二層問題，就是這個初始化 video 元件的動作，會吃掉很多的記憶體，即使我的影片只有五百多kb，IE 還是一個 video 就吃掉數十 mb 的記憶體，即使這些 video 都沒有播放，甚至還用 CSS 藏起來了，然後因為一個頁面上有很多的影片輪流播放，所以把記憶體吃光後就當掉了。</p>

<p>要解決這個問題，一開始是想說設定正確的 poster 圖片就好了，確實解決了第一層的問題，但是因為影片還是會輪撥，遲早會把記憶體吃光，所以試了幾個方法想要避免這種情形，像是把 dom node detach 甚至砍掉之類的，不過都沒有效果，吃掉的記憶體不會還回來，最後只好讓 IE 不做輪撥了。</p>

<p>這個問題我看 stackoverflow 好像也沒有，看來在單一頁面上放很多 video 的使用情形真是很少見啊。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000810" baseName="commonmark">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-09-07</b:date>
				<b:time>00:16:44</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>CommonMark</b:title>
			<b:content>
				<b:summary> 一年前提過的 Markdown 標準化計畫沒想到真的有成果了，現在叫 CommonMark，不過其實前兩天還叫 Standard Flavored Markdown，只是因為 Markdown 的作者 John Gruber 不爽這個名字會造成混淆，所以 Jeff Atwood 只好很不爽的改名成 CommonMark，有興趣的可以看看他們的 spec，其實與其說是 spec，我覺得根本就是 Test Suite，裡面主要的不同點是列出很多以前不知道該怎麼 parse 的語法，統一訂出應該轉成怎樣的 HTML，算是個讓各家自己實做的引擎可以依據的規範，而且這次 release 除了 spec 外還同時提供了用 C 和 JavaScript 然後照著 CommonMark 實做的兩個 Markdown 引擎，我想 JavaScript 的版本應該很快就會有人拿去用了吧，另外就是 GitHub 應該會有人弄...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/14970705848/" title="Markdown by othree, on Flickr"><img src="https://farm4.staticflickr.com/3920/14970705848_5aba006fc2_m.jpg" width="208" height="128" alt="Markdown"   /></a></p>

<p>一年前提過的 Markdown 標準化計畫沒想到真的有<a href="http://blog.codinghorror.com/standard-flavored-markdown/">成果</a>了，現在叫 <a href="http://commonmark.org/">CommonMark</a>，不過其實前兩天還叫 <a href="http://standardmarkdown.com/">Standard Flavored Markdown</a>，只是因為 Markdown 的作者 John Gruber 不爽這個名字<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/">會造成混淆</a>，所以 Jeff Atwood 只好很不爽的改名成 CommonMark，有興趣的可以看看他們的 <a href="http://jgm.github.io/stmd/spec.html">spec</a>，其實與其說是 spec，我覺得根本就是 Test Suite，裡面主要的不同點是列出很多以前不知道該怎麼 parse 的語法，統一訂出應該轉成怎樣的 HTML，算是個讓各家自己實做的引擎可以依據的規範，而且這次 release 除了 spec 外還同時提供了用 C 和 JavaScript 然後照著 CommonMark 實做的兩個 <a href="https://github.com/jgm/stmd">Markdown 引擎</a>，我想 JavaScript 的版本應該很快就會有人拿去用了吧，另外就是 GitHub 應該會有人弄 Ruby 的版本才是。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000805" baseName="mozjpeg-2">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-07-18</b:date>
				<b:time>11:33:16</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>mozjpeg 2.0</b:title>
			<b:content>
				<b:summary>昨天 Adobe 和 Google 聯手發表了思源黑體，算是亞洲資訊圈的一件大事，結果就把另外一個消息壓下去了，其實昨天 Mozilla 發表了 mozjpeg 2.0，這個專案的目標是在保持相容於市場上現有的 jpeg decoder 之下，想辦法讓 jpeg 檔案能夠更小，第一輪的成果發表是就是昨天的 2.0 了，結果而言平均可以讓 jpeg 圖片品質不變差的情況下減少 5% 的大小，看到這個 5% 數據讓我想到 Google 曾經推出相容於 gzip, deflate 的 Zopfli，不過 mozjpeg 應該是不用花到 100 倍的壓縮時間啦，目前 Facebook 還有贊助這個計畫的下一輪發展，也就是 3.0 的開發。mozjpeg 目前是以 c lib 的形式釋出，可惜還沒有看到有命令列工具支援，希望能帶動一波圖片最佳化工具的更新潮啊。...</b:summary>
				<b:mainContent><p>昨天 Adobe 和 Google 聯手發表了<a href="http://blog.typekit.com/alternate/source-han-sans-cht/">思源黑體</a>，算是亞洲資訊圈的一件大事，結果就把另外一個消息壓下去了，其實昨天 Mozilla 發表了 <a href="https://blog.mozilla.org/blog/2014/07/15/improving-jpeg-image-encoding/">mozjpeg 2.0</a>，這個專案的目標是在保持相容於市場上現有的 jpeg decoder 之下，想辦法讓 jpeg 檔案能夠更小，第一輪的成果發表是就是昨天的 2.0 了，結果而言平均可以讓 jpeg 圖片品質不變差的情況下減少 5% 的大小，看到這個 5% 數據讓我想到 Google 曾經推出相容於 gzip, deflate 的 <a href="http://blog.gslin.org/archives/2013/03/01/3228/google-%E7%99%BC%E8%A1%A8%E8%88%87-zlibdeflate-%E7%9B%B8%E5%AE%B9%E7%9A%84%E5%A3%93%E7%B8%AE%E7%A8%8B%E5%BC%8F%EF%BC%8C%E5%86%8D%E5%B0%8F-5/">Zopfli</a>，不過 mozjpeg 應該是不用花到 100 倍的壓縮時間啦，目前 Facebook 還有贊助這個計畫的下一輪發展，也就是 3.0 的開發。mozjpeg 目前是以 c lib 的形式釋出，可惜還沒有看到有命令列工具支援，希望能帶動一波圖片最佳化工具的更新潮啊。</p>

<p>其實 Mozilla 在去年還有發表了一篇對於目前市場上破壞性壓縮圖片格式的<a href="https://people.mozilla.org/~josh/lossy_compressed_image_study_october_2013/">品質比較</a>，比較了 JPEG、JPEG XR、WebP 和 HEVC-MSP，結果表現不離預期，最好的是 HEVC-MSP4，這是 H.265 Profile 的靜態圖片格式，算是比較項目中最新的格式了，表現最好好像不意外，不過其實高壓縮比相對的來說解壓縮需要的運算資源就會多，所以 Mozilla 才不會完全往新技術走，而開了這個 branch，顧到的前提下相容度，盡量的減少網路傳輸，這個計畫目前看來是還會繼續發展，不知道接下來還能夠提升多少壓縮比，還蠻令人期待的。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000800" baseName="chrome-emulator">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-06-26</b:date>
				<b:time>11:55:24</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Chrome 開發工具的新模擬器</b:title>
			<b:content>
				<b:summary> Chrome 開發工具有個新的模擬器，介面改不少，其中最大的特點是多了網路模擬的功能，可以模擬網路速度了，目前在 Chrome Canary 已經可以用，可惜還沒有自定義選項的功能，不過我想到 Chrome 前應該會有～...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/14486840456/" title="Chrome Emulator by othree, on Flickr"><img src="//farm4.staticflickr.com/3857/14486840456_74dce49944_b.jpg" width="857" height="850" alt="Chrome Emulator" srcset="//farm4.staticflickr.com/3857/14486840456_74dce49944.jpg 768w, //farm4.staticflickr.com/3857/14486840456_74dce49944_b.jpg 768w 2x" /></a></p>

<p>Chrome 開發工具有個新的模擬器，介面改不少，其中最大的特點是多了網路模擬的功能，可以模擬網路速度了，目前在 Chrome Canary 已經可以用，可惜還沒有自定義選項的功能，不過我想到 Chrome 前應該會有～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000793" baseName="web-component-at-osdc">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-04-12</b:date>
				<b:time>23:07:20</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Web Component at OSDC</b:title>
			<b:content>
				<b:summary>/*A_A*/ 這次 OSDC 講的投影片，另外有兩個地方要補充一下，第一個是我的 Github 上的範例，因為用到 HTML Import 的關係，有安全性限制，一定要開個 HTTP Server，不然會出錯誤，然後我有用 gulp 設定好了，理論上裝好 gulp 就可以在 localhost 把開發用的 HTTP Server 開起來，然後現在的 Chrome Canary 無法跑，還不知道原因，所以請用 Chrome Stable。 第二個是現在的參考資料，很大部份都是參考 HTML5 Rocks 的文章，可以參考我之前介紹 Web Component 的文章最下面，這些文章的內容其實一直有在根據實做更新，所以會發現和 Spec Draft 定義不一樣。...</b:summary>
				<b:mainContent><script async="async" class="speakerdeck-embed" data-id="7b33cc90a36601311a734eb53c3a6292" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js">/*A_A*/</script>

<p>這次 OSDC 講的投影片，另外有兩個地方要補充一下，第一個是我的 Github 上的<a href="https://github.com/othree/web-component-test">範例</a>，因為用到 HTML Import 的關係，有安全性限制，一定要開個 HTTP Server，不然會出錯誤，然後我有用 gulp 設定好了，理論上裝好 gulp 就可以在 localhost 把開發用的 HTTP Server 開起來，然後現在的 Chrome Canary 無法跑，還不知道原因，所以請用 Chrome Stable。</p>

<p>第二個是現在的參考資料，很大部份都是參考 HTML5 Rocks 的文章，可以參考我之前介紹 <a href="https://blog.othree.net/log/2013/11/27/web-component/">Web Component</a> 的文章最下面，這些文章的內容其實一直有在根據實做更新，所以會發現和 Spec Draft 定義不一樣。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000787" baseName="mixed-content">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-01-08</b:date>
				<b:time>23:45:54</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Mixed Content</b:title>
			<b:content>
				<b:summary>最近在翻舊文章，檢查連結圖片時，看到幾篇文章有引用 ted.com 的影片，不過現在卻看不到影片了，研究一陣子發現是因為 ted.com 還沒有支援 https，但是我這邊已經是用 https 連線了，這種情況在現在主流瀏覽器包括 Firefox、Chrome、IE ，http 的內容都是會被擋下來的，而且即使站長在 CSP 裡面有加到白名單也沒用（後來想想還算合理，兩邊設計的角度不一樣），被擋下來時其實瀏覽器都會有通知訪客： IE 在開發工具內還會有紅字嚇人： 訪客是可以自己去打開這個限制的，不過這樣做之後，畫面上都還會有警示，像是 Firefox 在網址前面會有個黃色三角形： Chrome 則是會把 https 劃掉： 一度想要用 proxy 方式來處理，不過後來放棄了，ted.com 那邊的 html 內的連結寫法還真是多采多姿啊（遠目）。這問題其實正解就是要 ted.com 去支援安全連線，所以我寫信去跟他們建議了，不過一時半刻也不會解決，所以還是需要個暫時解決的方法，目前想法是寫個說明，就像是這篇文章，然後有引用 ted.com 影片的文章都加上連結到這篇文章，除此之外，除了 embed iframe 外，也加上普通的超連結，這樣訪客也可以不要開例外允許非安全連線內容，而是直接連去 ted.com 看影片，像是 TOSSUG HTML5 分享補充...</b:summary>
				<b:mainContent><p>最近在翻舊文章，檢查連結圖片時，看到幾篇文章有引用 <a href="http://www.ted.com/">ted.com</a> 的影片，不過現在卻看不到影片了，研究一陣子發現是因為 ted.com 還沒有支援 https，但是我這邊已經是用 https 連線了，這種情況在現在主流瀏覽器包括 Firefox、Chrome、IE ，http 的內容都是會被擋下來的，而且即使站長在 CSP 裡面有加到白名單也沒用（後來想想還算合理，兩邊設計的角度不一樣），被擋下來時其實瀏覽器都會有通知訪客：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11834406594/" title="Firefox block mixed content by othree, on Flickr"><img src="//farm6.staticflickr.com/5511/11834406594_683ec5e488_b.jpg" width="1024" height="783" alt="Firefox block mixed content" src-1="(max-width: 768px)  //farm6.staticflickr.com/5511/11834406594_683ec5e488.jpg 1x, //farm6.staticflickr.com/5511/11834406594_683ec5e488_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11834272353/" title="Chrome block mixed content by othree, on Flickr"><img src="//farm8.staticflickr.com/7415/11834272353_88d18f35c4_b.jpg" width="1024" height="783" alt="Chrome block mixed content" src-1="(max-width: 768px)  //farm8.staticflickr.com/7415/11834272353_88d18f35c4.jpg 1x, //farm8.staticflickr.com/7415/11834272353_88d18f35c4_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11820942545/" title="IE block mixed content by othree, on Flickr"><img src="//farm4.staticflickr.com/3696/11820942545_45a9948590_b.jpg" width="1024" height="768" alt="IE block mixed content" src-1="(max-width: 768px)  //farm4.staticflickr.com/3696/11820942545_45a9948590.jpg 1x, //farm4.staticflickr.com/3696/11820942545_45a9948590_b.jpg 2x"  /></a></p>

<p>IE 在開發工具內還會有紅字嚇人：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11820942315/" title="IE block mixed content by othree, on Flickr"><img src="//farm4.staticflickr.com/3742/11820942315_803c340984_b.jpg" width="930" height="520" alt="IE block mixed content" src-1="(max-width: 768px)  //farm4.staticflickr.com/3742/11820942315_803c340984.jpg 1x, //farm4.staticflickr.com/3742/11820942315_803c340984_b.jpg 2x"  /></a></p>

<p>訪客是可以自己去打開這個限制的，不過這樣做之後，畫面上都還會有警示，像是 Firefox 在網址前面會有個黃色三角形：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11834407574/" title="Firefox allow mixed content by othree, on Flickr"><img src="//farm8.staticflickr.com/7290/11834407574_99c84f38d3_b.jpg" width="1024" height="783" alt="Firefox allow mixed content" src-1="(max-width: 768px)  //farm8.staticflickr.com/7290/11834407574_99c84f38d3.jpg 1x, //farm8.staticflickr.com/7290/11834407574_99c84f38d3_b.jpg 2x"  /></a></p>

<p>Chrome 則是會把 https 劃掉：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11834272603/" title="Chrome allow mixed content by othree, on Flickr"><img src="//farm4.staticflickr.com/3771/11834272603_5bf07439ea_b.jpg" width="1024" height="783" alt="Chrome allow mixed content" src-1="(max-width: 768px)  //farm4.staticflickr.com/3771/11834272603_5bf07439ea.jpg 1x, //farm4.staticflickr.com/3771/11834272603_5bf07439ea_b.jpg 2x"  /></a></p>

<p>一度想要用 proxy 方式來處理，不過後來放棄了，ted.com 那邊的 html 內的連結寫法還真是多采多姿啊（遠目）。這問題其實正解就是要 ted.com 去支援安全連線，所以我寫信去跟他們建議了，不過一時半刻也不會解決，所以還是需要個暫時解決的方法，目前想法是寫個說明，就像是這篇文章，然後有引用 ted.com 影片的文章都加上連結到這篇文章，除此之外，除了 embed iframe 外，也加上普通的超連結，這樣訪客也可以不要開例外允許非安全連線內容，而是直接連去 ted.com 看影片，像是 <a href="https://blog.othree.net/log/2010/07/24/tossug-html5-talk/">TOSSUG HTML5 分享補充</a> 這篇文章。</p>

<p>最後附上瀏覽器的說明：</p>

<ul>
<li><a href="https://blog.mozilla.org/tanvi/2013/04/10/mixed-content-blocking-enabled-in-firefox-23/">Firefox Announce</a></li>
<li><a href="https://support.mozilla.org/zh-TW/kb/how-does-content-isnt-secure-affect-my-safety?as=u&amp;utm_source=inproduct">Firefox Help</a></li>
<li><a href="https://groups.google.com/a/chromium.org/forum/#!topic/chromium-dev/-fOQXnJqtWU">Chromium Announce</a></li>
<li><a href="https://support.google.com/chrome/answer/1342714?hl=zh-Hant">Chrome Help</a></li>
</ul>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000774" baseName="cc-4">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-12-04</b:date>
				<b:time>12:17:22</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Creative Commons 4.0</b:title>
			<b:content>
				<b:summary> Creative Commons 4.0 今天正式開始可以用了，雖然前兩週就已經公開消息，不過今天收到的信件通知才提供了新版授權選擇的網頁連結，新版的授權選擇工具還會直接根據你選的授權，告訴你這是不是屬不屬於 Free Culture 的授權，基本的判斷原則是有 NC 或是 ND 的就不能算是 Free Culture License，另外稍微看了一下目前的授權工具，目前中文版的 4.0 授權文件還沒上線，簡單版的也還只有部分單字翻譯了，不過相信這些東西都有在進行，台灣創用 CC 計畫其實也早在上周就發表了新一代的授權方式－創用CC授權 4.0 與大家見面！這篇文章，很清楚的說明 4.0 和 3.0 主要的差異，摘要一下主要的變化： 明文規定可以用網頁連結標注來源 授權人可以要求拿掉重製物上的註名（想要匿名、或是希望不要和衍生著作物有關聯） 違反授權的人有 30 天的時間可以修正 更好讀的文字敘述 其他還有一些以前的模糊地帶也都在這版的更新中修正了，整體來說應該是蠻大的進步，另外 CC 依然在尋求贊助，台灣的創用 CC 計畫是中研院的計畫案支持，不過國際的 CC 組織則是需要靠募款和贊助來維持營運，有興趣支持的也可以贊助一下，還可以拿些紀念品，不過今年的紀念品我不怎麼喜歡就是了。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11200431393/" title="CC4.0 is here by othree, on Flickr"><img src="//farm6.staticflickr.com/5546/11200431393_cbcc23aa1b_o.png" width="275" height="245" alt="CC4.0 is here" /></a></p>

<p>Creative Commons 4.0 今天正式開始可以用了，雖然前兩週就已經公開消息，不過今天收到的信件通知才提供了新版<a href="http://creativecommons.org/choose/">授權選擇</a>的網頁連結，新版的授權選擇工具還會直接根據你選的授權，告訴你這是不是屬不屬於 <a href="http://creativecommons.org/freeworks">Free Culture</a> 的授權，基本的判斷原則是有 NC 或是 ND 的就不能算是 Free Culture License，另外稍微看了一下目前的授權工具，目前中文版的 4.0 授權文件還沒上線，<a href="http://creativecommons.org/licenses/by/4.0/deed.zh_TW">簡單版</a>的也還只有部分單字翻譯了，不過相信這些東西都有在進行，台灣創用 CC 計畫其實也早在上周就發表了<a href="http://creativecommons.tw/blog/20131127">新一代的授權方式－創用CC授權 4.0 與大家見面！</a>這篇文章，很清楚的說明 4.0 和 3.0 主要的差異，摘要一下主要的變化：</p>

<ul>
<li>明文規定可以用網頁連結標注來源</li>
<li>授權人可以要求拿掉重製物上的註名（想要匿名、或是希望不要和衍生著作物有關聯）</li>
<li>違反授權的人有 30 天的時間可以修正</li>
<li>更好讀的文字敘述</li>
</ul>

<p>其他還有一些以前的模糊地帶也都在這版的更新中修正了，整體來說應該是蠻大的進步，另外 CC 依然在尋求<a href="https://donate.creativecommons.org/">贊助</a>，台灣的創用 CC 計畫是中研院的計畫案支持，不過國際的 CC 組織則是需要靠募款和贊助來維持營運，有興趣支持的也可以贊助一下，還可以拿些紀念品，不過今年的紀念品我不怎麼喜歡就是了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
