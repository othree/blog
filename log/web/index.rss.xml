<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>O3noBLOG - web</title>
<link>https://blog.othree.net//log/ web/</link>
<description></description>
<copyright>Copyright 2020</copyright>
<lastBuildDate>2020-07-17 21:51</lastBuildDate>
<generator>http://www.movabletype.org/?v=4.381</generator>
<docs>http://blogs.law.harvard.edu/tech/rss</docs> 


<item>
<title>Safari 3rd-Party Cookie</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50122828112/" title="Apple ITP by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50122828112_79ce3e54d3_b.jpg" intrinsicsize="1024x837" width="936" height="765" alt="Apple ITP" srcset="https://live.staticflickr.com/65535/50122828112_79ce3e54d3_b.jpg 1024w, https://live.staticflickr.com/65535/50122828112_73eaebf7b0_h.jpg 1600w" /></a></p>
<p>Apple 之前有<a href="https://webkit.org/blog/10218/full-third-party-cookie-blocking-and-more/">宣告</a>要完全阻擋 3rd-party cookie，iThome 也有相關的<a href="https://www.ithome.com.tw/news/136565">報導</a>，iOS 和 iPadOS 應該是已經上線了，然後最近 Mac 版 Safari 也快要上線了，所以這篇來記錄一下要怎樣因應還有一些參考資料。</p>
<p>其實真的會寫到第三方 cookie 的服務是沒想像多的，如果不是開發給其它網站用的第三方服務的話（不是掛 script 而已），那其實沒那麼常見，舉例來說：很多人可能會覺得 Google Analytic 會受影響，但是其實並沒有，一般網站掛 Google Analytic 算是掛上 3rd-party script，但是它寫的 cookie 是 1st party cookie，也就是寫在你的網站的 domain 下，Google 的文件也有很詳細的說明他的每個 cookie 的<a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/cookie-usage">用途</a>，然後仔細看就會找到還有寫如何<a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/cross-domain">跨網域追蹤</a>，而這其實是需要帶一些參數過去的，如果 GA 是用 3rd-party cookie 寫在 Google 自己的 domain 的話，要跨網域追蹤就不需要這樣帶參數了，我是覺得 Apple 的 ITP 比較是針對廣告和 Facebook，早幾年前 Facebook 可以用 like button 來簡單的做到跨站追蹤，現在那些 iframe 都會被認為是 3rd-party，cookie 會和 1st-party 放不同區（partition），甚至本來如果有先去看過 facebook.com 之後，會有 24 小時可以存取該網域 3rd-party cookie 的能力也在 <a href="https://webkit.org/blog/8311/intelligent-tracking-prevention-2-0/">ITP 2.0</a> 移除，facebook 後來加上了 <code>fbclid</code> 這個參數來追蹤連出去的連結，然後 <a href="https://webkit.org/blog/8828/intelligent-tracking-prevention-2-2/">ITP 2.2</a> 就又針對這種連結裝飾（link decoration）也設了 cookie 的存取限制（剛好同時也影響到 Google Analytic）。</p>
<p>如果真的是需要作為 3rd-party 端提供服務的話怎麼辦呢？其實一開始 Apple 那篇<a href="https://webkit.org/blog/10218/full-third-party-cookie-blocking-and-more/">文章</a>，有列了幾個方案，其中正規的兩個方案：</p>
<ol>
<li>用 OAuth 2.0 作為 user auth 的方案，然後第一方網站拿到 token 後自己存好（作為 1st-party cookie 或是其它儲存方法）。</li>
<li>用 <a href="https://webkit.org/blog/8124/introducing-storage-access-api/">Storage Access API</a>，這是 Apple 所提出的 Web API，在被視為第三方的 context 中（例如 iframe），可以透過 Storage Access API 來取得 1st-party cookie 的存取權限，不過一般人直接用這個 API 要權限，可能會覺得奇怪怎麼 Safari 都沒有問使用者要不要給，權限就拿到了，其實這是因為 Apple 那邊的想法是這個 API 要盡可能的不干擾使用者，所以只有被歸類（classified）為有追蹤能力的域名才會跳出視窗跟使用者詢問，至於這個歸類的方法是在 <a href="https://webkit.org/blog/7675/intelligent-tracking-prevention/">ITP 1.0</a> 中提出的，Apple 考慮到隱私問題，所以這個機制是用機器學習的，每台電腦/裝置都維護自己的清單，沒有中心化的黑名單（Firefox 應該是用這種方法），而如果想要親自驗證自己的 domain 要是被歸類為追蹤網站的話，會發生什麼事的話，也有篇<a href="https://webkit.org/blog/8387/itp-debug-mode-in-safari-technology-preview-62/">文章</a>介紹，我自己有測試過也確實看到了那個詢問視窗。</li>
</ol>
<p>然後如果要用 Storage Access API，其實還有些限制，Safari 從 1.0 開始，就有個針對 3rd-party cookie 的限制，就是使用者要曾經直接訪問過該網域，並且寫入過 1st-party cookie，之後該網域才能對 3rd-party cookie 做存取，而這項限制也延伸到 Storage Access API 這邊，一樣要先作為 1st-party 寫入過 cookie，之後才能夠透過 Storage Access API 取得 1st-party cookie 的存取權限，Apple 負責 ITP 的 <a href="https://twitter.com/johnwilander">John Wilander</a> 最近正在寫相關的<a href="https://bugs.webkit.org/show_bug.cgi?id=193277#c7">文件</a>，裡面就有提到，然後這個限制 Firefox 也有，不過 Firefox 似乎是 30 天內有訪問過該網域就可以。</p>
<p>寫到這邊，其實有件事情忘記先提，就是網路上你去搜尋 <strong>Safari 3rd Party Cookie</strong> 會找到一些方法說可以成功讀寫 3rd-party cookie 的，那些全部都已經失效了，而且不只是 cookie，所有可以寫入的東西像是 DOM Storage 也是有受到一樣的限制保護的（然後 Storage Access API 現在<a href="https://twitter.com/jonathandavis/status/1204102948571119616">只能拿到 cookie 的權限</a>），目前也沒有出現其它的繞過方式，而且就算有人找到，Apple 都會修掉的，所以如果有這需求還是趕快用 Storage Access API 實做吧（別忘了 feature detection）。</p>
<p>然後或許有人會覺得 ITP 沒檔到 Google Analytic 好像沒什麼意義，其實 <a href="https://twitter.com/johnwilander">John Wilander</a> 早在 2017 年就有在 WebAppSec 稍微<a href="https://lists.w3.org/Archives/Public/public-webappsec/2017Mar/0034.html">提過 Single Trust</a> 這件事，提的就是網頁內掛的 3rd-party script 其實是安全性隱憂，應該只有同 domain 的東西可以信任，在 cookie 這邊來說就是 3rd-party script 不應該有存取網站 1st-party cookie 的權限（不過後來發生的是<a href="https://twitter.com/GossiTheDog/status/1038333980423204865">某航空公司的信用卡資訊輸入頁面放的第三方 script 會做 key log</a>），如果真的進行，這個改變可以想像的到影響非常的巨大，舉例來說，以前的 Performance Practice 其中一項是把 static file 放到 CDN 並且用不同 domain host，但是這樣其實就會被當成是 3rd-party script 了，雖然他在我們的認知下是可信任的，然後目前也有非常大量的現存網站是這樣做。目前 Apple 也有在做一些相關的研究，其中一個已經廣為人知(?)的就是 Safari 現在有在<a href="https://bugs.webkit.org/show_bug.cgi?id=204262">紀錄 3rd-party script 的數量</a>，另外就是我之前在 <a href="https://blog.othree.net/log/2019/05/27/incrementally-better-cookies/">SameSite Cookie</a> 這篇文章有提到的，Mike West 起草的 <a href="https://github.com/WICG/first-party-sets">First-Party Sets</a>，透過 <code>/.well-known/</code> 下的檔案定義可以被認為是 1st-party 的 domain 清單，假設未來真的要做到 single trust 的程度，要處理 CDN 之類的問題，像是 First-Party Sets 的機制就不可少。</p>
<p>最後附上一些延伸的參考資料：</p>
<ul>
<li><a href="https://github.com/whatwg/html/issues/3338#issuecomment-357790890">在提案 Storage Access API 時，Apple 工程師整理的 Safari 行為</a></li>
<li><a href="https://medium.com/@meistudio/the-rise-of-privacy-8c9ea5f53b09">Paul Li 之前在介紹 SameSite Cookie 時也有討論到相關的問題，並且還有一個 test suite</a></li>
<li><a href="https://www.tenmax.io/archives/14012">TenMax 介紹 ITP 的這篇文章的 ITP 發展歷程整理的很棒</a></li>
<li><a href="https://note.com/martech">日本的 AD EBiS マーテック研究会 的文章資訊都很新且深入</a></li>
</ul>
]]></description>
<link>https://blog.othree.net/log/2020/07/17/safari-3rd-party-cookie/</link>
<guid>https://blog.othree.net/log/2020/07/17/safari-3rd-party-cookie/</guid>
<category>web</category>
<pubDate>2020-07-17 21:51</pubDate>
</item>

<item>
<title>Scroll to Text</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/49561392806/" title="Scroll To Text by othree, on Flickr"><img src="https://live.staticflickr.com/65535/49561392806_362f83d4cd_b.jpg" intrinsicsize="1024x869" width="1024" height="869" alt="Scroll To Text" srcset="https://live.staticflickr.com/65535/49561392806_362f83d4cd_b.jpg 1024w, https://live.staticflickr.com/65535/49561392806_a7ec190efb_h.jpg 1600w" /></a></p>
<p>Chrome 最近有個新功能叫做 <a href="https://chromestatus.com/feature/4733392803332096">Scroll to Text Fragment</a>，雖然在 Chrome Platform Status 網站那邊寫 M80 會可以用，不過我實際上測試正式版的 Chrome 80 還沒有，但是 Chrome Canary 已經是預設啟用了。這個功能讓你可以在網址內的 Fragment 段（<code>#</code> 後面那段），用新定義的語法來讓瀏覽器直接捲動到指定的文字位置，語法如下：</p>
<pre><code>#:~:text=[prefix-,]textStart[,textEnd][,-suffix]
          context  |-------match-----|  context
</code></pre>
<p>如果有在用 Chrome Canary 的可以直接試試看<a href="https://blog.othree.net/log/2019/10/20/activation-behavior/#:%7E:text=%E6%AD%A3%E5%A4%A7%E5%85%89%E6%98%8E">這個連結</a>。這個語法其實還蠻靈活的，可以和以前 id identifier 並用：</p>
<pre><code>#targetID:~:text=theText
</code></pre>
<p>這樣如果找不到文字，瀏覽器還可以改用 targetID 定位；如果網頁內有多個一樣的文字，可以用 <code>prefix-</code> 和 <code>-suffix</code> 給出前後文來讓瀏覽器找到正確的目標；再來就是如果要標註的文字很長，也可以用 <code>textStart,textEnd</code> 來標註，這樣就不用在網址內放一大串文字了；然後也可以標註多段文字，用 <code>&amp;</code> 切開，和給參數的格式一樣：</p>
<pre><code>#:~:text=firstText&amp;text=secondText
</code></pre>
<p><a href="https://wicg.github.io/ScrollToTextFragment/">正式的文件</a>現在是放在 WICG 那邊，GitHub 那邊的 <a href="https://github.com/WICG/ScrollToTextFragment/">Proposal repo</a> 則是有一段解釋<a href="https://github.com/WICG/ScrollToTextFragment/#enter-">為什麼選擇用 <code>:~:</code></a> 當分割符號的段落，我覺得這種脈絡的紀錄是很重要的，這邊簡單說一下，一開始有考慮過 <code>##</code> 這種比較容易想到形式，但是有些 URL parser 是由右到左的可能會有錯誤，再來他們列出一堆不太會有人去用的組合來當候選，然後去看 Google 那邊過去五年的紀錄，結果就是 <code>:~:</code> 最沒人用，只有 0.0000039% 的比例，所以目前是選擇這個分割符號。</p>
<p>我是蠻喜歡這新功能（標準？）的，<a href="https://github.com/mozilla/standards-positions/issues/194">Mozilla 也覺得還可以考慮看看</a>，不過目前這個功能似乎還沒在 stable channel 啟用，應該是因為<a href="https://www.theregister.co.uk/2020/02/20/chrome_deploys_deeplinking/">隱私問題</a>，Chrome 負責的團隊也有整理相關的<a href="https://docs.google.com/document/d/1YHcl1-vE_ZnZ0kL2almeikAj2gkwCq8_5xwIae7PVik/edit#heading=h.uoiwg23pt0tx">資訊</a>，大概簡單說就是有可能透過頁面的讀取時間或是 <code>scrollTop</code> 的值來判斷你開啟的頁面內有沒有特定字串，然後就會有外洩的疑慮。另外還有一個讓人擔心的問題是這個功能可能會讓那些本來用 fragment 當成 route 的 SPA 壞掉，<a href="https://github.com/w3ctag/design-reviews/issues/392">W3C TAG design review</a> 那邊他們自己也有提到。</p>
<p>其實這個 scroll to text 的功能在之前還有一套提案，不過不是由瀏覽器開發商所提，而是 indieweb 提的，叫做 <a href="https://indieweb.org/fragmention">Fragmention</a>，這組提案功能就比較陽春而且不成熟了：</p>
<pre><code>#some%20text
</code></pre>
<p>重點在裡面那個 <code>%20</code>，也就是空白字元，Freagmention 的提案是你的目標文字要有空白，因為 HTML 的 id 不能包含空白字元，所以如果有空白字元就表示不是要找 id，這個提案由我來看就是很明顯沒搞過 i18n 的啊～</p>
]]></description>
<link>https://blog.othree.net/log/2020/02/21/scroll-to-text/</link>
<guid>https://blog.othree.net/log/2020/02/21/scroll-to-text/</guid>
<category>web</category>
<pubDate>2020-02-21 00:15</pubDate>
</item>

<item>
<title>W3C TAG</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/49471463826/" title="3874462 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/49471463826_8119bbecd7_n.jpg" width="320" height="320" alt="" srcset="https://live.staticflickr.com/65535/49471463826_8119bbecd7_n.jpg 320w" /></a></p>
<p>去年我在規劃 COSCUP 的 Open Web Technologies 的時候，有準備了一個備用的演講，題目是關於到哪裡可以追蹤到新的網路標準發展，其中的一個可以關注的資源，就是 <a href="https://www.w3.org/2001/tag/">W3C TAG(Technical Architecture Group)</a> 的 <a href="https://github.com/w3ctag/design-reviews">design-reviews</a>，我一開始其實是誤打誤撞發現這個 issue list 的，有點像是發現寶庫一樣，幾乎所有的新標準都會到這邊提出審查請求，而除了標准之外，Web 相關的比較重要的修改提案也會發到這邊來，像是最近要進行的 <a href="https://github.com/w3ctag/design-reviews/issues/373">SameSite=Lax by default</a>，還有剛提出的 <a href="https://github.com/w3ctag/design-reviews/issues/467">Partial freezing of the User-Agent string</a>。</p>
<p>W3C 有一份 <a href="https://www.w3.org/2019/Process-20190301/">Consortium Process Document</a> 的文件（簡稱為 Process），內容包括了 W3C 的一些基本構成，規範如何建立 Working/Interest Group 以及這些小組如何發展技術報告（Technical Report），這邊說的技術報告包括了草稿到 W3C Rec（推薦標準），除此之外，這份文件還有制訂了兩個獨立組別的構成方法，這兩個組分別為：<a href="https://www.w3.org/2002/ab/">Advisory Board</a>（顧問團） 和 Technical Architecture Group（TAG、技術架構組），兩者都有負責解決跨技術報告（aka 標準）之間的問題，前者是負責非技術的問題，後者則是負責技術問題。W3C TAG 的成員結構現在是：</p>
<ul>
<li>Tim Bernes Lee 為終生成員</li>
<li>W3C 總監</li>
<li>總監可以提名三位成員</li>
<li>另外有六名成員則是由 Advisory Committee（諮詢委員會，其實就是所有 W3C 會員代表人）選出</li>
</ul>
<p>其實看他們的審查意見都覺得真的很厲害，不過這些成員的名字其實曝光都很少。然後我一直很好奇，為什麼幾乎所有的技術報告都來這邊提審查，應該是有在技術報告開發流程上寫到才會這麼多，結果那份 Process 文件找來找去就是沒找到，花了幾個小時最後終於在其中一分外連的「如何建立一個工作/興趣小組」的文件中找到，其實找 TAG 做審查是 <a href="https://www.w3.org/Guide/process/charter.html#horizontal-review">Horizontal Review</a>（橫向審查） 的一部分，Horizontal Review 指的是技術報告在發展的過程中，找各個相關/相依的小組一起來做審查，而這些組別間的關係其實是寫在小組各自的章程裡面的，該份文件還有列出一些比較關鍵的組別：</p>
<ul>
<li><a href="https://www.w3.org/WAI/APA/">WAI Accessible Platform Architectures (APA) Working Group</a> 親和力</li>
<li><a href="https://www.w3.org/International/review-request">Internationalization Working Group</a> 多國語言支援</li>
<li><a href="https://www.w3.org/Security/wiki/IG">Security Interest Group</a> 安全性</li>
<li><a href="https://www.w3.org/Privacy/">Privacy Interest Group</a> 隱私</li>
<li><a href="https://www.w3.org/2001/tag/">Technical Architecture Group</a> 技術架構</li>
</ul>
<p>這五個確實是非常跨技術的主題，尤其是 TAG，技術的議題都跑不掉，我也循線去其它四個小組看了一下，發現真的也有相關的審查請求，不過不同小組申請審查的管道不一樣，有的還是用 W3C 傳統的 mailing-list，TAG 已經用 GitHub 算是非常先進而且方便訂閱了，從開發者的角度如果要關心網路標準的新發展可以以這邊為主，明顯比較缺的就是 CSS 的新東西不會發到這邊，我自己是還有訂 CSS Working Group 的 issue list。</p>
<p>最後就是現在台灣的 W3C 會員似乎只剩下 <a href="http://www.dpublishing.org.tw/">台灣數位出版聯盟</a>，日本現在倒是很多組織有加入了，像是不知道為什麼加入的 DWANGO，看起來也沒參加 Chinese Interest Group 的 <a href="https://w3c.github.io/danmaku/api.zh.html">Danmaku</a>。</p>
]]></description>
<link>https://blog.othree.net/log/2020/02/01/w3c-tag/</link>
<guid>https://blog.othree.net/log/2020/02/01/w3c-tag/</guid>
<category>web</category>
<pubDate>2020-02-01 23:40</pubDate>
</item>

<item>
<title>DNS CAA record</title>
<description><![CDATA[<p>過年前因為工作關係第一次注意到 <a href="https://en.wikipedia.org/wiki/DNS_Certification_Authority_Authorization">CAA record</a> (Certification Authority Authorization) 這個東西，簡單說明就是透過 DNS record 來設定你的 SSL cert 的簽發單位白名單，一開始的規範是 <a href="https://www.rfc-editor.org/rfc/rfc6844.html">RFC6844</a>，其實原理也不複雜，不過我就在遇到用 AWS ACM 簽發憑證時說檢查不過的狀況，有趣的是該 domain 沒有設定任何 CAA，搜尋研究一陣子後發現可能是因為該 domain 是 CNAME 去到別的第三方 domain 才會這樣，然後果然發現這個<a href="https://forums.aws.amazon.com/thread.jspa?messageID=924285&amp;#924285">問題</a>其實很久了。</p>
<p>不過其實原始版本的 RFC6844 其實沒有要求檢查 CNAME 目標的 CAA，而是在 2017 年的<a href="https://www.rfc-editor.org/errata/eid5065">勘誤 5065</a> 中才加入的，不過這個修改造成很多問題，所以 letsencrypt 在同一年就又<a href="https://community.letsencrypt.org/t/legacy-caa-implementation/42335">換回舊的實做</a>了。CAA record 看起來也因此放棄這個修改了，在用來取代 RFC6844 的 <a href="https://www.rfc-editor.org/rfc/rfc8659.html#name-differences-from-rfc-6844">RFC8659</a> 中，就完全沒有提到 CNAME 的檢查，甚至在與舊版相異的附錄也是特別提到這點差異，不過 RFC8659 還很新，是 2019 年 11 月的，看起來 AWS 還沒修正也情有可原(?)。</p>
]]></description>
<link>https://blog.othree.net/log/2020/01/27/dns-caa/</link>
<guid>https://blog.othree.net/log/2020/01/27/dns-caa/</guid>
<category>web</category>
<pubDate>2020-01-27 23:41</pubDate>
</item>

<item>
<title>Public Suffix List</title>
<description><![CDATA[<p>最近因為花了很多時間研究 Safari 和第三方 Cookie，常常看到一個專有名詞 <strong>eTLD+1</strong>，之前只知道和 domain name 及 TLD 相關，不清楚確切的定義，所以又去查了一下，結果找到解釋最清楚的竟然是 Go 的 publicsuffix 套件的<a href="https://godoc.org/golang.org/x/net/publicsuffix">說明文件</a>，總之簡單比較不明確的解釋，eTLD 指的是 effective TLD，像是 <code>net</code>、<code>net.tw</code> 這類，域名註冊商可以提供的網址後綴，依此類推，eTLD+1 就是 eTLD 再多一段，也就是一般人可以註冊到的網域名稱，像是我這邊用的 <code>othree.net</code>，至於部落格的子網域 <code>blog.othree.net</code> 就不是 eTLD+1 了。</p>
<p>其中的 eTLD 又稱為 Public Suffix，然後 Mozilla 有維護一份 <a href="https://publicsuffix.org/">Public Suffix List</a>，給瀏覽器用的，主要用途就是避免寫入太高權限的 cookie，例如我要是把 cookie 寫到 <code>.net</code> 層的話，所有的 <code>.net</code> 域名的網站都會讀的到它，就會有安全性問題，這份清單現在已經是主要瀏覽器開發商都有在使用了，它的內容除了那些 eTLD 之外，其實還有私人公司提交的，像是 blogspot 列了一大串，還有 github 有列 <code>github.io</code> 和 <code>githubusercontent.com</code>，<code>github.io</code> 是 GitHub Pages 的預設 domain，像我的 Github Page 就會用 othree.github.io，GitHub 提交這筆記錄，在現代瀏覽器就會限制我在 <code>othree.github.io</code> 不能寫 cookie 到 <code>github.io</code>，這樣可以確保所有使用者的頁面不會互相影響。</p>
<p>我還順便亂瀏覽一下內容，發現 Amazon 手上好多的 gTLD，像是 <code>book</code>、<code>song</code>，然後他們的 <code>cloudfront.net</code> 也有提交，還有一堆其它的 aws 網域名稱；另外就是 DynDNS 和 no-ip 兩個類似服務都提交超多的；然後還發現一間叫 <a href="https://nymnom.com/">nymnom.com</a> 的域名註冊商，專門提供一堆 <code>nom</code> 或 <code>nym</code> 結尾的域名，搞不清楚這兩個單字的意思啊。</p>
]]></description>
<link>https://blog.othree.net/log/2020/01/05/public-suffix-list/</link>
<guid>https://blog.othree.net/log/2020/01/05/public-suffix-list/</guid>
<category>web</category>
<pubDate>2020-01-05 23:23</pubDate>
</item>

<item>
<title>Robots Exclusion Protocol</title>
<description><![CDATA[<p>Google Webmaster Central Blog 昨天發表了 <a href="https://webmasters.googleblog.com/2019/07/rep-id.html">Formalizing the Robots Exclusion Protocol Specification</a> 這篇文章，介紹到 Robots Exclusion Protocol (REP) 這個正在標準化的<a href="https://tools.ietf.org/html/draft-rep-wg-topic-00">草案</a>，REP 其實就是已經被廣泛使用的 <a href="https://support.google.com/webmasters/answer/6062608?hl=zh-Hant">robots.txt</a> 檔案，robots.txt 誕生至今已經 25 年了，當初是由 <a href="https://en.wikipedia.org/wiki/Martijn_Koster">Martijn Koster</a> 所設計，早期網路的東西基本上就是先做，設計的不錯大家就跟著抄，不一定會有什麼標準的文件，robots.txt 就是這樣其實一直都沒正式的標準文件，我以前還真的有懷疑過怎麼找不到，直到 Google 這篇文章才確定了，真的一直以來是沒標準的，雖然 Google 衝網路標準太快讓人有不少意見，不過這次我倒是覺得樂觀其成，而且他們也還公開了他們的 robots.txt 的 <a href="https://github.com/google/robotstxt">parser matcher lib</a>。</p>
<p><a href="https://twitter.com/igrigorik/status/1145778175898599424">消息來源</a></p>
]]></description>
<link>https://blog.othree.net/log/2019/07/02/robots-exclusion-protocol/</link>
<guid>https://blog.othree.net/log/2019/07/02/robots-exclusion-protocol/</guid>
<category>web</category>
<pubDate>2019-07-02 12:35</pubDate>
</item>

<item>
<title>SameSite Cookie</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/47943015586/" title="Cookie Time by othree, on Flickr"><img src="https://live.staticflickr.com/65535/47943015586_16cebae79f_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="Cookie Time" srcset="https://live.staticflickr.com/65535/47943015586_16cebae79f_b.jpg 1024w, https://live.staticflickr.com/65535/47943015586_2368c831dc_h.jpg 1600w" /></a></p>
<p>Cookie 的規格是 RFC 文件所定義的，其實一直以來都有在演化，目前為止已經有三個版本，照順序分別是 <a href="https://tools.ietf.org/html/rfc2109">RFC2109</a>、<a href="https://tools.ietf.org/html/rfc2965">RFC2965</a> 和最新的 <a href="https://tools.ietf.org/html/rfc6265">RFC6265</a>，像是 <code>HttpOnly</code> 就是 RFC6265 才出現的，而最近最新的屬性，就是 <code>SameStie</code> 了，其實它和 <code>HttpOnly</code> 的起源很接近，都是近年來比較被人重視的安全性和隱私的原因，Google 的 web.dev 有一篇圖文並茂的文章介紹的很詳細－ <a href="https://web.dev/samesite-cookies-explained/">SameSite cookies explained</a>，建議還不清楚什麼是 SameSite cookie 的可以先去看一下。</p>
<p>SameSite Cookie 的標準文件其實還未正式定稿，目前還算是草稿 <a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-5.3.7">RFC6265bis</a>（bis 在 <a href="https://www6.ietf.org/tao#rfc.section.6.3">The Tao of IETF</a> 有解釋），不過主流瀏覽器都已經支援了，然後其實這篇文章我想說的是最近在 W3C TAG 看到的 Issue 373：<a href="https://github.com/w3ctag/design-reviews/issues/373">SameSite=Lax by default</a>，是由 Google 的 Mike West 提案要把 SameSite 的預設值改為 Lax，現在 Google Chrome 已經有這個實驗選項了，而且除了 SameSite 預設值的改變之外，其實還有一個修改目標是 <code>SameSite</code> 要在 <code>Secure</code> 的時候才能設為 <code>None</code>，這項改變相對而言是影響比較大的，所以提案的<a href="https://mikew%C3%AF%C2%BC%C2%8Cest.github.io/cookie-incrementalism/draft-west-cookie-incrementalism.html">文件</a>（Incrementally Better Cookies）也有提到可以分步進行，另外就是 Firefox 也表示<a href="https://groups.google.com/forum/#!msg/mozilla.dev.platform/nx2uP0CzA9k/BNVPWDHsAQAJ">有意願來實做</a>，看起來至少 SameSite 預設改為 Lax 這件事應該是不會太久之後就會發生了。</p>
<p>在花時間看一些文件內的參考資料後，發現 Mike West 還有其它幾份相關的草案：</p>
<ul>
<li><del><a href="https://mikewest.github.io/first-party-sets/">first-party-sets</a></del> <a href="https://github.com/WICG/first-party-sets">WICG/first-party-sets</a> 是用 <code>/.well-known/</code> URL 來跟客戶端溝通，可以提供 first party 的域名清單；</li>
<li><a href="https://tools.ietf.org/html/draft-west-cookie-samesite-firstparty-00">First-Party Sets and SameSite Cookies</a> 利用上面的 first-party-set 資訊，然後提供兩種新的 SameSite 值：<code>FirstPartyLax</code> 和 <code>FirstPartyStrict</code>；</li>
<li><a href="https://tools.ietf.org/html/draft-west-http-state-tokens-00">HTTP State Tokens</a> 定義了個標準化的 session token，是由瀏覽器端產生的 token，而不是 Web API，至於怎麼傳遞到 server 端，怎樣溝通有效期等都有寫在規範內，Incrementally Better Cookies 的想法也是從這份草案中的特性而來。</li>
</ul>
<p>這些草案都還蠻有趣的，至於會不會定稿成為規範甚至大家都開始實做，目前就還很難斷定了。</p>
]]></description>
<link>https://blog.othree.net/log/2019/05/27/incrementally-better-cookies/</link>
<guid>https://blog.othree.net/log/2019/05/27/incrementally-better-cookies/</guid>
<category>web</category>
<pubDate>2019-05-27 22:48</pubDate>
</item>

<item>
<title>瀏覽器多樣性 Browser Diversity</title>
<description><![CDATA[<p>前陣子大事就是微軟要放棄自家的 EdgeHTML 引擎，轉用 Chromium 專案為基礎來開發新版的 Edge Browser 了，風聲剛出來的時候，我注意到微軟官方完全沒做出回應，也沒有任何微軟員工出來講話，加上有些媒體早就發現到有 Edge 的開發成員在貢獻 Chromium，我就覺得是真的了，後來十二月六日微軟<a href="https://blogs.windows.com/windowsexperience/2018/12/06/microsoft-edge-making-the-web-better-through-more-open-source-collaboration/">正式回應</a>，還有一份比較長的<a href="https://github.com/MicrosoftEdge/MSEdge">聲明</a>，Mozilla 也有<a href="https://blog.mozilla.org/blog/2018/12/06/goodbye-edge/">回應</a>，其實這件事情對於網路生態算是很大的衝擊，不過一般使用者可能沒什麼感覺，加上都沒看到中文的文章寫這件事情的影響，所以只好我來寫一下了。</p>
<p>首先，我講可能沒什麼公信力，所以可以直接來看一下 Google(?) 其中一集 HTTP 203 短片，標題是 Browser Monoculture，Monoculture 剛好是 Diversity 的相對，mono 是單一，單聲道或是黑白影像都是用 mono，culture 就是文化，Monoculture 的意思自然可以明白：</p>
<div class="embed_16_9">
  <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/IskiTVqHp18" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>事實上，當微軟放棄 EdgeHTML 引擎之後，現在整個生態圈只剩下 Firefox 的 Gecko 引擎和 WebKit 家族（Safari 的 WebKit 和 Chrome 的 Blink ），而 WebKit 家族現在的市佔率已經是超過八成的獨大局面，行動裝置領域更是嚴重，如果扣除 iOS 的 Mobile Safari 則幾乎都是 Chrome 的天下了，幾乎是回到 IE 壟斷的時光，不過其實我覺得現在狀況又比那時候更險峻一點，有兩個問題：第一個是現在的 Web Platform 已經太複雜了，HTML 本身還算是單純的部分，但是各種 CSS、Web API 的推陳出新，再加上安全性、親和力、網路連線、Extensible Web 等等，到底有多少東西呢？可以參考我之前貼過的 <a href="https://blog.othree.net/log/2018/09/16/web-platform/">Web Platform</a> 那篇文章中 <a href="https://www.chromestatus.com/features">Google Chrome 的 Platform Status</a>，光這邊登記在案的，現在就有 1255 個功能，還有不少面向的東西不會列在這邊，像是效能、開發工具、WebDriver 等，其實我已經不認為現在有什麼其他第三方勢力還有辦法維護一個獨自的瀏覽器引擎了，就算是 Google 一開始也是從 WebKit，Mozilla 也是從 Gecko 來發展，微軟今天放棄繼續開發 EdgeHTML 之後，可能過一兩年就會讓它難以再次跟上標準的發展，其實微軟當年能從把 IE 重構成現在的 Edge 我覺得實在很厲害了，不過未來這種事情難度只會越來越高。</p>
<p>第二個是如果 Chrome 已經佔有率這麼高，它是不是可以自己開始亂搞加功能呢？就像是以前的 IE。答案其實是<strong>可以</strong>，只是現在手法已經進化了，以下舉個例子，不過先消毒，我不是指控 Google Chrome 團隊這件事是 be evil，而是假設要 be evil，這已經是可行的方法，或是換個角度，他們其實不覺得自己在 be evil，只是結果就是這樣了。</p>
<p>我要舉的例子是前兩週 Chrome 發表了他們支援 Background Fetch 這個新標準的<a href="https://developers.google.com/web/updates/2018/12/background-fetch">消息</a>，我第一時間反應其實是，WTF 我怎麼完全沒聽過這東西，然後我就去查查怎麼回事，然後了解到：</p>
<ol>
<li>看介紹大概就了解這個需求確實是有的</li>
<li>Chrome 外其他家都還沒有說要支援（根據 <a href="https://www.chromestatus.com/feature/5712608971718656">Chrome Platform Status</a>）</li>
<li>標準文件的兩位編輯都是 Google 的人，主要應該是 Jake Archibald</li>
<li>WICG <a href="https://discourse.wicg.io/t/proposal-background-fetch/1994">那邊</a>是去年二月也是由 Jake Archibald 提的，然後 W3C 那邊根據 blink-dev 的正向回饋就決定接收提案了</li>
</ol>
<p>這狀況有點讓我聯想到「進化的獨裁者」，一切該有的過程其實都有，但是就都是他們的人，自己提案說有這需求，有寫好文件了，在自己家的討論區得到正向回饋，然後實做起來馬上就有市場 80% 的支援度了，這樣要不要直接算正式的網路標準了，其他家（aka Firefox）又情何以堪。事實上 Chrome 這樣衝網路標準的狀況也好一陣子了，早在 2015 年 ppk 就已經有提出對於標準發展太快的疑慮而發了一篇 <a href="https://www.quirksmode.org/blog/archives/2015/07/stop_pushing_th.html">Stop pushing the web forward</a>。</p>
<p>而除了快速的發展新功能之外，還有一種狀況是擱置他們覺得不重要的 Web API 開發，然後因為已經獨大了，所以開發者就算很想要這個新的 Web API 也是無能為力，這其實也就是 HTTP 203 短片有提到的，多樣性意味著開發者有選擇的權力，而有這個力量才能讓兩邊對等。</p>
<p>而除了這兩個問題之外，也有人提出我之前沒想過的安全性問題，剛好就在微軟發佈消息之後沒多久就爆發出 <a href="https://www.zdnet.com/article/sqlite-bug-impacts-thousands-of-apps-including-all-chromium-based-browsers/">SQLite 漏洞</a>，ZDNet 的標題提到影響到所有以 Chromium 為基礎的瀏覽器，這也是一個我之前沒想到過的問題，如果獨大的軟體有嚴重的漏洞，那一下就直接影響超多人，不過其實這次的漏洞連 Firefox 也有受影響，然後也還好不是直接可以遠端就下手的漏洞，其實佔有率高的軟體或服務都一直是駭客的目標，想必 Chromium 的 Blink 核心之後勢必會更加受到駭客關注吧。</p>
<p>這陣子這個圈子很多人都已經發表過看法了，像是 <a href="https://www.quirksmode.org/blog/archives/2018/12/chromedge_and_h.html">ppk</a> 和 <a href="https://www.zeldman.com/2018/12/07/browser-diversity-starts-with-us/">Zeldman</a> 都出來發表意見，如果有人不知道這兩位是誰，趁機介紹一下，Jeffery Zeldman 是 <a href="https://en.wikipedia.org/wiki/Designing_with_Web_Standards">Designing with Web Standards</a> 的作者，A List Apart（A Book Apart, An Event Apart 等）和 <a href="https://www.webstandards.org/">Web Standards Project</a> 的發起人，也是當年推動瀏覽器實做應該回歸網路標準的意見領袖，ppk 也是那個時期蠻活躍的，做了很多相容性測試，著有 ppk on JavaScript，當年是很棒的入門書。大部分的人其實都是針對 monoculture 論述，然後建議大家現在就開始行動，包括確保你的網站支援 Firefox、開始使用 Firefox 等等，不過 Lea Verou 有則評論則是針對那些覺得少一個瀏覽器要測試很高興的開發者，講的比較重：</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">If you think a WebKit monoculture is good for web developers or the Web, you're incredibly short-sighted (and likely inexperienced), sorry.</p>- Lea Verou (@LeaVerou) <a href="https://twitter.com/LeaVerou/status/301727973273391104?ref_src=twsrc%5Etfw">February 13, 2013</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>至於事主之一的 Google 則就裝死當沒他的事。總之，現在雖然 Firefox 還有個 10% 左右的佔有率，光看數字還比 IE 那時候好，但是我卻覺得情勢更加險峻，很難再有新的競爭者出來，只能希望 Google  don't be evil，還有 Mozilla 能夠堅持下去，真是有點想念還有五大主流瀏覽器的時候啊。</p>
]]></description>
<link>https://blog.othree.net/log/2018/12/27/browser-diversity/</link>
<guid>https://blog.othree.net/log/2018/12/27/browser-diversity/</guid>
<category>web</category>
<pubDate>2018-12-27 22:47</pubDate>
</item>

<item>
<title>Chrome 10 週年</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31070118768/" title="Chrome 10 Years by othree, on Flickr"><img src="https://farm2.staticflickr.com/1977/31070118768_f2335fb367_b.jpg" intrinsicsize="960x540" width="960" height="540" alt="Chrome 10 Years" srcset="" /></a></p>
<p>Chrome 10 週年 Google 真的是很精心的規劃要幫它慶祝啊，我猜大概是找了個很有狼性的 PM 來，最近一下就被發現兩個問題，第一個小一點點，就是 Clear browser data 的地方，全部清除的功能不會幫你清除 Google 的資料喔：</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">"Clear all Cookies except Google Cookies", thanks Chrome. /cc <a href="https://twitter.com/matthew_d_green?ref_src=twsrc%5Etfw">@matthew_d_green</a> <a href="https://t.co/tR0UJjtPFL">pic.twitter.com/tR0UJjtPFL</a></p>-- Christoph Tavan (@ctavan) <a href="https://twitter.com/ctavan/status/1044282084020441088?ref_src=twsrc%5Etfw">September 24, 2018</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>第二個問題比較大一點，灣區日報看到的 <a href="https://wanqu.co/a/6982/why-im-done-with-chrome/">Why I'm done with Chrome</a>，問題就是 Chrome 69 開始，登入網頁版的 Google 服務會自動把 Chrome 瀏覽器端的 Google 帳號也登入，然後根據 Google 工程師所說，這樣還不會觸發同步備份密碼和 autofill 等隱私資料（包括密碼、信用卡資料），不過在這狀態下你很可能不小心就觸發了，由於這個機制官方沒說過，介面上也沒明顯提示，就只有大頭那邊的頭像會變，幾乎都會被使用者忽略，而會不會自動備份隱私資料只是一部份，比較嚴重的點還是這個行為是破壞使用者的信任，事情鬧出來之後 Google 有<a href="https://www.blog.google/products/chrome/product-updates-based-your-feedback/">官方回應</a> 說下一版會有修改讓使用者可以關閉（不過預設還是開啟啦～～），登入後的介面也有相對應的修改讓狀態更清楚，另外就是刪除所有 Cookie 不會保留 Google 的了，以上這些修改都要等十月中的 Chrome 70。</p>
<p>最後就是，隨著這次事件才注意到有 <a href="https://github.com/Eloston/ungoogled-chromium">ungoogled-chromium</a> 這個專案啊。</p>
]]></description>
<link>https://blog.othree.net/log/2018/09/27/chrome-privacy-issue/</link>
<guid>https://blog.othree.net/log/2018/09/27/chrome-privacy-issue/</guid>
<category>web</category>
<pubDate>2018-09-27 13:56</pubDate>
</item>

<item>
<title>Intrinsic Size 媒體寬高比</title>
<description><![CDATA[<p>HTML 文件在編寫插入 <code>&lt;img&gt;</code> 時，通常都會順便加上寬高的資訊，早期這樣做除了指定圖片呈現時的大小外，還有一個好處是提升頁面繪製的速度，不用在圖片讀取好、知道實際寬高時，又重新排版重畫版面，不過這個狀況在用 CSS 設定動態寬度時，就又回到原點了，像是設定 <code>width: 100%;</code> 這種，因為沒辦法設定相對於圖片寬度的高度值，所以瀏覽器只能自己先隨便決定一個高度，等圖片抓好再重排一次。</p>
<p>一直以來這問題都沒好的方案處理，在排版上比較多人採用的是外面多一層 block 元素然後用 <code>padding-top</code> 來把空間先佔好，不過這也只算是個替代方案，真的要處理應該還是要從 HTML 或是 CSS 下手，然後前兩天才終於看到有個不錯的方案 Chrome 要來實做了，叫做 <a href="https://github.com/ojanvafai/intrinsicsize-attribute">Intrinsic Size</a>：</p>
<pre><code class="language-html">&lt;img intrinsicsize=&quot;250 x 200&quot; src=&quot;cat.jpg&quot;&gt;
</code></pre>
<p>就是一個長乘寬的概念，中間那個乘號其實是小寫的 <code>x</code>，然後提供的長寬資訊其實是等於預先給的 naturalWidth、naturalHeight，為什麼不用 aspect ratio 呢？在提案的文件裡面其實都有寫到，基本上就是這種設計提供的資訊更多，有更多好處，例如都沒設定寬高時，可以拿 <code>intrinsicsize</code> 來先用之類的，<code>intrinsicsize</code>目前設計只能用在圖片和影片上，Chrome <a href="https://www.chromestatus.com/feature/4704436815396864">預計</a>在 71 的時候推出這個功能，也已經做好<strong>有貓</strong>的<a href="https://googlechrome.github.io/samples/intrinsic-size/index.html">測試網頁</a>了，感覺一切都箭在弦上了，不過這新提案在 WICG 上幾乎沒<a href="https://discourse.wicg.io/t/layout-of-img-canvas-and-video-for-any-elements-suggestion/1595/2">討論</a>，提案者是 WICG 也是 Chromium 成員就是，另外就是另外三家的 web platform status 都還查不到，並且，其實也有一個 CSS 的 <code>aspect-ratio</code> <a href="https://www.xanthir.com/blog/b4810">提案</a>，所以到底會怎樣還很難說啊（不過我覺得是會變標準啦）。</p>
]]></description>
<link>https://blog.othree.net/log/2018/09/21/intrinsic-size/</link>
<guid>https://blog.othree.net/log/2018/09/21/intrinsic-size/</guid>
<category>web</category>
<pubDate>2018-09-21 22:08</pubDate>
</item>

<item>
<title>Extensible Web at 2018</title>
<description><![CDATA[<p><img src="https://i.imgur.com/YsbKHg1.gif" alt="" width="275" height="252" /></p>
<p>2013 年有一份 Extensible Web 宣言，簽署人同意致力於開發 Web Platform 更底層的介面，讓開發者可以自己擴展 Web Platform，而構成 Web 介面的基本三要素其實就是 HTML、CSS、JavaScript。</p>
<p>其實我在當時就覺得很奇妙，我可以想像的到開發者自己擴充 HTML 標籤，不過卻想像不出來到底 JavaScript 和 CSS 要如何讓開發者擴充，沒想到今天回過頭來看，整個網路標準的發展方向真的是有在朝這方向前進，首先來看 HTML 的部分，其實就是 <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">Web Component</a>，包括了 Custom Element、Shadow DOM、Template、HTML Import 等標準，透過這些新的 Web API，開發者很容易就可以做出可重複利用，有自訂行為的自製標籤了。</p>
<p>JavaScript 的部分，其實在上一篇文章介紹<a href="https://blog.othree.net/log/2018/09/17/ecmascript-2015-rel-of-features/">那一串 ES6 新功能</a>的最後，有提到 meta programming 的新功能，雖然不是完完全全想擴充什麼就擴充什麼，但是 JavaScript 確實是慢慢的有些可以讓開發者比較深入底層的介面可以用。</p>
<p>最後 CSS 的部分，就是 CSS Houdini 了，Houdini 其實就是史上最偉大魔術師胡迪尼，從名稱就可以感受到這個東西有多 <em>magic</em> 了，其實 Houdini 不是一個標準，而是一個 <a href="https://wiki.mozilla.org/CSS/Houdini">W3C Working Group</a>，他們主要的目標就是建構出一整套 API 讓 CSS 可以擴充，而目前也已經有些<a href="https://drafts.css-houdini.org/">成果</a>了，我自己是看了去年一場演講的影片才對 Houdini 有了初步的認識：</p>
<div class="embed_16_9">
    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/r-Hc3hN9e6I?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>現在最主要是已經有 Chrome 把 Paint API 實做出來，所以已經可以用 Canvas 畫圖了，雖然整個計畫離完成還要很久，不過看到 CSS 真的可以開始擴充了，還是覺得很 Magic~</p>
<p>Image Source: <a href="https://imgur.com/gallery/YsbKHg1">https://imgur.com/gallery/YsbKHg1</a></p>
]]></description>
<link>https://blog.othree.net/log/2018/09/18/extensible-web-2018/</link>
<guid>https://blog.othree.net/log/2018/09/18/extensible-web-2018/</guid>
<category>web</category>
<pubDate>2018-09-18 21:31</pubDate>
</item>

<item>
<title>Web Platform</title>
<description><![CDATA[<p>這篇記錄一下現在主要四個瀏覽器核心對於新標準的支援計畫的狀態網站，不然每次都要重新查。</p>
<ul>
<li>Chrome <a href="https://www.chromestatus.com/features">https://www.chromestatus.com/features</a></li>
<li>Edge <a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/status/">https://developer.microsoft.com/en-us/microsoft-edge/platform/status/</a></li>
<li>Firefox <a href="https://platform-status.mozilla.org/">https://platform-status.mozilla.org/</a></li>
<li>Safari/WebKit <a href="https://webkit.org/status/">https://webkit.org/status/</a></li>
</ul>
<p>Chrome 的應該是最多人看過，其實看過這個就能了解現在幾乎是無法從 0 開始開發一個瀏覽器了，Google Chrome 從 WebKit 的基礎開始，到現在也花了十年。</p>
]]></description>
<link>https://blog.othree.net/log/2018/09/16/web-platform/</link>
<guid>https://blog.othree.net/log/2018/09/16/web-platform/</guid>
<category>web</category>
<pubDate>2018-09-16 16:49</pubDate>
</item>

<item>
<title>Web 前端文章廣播服務 ofrontend</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/30332209388/" title="frontend-news by othree, on Flickr"><img src="https://farm2.staticflickr.com/1897/30332209388_f956381a2d_b.jpg" width="512" height="512" alt="frontend-news" srcset="https://farm2.staticflickr.com/1897/30332209388_f956381a2d_b.jpg 1024w" /></a></p>
<p>前陣子弄了一個 web 前端文章的廣播服務，現在沒有正式的服務名稱，不過 code base 和一些帳號都叫 <a href="https://github.com/othree/ofrontend">ofrontend</a>，所以就先這樣稱呼它吧，現在這服務有兩個末端：</p>
<ul>
<li><a href="https://twitter.com/ofrontend">Twitter</a></li>
<li><a href="https://t.me/ofrontend">Telegram Channel</a></li>
</ul>
<p>會轉發的文章主要就是我看到和前端相關的為主，也會有少量其他的技術文章，大約 80% 英文、20 % 中文，不過不一定是我讀過覺得要推薦的，也是有過一些剛看標題覺得好像不錯，結果找到時間看完覺得沒什麼的文章，不介意的話可以 follow 一下。</p>
<p>目前資訊來源包括了：</p>
<ul>
<li>Twitter 上的 <a href="https://twitter.com/following">follows</a> 和 Facebook 上自己的 Timeline</li>
<li>GitHub 上的 <a href="https://github.com/othree?tab=following">follows</a>、watching（沒有 public 的頁面）我有 watch 一些標準文件的 repository，像是 TC39、CSS-WG 等，現在蠻多資訊可以在 GitHub issue 內看到了，以前都要訂閱 mailing-list</li>
<li>跟的 <a href="https://blog.othree.net/blogroll/">Feed</a>，有記得才會去看，線上這份 Feed 清單沒有隨時更新</li>
<li>Facebook 上的社團：
<ul>
<li><a href="https://www.facebook.com/groups/enjoyfonts/">字嗨</a></li>
<li><a href="https://www.facebook.com/groups/javascript.tw/">JavaScript.tw</a></li>
<li><a href="https://www.facebook.com/groups/vim.tw/">Vim 正體中文社群</a></li>
<li><a href="https://www.facebook.com/groups/augularjs.tw/">Angular Taiwan</a></li>
<li><a href="https://www.facebook.com/groups/1249720198386038/">Fire-and-Forget 前端轉貼總部</a></li>
<li><a href="https://www.facebook.com/groups/142197385837507/">Ruby Taiwan</a></li>
<li><a href="https://www.facebook.com/groups/521085554595481/">Front-End Developers Taiwan</a></li>
<li><a href="https://www.facebook.com/groups/168537393167684/">Perl 台灣</a></li>
<li><a href="https://www.facebook.com/groups/830853873715381/">Markdown 台灣</a></li>
<li><a href="https://www.facebook.com/groups/262800543746083/">node.js台灣</a></li>
<li><a href="https://www.facebook.com/groups/1439747729634154/">ReactJS.tw</a></li>
<li>...等</li>
</ul>
</li>
<li>訂閱的電子報：
<ul>
<li><a href="https://weekly.codetengu.com/">碼天狗</a></li>
<li><a href="https://weekly.techbridge.cc/">TechBridge 技術週刊</a></li>
<li><a href="https://javascriptweekly.com/">JavaScript Weekly</a></li>
<li><a href="https://nodeweekly.com/">Node Weekly</a></li>
<li><a href="https://frontendfoc.us/">Frontend Focus</a></li>
<li><a href="https://mobiledevweekly.com/">Mobile Dev Weekly</a></li>
<li><a href="https://webopsweekly.com/">WebOps Weekly</a></li>
<li><a href="https://www.pycoders.com/">Pycoder's Weekly</a></li>
<li><a href="https://rubyweekly.com/">Ruby Weekly</a></li>
<li><a href="https://golangweekly.com/">Golang Weekly</a></li>
<li><a href="https://wasmweekly.news/">WebAssembly Weekly</a></li>
<li>...等</li>
</ul>
</li>
<li>其它各種一時想不起來或是非預期的來源</li>
</ul>
<p>會做這個服務有幾個原因，一個是我其實本來就有在轉發前端相關的文章連結，不過大多丟在一些非公開的地方，並且這些文章連結都沒好好整理，一直都有想找個書籤服務弄起來，然後這陣子看到<a href="https://wanqu.co/">灣區日報</a>和<a href="https://t.me/JustShareChannel">吹水 Just Share</a> 覺得也可以來做類似的傳播管道，研究和思考了好一陣子，最後決定花錢訂閱了個 <a href="https://pinboard.in/">Pinboard</a> 服務來收集和管理連結，Pinboard 雖然介面沒找什麼設計師，看起來很陽春，不過其實他還蠻靈活的，API 很簡單可以用，不用 oauth，只要帶 token 發請求就可以，和 Telegram Bot 蠻像的，所以其實也不少工具可以用，Android、iOS、Firefox 都有，隨時看到相關的文章都可以很快的把連結丟進 Pinboard。</p>
<p>連結進 Pinboard 之後，就有個轉發的工具來把這連結丟去 Twitter 和 Telegram，轉發的程式也放在 GitHub 上，叫 <a href="https://github.com/othree/pinboardto">pinboardto</a>，Python 寫的，本來有想趁機玩玩看 Rust，不過研究一下覺得還是先用 Python 把基本款弄出來，裡面東西很簡單沒什麼技術難題，並且不依靠外部儲存（資料庫、檔案），同步的機制是靠系統時間和 cronjob，所以不知什麼原因錯過就錯過了，不過因為這服務也沒有這麼要求可靠性，所以還好。</p>
<p>Facebook 的部分，本來有想接到 Fire-and-Forget 前端轉貼總部 去的，可是 FB 那邊弄不到永久有效的 token 就放棄。</p>
<p>最後成本部分，這個服務其實對我來說蠻低成本的，主要固定支出就只有 Pinboard 的年費，不過本來就要好好收集算是本來就要花，轉發服務掛在現有的主機上，最後就是 iPad 上有花錢買一個 Pinboard 的 app，不過其實也還沒有滿意就是，不知道為什麼抓 Twitter 的網頁 title 都會抓錯。</p>
]]></description>
<link>https://blog.othree.net/log/2018/08/22/web-fe-news-service-ofrontend/</link>
<guid>https://blog.othree.net/log/2018/08/22/web-fe-news-service-ofrontend/</guid>
<category>web</category>
<pubDate>2018-08-22 23:42</pubDate>
</item>

<item>
<title>GitHub Pages Custom Domain HTTPS</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41138623844/" title="GitHub Pages by othree, on Flickr"><img src="https://farm1.staticflickr.com/957/41138623844_b976542030_b.jpg" width="730" height="491" alt="GitHub Pages" srcset="https://farm1.staticflickr.com/957/41138623844_b976542030_b.jpg 1024w" /></a></p>
<p>等了好久終於出來的功能，<a href="https://github.com/isaacs/github/issues/156">追了蠻久</a>，昨天 DK 也有<a href="https://blog.gslin.org/archives/2018/05/02/8295/github-%E9%80%8F%E9%81%8E-lets-encrypt-%E6%8F%90%E4%BE%9B%E8%87%AA%E8%A8%82%E7%B6%B2%E5%9F%9F%E7%9A%84-https-%E6%9C%8D%E5%8B%99/">提到</a>，其實正式發佈前就看到有人已經可以用了，不過總之這篇稍微記錄一下如果已經是舊有的 GitHub Pages 還不能用可以怎麼處理，不過不完全有效，舊有的專案在設定看起來會像是：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41127813434/" title="GitHub Pages by othree, on Flickr"><img src="https://farm1.staticflickr.com/972/41127813434_4219cc0fa1_b.jpg" width="730" height="491" alt="GitHub Pages" srcset="https://farm1.staticflickr.com/972/41127813434_4219cc0fa1_b.jpg 1024w" /></a></p>
<p>下面有寫說因為用了 custom domain 就不能用，這時候把 custom domain 刪除，然後儲存重新加回去就會變成：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/40945601525/" title="GitHub Pages by othree, on Flickr"><img src="https://farm1.staticflickr.com/863/40945601525_2331845c36_b.jpg" width="730" height="512" alt="GitHub Pages" srcset="https://farm1.staticflickr.com/863/40945601525_2331845c36_b.jpg 1024w" /></a></p>
<p>然後就等，我大概是等到隔天就有了（變成第一張圖的狀態），不過這幾天剛好完全沒空，到現在才有空檔紀錄一下。</p>
]]></description>
<link>https://blog.othree.net/log/2018/05/04/github-pages-custom-domain-https/</link>
<guid>https://blog.othree.net/log/2018/05/04/github-pages-custom-domain-https/</guid>
<category>web</category>
<pubDate>2018-05-04 19:12</pubDate>
</item>

<item>
<title>TFN 域名轉出</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41839613061/" title="dig markdown.tw by othree, on Flickr"><img src="https://farm1.staticflickr.com/908/41839613061_4caec6e31e_b.jpg" width="665" height="452" alt="dig markdown.tw, " srcset="https://farm1.staticflickr.com/908/41839613061_4caec6e31e_b.jpg 1024w" /></a></p>
<p>我的 markdown.tw 在 TFN 註冊的，其實一直很想轉出，但是很怕轉的過程出意外，遲遲沒動手。不過剛剛看到 GitHub Pages 用 custom domain 也正式支援 HTTPS 了，如果是設定 A record 的話需要更新 DNS 設定，於是我就決定認真的來處理這件事，不意外的介面很難理解，決定記錄一下幫助眾生～</p>
]]><![CDATA[<p>域名要轉出最重要的就是要從原註冊商拿到 authorization code，然後在新註冊商轉入的時候輸入，TFN 要轉出還好不是要聯絡客服，介面上有，然後我就點下去看：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26970973117/" title="TFN domain transfer by othree, on Flickr"><img src="https://farm1.staticflickr.com/959/26970973117_e94bf86d90_b.jpg" width="1024" height="846" alt="TFN domain transfer, " srcset="https://farm1.staticflickr.com/959/26970973117_e94bf86d90_b.jpg 1024w, https://farm1.staticflickr.com/959/26970973117_579cf5d5b0_h.jpg 1600w" /></a></p>
<p>馬上就卡關了，完全沒有說明，就要我輸入<strong>移轉中密碼</strong>，還是必填欄位，根據我一些以往經驗，我以為這邊是要輸入什麼先跟他們取得的安全驗證碼，然後才會拿到 authorization code，不過卻死活找找不到這個取得安全驗證碼的地方，鬼打牆半個鐘頭後，我決定作一個測試，就是把 <strong>移轉中密碼</strong> 當成就是 authorization code 來試試，然後自己想一個密碼輸入後：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41122773584/" title="TFN domain transfer by othree, on Flickr"><img src="https://farm1.staticflickr.com/944/41122773584_37384abe31_b.jpg" width="1024" height="846" alt="TFN domain transfer, " srcset="https://farm1.staticflickr.com/944/41122773584_37384abe31_b.jpg 1024w, https://farm1.staticflickr.com/944/41122773584_9dbf36d901_h.jpg 1600w" /></a></p>
<p>就得到成功訊息了！這時候眼尖的人會發現左邊的目錄多了個<strong>取消轉出</strong>的選項，看到這選項的我時在忍不住想看看裡面有什麼訊息，就點了下去：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41122773934/" title="TFN domain transfer by othree, on Flickr"><img src="https://farm1.staticflickr.com/976/41122773934_eba87c97b9_b.jpg" width="1024" height="846" alt="TFN domain transfer, " srcset="https://farm1.staticflickr.com/976/41122773934_eba87c97b9_b.jpg 1024w, https://farm1.staticflickr.com/976/41122773934_f040f1fe0f_h.jpg 1600w" /></a></p>
<p>恩恩，真是不意外的結果啊，總之我就重新操作一次，然後拿著我自己設定的密碼去 Gandi 那邊當 authorization code 轉入，弄完等了一陣子後，竟然就通過了！</p>
<p>所以結論是，TFN 域名轉出時要輸入的<strong>移轉中密碼</strong>其實就是給使用者自訂 authorization code，而且還有個蠻短的長度限制 XD，現在雖然 nameserver 都轉好了，不過我的 GitHub Pages HTTPS 還是沒生效啊～</p>
]]></description>
<link>https://blog.othree.net/log/2018/05/02/tfn-domain-transfer-out/</link>
<guid>https://blog.othree.net/log/2018/05/02/tfn-domain-transfer-out/</guid>
<category>web</category>
<pubDate>2018-05-02 12:13</pubDate>
</item>


</channel>
</rss>