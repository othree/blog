<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>y</b:listType>
			<b:listData listID="2014">2014</b:listData>

			<b:previous>
				<b:mTitle>2013</b:mTitle>
				<b:mDate>2013</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>2015</b:mTitle>
				<b:mDate>2015</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000825" baseName="latest-true-color-vim">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-12-10</b:date>
				<b:time>01:46:05</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Latest True Color Vim</b:title>
			<b:content>
				<b:summary>上次文章的安裝方法已經過時了，更新一下： hg clone https://bitbucket.org/ZyX_I/vim cd vim cd src &amp;&amp; make autoconf &amp;&amp; cd .. ./configure \ --enable-gui=no \ --without-x \ --enable-multibyte \ --with-tlib=ncurses \ --enable-cscope \ --with-features=huge \ --disable-nls \ --enable-perlinterp \ --enable-pythoninterp \ --enable-rubyinterp \ --enable-termtruecolor make make install...</b:summary>
				<b:mainContent><p>上次<a href="https://blog.othree.net/log/2013/07/27/true-color-terminal-vim-osx/">文章</a>的安裝方法已經過時了，更新一下：</p>

<pre><code>hg clone https://bitbucket.org/ZyX_I/vim
cd vim
cd src &amp;&amp; make autoconf &amp;&amp; cd ..

./configure \
  --enable-gui=no \
  --without-x \
  --enable-multibyte \
  --with-tlib=ncurses \
  --enable-cscope \
  --with-features=huge \
  --disable-nls \
  --enable-perlinterp \
  --enable-pythoninterp \
  --enable-rubyinterp \
  --enable-termtruecolor

make
make install
</code></pre>

<p>其實就是現在 ZyX 自己維護的 git repo 已經是有把 True Color 支援的 code merge 進來的版本，只是現在的最新版設定上有些修改，差異在不一定會直接輸出 true color 的色碼 sequence 了，要 Terminal Type 是 <code>xterm</code> 的時候才有。如果不是 <code>xterm</code> 的時候則需要加上設定檔，告訴 Vim 要怎樣輸出色碼的 sequence：</p>

<pre><code>let &amp;t_8f="^[[38;2;%lu;%lu;%lum"
let &amp;t_8b="^[[48;2;%lu;%lu;%lum"
</code></pre>

<p>其中的 <code>^[</code> 是控制碼，就像是 BBS 著色一樣，不能直接打，Vim 的話要用 Ctrl + v + [ 三個按鍵同時按來輸入。這兩個設定項目因為是 ZyX 版才有，所以如果是跑普通的 Vim 的話，啟動時會跑出警告，可以用 <code>:help xterm-true-color</code> 看看比較詳細的說明。</p>

<p>最後 iTerm2 雖然已經出 2.0 了，不過 True Color 的正式支援是放在 3.0，所以目前要在 Mac 上用 True Color Terminal 還是需要抓 nightly 版的 iTerm2。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000824" baseName="typescript-definition">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-12-04</b:date>
				<b:time>23:06:48</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>關於 TypeScript</b:title>
			<b:content>
				<b:summary> 這幾年各種 compile to JavaScript language 盛行，大部分都是朝向讓程式碼更好寫的方向來前進，微軟在 2012 年也推出了 TypeScript 這個 compile to JavaScript language，不過他的方向卻不一樣，TypeScript 是一個 JavaScript 的 superset，意思就是所有的 JavaScript 都是合法的 TypeScript，而 TypeScript 多了一些語法，加入了一些新功能，不過這些新的語法完全都不用也是可以正常的寫程式，給 TypeScript compiler 編譯。 TypeScript 顧名思義，它著重的在資料型別這個部分，JavaScript 是 weak type （弱型別）的語言，寫起來算是很方便，不過這個特性卻也是一些問題的來源，首先最常見到的是因為資料型態不嚴謹而造成的 bug，第二個常被提出來的就是為了實做 weak type 而造成的 performance 下降，因此一直有一些聲音在對抗弱型別這個特性，第一個是 Douglas...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15756461070/" title="type-error by othree, on Flickr"><img src="https://farm8.staticflickr.com/7510/15756461070_d3b58d0aca_c.jpg" width="515" height="131" alt="type-error" srcset="https://farm8.staticflickr.com/7510/15756461070_d3b58d0aca_c.jpg 768w" /></a></p>

<p>這幾年各種 compile to JavaScript language 盛行，大部分都是朝向讓程式碼更好寫的方向來前進，微軟在 2012 年也推出了 <a href="http://www.typescriptlang.org/">TypeScript</a> 這個 compile to JavaScript language，不過他的方向卻不一樣，TypeScript 是一個 JavaScript 的 superset，意思就是所有的 JavaScript 都是合法的 TypeScript，而 TypeScript 多了一些語法，加入了一些新功能，不過這些新的語法完全都不用也是可以正常的寫程式，給 TypeScript compiler 編譯。</p>

<p>TypeScript 顧名思義，它著重的在資料型別這個部分，JavaScript 是 weak type （弱型別）的語言，寫起來算是很方便，不過這個特性卻也是一些問題的來源，首先最常見到的是因為資料型態不嚴謹而造成的 bug，第二個常被提出來的就是為了實做 weak type 而造成的 performance 下降，因此一直有一些聲音在對抗弱型別這個特性，第一個是 Douglas Crockford 先出聲的，不過一開始是從程式碼的嚴謹和可靠性來說的，因為他當時主力在 <a href="http://www.jslint.com/">JSLint</a> 上，所以對於可靠的程式碼的要求比較高，JSLint 一度還把這項檢查放入，後來接著 Google V8 引擎也對沒有改變型別的變數作了最佳化，然後有 TypeScript，接著未來的 ES7 也可能會加入型別宣告的語法進來，這部分似乎是 Douglas 參與推動的，然後 Google 也打算推出 <a href="https://docs.google.com/document/d/11YUzC-1d0V1-Q3V0fQ7KSit97HnZoKVygDxpWzEYW0U/mobilebasic?pli=1&amp;viewopt=127">AtScript</a> 的樣子，AtScript 是 TypeScript 的 superset，更進一步增加了型別相關的特性進來。</p>

<p>TypeScript 是一個介於中間的語言，當然為了支援  JavaScript 不能直接把整個環境都改成強型別的，所以 TypeScript 的作法是讓形別的宣告變為可省略的，如果沒有宣告型別，則一切和以前一樣，如果你的變數有宣告型別，那個變數才會是強型別，在編譯的時候，如果把不同型別的值給它，就會跑出警告訊息，像是 JSLint 一樣。TypeScript 的型別宣告語法中，一些比較簡單的可以和程式碼一起寫：</p>

<pre><code>var str:string;
</code></pre>

<p>可是稍微複雜一點，和物件有關係的話，就要獨立寫一段宣告的程式碼了：</p>

<pre><code>interface HotkeysProvider {
    template: string;
    includeCheatSheet: boolean;
    get(combo: string): ng.hotkeys.Hotkey;
    toggleCheatSheet(): void;
}
</code></pre>

<p>這段宣告其實是完全獨立於程式碼的邏輯本身，全部砍掉程式也可以運作，本身不牽涉到任何邏輯，所以可以完全獨立出去，在 TypeScript 中稱為 type definition（型別定義） ，常用的副檔名是 <code>.d.ts</code>，感覺上很像是 C 語言的 header file，其實我對於 TypeScript 本身的發展是不太樂觀的，覺得他的佔有率永遠不會起來，但是它的型別定義這塊我到覺得是大有可為，主因是目前沒有比較在業界有使用的到型別定義的語言，寫標準所用的 <a href="http://www.w3.org/TR/WebIDL/#idl">WebIDL</a> 普極度實在很低，相關的工具開發和支援實在很少，反而 .d.ts 檔知道的人比較多，編譯器也都有了，而且多虧 TypeScript 有開放原碼，事實上也有其它專案有借助 TypeScript 定義檔，像是我在用的 <a href="http://ternjs.net/">TernJS</a> 這個 JavaScript 自動補完工具，就有提供一個 <a href="https://github.com/marijnh/tern/blob/master/bin/from_ts">from_ts 工具</a> 可以把 .d.ts 檔轉成它可以讀的定義檔案，加上有 <a href="http://definitelytyped.org/">DefinitelyType</a> 專案，各種不同 JavaScript Library 的定義檔都已經有了，所以 TernJS 就可以利用這些資源，提供各種 Library 的自動補完支援了，不過前提是使用者要知道有這些東西，官方文件其實沒有把這塊講得這麼連貫。</p>

<p>除了 TernJS 的應用外，我相信這些定義檔還可以讓編輯器或是 IDE 可以提供更多的輔助功能，像是或許可以拿來產生編輯器用的 syntax 定義檔，在編寫程式時直接提出警告等等，其實現在想的到的這些功能微軟的 Visuall Studio 應該都有了，不過有個公定格式做中介還是比較方便第三方應用，雖然目前好像只有看到 TernJS 的第三方應用，有些可惜，而且微軟的 Compiler 常常偷改，TernJS 提供的 <code>from_ts</code> 是需要使用到一些 compiler 內部的 function 才能用的，而從我接觸 TernJS 以來，微軟至少已經改過兩次改很大造成 <code>from_ts</code>完全不能用的情形。</p>

<p>總之微軟的 TypeScript 我覺得使用人數也不會有什麼大變化，但是定義檔 <code>.d.ts</code> 的部分倒是比較可以期待，變成半個 JS 用的標準介面定義文件格式，競爭對手的話應該是 WebIDL 吧，不過 WebIDL 比較不親切，也不太有人去實做和推廣他的應用，ES7 的型別暗示其實是只是針對那五個基本型別為主，沒有像 WebIDL 和 TypeScript 那樣完整。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000823" baseName="hide-apache-version">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-12-03</b:date>
				<b:time>12:09:41</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>隱藏 Apache 版本號</b:title>
			<b:content>
				<b:summary>之前有想過是不是能隱藏 HTTP Server 的資訊，不過 Server 這個 Header 不可省略的樣子，所以最少也是要給個 Server Name，當然也可以改程式碼給假的，不想改的話最多就是把版本號隱藏起來了： ServerSignature Off ServerTokens Prod...</b:summary>
				<b:mainContent><p>之前有想過是不是能隱藏 HTTP Server 的資訊，不過 <strong>Server</strong> 這個 Header 不可省略的樣子，所以最少也是要給個 Server Name，當然也可以改程式碼給假的，不想改的話最多就是把版本號隱藏起來了：</p>

<pre><code>ServerSignature Off
ServerTokens Prod
</code></pre>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000822" baseName="jspcvim">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-11-30</b:date>
				<b:time>18:37:08</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>JavaScript Parameter Complete</b:title>
			<b:content>
				<b:summary>前陣子在 FB 上說過突然有想做的 Vim Plugin 已經開發的差不多，所以把 1.0 放上了，這個又是自動補完的 plugin，架構設計上是沒針對 JavaScript，不過目前我只有針對 JavaScript 做好補完選項，這個 Plugin 一開始是為了處理 Web Crypto API，這組 API 在做加解密的時候是需要指定演算法，不過演算法的名稱裡面，有一些有 - 在裡面，像是 SHA-256 之類的，以前這種字串的關鍵字，還可以加到 syntax 裡面，然後用 syntax complete 來處理，不過 - 不是 JavaScript 的關鍵字，會被忽略掉，為了處理這個問題，就開發了這個 complete function，簡稱 jspc.vim。 這個 complete function 的功能自動補完各種函數內的字串參數，像是剛剛提到的 crypto...</b:summary>
				<b:mainContent><p>前陣子在 FB 上說過突然有想做的 Vim Plugin 已經開發的差不多，所以把 1.0 放上了，這個又是自動補完的 plugin，架構設計上是沒針對 JavaScript，不過目前我只有針對 JavaScript 做好補完選項，這個 Plugin 一開始是為了處理 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.crypto">Web Crypto API</a>，這組 API 在做加解密的時候是需要指定演算法，不過演算法的名稱裡面，有一些有 <code>-</code> 在裡面，像是 <code>SHA-256</code> 之類的，以前這種字串的關鍵字，還可以加到 syntax 裡面，然後用 syntax complete 來處理，不過 <code>-</code> 不是 JavaScript 的關鍵字，會被忽略掉，為了處理這個問題，就開發了這個 complete function，簡稱 <a href="https://github.com/othree/jspc.vim">jspc.vim</a>。</p>

<p>這個 complete function 的功能自動補完各種函數內的字串參數，像是剛剛提到的 crypto algorithm，還有各種事件名稱，Media Type 等，其實越做發現越多這類的選項，目前支援的東西包括：</p>

<ul>
<li>Web Crypto Algorithm Name</li>
<li>Event Name for DOM, jQuery, Backbone</li>
<li>HTTP Methods for XHR, fetch</li>
<li>HTTP Headers, some values</li>
<li>Locales for Intl</li>
<li>HTML Tag Name for DOM API</li>
<li>Image Type for canvas.toBlob, canvas.toDataURL</li>
</ul>

<p>這個 function 的原理還蠻簡單的，如果抓到游標位置看起來在字串內（以下用底線代表游標位置）：</p>

<pre><code>n.addEventListener('cl_
</code></pre>

<p>然後就會往前找看看這是不是一個 function call 的內部，是的話去看看 function name，像是上面的範例就會找 <code>addEventListener</code>，然後就去內部先定義好的表單找看有沒有候選的項目，有的話就會根據字串內容去做過濾後然後給回來。</p>

<p>如果前面有其他參數是不會受影響的，不過 function name 和字串要在同一行，然後除了 JavaScript 的語法用 <code>(</code> 做為判斷是不是 function call 之外，其實還有支援 CoffeeScript 那種只用空白接餐處的寫法：</p>

<pre><code>n.addEventListener 'cl_
</code></pre>

<p>其實判斷方法很簡單，就是找空白前面不是 <code>,</code> 的話就是了，一時還想不到是不是有其他種語言的 function call 的語法跳脫這兩種寫法的，我想應該可以支援大部分的程式語言了，不過裡面的候選資料還需要人來做苦工，所以我只弄了 JavaScript 的 Web 相關的東西，然後同時給 CoffeeScript、LiveScript、TypeScript 用，安裝方法就照用 Pathogen 那套裝法就可以了裝起來直接用，因為實做上是把原本的 omni complete function 包起來，所以不用特別做什麼設定，就可以和其它自動補完的輔助工具合作，像是 <a href="https://github.com/othree/vim-autocomplpop">vim-autocomplpop</a> 和 <a href="https://github.com/Shougo/neocomplcache.vim">neocomplcache.vim</a>，其實本來是獨立一個 function 的，但是這樣要和 Neo Complete Cache 整合太難了，乾脆就走 Vim 的 omnicomplete 路線，結果意外的方便，最後就是有什麼問題歡迎提出摟～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000821" baseName="fetch">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-11-25</b:date>
				<b:time>20:48:20</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>前端工程師都應該知道的 fetch</b:title>
			<b:content>
				<b:summary>之前介紹 ES6 Promise 的時候就有提到一些過去的標準應該也可以更新到來支援 Promise，沒想到就看到 WHATWG 的 fetch 了，fetch 就是個 XMLHttpRequest（XHR）的 替代品，幾乎是集了這幾年前端領域 Pattern 之大成。 首先是命名很簡單，和 XHR 完全不一樣，那個時期的網路標準的命名都很繁雜，尤其像是 XML Schema 的那個時期，聽說是找了些語言學家來一起制訂的，那個時期的東西很多都名稱弄的很冗長，當然不可否認這樣有個好處是比較容易理解東西的源由，像 XHR 看名字就可以知道其實主要目的是為了抓 XML，而那個時期會想要抓 XML 大概就是為了 SOAP 協定的 Web Service 吧，只是真的用來抓 XML 的已經很少了，一直用這個名稱早就已經覺得很奇怪了，至於新的 fetch 顧名思義就是為了抓東西用的，反而和現在 XHR 使用的情境很符合，而且命名很簡單，好記，就像是 jQuery 的 on 取代了...</b:summary>
				<b:mainContent><p>之前介紹 ES6 Promise 的時候就有提到一些過去的標準應該也可以更新到來支援 Promise，沒想到就看到 WHATWG 的 <a href="https://fetch.spec.whatwg.org/">fetch</a> 了，fetch 就是個 <a href="https://developer.mozilla.org/zh-TW/docs/DOM/XMLHttpRequest">XMLHttpRequest</a>（XHR）的 替代品，幾乎是集了這幾年前端領域 Pattern 之大成。</p>

<p>首先是命名很簡單，和 XHR 完全不一樣，那個時期的網路標準的命名都很繁雜，尤其像是 XML Schema 的那個時期，聽說是找了些語言學家來一起制訂的，那個時期的東西很多都名稱弄的很冗長，當然不可否認這樣有個好處是比較容易理解東西的源由，像 XHR 看名字就可以知道其實主要目的是為了抓 XML，而那個時期會想要抓 XML 大概就是為了 SOAP 協定的 Web Service 吧，只是真的用來抓 XML 的已經很少了，一直用這個名稱早就已經覺得很奇怪了，至於新的 fetch 顧名思義就是為了抓東西用的，反而和現在 XHR 使用的情境很符合，而且命名很簡單，好記，就像是 jQuery 的 <code>on</code> 取代了 <code>addEventListener</code> 一樣。（PS: 另外有一個叫 <a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/Beacon/Overview.html">sendBeacon</a> 的是只管送出，不管回來的東西的。）</p>

<p>第二個特點是使用了 <a href="https://blog.othree.net/log/2013/06/19/options-object/">Options Object</a>，不過 XHR 倒也不是收很多參數，他的設計是先產生物件後才對它操作：</p>

<pre><code>var xhr = new XMLHttpRequest();
xhr.open('GET', 'test.html');
xhr.setRequestHeader('Tester-Name', 'mike');
xhr.setRequestHeader('Tester-Name ', 'peter');
xhr.send();
</code></pre>

<p>雖然沒有搞不清楚參數順序的問題，卻也是多了很多步驟才能達成目標，不過其實產生了 XHR 物件但是卻不送出 request 的使用情境我實在想不太到，大概是因此，新的 fetch 才改成像是 jQuery 的 <code>$.ajax</code> 那樣，產生物件時直接就發出 request 了吧。</p>

<p>第三個特點當然就是回傳的是 ES6 Promise 物件，另外也支援 FormData 等等新東西，不過要說能不能完全取代 XHR 呢？目前看起來是不行的，最主要是因為 ES6 Promise 並沒有支援 progress 的機制，而且已經不是 event-based 的物件了，所以沒辦法抓上傳進度之類的資訊。</p>

<p>因為這個 spec 還很新，目前是沒瀏覽器支援，不過 Github 有提供一個 <a href="https://github.com/github/fetch">polyfill</a> 了，把基本的功能都做好了（還有缺一些比較少用到的細節），有興趣想開始用的人可以從這邊開始，大概要注意的有兩個，第一個是因為它是用 ES6 Promise，所以還要引入 ES6 Promise polyfill，第二個是回傳資料的處理，雖然 fetch 在發 request 的時候和 jQuery 的設計很像，不過回傳的資料處理方式就差距比較大了。</p>

<p>jQuery 的 ajax 收到 Response Body 時，會自動根據 Header 的 Content-Type 來處理，像是 JSON 會自動用 <code>JSON.parse</code> 把文字轉成 JS 物件，不過 fetch 不會，根據 spec 所說， fetch 算是一個底層的 library，所以這種事情就要自己來了：</p>

<pre><code>fetch("https://pk.example/berlin-calling.json", {mode:"cors"})
  .then(res =&gt; {
  if(res.headers.get("content-type") == "application/json") {
    return res.json()
  } else {
    throw new TypeError()
  }
}).then(processJSON)
</code></pre>

<p>fetch 需要你自己在程式碼裡面判斷回傳資料的格式是什麼，然後可以用它提供的 method 擷取到相對應格式的資料，像是這個例子中抓的是 JSON 格式的資料，就直接執行 Response 物件的 <code>json</code> 這個 method，當然你也可以不判斷就直接執行 <code>json()</code>，只是無法 parse 時會直接 throw error 出來，又因為在 Promise 串接過程中，後面就會跑到 reject 的 callback function 那邊去，除了 <code>json</code> 外，其他支援的還有 <code>arrayBuffer</code>、<code>blob</code>、<code>formData</code> 和 <code>text</code>。這些從 response 物件中讀取 body 資料出來的動作（spec 中稱為 consume）只能操作一次，如果真的很想讀很多次，建議是直接把回傳資料的那個 Promise 儲存起來，還有一個方法是用 clone 複製 Response 物件，不確定那個方法好就是了，這部分這樣設計的原因似乎是為了處理少一點事情，讓效能比較好。</p>

<p>而除了 Response Body 外，其它的回傳資訊像是 Response Header 等，都有新定義的物件來儲存，不過沒有很複雜，設計的很直覺，和送出去的 Options Object 很接近。不過講到 Header 就有一點還是要說一下，其實 HTTP Header 是可以重複送出一樣的 key 的，先不管合不合規範，現實是 HTTP Protocol 的實作都還可以處理這種狀況，以前的 XHR 也可以做出這樣的行為，印象中也有 framework 會這樣用，不過不太確定，總之 fetch 因為 Header 是給 Options Object 中的一個物件，而物件的 key 不能重複，所以不會允許這種行為出現，我個人是覺得這樣其實也比較好啦。</p>

<p>目前這個標準還未廣為人知，但是我是覺得前景非常看好，Spec 寫的也異常詳細，雖然不能把 XHR 的所有功能都取代，不過大部分的 XHR 應用都可以用的上了，也有 Github 提供的 polyfill，應該很容易吸引人進去使用，加上也沒其它的類似候選標準，除了沒有 progress 和回來的資料格式要自己判斷外，應該是沒什麼缺點了，而且判斷資料格式的部分也是可以自己寫點程式碼把他處理掉，所以嚴格一點說的話，問題就剩下沒有 progress 可以看這點了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000820" baseName="osx-yosemite-close-button-not-center">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-11-15</b:date>
				<b:time>00:12:43</b:time>
			</b:datetime>
			<b:category>mac</b:category>
			<b:title>OSX 10.10 紅綠燈</b:title>
			<b:content>
				<b:summary> 有用 OSX 的人可能都會有個感覺，就是左上角紅綠燈的 icon 裡面東西歪歪的，我會感覺紅色的往左上，綠色的往左下，不過用抓圖的抓下來放大看卻又發現其實是置中的，所以我想到的可能性就是螢幕的 subpixel 問題，找了手上能拍最大的鏡頭拍來看看： 發現排列是 RGB 從左到右，不過其實這只解釋了紅色叉叉往左偏而已，往上和綠色的完全無法解釋，尤其是綠色，綠色的點剛好是在中間，我覺得應該只剩下視覺錯覺的可能性了吧，不過其實我是想說，這個錯覺的感覺不知道是只有少部分人有，還是美國人都不會有感覺，最糟的情形是他們雖然有感覺，但是因為給的 asset 是正確的所以就沒進一步處理了。 在 Steve Jobs 過世之後，其實我不太喜歡網路上很多人說 Tim Cook 表現的差很多之類的言論，不過對於這個問題，如果是最後一種情形，我真的覺得少了 Jobs 有差，然後仔細想了一下，好像現在蘋果真的少了個對軟體介面細節這麼在意的人了，John Ive 是硬體工業設計那塊的，其他比較高層的好像就沒有聽說有誰是對這塊特別要求的人，突然覺得對蘋果未來有點擔心......</b:summary>
				<b:mainContent><p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/15602529787/" title="OSX 10.10 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7479/15602529787_c78310e49b_b.jpg" width="1024" height="267" alt="OSX 10.10" srcset="https://farm8.staticflickr.com/7479/15602529787_c78310e49b_b.jpg 1024w, https://farm8.staticflickr.com/7479/15602529787_28fd7867cf_h.jpg 1600w" /></a></p>

<p>有用 OSX 的人可能都會有個感覺，就是左上角紅綠燈的 icon 裡面東西歪歪的，我會感覺紅色的往左上，綠色的往左下，不過用抓圖的抓下來放大看卻又發現其實是置中的，所以我想到的可能性就是螢幕的 subpixel 問題，找了手上能拍最大的鏡頭拍來看看：</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/15602529487/" title="OSX 10.10 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7544/15602529487_6961deea28_b.jpg" width="1022" height="1024" alt="OSX 10.10" srcset="https://farm8.staticflickr.com/7544/15602529487_6961deea28_b.jpg 1024w" /></a></p>

<p>發現排列是 RGB 從左到右，不過其實這只解釋了紅色叉叉往左偏而已，往上和綠色的完全無法解釋，尤其是綠色，綠色的點剛好是在中間，我覺得應該只剩下視覺錯覺的可能性了吧，不過其實我是想說，這個錯覺的感覺不知道是只有少部分人有，還是美國人都不會有感覺，最糟的情形是他們雖然有感覺，但是因為給的 asset 是正確的所以就沒進一步處理了。</p>

<p>在 Steve Jobs 過世之後，其實我不太喜歡網路上很多人說 Tim Cook 表現的差很多之類的言論，不過對於這個問題，如果是最後一種情形，我真的覺得少了 Jobs 有差，然後仔細想了一下，好像現在蘋果真的少了個對軟體介面細節這麼在意的人了，John Ive 是硬體工業設計那塊的，其他比較高層的好像就沒有聽說有誰是對這塊特別要求的人，突然覺得對蘋果未來有點擔心...</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000819" baseName="es6-promise">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-11-13</b:date>
				<b:time>23:54:08</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>ES6 Promise</b:title>
			<b:content>
				<b:summary>ES6 Promise 目前各家瀏覽器的支援程度雖然還沒到可以直接用的程度，但是目前已經有非常多的 polyfill，差不多是可以開始使用的時候了。 如果習慣了 jQuery 設計的 Deferred 物件，應該會對於 ES6 的 Promise 設計很不習慣吧，相較於 jQuery 是產生好物件然後提供一些 method 做操作，要不要封裝起來也是開發者的事，ES6 Promise 的設計更是強調了封裝的特性，要怎麼 resolve、reject，在一開始就要決定好了，只有在建構函數裡面碰的到 resolve 和 reject 的觸發點： new Promise(function (resolve, reject) { //... }); 這樣的設計雖然在物件封裝上比較嚴謹，但是其實會讓一些程式碼多了一層的縮排，例如本來用 jQuery Deferred 包起來的 XHR： function JQXHR(url) { var...</b:summary>
				<b:mainContent><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">ES6 Promise</a> 目前各家瀏覽器的支援程度雖然還沒到可以直接用的程度，但是目前已經有非常多的 polyfill，差不多是可以開始使用的時候了。</p>

<p>如果習慣了 jQuery 設計的 Deferred 物件，應該會對於 ES6 的 Promise 設計很不習慣吧，相較於 jQuery 是產生好物件然後提供一些 method 做操作，要不要封裝起來也是開發者的事，ES6 Promise 的設計更是強調了封裝的特性，要怎麼 resolve、reject，在一開始就要決定好了，只有在建構函數裡面碰的到 resolve 和 reject 的觸發點：</p>

<pre><code>new Promise(function (resolve, reject) {
  //...
});
</code></pre>

<p>這樣的設計雖然在物件封裝上比較嚴謹，但是其實會讓一些程式碼多了一層的縮排，例如本來用 jQuery Deferred 包起來的 XHR：</p>

<pre><code>function JQXHR(url) {
  var xhr = new XMLHttpRequest();
  var dfd = new $.Deferred();
  xhr.onreadystatechange = function () {
    if (xhr.readyState == 4) { dfd.resolve(xhr.response); }
  }
  xhr.open('GET', url);
  xhr.send();
  return dfd.promise();
}
</code></pre>

<p>用 ES6 Promise 就要改寫成：</p>

<pre><code>function ESXHR(url) {
  var xhr = new XMLHttpRequest();
  var dfd = new Promise(function (resolve) {
    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4) { resolve(xhr.response); }
    }
  });
  xhr.open('GET', url);
  xhr.send();
  return dfd;
}
</code></pre>

<p>第二個差異就在於回傳的 thenable 物件要怎麼把結果改掉，以前 jQuery 的時候可以在 callback 裡面回傳新的 Deferred 物件改結果：</p>

<pre><code>dfd.then(null, function () {
  return $.Deferred().resolve();
});
</code></pre>

<p>沒特別傳 Deferred 物件的話不管用 <code>then</code> 串接幾次的話結果都不會改變，不過 ES6 Promise 就不一樣了，不管是 resolve 狀況還是 reject 狀況，<code>then</code> 回傳的預設就是一個新的 resolved 狀態的 Promise 物件。那要怎樣改變狀態呢？這裡就要用 <code>throw new Error()</code> 了。在 ES6 Promise 的 <code>then</code> 裡面，不管是 resolve 還是 reject 的 handler，都是回傳任意值會讓後面拿到新的 resolved 的 Promise 物件，而如果在執行中 throw error 出去，就會讓後面拿到 rejected 的 Promise 物件：</p>

<pre><code>dfd.then(function (val) {
  if (val === 0) {
    throw new Error('');
  }
});
</code></pre>

<p>然後就是 rejected 狀態的 Promise 也是有值的，如果是 throw error 產生的，那就是看 throw 什麼東西，那個東西就會變成新的 Promise 物件的值，而以往手動 throw error 時，為了相容性都會產生 Error 物件，在這邊就不必如此了，其實可以隨便傳想要給後面使用的值。</p>

<p>再來，有時候只想要處理 reject 的狀況，會寫成：</p>

<pre><code>dfd.then(null, function () {
  //rejected handler
});
</code></pre>

<p>有個 null 放前面其實蠻討厭的，不過 ES6 有提供一個 <code>catch</code> 可以用： </p>

<pre><code>dfd.catch(function () {
  //rejected handler
});
</code></pre>

<p>這個以前倒是沒有類似的東西，蠻方便的。大概瞭解到這樣就可以使用 ES6 Promise 了，另外還有 <code>Promise.all</code> 和 <code>Promise.race</code> 可以做和 <code>jQuery.when</code> 類似的事情（race 是新的控制），至於我為什麼說現在差不多可以開始使用呢，除了 Polyfill 齊全外，其實還有一個原因是一些新的網路標準也開始使用 ES6 Promise 了，像是 <a href="http://www.w3.org/TR/WebCryptoAPI/">Web Crypto</a>，看 spec 比較不明顯，不過看 MDN 的<a href="https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto">介紹</a>，就有列出 encrypt、decrypt、sign 等花時間的 method 回傳都是 Promise 物件，實做就可以丟到背景的 Worker 去處理，才不會把 UI 卡住。而除了 Web Crypto 外，還有像是 ES7 可能會有的 <a href="http://jakearchibald.com/2014/es7-async-functions/">await</a> 語法也是要接 Promise 物件，總之是個未來趨勢，我覺得現在比較尷尬的是在 ES6 Promise 出來前的一堆標準都是用 event base 設計的，像是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader">File Reader</a> 之類的，不知道有沒有機會慢慢都改到 Promise。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000818" baseName="ubuntu-1404-mt4">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-11-03</b:date>
				<b:time>17:42:28</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>Ubuntu 14.04 與 MovableType 4.x</b:title>
			<b:content>
				<b:summary>前一篇文章提到我為 SSL 安全性升級到 Ubuntu 14.04，其實升級之後遇到一些 MovableType 的相容性問題，Ubuntu 在 12.04 的時候還是用 Perl 5.14，不過到 14.04 時，Perl 升級到 5.18 了，順便提一下現在最新的穩定版是 5.20，不過 5.18 和 5.20 是同時都有在維護的。 然後我的 MovableType 是用很久以前的 4.38，用新的 Perl 會跑不起來，不過我也不太想升級，一來是 License 問題，二來是新的 MT 一個很大的架構改變是他變成是多 blog 系統，我也不太喜歡這點。總之剩下的方法就是想辦法修 bug，或是用舊的 Perl 跑，顯然後者容易許多，然後我也找到 gugod 開發的 perlbrew...</b:summary>
				<b:mainContent><p>前一篇文章提到我為 SSL 安全性升級到 Ubuntu 14.04，其實升級之後遇到一些 MovableType 的相容性問題，Ubuntu 在 12.04 的時候還是用 Perl 5.14，不過到 14.04 時，Perl 升級到 5.18 了，順便提一下現在最新的穩定版是 5.20，不過 5.18 和 5.20 是同時都有在維護的。</p>

<p>然後我的 MovableType 是用很久以前的 4.38，用新的 Perl 會跑不起來，不過我也不太想升級，一來是 License 問題，二來是新的 MT 一個很大的架構改變是他變成是多 blog 系統，我也不太喜歡這點。總之剩下的方法就是想辦法修 bug，或是用舊的 Perl 跑，顯然後者容易許多，然後我也找到 gugod 開發的 <a href="http://perlbrew.pl/">perlbrew</a> 這工具，類似於Ruby 的 <a href="http://rvm.io/">RVM</a>，c9s 也有寫一篇文章<a href="http://perlbrew.pl/Perlbrew-%E4%B8%AD%E6%96%87%E7%B0%A1%E4%BB%8B.html">介紹</a>。</p>

<p>比較有趣的是我用了 perlbrew 安裝好 Perl 5.14 後，用 <code>which perl</code> 找到 Perl 5.14 執行檔位置然後手動修改 mt.cgi 等檔案，用 mt-check 檢查發現還缺 DBI 的套件，就用升級前就已經裝好的 cpanminus 裝了，不過怎麼裝都顯示正常但是 MT 就是一直抓不到，看了一下 cpanm 檔案原始碼才發現它用的 perl 是：</p>

<pre><code>#!/usr/bin/perl
</code></pre>

<p>心想 gugod 怎麼可能不處理這個問題，於是搜尋一下發現可以用 <a href="http://perlbrew.pl/Perlbrew-and-Friends.html">perlbrew 安裝 cpanm</a>：</p>

<pre><code>perlbrew install-cpanm
</code></pre>

<p>看了安裝出來的 cpanm 用的 perl 來源是不一樣的：</p>

<pre><code>#!/usr/bin/env perl
</code></pre>

<p>這樣用 cpanm 裝的 Perl 套件總算可以用了，之後還有一個 5.14.2 和 5.14.4 的差異造成的錯誤，就照網路上找到的<a href="http://www.everitz.com/2012/06/20/mt-notifier-defined-hash-is-deprecated-error/">文章</a>修正了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000817" baseName="ssl-config">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-11-01</b:date>
				<b:time>16:45:02</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>SSL 設定更新</b:title>
			<b:content>
				<b:summary> 因為剛好我的 StartSSL 免費憑證要過期了，所以趁這次更新憑證的同時順便把一些過時的設定都改掉，不然之前我的評等已經新漏洞的關係掉到 F 了，做的事情也不複雜，第一個是把 SSLv3 也關掉： SSLProtocol all -SSLv2 -SSLv3 然後限制 Cipher Suite： SSLCipherSuite AES256+EECDH:AES256+EDH 這組 Cipher Suite 也是網路上找的，不過忘了留下連結，Cipher Suite 的建議組合網路上還蠻好找的，我用的這組基本上就是限制比較多，所以不少舊環境會無法建立連線，像是 Android 2、IE 6、Java 環境等，不過是很可以接受的程度。 光這樣的設定評等已經不錯了，不過會有個橘色字樣說不支援 TLS_FALLBACK_SCSV，會有被攻擊的危險，研究過後發現要升級 OpenSSL，然後我的系統是 Ubuntu 12.04 LTS，沒有新版的 OpenSSL，雖然也可以自己編譯，不過我還是決定升上 14.04 LTS。 另外有個特別被 highlight 的項目是我的憑證的 trust...</b:summary>
				<b:mainContent><p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/15059214463/" title="SSL Lab test by othree, on Flickr"><img src="https://farm8.staticflickr.com/7553/15059214463_004dcbfbfd_b.jpg" width="1024" height="670" alt="SSL Lab test" srcset="https://farm8.staticflickr.com/7553/15059214463_004dcbfbfd_b.jpg 1024w, https://farm8.staticflickr.com/7553/15059214463_f3656ce16a_h.jpg 1600w" /></a></p>

<p>因為剛好我的 StartSSL 免費憑證要過期了，所以趁這次更新憑證的同時順便把一些過時的設定都改掉，不然之前我的評等已經新漏洞的關係掉到 F 了，做的事情也不複雜，第一個是把 SSLv3 也關掉：</p>

<pre><code>SSLProtocol all -SSLv2 -SSLv3
</code></pre>

<p>然後限制 Cipher Suite：</p>

<pre><code>SSLCipherSuite AES256+EECDH:AES256+EDH
</code></pre>

<p>這組 Cipher Suite 也是網路上找的，不過忘了留下連結，Cipher Suite 的建議組合網路上還蠻好找的，我用的這組基本上就是限制比較多，所以不少舊環境會無法建立連線，像是 Android 2、IE 6、Java 環境等，不過是很可以接受的程度。</p>

<p>光這樣的設定評等已經不錯了，不過會有個橘色字樣說不支援 TLS_FALLBACK_SCSV，會有被攻擊的危險，研究過後發現要升級 OpenSSL，然後我的系統是 Ubuntu 12.04 LTS，沒有新版的 OpenSSL，雖然也可以自己編譯，不過我還是決定升上 14.04 LTS。</p>

<p>另外有個特別被 highlight 的項目是我的憑證的 trust chain 中有一個是用 SHA1 簽章的，然後那個其實是 CA 的，就是從 Start SSL 抓的：</p>

<pre><code>http://www.startssl.com/certs/sub.class1.server.ca.pem
</code></pre>

<p>在他的 cert 目錄下找了一下看到疑似是 SHA256 簽的：</p>

<pre><code>http://www.startssl.com/certs/class1/sha2/pem/sub.class1.server.sha2.ca.pem
</code></pre>

<p>改成這個後看來就沒警告了，我想應該沒搞錯才是 :P</p>

<p>到這樣我發現總評等已經到 A 了，但是分數卻很難更高，所以先研究了一陣子怎樣到 A+，後來發現是我曾經開過的 <a href="https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security">Strict Transport Security(HSTS)</a>，暫時拿掉後忘了放回來，加上 HSTS Header 後總評等就可以上到 A+ 了。</p>

<p>設定到這樣其實已經很足夠了，不過我還是對於其中的 Protocol Support 這項沒有滿分感到很好奇，搜尋一陣子發現到要把 Protocol 關到只剩下 TLS 1.2 才會滿分，可是這樣支援度會很慘烈，因為還很多客戶端是只有到 TLS 1.0 的，所以就只抓個圖紀念一下。最後還花了點時間設定 <a href="http://blog.gslin.org/archives/2014/06/21/4786/ocsp-stapling/">OCSP Stapling</a>，可以提昇效能，因為把 <a href="http://gca.nat.gov.tw/ocsp/index.html">OCSP</a> 上的資訊都抓下來放在本主機給客戶端用，不過目前感覺不到差異就是，設定也不難：</p>

<pre><code>SSLUseStapling on
SSLStaplingCache shmcb:/tmp/stapling_cache(128000)
</code></pre>

<p>好像放這兩行就可以了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000815" baseName="ie-video">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-10-24</b:date>
				<b:time>12:01:15</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>IE video 標籤記憶體問題</b:title>
			<b:content>
				<b:summary>最近遇到一個 IE 會 crash 的問題，找很久才發現是記憶體問題，然後因為那頁有用到大量的 &lt;video&gt; 標籤，所以就直接鎖定目標，結果發現果然 video 就是問題元兇，測試到 IE 11 還是同樣行為。 目前發現的問題有兩層，第一層問題是如果 IE 在遇到 video 沒有設定 poster 時，會自動初始化整個 video 元件，去把影片抓下來，只為了產生 poster 圖片，第二層問題，就是這個初始化 video 元件的動作，會吃掉很多的記憶體，即使我的影片只有五百多kb，IE 還是一個 video 就吃掉數十 mb 的記憶體，即使這些 video 都沒有播放，甚至還用 CSS 藏起來了，然後因為一個頁面上有很多的影片輪流播放，所以把記憶體吃光後就當掉了。 要解決這個問題，一開始是想說設定正確的 poster 圖片就好了，確實解決了第一層的問題，但是因為影片還是會輪撥，遲早會把記憶體吃光，所以試了幾個方法想要避免這種情形，像是把 dom node detach...</b:summary>
				<b:mainContent><p>最近遇到一個 IE 會 crash 的問題，找很久才發現是記憶體問題，然後因為那頁有用到大量的 <code>&lt;video&gt;</code> 標籤，所以就直接鎖定目標，結果發現果然 video 就是問題元兇，測試到 IE 11 還是同樣行為。</p>

<p>目前發現的問題有兩層，第一層問題是如果 IE 在遇到 video 沒有設定 poster 時，會自動初始化整個 video 元件，去把影片抓下來，只為了產生 poster 圖片，第二層問題，就是這個初始化 video 元件的動作，會吃掉很多的記憶體，即使我的影片只有五百多kb，IE 還是一個 video 就吃掉數十 mb 的記憶體，即使這些 video 都沒有播放，甚至還用 CSS 藏起來了，然後因為一個頁面上有很多的影片輪流播放，所以把記憶體吃光後就當掉了。</p>

<p>要解決這個問題，一開始是想說設定正確的 poster 圖片就好了，確實解決了第一層的問題，但是因為影片還是會輪撥，遲早會把記憶體吃光，所以試了幾個方法想要避免這種情形，像是把 dom node detach 甚至砍掉之類的，不過都沒有效果，吃掉的記憶體不會還回來，最後只好讓 IE 不做輪撥了。</p>

<p>這個問題我看 stackoverflow 好像也沒有，看來在單一頁面上放很多 video 的使用情形真是很少見啊。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000814" baseName="resource-hints">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-10-23</b:date>
				<b:time>14:18:35</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>Resource Hints</b:title>
			<b:content>
				<b:summary>Resource Hints 是最近剛公開的一個 W3C Working Draft，目前看作者都是 Google 的人，Resource Hints 是依附在 &lt;link&gt; 標籤或是 header 下的，用來告訴瀏覽器有哪些資源可以先讀好的一個慣例語法，範例如下： &lt;link rel="preconnect" href="//example.com"&gt; &lt;link rel="preconnect" href="//cdn.example.com"&gt; &lt;link rel="preload" href="/assets/font.woff" as="font" loadpolicy="next"&gt; &lt;link rel="preload" href="/assets/logo.webp" as="image" loadpolicy="next inert"&gt; 可以發現有兩種 hint，分別是 preconnect 和 preload，當然就照字面上的意思就可以理解了，preconnect 就是先建立好連線，像是 HTTPS 連線就需要先做 handshake...</b:summary>
				<b:mainContent><p><a href="www.w3.org/TR/2014/WD-resource-hints-20141021/">Resource Hints</a> 是最近剛公開的一個 W3C Working Draft，目前看作者都是 Google 的人，Resource Hints 是依附在 <code>&lt;link&gt;</code> 標籤或是 header 下的，用來告訴瀏覽器有哪些資源可以先讀好的一個慣例語法，範例如下：</p>

<pre><code>&lt;link rel="preconnect" href="//example.com"&gt;
&lt;link rel="preconnect" href="//cdn.example.com"&gt;
&lt;link rel="preload" href="/assets/font.woff" as="font" loadpolicy="next"&gt;
&lt;link rel="preload" href="/assets/logo.webp" as="image" loadpolicy="next inert"&gt;
</code></pre>

<p>可以發現有兩種 hint，分別是 <code>preconnect</code> 和 <code>preload</code>，當然就照字面上的意思就可以理解了，<code>preconnect</code> 就是先建立好連線，像是 HTTPS 連線就需要先做 handshake 交換好加解密用的 key，影響比較直接，<code>preload</code> 當然就是先把特定的檔案拉下來，而且還可以指定要不要先做處理，像是 decode jpg 圖檔之類的動作可以推遲到真的需要圖片時才做。</p>

<p>目前看起來是不適合大量的檔案，應該還是要用來指派較關鍵的一些檔案，像是主要背景、大圖、字形之類的，而且因為可以根據設定 block onload event，拿來讀字形似乎可以避免 FOUT 的狀況，感覺是個看似簡單，但是功能其實還蠻多的新東西。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000813" baseName="node-ffi">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-10-13</b:date>
				<b:time>22:48:39</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>node-ffi</b:title>
			<b:content>
				<b:summary>今年的 JSDC 分享的是 node-ffi，不過我覺得沒講很好，反而練習講得比較好... /* A_A */...</b:summary>
				<b:mainContent><p>今年的 JSDC 分享的是 node-ffi，不過我覺得沒講很好，反而練習講得比較好...</p>

<script async="async" class="speakerdeck-embed" data-id="fcbffc9033fa013238ec56e996df704e" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000812" baseName="bracket">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-10-01</b:date>
				<b:time>01:14:24</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>[</b:title>
			<b:content>
				<b:summary>最近因為 shellshock 的關係，跑去看了 /bin/ 下面的東西，結果突然發現有個執行檔叫做 [。 執行了也完全沒反應，結果和同事討論就上去 stack overflow 來問問看，然後馬上就被回說看看 man [。想不到，原來 shell script 裡面的 if else condition 的 [ ] ，其實就是這個執行檔啊，以前一直以為是個語法的 syntax......</b:summary>
				<b:mainContent><p>最近因為 <a href="http://www.pcworld.com/article/2687857/bigger-than-heartbleed-shellshock-flaw-leaves-os-x-linux-more-open-to-attack.html">shellshock</a> 的關係，跑去看了 <code>/bin/</code> 下面的東西，結果突然發現有個執行檔叫做 <code>[</code>。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15403240745/" title="ls /bin/ by othree, on Flickr"><img src="https://farm4.staticflickr.com/3908/15403240745_b6a14b8fd3_c.jpg" width="400" height="300" alt="ls /bin/" srcset="https://farm4.staticflickr.com/3908/15403240745_b6a14b8fd3_c.jpg 768w" /></a></p>

<p>執行了也完全沒反應，結果和同事討論就上去 stack overflow 來問問看，然後馬上就被回說看看 <code>man [</code>。想不到，原來 shell script 裡面的 if else condition 的 <code>[ ]</code> ，其實就是這個執行檔啊，以前一直以為是個語法的 syntax...</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000811" baseName="hubble-ultra-deep-field">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-09-10</b:date>
				<b:time>02:46:46</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>Hubble Ultra Deep Field</b:title>
			<b:content>
				<b:summary> 前陣子在 Facebook 上看到一篇轉貼文章「地球月球有多大？見過這些圖，你會有莫可名狀的恐懼！ 」是真的蠻震撼的，其實小時候對於宇宙和銀河系的差異是搞不太懂的，嚴格說來是大學畢業之後某個時間點我才搞懂差異，後來更有感覺是看到像是「Star Trek Voyage」，才慢慢有對於宇宙大小的認知，還有這幾年的「宇宙戰艦大河號 2199」，也是在這搞清楚宇宙和銀河系的差異，才瞭解它營造的悲壯感和故事間的關係，不過震撼歸震撼，我還是去查證了一下最後一張照片的真偽。根據我調查的結果，那張照片是真的～ 這張照片和文章內敘述的一樣是哈伯太空望遠鏡所拍下來的，稱為 Hubble Ultra Deep Field（HUDF），不過他的敘述不太正確，那張照片不是曝光四個月，而是花了四個月的時間，拍攝時間分為兩段，第一段是 2003 年 9 月 23 日到 10 月 28 日，第二段時間是同年 12 月 4 日到 2004 年 1 月 15 日，不能持續的拍是因為哈伯太空望遠鏡是在地球的衛星軌道上運行，所以每次公轉只有一些時間可以從固定的角度拍照，在這四個月內總共花了約 400 次的公轉，每次曝光 1200 秒，照片是分四種不同波長的光線曝光，最後疊在一起，合算起來總共的曝光時間大約 11 天。在 2009...</b:summary>
				<b:mainContent><p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/gsfc/14159153437/" title="Hubble Team Unveils Most Colorful View of Universe Captured by Space Telescope by NASA Goddard Photo and Video, on Flickr"><img src="https://farm4.staticflickr.com/3838/14159153437_cffd2fa101_b.jpg" width="1024" height="935" alt="Hubble Team Unveils Most Colorful View of Universe Captured by Space Telescope" srcset="https://farm4.staticflickr.com/3838/14159153437_cffd2fa101_b.jpg 1024w, https://farm4.staticflickr.com/3838/14159153437_7ff20753c3_h.jpg 1600w" /></a></p>

<p>前陣子在 Facebook 上看到一篇轉貼文章「<a href="http://mp.weixin.qq.com/s?__biz=MzA5NTAyNDEzNg%3D%3D&amp;mid=202642759&amp;idx=3&amp;sn=38d925941da74e2e40fc81eff5436736&amp;scene=4#rd">地球月球有多大？見過這些圖，你會有莫可名狀的恐懼！</a> 」是真的蠻震撼的，其實小時候對於宇宙和銀河系的差異是搞不太懂的，嚴格說來是大學畢業之後某個時間點我才搞懂差異，後來更有感覺是看到像是「Star Trek Voyage」，才慢慢有對於宇宙大小的認知，還有這幾年的「宇宙戰艦大河號 2199」，也是在這搞清楚宇宙和銀河系的差異，才瞭解它營造的悲壯感和故事間的關係，不過震撼歸震撼，我還是去查證了一下最後一張照片的真偽。根據我調查的結果，那張照片是真的～</p>

<p>這張照片和文章內敘述的一樣是哈伯太空望遠鏡所拍下來的，稱為 <a href="http://hubblesite.org/newscenter/archive/releases/2004/07/">Hubble Ultra Deep Field</a>（HUDF），不過他的敘述不太正確，那張照片不是曝光四個月，而是花了四個月的時間，拍攝時間分為兩段，第一段是 2003 年 9 月 23 日到 10 月 28 日，第二段時間是同年 12 月 4 日到 2004 年 1 月 15 日，不能持續的拍是因為哈伯太空望遠鏡是在地球的衛星軌道上運行，所以每次公轉只有一些時間可以從固定的角度拍照，在這四個月內總共花了約 400 次的公轉，每次曝光 1200 秒，照片是分四種不同波長的光線曝光，最後疊在一起，合算起來總共的曝光時間大約 11 天。在 2009 年時，Hubble Site 又放出新的<a href="http://hubblesite.org/newscenter/archive/releases/2009/31/">版本</a>，這個版本多拍了三種波長的光線，在 HUDF 中，每個光點都是一個星系（galaxy），以太陽系所在的銀河系來說，估計有一千億到四千億顆恆星，而在 HUDF 中，估計有一萬個星系，而這張照片的範圍約佔天空的千萬分之一，所以在這張照片出來時，天文學家估計宇宙中有超過千億（10<sup>11</sup>）個星系，大家可以想像看看宇宙中會有多少個行星啊～</p>

<p>在 2012 年時，天文學家們又發表了 <a href="http://hyperphysics.phy-astr.gsu.edu/hbase/astro/deepfield.html">Hubble eXtreme Deep Field</a>（XDF），在 HUDF 的範圍內挑了一個區塊，更精細的把這些星系拍下來，而且還發表了一段影片讓大家能夠體會一下 XDF 的範圍在天空中到底多小。</p>

<div class="embed_16_9">
<iframe width="640" height="360" src="//www.youtube.com/embed/jmI9jyjfRLo?rel=0" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>

<p>在今年，2014 年，其實又<a href="http://hubblesite.org/newscenter/archive/releases/2014/27">發表</a>了最新版本的 HUDF，這版集了 10 年來的成果，看起來疊加了 13 種波長的光線，重新上色後，得到的照片就是文章最上面那張了，這張是目前顏色最豐富的版本，不過沒有和 XDF 詳細的比較，也沒有文件說這張圖上可以找到多少星系，目前看到的宇宙中的星系的估計數量都還是可能大於 10<sup>11</sup> 個，不過想想這個估計值也是十年前就出來的，我卻到今年才知道這回事，也真是非常後知後覺啊。</p>

<p>其實我對天文涉獵不多，不過今年倒是意外的有不少接觸，HUDF 是一個，另外還有一個是下面這段影片，個人認為是非常值得花時間看完的，是 <a href="http://zh.wikipedia.org/wiki/%E5%A5%88%E7%88%BE%C2%B7%E5%BE%B7%E8%91%9B%E6%8B%89%E5%8F%B8%C2%B7%E6%B3%B0%E6%A3%AE">Neil DeGrasse Tyson 博士</a>的一場訪談，約一個半小時，內容其實很有趣，最後分享給大家。</p>

<div class="embed_4_3">
<iframe width="640" height="480" src="//www.youtube.com/embed/7vyMSWHpD9o?rel=0" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000810" baseName="commonmark">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-09-07</b:date>
				<b:time>00:16:44</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>CommonMark</b:title>
			<b:content>
				<b:summary> 一年前提過的 Markdown 標準化計畫沒想到真的有成果了，現在叫 CommonMark，不過其實前兩天還叫 Standard Flavored Markdown，只是因為 Markdown 的作者 John Gruber 不爽這個名字會造成混淆，所以 Jeff Atwood 只好很不爽的改名成 CommonMark，有興趣的可以看看他們的 spec，其實與其說是 spec，我覺得根本就是 Test Suite，裡面主要的不同點是列出很多以前不知道該怎麼 parse 的語法，統一訂出應該轉成怎樣的 HTML，算是個讓各家自己實做的引擎可以依據的規範，而且這次 release 除了 spec 外還同時提供了用 C 和 JavaScript 然後照著 CommonMark 實做的兩個 Markdown 引擎，我想 JavaScript 的版本應該很快就會有人拿去用了吧，另外就是 GitHub 應該會有人弄...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/14970705848/" title="Markdown by othree, on Flickr"><img src="https://farm4.staticflickr.com/3920/14970705848_5aba006fc2_m.jpg" width="208" height="128" alt="Markdown"   /></a></p>

<p>一年前提過的 Markdown 標準化計畫沒想到真的有<a href="http://blog.codinghorror.com/standard-flavored-markdown/">成果</a>了，現在叫 <a href="http://commonmark.org/">CommonMark</a>，不過其實前兩天還叫 <a href="http://standardmarkdown.com/">Standard Flavored Markdown</a>，只是因為 Markdown 的作者 John Gruber 不爽這個名字<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/">會造成混淆</a>，所以 Jeff Atwood 只好很不爽的改名成 CommonMark，有興趣的可以看看他們的 <a href="http://jgm.github.io/stmd/spec.html">spec</a>，其實與其說是 spec，我覺得根本就是 Test Suite，裡面主要的不同點是列出很多以前不知道該怎麼 parse 的語法，統一訂出應該轉成怎樣的 HTML，算是個讓各家自己實做的引擎可以依據的規範，而且這次 release 除了 spec 外還同時提供了用 C 和 JavaScript 然後照著 CommonMark 實做的兩個 <a href="https://github.com/jgm/stmd">Markdown 引擎</a>，我想 JavaScript 的版本應該很快就會有人拿去用了吧，另外就是 GitHub 應該會有人弄 Ruby 的版本才是。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000809" baseName="hitcon-x-photographer">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-08-28</b:date>
				<b:time>21:49:19</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>HITCON X 記錄記錄</b:title>
			<b:content>
				<b:summary> 本來今年打算要暑假畢業，因此沒打算接會有太多事前準備工作的職位的，不過等到後來我發現論文來不及，無法這個學期畢業就看開了，還是接了 HITCON X 的攝影組，而且今年還想要試著解決以往的一些問題，實際做了些嘗試，這篇文章的目的就是記錄這些問題和這次的嘗試，可以給以後其他社群研討會的紀錄組參考。目前為止在這麼多社群研討會的紀錄工作中，我覺得一個很大的問題是發佈速度不夠快，以往的經驗讓我認為會眾特別想要回味的時間大概不超過兩天，但是官方釋出通常會要到一週甚至更久，如果能搶在這兩天內有照片放出，通常可以在社群網站上看到不少漣漪，再加上常常有些媒體報導會希望能夠有提供一些照片，目前都是透過公關管道由媒體提出需要的照片，記錄組這邊特別先找出來處理，某方面來說也是減少了報導的不同可能性，實在可惜。...</b:summary>
				<b:mainContent><p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14866906540/" title="HITCON X by othree, on Flickr"><img src="https://farm4.staticflickr.com/3861/14866906540_5e439b502b_b.jpg" width="1024" height="683" alt="HITCON X" srcset="https://farm4.staticflickr.com/3861/14866906540_5e439b502b_b.jpg 1024w, https://farm4.staticflickr.com/3861/14866906540_80da071a35_h.jpg 1600w" /></a></p>

<p>本來今年打算要暑假畢業，因此沒打算接會有太多事前準備工作的職位的，不過等到後來我發現論文來不及，無法這個學期畢業就看開了，還是接了 HITCON X 的攝影組，而且今年還想要試著解決以往的一些問題，實際做了些嘗試，這篇文章的目的就是記錄這些問題和這次的嘗試，可以給以後其他社群研討會的紀錄組參考。目前為止在這麼多社群研討會的紀錄工作中，我覺得一個很大的問題是發佈速度不夠快，以往的經驗讓我認為會眾特別想要回味的時間大概不超過兩天，但是官方釋出通常會要到一週甚至更久，如果能搶在這兩天內有照片放出，通常可以在社群網站上看到不少漣漪，再加上常常有些媒體報導會希望能夠有提供一些照片，目前都是透過公關管道由媒體提出需要的照片，記錄組這邊特別先找出來處理，某方面來說也是減少了報導的不同可能性，實在可惜。</p>
</b:mainContent>
				<b:extendContent><p>回來看一下為什麼官方發佈的相簿會需要這麼多時間，其實最主要還是在後製耗時，去年還沒有拍 raw 回來調整色溫和曝光，現在回去看覺得照片都偏黃 T_T，然後再加上每個人都有不同的事情要處理，不可能逼組員把照片都處理還才繼續過他的生活，結果就是常常把相片收集回來已經過好幾天，然後理所當然的錯過回味的黃金期，而且有先交出的照片也會被卡著無法放出，這狀況實在是非常讓人苦惱，因此今年 HITCON X 我就決定要增加官方相片集發佈的速度，直接的想法就是把所有後制包括調整圖片和篩選的工作都抓到自己身上來，一開始的規劃是活動四天有時間就收照片，晚上就處理當天的照片，實際執行起來發現變的和去年 COSCUP 2013 海哥的角色很像，然後也和一開始計畫的流程有些不一樣，最後是變成中午和散場前收照片居多，偶爾早上開場前收。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14547841287/" title="COSCUP 2014 Day1 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5583/14547841287_5c6e2542fe_b.jpg" width="1024" height="683" alt="COSCUP 2014 Day1" srcset="https://farm6.staticflickr.com/5583/14547841287_5c6e2542fe_b.jpg 1024w, https://farm6.staticflickr.com/5583/14547841287_47c48ef161_h.jpg 1600w" /></a></p>

<p>收集的照片一開始蠻多是在家裡處理的，用的是 Lightroom，後來也開始在白天時間處理，減少在外面亂晃拍照的時間，也不一定待在工人室，有一個早上我是在會議廳邊拍講者邊修圖的，不過我覺得這個角色以後應該要固定編制一兩個人（不知道該叫什麼，修圖手嗎？），三到四軌我覺得一個人可以處理，COSCUP 現在那規模的就不行了，不獨立出來的話他光處理圖片的時間就不夠了，根本無法排班做其他事情，再來處理照片的流程也有些調整來加速，以往我是習慣全部都調整好才來挑照片，因為看色溫曝光不對的照片有時候很難判斷優劣，不過面對這麼多的照片只好強迫訓練一下這方面的能力，然後可以直接用鍵盤的 <code>1</code> ~ <code>5</code> 給照片評等，之後用過濾器挑出比較好的照片來調整，這邊也學了一下快速鍵 <code>,</code> 和 <code>.</code> 可以快速的在色溫和色調那個區塊中切換調整項目，然後用 <code>+</code> <code>-</code> 就可以直接調整，不太需要用到滑鼠，不過把操作時間縮短後發現還很需要夠快的電腦，我這幾天用的是有 PCIe SSD 的 13 吋 MacBook Pro 了，檔案讀取速度已經最快了，剩下就是 CPU 和顯示卡的問題了，結果開 raw 檔都還是需要等，和 jpg 比可以感覺到明顯的差異，不管是開大圖還是開縮圖都是要等個一兩秒才能看到完整細節，挑選照片的速度也因此受到很大的影響，尤其像是連拍的照片要挑一個眼睛有正常睜開的，表情最好的照片時，用縮圖細節不夠，看大圖一張一張切換也是要等，有時候是只看縮圖來挑選，結果就出錯了，後來研究發現預覽圖可以設定格式，不過好像只能讀入檔案時設定，下次要來測試看看有沒有影響，如果有錢的話也可以弄台 15 吋 MBPR 來應該可以提升不少效率。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/15030666086/" title="HITCON X by othree, on Flickr"><img src="https://farm4.staticflickr.com/3917/15030666086_e900150489_b.jpg" width="1024" height="683" alt="HITCON X" srcset="https://farm4.staticflickr.com/3917/15030666086_e900150489_b.jpg 1024w, https://farm4.staticflickr.com/3917/15030666086_c9c15f39d1_h.jpg 1600w" /></a></p>

<p>整體而言我的目標是希望照片的表現達到 80 分，但是讓釋出速度提升很多，今年算是初次嘗試，中間重複做了很多工，最後在活動結束後的第二天（週日）成功把照片送出了，總共照片約六千五百多張，放出的約九百張有，平均活動一天兩百張照片，如果讓我最後調整的工作流程能在一開始就使用上，應該還可以更快讓照片出爐，至於相片挑選品質我個人認為有八成 ok，只是還是有失誤，真的很對不起影中人，至少已經看到兩張完全不應該上去的照片，看到的時候是真的蠻難受的，主因還是一開始的操作流程還不穩定，結果篩選照片出錯，這部份應該可以藉由流程改善來增加工作效率，就會比較多機會可以檢查，另外一個避免的方式則是加上負向列表，這次我是以正向列表為主，就是分成沒評分的，評分不錯的兩種，以後應該要把不該上去的也加上評分，甚至直接刪掉，避免圖片意外被送出的情形；另外發現一個問題是挑選的照片中，自己拍的比例比較高，這點真是對不起組員們了，因為我嘗試好幾次要平衡一下比例結果都失敗，是還好攝影師還可以自己決定要不要放照片到自己的相簿，以後要避免這個狀況應該就是把這個修圖挑圖的角色獨立出來，就可以避免這種狀況發生。</p>

<p>除了處理速度的問題，其實我還試著處理了另外一個問題，就是攝影師 attribution 的問題，畢竟著作人格權是不可拿走的，即使是官方放出的攝影，也要能回溯找出不同相片的攝影師是哪位，不過以前的處理流程，都有點難去追出照片是哪位拍的，我這次的試驗是用 Lightroom 寫在檔案的 meta data 內，輸出成 jpg 後會在 EXIF 資訊中可以找到，如果照片傳 flickr 是比較容易看到，不過 HITCON 歷來都是放在 picasa 相簿，經過測試，頁面上完全看不到XD，如果下載的到原始檔案的話確實資訊是有保留的，在某些情況下是有辦法抓到原始檔案的，只是一般訪客應該是抓不到就是，總之目前這部分的處理在官方相簿是 flickr 的話，是一般訪客也可以看到的，但是如果在其他相簿就不一定了，至少 picasa 在目前的測試是不行，還要想想看有什麼方法可以處理，不過資訊確實是有保留在相簿網站上，管理員是可以簡單找出作者是誰。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14867090697/" title="HITCON X by othree, on Flickr"><img src="https://farm6.staticflickr.com/5595/14867090697_365e60bbf0_b.jpg" width="1024" height="683" alt="HITCON X" srcset="https://farm6.staticflickr.com/5595/14867090697_365e60bbf0_b.jpg 1024w, https://farm6.staticflickr.com/5595/14867090697_36899edee1_h.jpg 1600w" /></a></p>

<p>最後一個目前我覺得還有待改善的問題就是挑選照片的依據，這當然很主觀，不過我覺得可以透過一些執行的操作設計來讓結果呈現更好，其實這個照片的挑選有兩個不同的挑選目標，第一個當然就是官方相簿，另外一個則是活動閉幕用的，這個想改善的地方則是針對閉幕用照片來說，以往一般都是組長先收照片，然後挑選過一次後給負責的人，很多時候會是總招自己處理，不過這幾次活動下來我覺得蠻容易遇到組長挑選的和負責的人想的方向剛好錯開的情形，而且這幾年有趣的照片比例越來越低了，結果就更加惡化，我目前覺得要改善這方法可以就是請閉幕影片的負責人直接參與挑選照片，記錄組這邊只把拍失敗的，重複的照片挑掉，然後請負責的一起來挑選照片，接著才對這些照片調整後制再出給負責人，這樣大概是最省工又可以確保挑選的照片夠好的方法了，不過如果負責人很忙，像是總招，可以預期有些場子總招會很多事情，真的沒辦法直接下來挑照片的話，好像也還是只能走以前的流程，不過我想挑選出來的照片數量可以多一些，畢竟判斷一張照片可不可以用的時間很少，兩百張 jpg 在本機看過一輪也不用十分鐘。</p>

<p>至於官方相簿的挑選準則問題，這主觀影響的比例還蠻大的，實在很難拿捏，例如一張有趣的照片到底適不適合放到官方相簿呢，我認為放一些有趣的照片是不錯的，但是多有趣可以接受呢？如果只是工作人員自己小圈圈的照片呢？這些問題實在都很難回答，一來「有趣」難以量化，二來不同的活動給人的感覺不一樣，其實也影響著官方相片可以接受的風格，而我個性偏嚴肅其實就會造成無意識下，我挑選的照片會讓人覺得有趣的比例較少，不一定和大會的期望，甚至是不符合大眾的期望，目前我的作法還是官方嚴謹保守一點，當然會有一些比較有趣的照片，不過會控制個比例，其餘的照片透過不同管道，基本上就是攝影師自己放出。至於官方的照片要怎麼拿捏目前也就只能每次調整一點，看何時會收斂吧。</p>

<p>最後的最後紀錄一下這次掉球的部分：</p>

<ul>
<li>人力吃緊，至少還要在多一位才比較能休息到（不過後來其實已經找不到人幫忙兩天了）</li>
<li>講者特寫有漏，下次要加註至少一張近（半身）一張遠</li>
<li>挑選照片有失誤，上傳前至少還要每張在看過一次，正向負向表列（評分）都需要</li>
</ul>

<p>除了掉球之外，下次要改進的點：</p>

<ul>
<li>獨立的修圖手編制，缺點是要少一個不差的攝影師拍照</li>
<li>修圖手要對操作流程熟悉、避免重工和時間浪費</li>
<li>和閉幕影片(?)負責人一起挑照片，大概也是修圖手負責這塊</li>
<li>閃燈使用，前面沒說，不過希望能改成弄出 spotlight 照講台，不然中研院 R0 真的是很難拍</li>
</ul>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14867046408/" title="HITCON X by othree, on Flickr"><img src="https://farm4.staticflickr.com/3876/14867046408_391591ef13_b.jpg" width="1024" height="683" alt="HITCON X" srcset="https://farm4.staticflickr.com/3876/14867046408_391591ef13_b.jpg 1024w, https://farm4.staticflickr.com/3876/14867046408_89f6cb9f22_h.jpg 1600w" /></a></p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000808" baseName="chrome-pointer-event">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-08-16</b:date>
				<b:time>23:28:51</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Chrome 將不支援 Pointer Events</b:title>
			<b:content>
				<b:summary>話說 W3C 預計要推出 Pointer Events 統一 mouse event 和 touch event，不過 Chorme 的引擎 Blink 說不打算支援這新東西了，主要原因是在複雜度和效能問題，雖然在信件裡面也把 Firefox、IE、Safari 拉下水，不過其他幾家好像都還沒做出決定，而且看來接下來關鍵在 Safari，因為它掌控了大量的 iOS 用戶，不過其實 Pointer Events 不只是打算處理 mouse, touch，在現在的 CR 裡面其實還有觸控筆，基本上是目前想的到能在畫面上做輸入(pointer)的裝置都考慮進去了，再來應該是看 Safari 決定了吧。...</b:summary>
				<b:mainContent><p>話說 W3C 預計要推出 <a href="http://www.w3.org/TR/pointerevents/">Pointer Events</a> 統一 mouse event 和 touch event，不過 Chorme 的引擎 Blink 說<a href="https://code.google.com/p/chromium/issues/detail?id=162757#c64">不打算支援這新東西了</a>，主要原因是在複雜度和效能問題，雖然在信件裡面也把 Firefox、IE、Safari 拉下水，不過其他幾家好像都還沒做出決定，而且看來接下來關鍵在 Safari，因為它掌控了大量的 iOS 用戶，不過其實 Pointer Events 不只是打算處理 mouse, touch，在現在的 CR 裡面其實還有觸控筆，基本上是目前想的到能在畫面上做輸入(pointer)的裝置都考慮進去了，再來應該是看 Safari 決定了吧。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000807" baseName="mozjpeg-21">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-08-16</b:date>
				<b:time>14:34:37</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>mozjpeg 2.1</b:title>
			<b:content>
				<b:summary>Mozilla 最近發佈了 mozjpeg 2.1，同時還有一篇 用 mozjpeg 產生高效率的 JPEG 教大家使用裡面的工具，所以我之前誤會以為現在只有 c lib 可以用，這篇文章有一些範例指令讓大家可以把 cjpeg 把圖片重新壓縮，小缺憾是安裝講的比較不清楚，所以我另外測試過，提供一下 Mac OSX 的指令： cd mozjpeg autoreconf -fiv mkdir build &amp;&amp; cd build sh ../configure make sudo make install 關鍵的就是 BUILDING.txt 沒說 build 目錄是要自己建立的，不過實際測試的效果要等週一才能測試看看，目前只有編譯過確定有指令工具可以用而已。 另外一個比較容易漏掉的是要編譯需要 NASM， homebrew...</b:summary>
				<b:mainContent><p>Mozilla 最近發佈了 <a href="https://github.com/mozilla/mozjpeg">mozjpeg</a> 2.1，同時還有一篇 <a href="http://blog.mozilla.com.tw/posts/6084/using-mozjpeg-to-create-efficient-jpegs">用 mozjpeg 產生高效率的 JPEG</a> 教大家使用裡面的工具，所以我之前誤會以為現在只有 c lib 可以用，這篇文章有一些範例指令讓大家可以把 <code>cjpeg</code> 把圖片重新壓縮，小缺憾是安裝講的比較不清楚，所以我另外測試過，提供一下 Mac OSX 的指令：</p>

<pre><code>cd mozjpeg
autoreconf -fiv
mkdir build &amp;&amp; cd build
sh ../configure
make
sudo make install
</code></pre>

<p>關鍵的就是 <a href="https://github.com/mozilla/mozjpeg/blob/master/BUILDING.txt">BUILDING.txt</a> 沒說 <code>build</code> 目錄是要自己建立的，不過實際測試的效果要等週一才能測試看看，目前只有編譯過確定有指令工具可以用而已。</p>

<p>另外一個比較容易漏掉的是要編譯需要 <a href="https://github.com/mozilla/mozjpeg/blob/master/BUILDING.txt">NASM</a>， homebrew 可以直接 <code>brew install nasm</code> 。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000806" baseName="ecmascript-6-cosup">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-07-19</b:date>
				<b:time>22:50:58</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>ECMAScript 6 at COSCUP</b:title>
			<b:content>
				<b:summary>今天在 COSCUP 的投影片，因為前一場 delay 導致後面講的有點趕，小可惜，不過該說的都有說到了～ /* A_A */...</b:summary>
				<b:mainContent><p>今天在 COSCUP 的投影片，因為前一場 delay 導致後面講的有點趕，小可惜，不過該說的都有說到了～</p>

<script async="async" class="speakerdeck-embed" data-id="947e99f0f08f0131d797323063e9e5f4" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000805" baseName="mozjpeg-2">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-07-18</b:date>
				<b:time>11:33:16</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>mozjpeg 2.0</b:title>
			<b:content>
				<b:summary>昨天 Adobe 和 Google 聯手發表了思源黑體，算是亞洲資訊圈的一件大事，結果就把另外一個消息壓下去了，其實昨天 Mozilla 發表了 mozjpeg 2.0，這個專案的目標是在保持相容於市場上現有的 jpeg decoder 之下，想辦法讓 jpeg 檔案能夠更小，第一輪的成果發表是就是昨天的 2.0 了，結果而言平均可以讓 jpeg 圖片品質不變差的情況下減少 5% 的大小，看到這個 5% 數據讓我想到 Google 曾經推出相容於 gzip, deflate 的 Zopfli，不過 mozjpeg 應該是不用花到 100 倍的壓縮時間啦，目前 Facebook 還有贊助這個計畫的下一輪發展，也就是 3.0 的開發。mozjpeg 目前是以 c lib 的形式釋出，可惜還沒有看到有命令列工具支援，希望能帶動一波圖片最佳化工具的更新潮啊。...</b:summary>
				<b:mainContent><p>昨天 Adobe 和 Google 聯手發表了<a href="http://blog.typekit.com/alternate/source-han-sans-cht/">思源黑體</a>，算是亞洲資訊圈的一件大事，結果就把另外一個消息壓下去了，其實昨天 Mozilla 發表了 <a href="https://blog.mozilla.org/blog/2014/07/15/improving-jpeg-image-encoding/">mozjpeg 2.0</a>，這個專案的目標是在保持相容於市場上現有的 jpeg decoder 之下，想辦法讓 jpeg 檔案能夠更小，第一輪的成果發表是就是昨天的 2.0 了，結果而言平均可以讓 jpeg 圖片品質不變差的情況下減少 5% 的大小，看到這個 5% 數據讓我想到 Google 曾經推出相容於 gzip, deflate 的 <a href="http://blog.gslin.org/archives/2013/03/01/3228/google-%E7%99%BC%E8%A1%A8%E8%88%87-zlibdeflate-%E7%9B%B8%E5%AE%B9%E7%9A%84%E5%A3%93%E7%B8%AE%E7%A8%8B%E5%BC%8F%EF%BC%8C%E5%86%8D%E5%B0%8F-5/">Zopfli</a>，不過 mozjpeg 應該是不用花到 100 倍的壓縮時間啦，目前 Facebook 還有贊助這個計畫的下一輪發展，也就是 3.0 的開發。mozjpeg 目前是以 c lib 的形式釋出，可惜還沒有看到有命令列工具支援，希望能帶動一波圖片最佳化工具的更新潮啊。</p>

<p>其實 Mozilla 在去年還有發表了一篇對於目前市場上破壞性壓縮圖片格式的<a href="https://people.mozilla.org/~josh/lossy_compressed_image_study_october_2013/">品質比較</a>，比較了 JPEG、JPEG XR、WebP 和 HEVC-MSP，結果表現不離預期，最好的是 HEVC-MSP4，這是 H.265 Profile 的靜態圖片格式，算是比較項目中最新的格式了，表現最好好像不意外，不過其實高壓縮比相對的來說解壓縮需要的運算資源就會多，所以 Mozilla 才不會完全往新技術走，而開了這個 branch，顧到相容度的前提下，盡量的減少網路傳輸，這個計畫目前看來是還會繼續發展，不知道接下來還能夠提升多少壓縮比，還蠻令人期待的。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000804" baseName="es6-int">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-07-15</b:date>
				<b:time>15:52:15</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>ES6 的數字</b:title>
			<b:content>
				<b:summary>這篇想要介紹的是 ES6 的整數規則上的一些變化，首先是 parseInt，看過 JavaScript Good Part 的話都會知道，這個函數的第二個參數 radix 一定要給，不然如果遇到 0 開頭的字串時，會自動被當成八進位的數字，這個被人詬病許久的設計終於在 ES6 中拿掉了，未來 parseInt 只會自動判斷 0x 0X 為 16 進位，不然沒給 radix 就是當 10 進位。 另外一個改變是多了可以直接表示 2 進位和 8 進位整數的語法： bin1 = 0b11; bin2 = 0B1000; oct1 = 0o1199; oct2...</b:summary>
				<b:mainContent><p>這篇想要介紹的是 ES6 的整數規則上的一些變化，首先是 <code>parseInt</code>，看過 JavaScript Good Part 的話都會知道，這個函數的第二個參數 radix 一定要給，不然如果遇到 <code>0</code> 開頭的字串時，會自動被當成八進位的數字，這個被人詬病許久的設計終於在 ES6 中拿掉了，未來 <code>parseInt</code> 只會自動判斷 <code>0x</code> <code>0X</code> 為 16 進位，不然沒給 radix 就是當 10 進位。</p>

<p>另外一個改變是多了可以直接表示 2 進位和 8 進位整數的語法：</p>

<pre><code>bin1 = 0b11;
bin2 = 0B1000;

oct1 = 0o1199;
oct2 = 0O17;
</code></pre>

<p>2 進位要 <code>0b</code> 或是 <code>0B</code> 開頭，8 進位則是 <code>0o</code> 或是 <code>0O</code>，雖然和 16 進位一樣設計，不過要注意的是 <code>parseInt</code> 目前的 spec 設計是只會自動判斷 16 進位的喔。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000803" baseName="yajs">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-07-14</b:date>
				<b:time>18:35:34</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>YAJS: Yet Another JavaScript Syntax for Vim</b:title>
			<b:content>
				<b:summary>前陣子把我 fork 的 Enhanced Javascript syntax 大改後，乾脆改名上到 Vim Scripts 了，名字就叫做 YAJS，全名是 Yet Another JavaScript Syntax for Vim（又一個 JS Syntax），當然也有 github repo 方便安裝，為什麼這次會自己大修呢，主要的原因是想要弄支援 ES6 的一些新語法，不過剛好有一些問題也已經很久了，就一口氣處理，大概整理一下和其他版的差異如下： 用 javascript 做 group name 的 prefix，如此才符合 Vim doc 的規範，並且可以直接讓 SyntaxComplete 使用 完整重新整理過的 Web API、DOM、JS 關鍵字...</b:summary>
				<b:mainContent><p>前陣子把我 fork 的 Enhanced Javascript syntax 大改後，乾脆改名上到 Vim Scripts 了，名字就叫做 <a href="http://www.vim.org/scripts/script.php?script_id=4974">YAJS</a>，全名是 Yet Another JavaScript Syntax for Vim（又一個 JS Syntax），當然也有 <a href="https://github.com/othree/yajs.vim">github repo</a> 方便安裝，為什麼這次會自己大修呢，主要的原因是想要弄支援 ES6 的一些新語法，不過剛好有一些問題也已經很久了，就一口氣處理，大概整理一下和其他版的差異如下：</p>

<ul>
<li>用 <code>javascript</code> 做 group name 的 prefix，如此才符合 Vim doc 的規範，並且可以直接讓 <code>SyntaxComplete</code> 使用</li>
<li>完整重新整理過的 Web API、DOM、JS 關鍵字</li>
<li>可以完美的和 javascript-libraries-syntax.vim 共用</li>
<li>把許多歷史遺跡的 syntax rule 都砍掉了</li>
<li>當然最後就是支援許多的 ES6 syntax，像是 arrow function、 method definition 等</li>
</ul>

<p>第一點這問題很久了，我好像之前也有說過，第二個一開始弄之前有點猶豫，因為關鍵字真的很多，目前整理了大概有 1800 個上下，不過後來看到 Vim 內建的 xs 的 <a href="https://code.google.com/p/vim/source/browse/runtime/syntax/xs.vim">syntax</a> 我就釋懷了，這個檔案有三千多行，而定義關鍵字的每行都有數個關鍵字，1800 其實還只整理了一部份，除了 Global 物件都有加上外，很多新 Spec 是還沒整理的，例如 Mozilla 為了 Firefox OS 定的那些和硬體溝通的 API 等。</p>

<p>第三點是我重新整理的時候才注意到的，本來我的 javascript-libraries-syntax.vim 會把 <code>.</code> 的 group 取代掉，也就是原來的 syntax rule 裡面，和 <code>.</code> 有關的東西在套用過 libraries syntax 之後就會消失，只是不太容易注意到，這次修改就讓這個問題不會發生，不過 JS 僅限於 YAJS，，其他還有 CoffeeScript、LiveScript 其實不受影響，不過是因為他們本來在 <code>.</code> 之後就沒其他的 syntax highlight 了。</p>

<p>第四點就是把一些不明用途或是過時的東西砍掉，最後就是 ES6 的語法了，目前大概知道會有的都已經做上去了像是 block scope、let、const、class、新的 number literal 等都支援，如果有缺什麼歡迎報 bug 摟。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000802" baseName="es6-method-definition">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-07-14</b:date>
				<b:time>16:47:15</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>ES6 Method Definition</b:title>
			<b:content>
				<b:summary>以前在產生 function 時，一定不外乎是 function declaration： function foo() { return; } 或是 function expression： var foo = function () { return; } 不過在 ES6 有一種新的特殊的語法可以使用，叫做 method definition，顧名思義，這個新的語法是專門用在產生物件的 method 上用的，所以嚴格說來不是用來做 function 的，然後也因此很特別的不需要使用到 function 這個關鍵字，基本的用法通常會在 class syntax 中使用： class foo { constructor() {...</b:summary>
				<b:mainContent><p>以前在產生 function 時，一定不外乎是 function declaration：</p>

<pre><code>function foo() { return; }
</code></pre>

<p>或是 function expression：</p>

<pre><code>var foo = function () { return; }
</code></pre>

<p>不過在 ES6 有一種新的特殊的語法可以使用，叫做 <strong>method definition</strong>，顧名思義，這個新的語法是專門用在產生物件的 method 上用的，所以嚴格說來不是用來做 function 的，然後也因此很特別的不需要使用到 function 這個關鍵字，基本的用法通常會在 class syntax 中使用：</p>

<pre><code>class foo {
  constructor() {
    //blah
  }

  fooMeth() {
    //blah
  }
}
</code></pre>

<p>在上面這段程式碼中，<code>constructor</code> 和 <code>fooMeth</code> 都是 method definition，其實就很接近以前的 prototype method，但是大幅簡化了語法，而除了這樣使用，還可以配合 <code>get</code>、<code>set</code> 讓它變成 accessor function：</p>

<pre><code>class foo {
  get bar() {
    return this._bar;      
  }
  set bar(v) {
    this._bar = v + this._bar;
  }
}
</code></pre>

<p>Accessor 其實在 ES5 就已經有了，不過因為一直被 IE 卡著所以不太有人用，而且寫起來實在也麻煩很多，以前是要用 <code>defineProperty</code> 才能定義 accessor：</p>

<pre><code>Object.defineProperty(foo.prototype, 'bar', {
  get: function () {
    return this._bar;
  },
  set: function (v) {
    this._bar = v + this._bar;
  }
});
</code></pre>

<p>當然除了比較麻煩外，還有一個問題就是 <code>defineProperty</code> 只能用在實體物件上，所以上面的 class 範例，要做出一樣效果就要在 prototype 上使用，實在不直觀，加上 <code>defineProperty</code> 其他功能真的是很少看到使用需求，新的語法這樣設計真的是很不錯，不過看到 <code>defineProperty</code> 要在實體物件上用，就會讓人反過來想，method definition 可以不用在 class 上，而是用在普通物件上嗎？事實上是可以的，ES6 的物件語法多了簡化的寫法，其中一個就是支援 method definition，所以可以這樣寫：</p>

<pre><code>var object = {
  value: 42,
  toString() {
    return this.value;
  }
};
</code></pre>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000801" baseName="simd-in-javascript">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-06-26</b:date>
				<b:time>14:56:13</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>SIMD in JavaScript</b:title>
			<b:content>
				<b:summary> Intel 前陣子推出了 SIMD in JavaScript 的概念以及實做後的效能比較，SIMD 指的是下一個指令就能做多個運算，基本上是 CPU、GPU 的指令，例如上圖那樣，本來的四個加法需要四個指令，改用 SIMD 就可以用兩個向量相加的方式把四個加法做好，效能可以提升不少，常見四維的向量和矩陣其實都是為了 3D 運算，所以這個新的提升效能的方式大概也會是 3D 相關的應用為主吧，本來以為這只是單純 Intel 在做些試驗，不過最近準備 COSCUP 的演講時，發現其實SIMD 也有打算標準化進 ECMAScript 裡面，不過不會太快，目前推斷是 ES8 才會看到。...</b:summary>
				<b:mainContent><p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14510706785/" title="SIMD in JavaScript by othree, on Flickr"><img src="https://farm3.staticflickr.com/2922/14510706785_971714a962_b.jpg" width="800" height="389" alt="SIMD in JavaScript" srcset="https://farm3.staticflickr.com/2922/14510706785_971714a962_b.jpg 1024w" /></a></p>

<p>Intel 前陣子推出了 SIMD in JavaScript 的概念以及實做後的<a href="https://01.org/zh/node/1495">效能比較</a>，SIMD 指的是下一個指令就能做多個運算，基本上是 CPU、GPU 的指令，例如上圖那樣，本來的四個加法需要四個指令，改用 SIMD 就可以用兩個向量相加的方式把四個加法做好，效能可以提升不少，常見四維的向量和矩陣其實都是為了 3D 運算，所以這個新的提升效能的方式大概也會是 3D 相關的應用為主吧，本來以為這只是單純 Intel 在做些試驗，不過最近準備 COSCUP 的演講時，發現其實SIMD 也有打算標準化進 ECMAScript 裡面，不過不會太快，目前<a href="http://www.2ality.com/2011/09/es6-8.html">推斷</a>是 ES8 才會看到。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000800" baseName="chrome-emulator">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-06-26</b:date>
				<b:time>11:55:24</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Chrome 開發工具的新模擬器</b:title>
			<b:content>
				<b:summary> Chrome 開發工具有個新的模擬器，介面改不少，其中最大的特點是多了網路模擬的功能，可以模擬網路速度了，目前在 Chrome Canary 已經可以用，可惜還沒有自定義選項的功能，不過我想到 Chrome 前應該會有～...</b:summary>
				<b:mainContent><p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14486840456/" title="Chrome Emulator by othree, on Flickr"><img src="https://farm4.staticflickr.com/3857/14486840456_74dce49944_b.jpg" width="857" height="850" alt="Chrome Emulator" srcset="https://farm4.staticflickr.com/3857/14486840456_74dce49944_b.jpg 1024w" /></a></p>

<p>Chrome 開發工具有個新的模擬器，介面改不少，其中最大的特點是多了網路模擬的功能，可以模擬網路速度了，目前在 Chrome Canary 已經可以用，可惜還沒有自定義選項的功能，不過我想到 Chrome 前應該會有～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000799" baseName="rgba">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-06-06</b:date>
				<b:time>14:47:38</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>RGBA_ 控字慾</b:title>
			<b:content>
				<b:summary>昨天去參加了 RGBA 很久沒辦的活動，這次主題是字體，剛好是我很有興趣的議題，所以從一開始就很想參與，結果報名時竟然忘記，而且還連續兩次都忘記了，想不到活動當天 hlb 沒辦法過去，我就順利的接手他的票了，然後覺得應該分享一下，所以就有了這篇文章。 一開始是由 Jason 的手寫西文毛筆字開始，我有拍些照片也錄了一段影片： 一直覺得寫這種字體用的筆很有趣，根本就是一片鐵片，要控制的好讓出墨平均應該需要不少練習吧， 接著就是 Even 介紹他挑選字形的方法，因為他基本上都是挑選黑體來用比較多，不過黑體也分很多種，所以先介紹了不同黑體的差異，基本上就是黑體字並不是所有都侷限現在框框內的，筆劃也不是都方方正正的，例如蒙納黑和 Arial Unicode MS 的底就不平，所以字體本身可能是有點歪斜的。 另外一種變化可以稱為喇叭口，也就是上圖那樣，在筆劃末端會放大，這種黑體比較適合小字使用，喇叭口可以讓視覺上感覺筆會比較粗，但是又不會影響整體的灰度，例如 Hiragino 這個 OSX 內建的日文字體。如果不要喇叭口的話可以選華康黑，華康黑又有一個特別的地方是他的一些筆劃是有裝飾的，我本來以為黑體就是不會有這些裝飾元素的，真是沒想到啊。最後講到信黑體，信黑體就是非常標準，文字侷限在方框內，灰度平均，沒有裝飾的黑體。然後 Even 還有用 fontshop 這個網站和 Sketch 示範一下不同字重的搭配。 接下來聽的是 but 介紹 OpenType 特殊功能和他做的一些實驗，OpenType 的規範有定義一些在西文排版上已經存在很久的功能，例如連字 Ligatures。 OpenType 有的功能時很很多，微軟有份文件有列出，據 but 說，OpenType 是微軟和 Adobe...</b:summary>
				<b:mainContent><p>昨天去參加了 RGBA 很久沒辦的活動，這次主題是字體，剛好是我很有興趣的議題，所以從一開始就很想參與，結果報名時竟然忘記，而且還連續兩次都忘記了，想不到活動當天 hlb 沒辦法過去，我就順利的接手他的票了，然後覺得應該分享一下，所以就有了這篇文章。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14345683145/" title="RGBA_ 控字慾 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5591/14345683145_0f9d9383c8_b.jpg" width="1024" height="683" alt="RGBA_ 控字慾" srcset="https://farm6.staticflickr.com/5591/14345683145_0f9d9383c8_b.jpg 1024w, https://farm6.staticflickr.com/5591/14345683145_aa653ac6b4_h.jpg 1600w" /></a></p>

<p>一開始是由 Jason 的手寫西文毛筆字開始，我有拍些照片也錄了一段影片：</p>

<div class="embed_16_9">
<iframe width="853" height="480" src="//www.youtube.com/embed/55-x6DcKyQc" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>

<p>一直覺得寫這種字體用的筆很有趣，根本就是一片鐵片，要控制的好讓出墨平均應該需要不少練習吧，</p>

<p>接著就是 Even 介紹他挑選字形的方法，因為他基本上都是挑選黑體來用比較多，不過黑體也分很多種，所以先介紹了不同黑體的差異，基本上就是黑體字並不是所有都侷限現在框框內的，筆劃也不是都方方正正的，例如蒙納黑和 Arial Unicode MS 的底就不平，所以字體本身可能是有點歪斜的。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14352869974/" title="喇叭口 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2911/14352869974_632f9dfaab_b.jpg" width="1024" height="1024" alt="喇叭口" srcset="https://farm3.staticflickr.com/2911/14352869974_632f9dfaab_b.jpg 1024w, https://farm3.staticflickr.com/2911/14352869974_6c3fb2cc87_h.jpg 1600w" /></a></p>

<p>另外一種變化可以稱為喇叭口，也就是上圖那樣，在筆劃末端會放大，這種黑體比較適合小字使用，喇叭口可以讓視覺上感覺筆會比較粗，但是又不會影響整體的灰度，例如 Hiragino 這個 OSX 內建的日文字體。如果不要喇叭口的話可以選華康黑，華康黑又有一個特別的地方是他的一些筆劃是有裝飾的，我本來以為黑體就是不會有這些裝飾元素的，真是沒想到啊。最後講到信黑體，信黑體就是非常標準，文字侷限在方框內，灰度平均，沒有裝飾的黑體。然後 Even 還有用 <a href="http://fontshop.com">fontshop</a> 這個網站和 <a href="http://bohemiancoding.com/sketch/">Sketch</a> 示範一下不同字重的搭配。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14159167097/" title="RGBA_ 控字慾 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2934/14159167097_81c5f90da1_b.jpg" width="1024" height="683" alt="RGBA_ 控字慾" srcset="https://farm3.staticflickr.com/2934/14159167097_81c5f90da1_b.jpg 1024w, https://farm3.staticflickr.com/2934/14159167097_6079864fe3_h.jpg 1600w" /></a></p>

<p>接下來聽的是 but 介紹 OpenType 特殊功能和他做的一些實驗，OpenType 的規範有定義一些在西文排版上已經存在很久的功能，例如連字 Ligatures。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/diegoiaconelli/4904028989/" title="Ligatures by dotcx, on Flickr"><img src="https://farm5.staticflickr.com/4075/4904028989_0f6974d4ec_b.jpg" width="1024" height="765" alt="Ligatures" srcset="https://farm5.staticflickr.com/4075/4904028989_0f6974d4ec_b.jpg 1024w" /></a></p>

<p>OpenType 有的功能時很很多，微軟有份<a href="http://www.microsoft.com/typography/otspec/featurelist.htm">文件</a>有列出，據 but 說，OpenType 是<a href="http://www.microsoft.com/typography/otspec/default.htm">微軟</a>和 <a href="http://www.adobe.com/products/type/opentype.html">Adobe</a> 合作產出的，我後來搜尋一些相關資料時發現微軟有不少文件，可惜 IE 對於 OpenType feature 的支援卻落後不少，Firefox 和 Chrome 都已經支援一陣子了，雖然目前都還算是實驗中的功能， but 有用這些功能和他自己製作的字形弄了兩個實驗網站，兩個其實都是用連字辦到的，<a href="http://but.tw/font/">第一個</a>是完全用文字把日本的火車時刻表做出來，這樣做除了畫面呈現上可以和紙本一樣，SEO 也會表現的比插入 icon 來的好，當然親和力也自動跟著提昇，<a href="http://but.tw/font/bpmfpy.html">第二個</a>則是注音字形，可以邊打拼音邊顯示你輸入的注音符號，然後另外還做一個反向的，可以打注音拼音，兩個 demo 都蠻有趣的，而且可以在頁面上玩玩看連字。</p>

<p>另外因為有提到 emoji，因為 emoji 是彩色的，目前各家實做不一樣，蘋果是塞圖進字形、Firefox 我忘了，然後微軟是用多個圖層來處理多色的問題，所以我問了一下去年看過的 SVG in OpenType 的相關資訊，可惜 but 沒接觸過，後來我去搜尋看看到底這神秘的東西是誰推出來的，因為把 SVG 放進去字形裡面不是單純只是向量的彩色圖片，所有 SVG 可以做的事情都可以辦到，例如動畫之類的。總之發現是 Mozilla 開始這計畫的，在 W3C 有 <a href="http://www.w3.org/community/svgopentype/">community</a>，Adobe 的網站也有介紹過，應該不會是個孤兒格式才是，目前好像轉轉進到 MPEG 組織下維護了，Open Type 有個很神秘的地方是它現在是由 MPEG 組織來維護，屬於 <a href="http://www.adobe.com/aboutadobe/pressroom/pressreleases/200508/081505OpenTypeISO.html">MPEG-4</a> 檔案格式的一部分，真是令不解的狀況啊～</p>

<p>最後比較可惜的是 Vertical Rhyme 沒聽到，不知道之後會不會放出投影片（but 的投影片也想要啊），主要想聽的主題就差那個而已，有一些特別去聽的就是之前已經在別的場合聽過了，整體來說這次收穫算是很多的，最後還是要感謝一下辦活動的 Even 和突然沒辦法去的布丁了，然後就看一下當天的盛況吧。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14365818033/" title="RGBA_ 控字慾 by othree, on Flickr"><img src="https://farm4.staticflickr.com/3859/14365818033_7ca0693d4d_b.jpg" width="1024" height="683" alt="RGBA_ 控字慾" srcset="https://farm4.staticflickr.com/3859/14365818033_7ca0693d4d_b.jpg 1024w, https://farm4.staticflickr.com/3859/14365818033_d71743daed_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14345645395/" title="RGBA_ 控字慾 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5547/14345645395_a2e651b466_b.jpg" width="1024" height="683" alt="RGBA_ 控字慾" srcset="https://farm6.staticflickr.com/5547/14345645395_a2e651b466_b.jpg 1024w, https://farm6.staticflickr.com/5547/14345645395_4a02da2dcf_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14365860773/" title="RGBA_ 控字慾 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5154/14365860773_4a33f5f37b_b.jpg" width="1024" height="683" alt="RGBA_ 控字慾" srcset="https://farm6.staticflickr.com/5154/14365860773_4a33f5f37b_b.jpg 1024w, https://farm6.staticflickr.com/5154/14365860773_0aa176198f_h.jpg 1600w" /></a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000798" baseName="wwdc-2014-keynote">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-06-03</b:date>
				<b:time>21:43:34</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>WWDC 2014 Keynote</b:title>
			<b:content>
				<b:summary> 昨天晚上的 WWDC 2014 Keynote 大概是在 Steve Jobs 後我看過最滿意的 Apple 發表會了吧，一來是因為發表的東西讓人期待，二是整場發表的品質非常好，還記得 Steve Jobs 過世前有一場發表會讓我印象深刻，那場 Steve Jobs 上場的時間很少，主要是做引言，主要的產品介紹是由蘋果的幾位 VP 輪流上來介紹，那場其實在我看來實在是蠻痛苦，因為每個人的用字、語調都很接近 Steve Jobs，看的出來是在模仿，但是就是無法那麼自然，所以那場看下來其實有點難過。 在 Tim Cook 剛接手那陣子的發表其實都還有這樣的狀況，不過可以感覺的出來事情有在慢慢的變化，像是 Craig Federighi，也就是這次發表三度上台的那位 VP，幾次上台的評價的還蠻不錯，比較不冷場，也比較有自己的風格，Tim Cook 模仿 Steve Jobs 的感覺也越來越淡，直到這次的 WWDC 2014，我覺得大概已經是完成某種程度的磨和了。 昨天這場發表主要有三個新東西要介紹，剛好都是軟體的，結果都是 Craig Federighi 在介紹，雖然三上三下感覺有點好笑，不過我覺得這安排蠻正確的，因為 Tim...</b:summary>
				<b:mainContent><p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14150795840/" title="Apple by othree, on Flickr"><img src="https://farm4.staticflickr.com/3857/14150795840_0e85d5a2aa_b.jpg" width="1024" height="575" alt="Apple" srcset="https://farm4.staticflickr.com/3857/14150795840_0e85d5a2aa_b.jpg 1024w, https://farm4.staticflickr.com/3857/14150795840_a27a6ca117_h.jpg 1600w" /></a></p>

<p>昨天晚上的 WWDC 2014 Keynote 大概是在 Steve Jobs 後我看過最滿意的 Apple 發表會了吧，一來是因為發表的東西讓人期待，二是整場發表的品質非常好，還記得 Steve Jobs 過世前有一場發表會讓我印象深刻，那場 Steve Jobs 上場的時間很少，主要是做引言，主要的產品介紹是由蘋果的幾位 VP 輪流上來介紹，那場其實在我看來實在是蠻痛苦，因為每個人的用字、語調都很接近 Steve Jobs，看的出來是在模仿，但是就是無法那麼自然，所以那場看下來其實有點難過。</p>

<p>在 Tim Cook 剛接手那陣子的發表其實都還有這樣的狀況，不過可以感覺的出來事情有在慢慢的變化，像是 Craig Federighi，也就是這次發表三度上台的那位 VP，幾次上台的評價的還蠻不錯，比較不冷場，也比較有自己的風格，Tim Cook 模仿 Steve Jobs 的感覺也越來越淡，直到這次的 WWDC 2014，我覺得大概已經是完成某種程度的磨和了。</p>

<p>昨天這場發表主要有三個新東西要介紹，剛好都是軟體的，結果都是 Craig Federighi 在介紹，雖然三上三下感覺有點好笑，不過我覺得這安排蠻正確的，因為 Tim Cook 介紹效果絕對不會那麼好，他 CEO 又不能不上來，所以在台上就是非常穩重的感覺，四平八穩的引言、講公司的一些發展數字，最後做結尾，而且這次我覺得他要不是完全作自己，不然就是把以前模仿 Steve Jobs 的部分都已經內化了，不再有以前那種不協調的感覺了。我猜未來沒意外的話都是這樣的組合，不過這次完全沒硬體，有硬體要發表的話，可能 Tim Cook 還是會自己介紹吧，只好來期待一下 iPhone 6 的發表了。</p>

<p>最後想來抱怨一下，下面這兩張照片不知道有多少人知道問題在哪。</p>
</b:mainContent>
				<b:extendContent><p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14150895967/" title="HTC by othree, on Flickr"><img src="https://farm4.staticflickr.com/3924/14150895967_4f46e2faf8_b.jpg" width="1024" height="692" alt="HTC" srcset="https://farm4.staticflickr.com/3924/14150895967_4f46e2faf8_b.jpg 1024w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14335719312/" title="Apple by othree, on Flickr"><img src="https://farm4.staticflickr.com/3836/14335719312_869c853dc8_b.jpg" width="1024" height="575" alt="Apple" srcset="https://farm4.staticflickr.com/3836/14335719312_869c853dc8_b.jpg 1024w, https://farm4.staticflickr.com/3836/14335719312_edf143202f_h.jpg 1600w" /></a></p>

<p>我知道各方面要弄到像蘋果這樣水準的發表會不是很容易，也不打算苛求國內廠商，只是我很想好歹燈泡色溫和投影機色溫可以一樣嗎，HTC 那場其實我也有看轉播，當時攝影機的色溫是對到投影畫面的，所以台上每個人看起來都超黃，好難受，這張照片則是攝影師拍的，他很盡責的把人拍出正確的顏色，所以就會後面投影畫面的顏色怪怪的，而蘋果的場子，你可以看到人和畫面的顏色都很正確，也不會哪一個太亮（沒錯，亮度是另一個細節）。</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000797" baseName="es6-iterable">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-05-24</b:date>
				<b:time>14:03:12</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>ES6 的 Generator 與 Iterator</b:title>
			<b:content>
				<b:summary>第一次看到 generator 時，我只有看到 yield 這個關鍵字，以為只是流程控制的機制，後來才聽到 generator（產生器）這個名字，一直以為說的是 factory pattern 那種角色，困惑了起來去查了一些介紹才知道也是很早就有的機制，主要都是用在迴圈上，命名雖然是用 generator（生產器）和 yield（產出），但是不是 factory 那種，generator 其實是用來產生 iterator 的。 Iterator 其實是一組定義好的介面，讓物件可以在迴圈裡面取得整個串列的資料，而在 ES6 裡，可以處理 iterator 的迴圈形式，就是上一篇文章介紹 Map 和 Set 時，有講到的 for of 這個新語法，在 ES6 裡面定義的 Iterator 介面其實很簡單，只有定義了一個 next method，每次執行會回傳一個物件，裡面兩個屬性： { value: 100, // 下一個元素的值...</b:summary>
				<b:mainContent><p>第一次看到 generator 時，我只有看到 <code>yield</code> 這個關鍵字，以為只是流程控制的機制，後來才聽到 generator（產生器）這個名字，一直以為說的是 factory pattern 那種角色，困惑了起來去查了一些介紹才知道也是很早就有的機制，主要都是用在迴圈上，命名雖然是用 generator（生產器）和 yield（產出），但是不是 factory 那種，generator 其實是用來產生 iterator 的。</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol">Iterator</a> 其實是一組定義好的介面，讓物件可以在迴圈裡面取得整個串列的資料，而在 ES6 裡，可以處理 iterator 的迴圈形式，就是上一篇文章介紹 Map 和 Set 時，有講到的 <code>for of</code> 這個新語法，在 ES6 裡面定義的 Iterator 介面其實很簡單，只有定義了一個 <code>next</code> method，每次執行會回傳一個物件，裡面兩個屬性：</p>

<pre><code>{
    value: 100, // 下一個元素的值
    done: false // Iterator 是否跑完了
}
</code></pre>

<p><code>value</code> 就是迴圈要的值，<code>done</code> 則是用來判斷迴圈是否該結束了，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*">generator</a> 就是用 <code>yield</code> 這個語法來讓你簡單的可以產生 iterator，在 ES6 裡面的語法還算簡單，就是宣告 function 時加個 <code>*</code>：</p>

<pre><code>function* idMaker(){
    var index = 0;
    while(true)
        yield index++;
}
</code></pre>

<p>上面就是一個簡單的 generator，執行 <code>idMaker</code> 這個 generator function 才會回傳對應的 iterator：</p>

<pre><code>var gen = idMaker();

console.log(gen.next().value); // 0
console.log(gen.next().value); // 1
console.log(gen.next().value); // 2
</code></pre>

<p>當然這是一個不會結束的 iterator 就是了，使用時要小心不要直接把這種東西丟到迴圈裡面。最後要來介紹的是 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable
">iterable</a> 介面，其實如果直接把 iterator 丟給 <code>for of</code> 是不能用的，要是有支援 iterable 介面的物件才可以，ES6 內建有 iterable 介面的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable#Builtin_iterables">物件型態</a>包括了：</p>

<ul>
<li>字串</li>
<li>陣列</li>
<li>Generator</li>
<li>Map, WeakMap</li>
<li>Set, WeakSet</li>
<li>arguments</li>
</ul>

<p>這些形式的資料都可以直接用 <code>for of</code> 迴圈來跑，然後當然，介面都已經定義出來了，表示我們也可以自己寫一個物件來用，iterable 的定義也很簡單，就是把該物件 iterator 的 generator 放在 "@@iterator" 這個屬性下，由於 iterator 只能用一次，所以每次需要都要用 generator 產生一個新的 iterator。另外文件有提到說 "@@iterator" 就是 <code>Symbol.iterator</code> 這個環境變數，不過我目前測試還不支援的樣子（Symbol 目前還在變動中，以後會在介紹）：</p>

<pre><code>var myIterable = {}
myIterable["@@iterator"] = () =&gt; (function*(){
    yield 1;
    yield 2;
    yield 3
})();

for (let value of myIterable) {
    console.log(value);
} // 1, 2, 3
</code></pre>

<p>通常會把 "@@iterator" 屬性放到 prototype 下比較保險。而有了自定義 iterable 物件的能力，就可以有很多東西可以玩啦，可以拿來跑二元樹、DOM tree、三維陣列或是特定應用領域的資料結構等等。</p>

<p>另外和 iterable 相關的東西還有一個，就是新的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator">spread</a> 運算子 <code>...</code>，它可以把 iterable 物件展開，然後放到像是陣列或是參數、destructuring 等等：</p>

<pre><code>[...myIterable]; // [1, 2, 3]

myFunc(...myIterable); // myFunc(1, 2, 3)
</code></pre>

<p>這個新的運算子也是一個非常好用的新功能。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000796" baseName="es6-map-set">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-05-19</b:date>
				<b:time>21:07:07</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>ES6 的 Map 與 Set</b:title>
			<b:content>
				<b:summary>ECMAScript 6 多了兩個新的資料結構，分別是 Map 與 Set，剛開始看到時還因為太久沒接觸其他語言，整個想不起來是什麼東西，不過還是簡單介紹一下。 Set 我一開始想不起來到底和 Map 哪裡不一樣，後來還是看了說明才回憶起來，其實就是一組值，像是資料庫裡面的 enum 資料型態，也可以想像成是陣列那樣的結構，可是它沒辦法直接用索引取特定元素的值，只能用列舉的方法取值，常用的 method 有三個，add、delete 和 clear，預設是會幫你確保值都是唯一的，重複的值會被忽略，要列舉裡面的值基本上是要用 for...of 語法，這和以前的 for...in 語法不一樣，是直接取值出來的，也是 ES6 新的東西。 Map 則是和原來的 JS 物件好像重複到，都是 key value mapping 的資料結構，不過其實還是有個很重要的差異點，就是 Map 的 key 的可以用字串以外的值，例如你可以用 DOM Node 來當 Map 裡面的 key，用法基本上就是...</b:summary>
				<b:mainContent><p>ECMAScript 6 多了兩個新的資料結構，分別是 Map 與 Set，剛開始看到時還因為太久沒接觸其他語言，整個想不起來是什麼東西，不過還是簡單介紹一下。</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> 我一開始想不起來到底和 Map 哪裡不一樣，後來還是看了說明才回憶起來，其實就是一組值，像是資料庫裡面的 enum 資料型態，也可以想像成是陣列那樣的結構，可是它沒辦法直接用索引取特定元素的值，只能用列舉的方法取值，常用的 method 有三個，<code>add</code>、<code>delete</code> 和 <code>clear</code>，預設是會幫你確保值都是唯一的，重複的值會被忽略，要列舉裡面的值基本上是要用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"><code>for...of</code></a> 語法，這和以前的 <code>for...in</code> 語法不一樣，是直接取值出來的，也是 ES6 新的東西。</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a> 則是和原來的 JS 物件好像重複到，都是 key value mapping 的資料結構，不過其實還是有個很重要的差異點，就是 Map 的 key 的可以用字串以外的值，例如你可以用 DOM Node 來當 Map 裡面的 key，用法基本上就是 <code>set</code> 和 <code>get</code>，可以避免一些以前會遇到的問題，例如 jQuery 的 data，以前會需要幫每個 DOM Node 生 unique id，如果用 Map 來實做的話就不需要了。</p>

<p>目前 Firefox 和 Chrome 都已經有把這兩個資料結構實做好了，不過 Chrome 還沒有把 <code>for...of</code> 實做好就是～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000795" baseName="disqus">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-05-16</b:date>
				<b:time>23:32:27</b:time>
			</b:datetime>
			<b:category>about</b:category>
			<b:title>留言切換到 Disqus</b:title>
			<b:content>
				<b:summary> 因為 MovableType 的反 spam 機制幾乎失靈了，最近廣告又太多，只好狠下心來換到 Disqus，其實是想換一陣子了，不過覺的話要花不少時間一直沒弄，結果果然弄了整個晚上，大概遇到三個問題。 其實 Disqus 對於轉移這件事做了不少工，不過我還是遇到匯出的檔案格式不支援的問題， Disqus 只支援 WordPress 的 wxr 格式，不過我的 MT 4 不能輸出這種格式，後來是使用 Disqus 的 MT plugin 來處理這個問題。 第二個問題是套用到頁面上的問題，因為這裡有使用 CSP，所以勢必要多開一些 domain，大概開了圖片和 script 的 *.disqus.com 和 *.disquscdn.com，不過還有一個我不太想開的 unsafe-eval，目前只能先暫時屈服，正在找管道回報這問題。 第三個問題就是留言對應的 url 不正確，因為我是用 plugin 處理匯出匯入的，他用的網址就是 MT 內部認為的網址，不過在這裡這不是正確的網址，本來我是在頁面讀入的...</b:summary>
				<b:mainContent><p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14006265675/" title="奈良 東大寺 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7400/14006265675_5fe812acae_b.jpg" width="1024" height="683" alt="奈良 東大寺" srcset="https://farm8.staticflickr.com/7400/14006265675_5fe812acae_b.jpg 1024w, https://farm8.staticflickr.com/7400/14006265675_c4f4d31e87_h.jpg 1600w" /></a></p>

<p>因為 MovableType 的反 spam 機制幾乎失靈了，最近廣告又太多，只好狠下心來換到 <a href="http://disqus.com/">Disqus</a>，其實是想換一陣子了，不過覺的話要花不少時間一直沒弄，結果果然弄了整個晚上，大概遇到三個問題。</p>

<p>其實 Disqus 對於轉移這件事做了不少工，不過我還是遇到匯出的檔案格式不支援的問題， Disqus 只支援 WordPress 的 wxr 格式，不過我的 MT 4 不能輸出這種格式，後來是使用 Disqus 的 MT plugin 來處理這個問題。</p>

<p>第二個問題是套用到頁面上的問題，因為這裡有使用 CSP，所以勢必要多開一些 domain，大概開了圖片和 script 的 <code>*.disqus.com</code> 和 <code>*.disquscdn.com</code>，不過還有一個我不太想開的 <em>unsafe-eval</em>，目前只能先暫時屈服，正在找管道回報這問題。</p>

<p>第三個問題就是留言對應的 url 不正確，因為我是用 plugin 處理匯出匯入的，他用的網址就是 MT 內部認為的網址，不過在這裡這不是正確的網址，本來我是在頁面讀入的 script 內做處理，手動指定留言的網址，不過後來發現 Disqus 有 URL mapping 的功能，可以上傳 csv 檔來改網址，而且還支援下載現有的網址清單，設想蠻齊全的。</p>

<p>總之我就這樣換過來了，自己測試留言看來是 ok，還不知道是不是都沒問題了，因為這邊也很少人來留言啊，至於切換過來有什麼優點呢，最主要還是我不想處理 spam 了，再來我可以把 comment 進入點關掉，對網站來說安全些，還有可以把一些流量丟到外面（Disqus 是賺什麼啊？），剩下就是我可以用 Disqus 的一些特殊功能啦，像是訂閱討論串之類的。</p>

<p>對了，照片是隨便挑的，和內文沒關係～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000794" baseName="harukas-300">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-05-02</b:date>
				<b:time>22:12:15</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>大阪新的大樓夜景 HARUKAS 300</b:title>
			<b:content>
				<b:summary> 講到大阪的夜景，我想很多人都知道梅田空中庭園，不過這次關西是第二次去大阪，想說去去不同地方看夜景，剛好看到有人介紹阿倍野HARUKAS大樓，就去看看了，就夜景來說其實我還是比較喜歡梅田的，因為在河邊，不會只是單純的城市夜景，而且有個懸空的電扶梯，搭起來有些提心吊膽，還蠻有趣，本來去 HARUKAS 300 對夜景是沒很期待的，其實也還不差，可以看到新世界地標、道頓崛的唐吉珂德摩天輪和大阪港等等，不過這篇我想說的是 Harukas 300 的規劃和用心程度，目前在我去過的幾個觀景台中是名列前茅的。...</b:summary>
				<b:mainContent><p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14011095382/" title="Harukas 300 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2911/14011095382_9bd7d51bea_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm3.staticflickr.com/2911/14011095382_9bd7d51bea_b.jpg 1024w, https://farm3.staticflickr.com/2911/14011095382_913d08ae27_h.jpg 1600w" /></a></p>

<p>講到大阪的夜景，我想很多人都知道<a href="http://www.kuchu-teien.com/tc/index.html">梅田空中庭園</a>，不過這次關西是第二次去大阪，想說去去不同地方看夜景，剛好看到有人<a href="http://happycloud2013.blogspot.tw/2013/12/kintetsu-rail-pass-wide-abeno.html">介紹</a>阿倍野HARUKAS大樓，就去看看了，就夜景來說其實我還是比較喜歡梅田的，因為在河邊，不會只是單純的城市夜景，而且有個懸空的電扶梯，搭起來有些提心吊膽，還蠻有趣，本來去 HARUKAS  300 對夜景是沒很期待的，其實也還不差，可以看到新世界地標、道頓崛的唐吉珂德摩天輪和大阪港等等，不過這篇我想說的是 Harukas 300 的規劃和用心程度，目前在我去過的幾個觀景台中是名列前茅的。</p>
</b:mainContent>
				<b:extendContent><p>阿倍野HARUKAS是今年才完工的，目前日本第一高的大樓（東京鐵塔和天空樹都更高，不過不是大樓），原址就是近鐵百貨和近鐵阿倍野橋站，2008 年開始改建成現在的<a href="http://www.abenoharukas-300.jp/zh/">阿倍野 HARUKAS 大樓</a>，一樣和近鐵阿倍野橋站共構，下層部就是近鐵百貨，從大阪地鐵和 JR 過去都很方便，比去梅田的藍天大樓要簡單方便太多了，我是搭地鐵過去的，車站直接就在大樓下面，不用走長長的地下通道，然後到 2F 買票的地方也很好找，除了找從 2F 到 16F 入口的電梯時走錯方向找不到外，都很順利，接著就搭高速電梯上到位於 60 樓的觀景台 <a href="http://www.abenoharukas-300.jp/observatory/observatory.html">HARUKAS 300</a>，300 是 300 公尺的意思，順便題一下，台北 101 是超過 500 公尺的。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14014292225/" title="Harukas 300 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7080/14014292225_2ab9bc0d62_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm8.staticflickr.com/7080/14014292225_2ab9bc0d62_b.jpg 1024w, https://farm8.staticflickr.com/7080/14014292225_81fb644e62_h.jpg 1600w" /></a></p>

<p>電梯的天頂有一塊是透明的，然後他們很巧妙的在電梯井裡面裝了燈飾，還蠻漂亮的，本來想錄影下來不過手機沒操作正確就沒錄到了。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14034287973/" title="Harukas 300 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2929/14034287973_551b9a0bff_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm3.staticflickr.com/2929/14034287973_551b9a0bff_b.jpg 1024w, https://farm3.staticflickr.com/2929/14034287973_b4351d5946_h.jpg 1600w" /></a></p>

<p>到達六十樓後我才發現到 HARUKAS  300 很豪氣的用了三層樓，而且是最高的三層，並且是我目前去過看夜景的大樓裡面規劃最好的，六十樓是主要看夜景的地方，叫天上迴廊，五十九樓是出口和商店、五十八樓則是有一個露天的庭園和餐廳，餐廳是室內的，庭園兩邊還有木階梯可以自由坐著，不過因為在戶外所以有點冷，另外 HARUKAS300 並沒有限制不能使用腳架，而且六十樓在入夜後，刻意的沒什麼燈光，只有一些告示的光線，對拍照的人來說是非常棒的一件事，因為可以減少很多花在遮玻璃的反光的時間，如果想要好好拍照，認真看景色的就在這層樓，如果想要休息、吃東西喝飲料就在五十八樓，要離開和購物的在五十九樓，完全都分開不會互相干擾。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14108516893/" title="Harukas 300 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7182/14108516893_083cfb34c6_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm8.staticflickr.com/7182/14108516893_083cfb34c6_b.jpg 1024w, https://farm8.staticflickr.com/7182/14108516893_a8fe6f3434_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14034271613/" title="Harukas 300 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7334/14034271613_df5fc0edb3_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm8.staticflickr.com/7334/14034271613_df5fc0edb3_b.jpg 1024w, https://farm8.staticflickr.com/7334/14034271613_1bd59338a9_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/13991163756/" title="Harukas 300 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5088/13991163756_d3de4b82c2_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm6.staticflickr.com/5088/13991163756_d3de4b82c2_b.jpg 1024w, https://farm6.staticflickr.com/5088/13991163756_fec6339de0_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14011111502/" title="Harukas 300 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7147/14011111502_bbab921ffe_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm8.staticflickr.com/7147/14011111502_bbab921ffe_b.jpg 1024w, https://farm8.staticflickr.com/7147/14011111502_5b970b2627_h.jpg 1600w" /></a></p>

<p>在貼夜景前還要介紹一下 HARUKAS  300 的吉祥物，叫做阿倍野熊，Abeno Bea（bear），可以在彩虹上走，喜歡吃雲和睡覺，身體會隨著天色變色，還可以和他合照，可惜布娃娃都太大了，不然好想買一隻回家的。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14034275663/" title="Harukas 300 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5185/14034275663_bf7cf1429d_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm6.staticflickr.com/5185/14034275663_bf7cf1429d_b.jpg 1024w, https://farm6.staticflickr.com/5185/14034275663_b6521676e6_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14014767634/" title="Harukas 300 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5025/14014767634_7ee6eafebf_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm6.staticflickr.com/5025/14014767634_7ee6eafebf_b.jpg 1024w, https://farm6.staticflickr.com/5025/14014767634_9611ab9f82_h.jpg 1600w" /></a></p>

<p>最後就來看看 HARUKAS  300 的景吧。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14014288025/" title="Harukas 300 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7299/14014288025_5172d41d47_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm8.staticflickr.com/7299/14014288025_5172d41d47_b.jpg 1024w, https://farm8.staticflickr.com/7299/14014288025_2904279e3d_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14034281343/" title="Harukas 300 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7363/14034281343_f016856f57_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm8.staticflickr.com/7363/14034281343_f016856f57_b.jpg 1024w, https://farm8.staticflickr.com/7363/14034281343_6cfec3e974_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14014281005/" title="Harukas 300 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7239/14014281005_3d303b1d3c_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm8.staticflickr.com/7239/14014281005_3d303b1d3c_b.jpg 1024w, https://farm8.staticflickr.com/7239/14014281005_5f715faa86_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/13991187346/" title="Harukas 300 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7276/13991187346_d8609ab7e0_b.jpg" width="683" height="1024" alt="Harukas 300" srcset="https://farm8.staticflickr.com/7276/13991187346_d8609ab7e0_b.jpg 683w, https://farm8.staticflickr.com/7276/13991187346_ea1f27833d_h.jpg 1067w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14011114892/" title="Harukas 300 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5154/14011114892_ffbf60ac55_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm6.staticflickr.com/5154/14011114892_ffbf60ac55_b.jpg 1024w, https://farm6.staticflickr.com/5154/14011114892_3fc83ac4af_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/14011113172/" title="Harukas 300 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7155/14011113172_7fd6daf712_b.jpg" width="1024" height="683" alt="Harukas 300" srcset="https://farm8.staticflickr.com/7155/14011113172_7fd6daf712_b.jpg 1024w, https://farm8.staticflickr.com/7155/14011113172_1ba5fd9e7c_h.jpg 1600w" /></a></p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000793" baseName="web-component-at-osdc">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-04-12</b:date>
				<b:time>23:07:20</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Web Component at OSDC</b:title>
			<b:content>
				<b:summary>/*A_A*/ 這次 OSDC 講的投影片，另外有兩個地方要補充一下，第一個是我的 Github 上的範例，因為用到 HTML Import 的關係，有安全性限制，一定要開個 HTTP Server，不然會出錯誤，然後我有用 gulp 設定好了，理論上裝好 gulp 就可以在 localhost 把開發用的 HTTP Server 開起來，然後現在的 Chrome Canary 無法跑，還不知道原因，所以請用 Chrome Stable。 第二個是現在的參考資料，很大部份都是參考 HTML5 Rocks 的文章，可以參考我之前介紹 Web Component 的文章最下面，這些文章的內容其實一直有在根據實做更新，所以會發現和 Spec Draft 定義不一樣。...</b:summary>
				<b:mainContent><script async="async" class="speakerdeck-embed" data-id="7b33cc90a36601311a734eb53c3a6292" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js">/*A_A*/</script>

<p>這次 OSDC 講的投影片，另外有兩個地方要補充一下，第一個是我的 Github 上的<a href="https://github.com/othree/web-component-test">範例</a>，因為用到 HTML Import 的關係，有安全性限制，一定要開個 HTTP Server，不然會出錯誤，然後我有用 gulp 設定好了，理論上裝好 gulp 就可以在 localhost 把開發用的 HTTP Server 開起來，然後現在的 Chrome Canary 無法跑，還不知道原因，所以請用 Chrome Stable。</p>

<p>第二個是現在的參考資料，很大部份都是參考 HTML5 Rocks 的文章，可以參考我之前介紹 <a href="https://blog.othree.net/log/2013/11/27/web-component/">Web Component</a> 的文章最下面，這些文章的內容其實一直有在根據實做更新，所以會發現和 Spec Draft 定義不一樣。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000792" baseName="cve-2014-0160">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-04-08</b:date>
				<b:time>23:00:03</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>OpenSSL 安全性問題 CVE-2014-0160</b:title>
			<b:content>
				<b:summary>今天資安的大新聞就是這個了，OpenSSL 的 新弱點，嚴重程度高到還有一個專站 heartbleed.com （心在流血）。也有人幫忙做了檢測工具可以看看你的網站有沒有在影響範圍內，不過因為弱點是在 OpenSSL 上，所以其實不是只有網站會受影響，總之有問題的看到會像是這樣： 沒問題的話會是： 第一時間有很多大站都中鏢了，像是 github 之類的，不過我剛剛看已經修好了，我的 server 用的是 Ubuntu 12 LTS 就是 apt 更新過後重開就好了，建議是連 key 也重新生就是，更詳細的資訊可以看看 Server Fault 的問答...</b:summary>
				<b:mainContent><p>今天資安的大新聞就是這個了，OpenSSL 的 <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160">新弱點</a>，嚴重程度高到還有一個專站 <a href="http://heartbleed.com/">heartbleed.com</a> （心在流血）。也有人幫忙做了<a href="http://filippo.io/Heartbleed/">檢測工具</a>可以看看你的網站有沒有在影響範圍內，不過因為弱點是在 OpenSSL 上，所以其實不是只有網站會受影響，總之有問題的看到會像是這樣：</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/13717637293/" title="CVE-2014-016 Vulnerable by othree, on Flickr"><img src="https://farm8.staticflickr.com/7453/13717637293_10e2cde873_b.jpg" width="1024" height="853" alt="CVE-2014-016 Vulnerable" srcset="https://farm8.staticflickr.com/7453/13717637293_10e2cde873_b.jpg 1024w" /></a></p>

<p>沒問題的話會是：</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/13717637123/" title="CVE-2014-0160 pass by othree, on Flickr"><img src="https://farm8.staticflickr.com/7377/13717637123_3703d23ca2_b.jpg" width="1024" height="555" alt="CVE-2014-0160 pass" srcset="https://farm8.staticflickr.com/7377/13717637123_3703d23ca2_b.jpg 1024w" /></a></p>

<p>第一時間有很多大站都中鏢了，像是 github 之類的，不過我剛剛看已經修好了，我的 server 用的是 Ubuntu 12 LTS 就是 apt 更新過後重開就好了，建議是連 key 也重新生就是，更詳細的資訊可以看看 Server Fault 的<a href="http://serverfault.com/questions/587329/heartbleed-what-is-it-and-what-are-options-to-mitigate-it">問答</a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000791" baseName="immediate-in-js">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-03-02</b:date>
				<b:time>13:50:53</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>process.nextTick, setImmediate, setTimeout, requestAnimationFrame</b:title>
			<b:content>
				<b:summary>標題這幾個 API 是感覺功能有些接近的東西，process.nextTick 是 node 的，setImmediate 是微軟提出但是只有 IE 和 node 有實作，setTimeout 是最老牌的，感覺後面給它 0ms 延遲，效果和其他幾個很像，requestAnimationFrame 則是更新畫面作動畫時用的新 API，那細部這幾個 API 有什麼差異呢？ 要繼續之前可能要先了解一下 JavaScript Event Loop，和 Timer 還有瀏覽器更新 UI 的關係，可以參考 John Resig 的 How JavaScript Timers Work 這篇文章，標題那四個 API 除了最後一個 requestAnimationFrame 一定是等到瀏覽器要更新 UI 了才會呼叫到，然後螢幕有個更新頻率，不管怎樣快都不會到千分之一秒叫一次，所以它基本上就是最慢的。...</b:summary>
				<b:mainContent><p>標題這幾個 API 是感覺功能有些接近的東西，<code>process.nextTick</code> 是 node 的，<code>setImmediate</code> 是微軟提出但是只有 IE 和 node 有實作，<code>setTimeout</code> 是最老牌的，感覺後面給它 0ms 延遲，效果和其他幾個很像，<code>requestAnimationFrame</code> 則是更新畫面作動畫時用的新 API，那細部這幾個 API 有什麼差異呢？</p>

<p>要繼續之前可能要先了解一下 JavaScript Event Loop，和 Timer 還有瀏覽器更新 UI 的關係，可以參考 John Resig 的 <a href="http://ejohn.org/blog/how-javascript-timers-work/">How JavaScript Timers Work</a> 這篇文章，標題那四個 API 除了最後一個 requestAnimationFrame 一定是等到瀏覽器要更新 UI 了才會呼叫到，然後螢幕有個更新頻率，不管怎樣快都不會到千分之一秒叫一次，所以它基本上就是最慢的。</p>

<p>那前面三個有什麼差別呢？先來看看 <code>setImmediate</code> 和 <code>setTimeout</code>，根據微軟的<a href="http://ie.microsoft.com/testdrive/Performance/setImmediateSorting/Default.html">說法</a>，因為 setTimeout 有個最小的 4ms 延遲，所以他們設計了 setImmediate 這個完全無延遲的 API 介面出來，不過其實根據 whatwg 的 <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout">spec</a>，其實要 nesting 的 setTimeout call 才要加上這個 4ms 最小延遲，也就是在 setTimeout 裡面又呼叫 setTimeout 這種狀況，而且要超過五層，會這樣設計是為了避免連續的 setTimout 會造成 UI 卡住，所以我猜是微軟的 setTimeout 實作不正確，而 <a href="https://code.google.com/p/chromium/issues/detail?id=146172">Webkit</a> 和 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=686201">Firefox</a> 也因此都沒實作它，總之要是正確的作 setTimout，不要連續呼叫超過五層，那他和 setImmediate 應該會是一樣快的，順代一題，微軟那個比較的網頁上就沒有設成 0ms 的 case 可以看在其他瀏覽器上的表現。</p>

<p>最後一個是 <code>process.nextTick</code> 了，這是 node 才有的 API，它和後面三個的作法不太一樣，速度也是所有 API 裡面最快的，實際上它不是把 function 丟到 timer 的 queue 裡面等，而是跟系統說，現在這個 all stack 結束後，立即去執行這些 function，也就是它其實是獨立的 queue，所有丟到 nextTick 裡面的 function 都執行完後，才輪的到 setImmediate 或是其他 UI、系統 IO 的份，而這個 queue 是先進先出，所以其實還蠻好用的，難怪在 node 裡面感覺大家用得很兇，不過要注意。</p>

<p>回頭看一下 setImmediate，其實網路上也是有不少 <a href="https://github.com/NobleJS/setImmediate">polyfill</a> 提供，這些實作都是用 postMessage 來避開 setTimeout 會產生的 4ms 最小延遲，無法使用 postMessage 時會 fallback 到 setTimout。其實會看這些東西是因為 browserify 的關係，因為 <a href="http://browserify.org/">browserify</a> 有說會提供 node 的東西到瀏覽器上，像是 <code>process.nextTick</code>，好奇了一下 <code>setImmediate</code> 有沒有也提供，結果看起來目前是沒有，不過深入研究之後也發現其實不是真的有這個需要就是了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000790" baseName="object-fit">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-01-28</b:date>
				<b:time>22:32:51</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>object-fit</b:title>
			<b:content>
				<b:summary>在一些情境下，網站的圖片來源可能無法和版面很契合，例如新聞網站，新聞的照片可能有直的橫的，甚至有不同的寬高比，但是網站的版面配置不可能配合所有的可能性，如果想要有個封面故事，又要個滿版的照片，又或者是提供給 Facebook 的照片，它的縮圖都是正方形的，但是大部分的時候，文章的照片都不會是這種比例，最理想是有個 server 端的程式可以幫忙把圖片轉成想要的大小，例如 Facebook 其實是有個程式來作這件事，包括調整大小、重新壓縮、快取，大概連雲端分散式儲存的部份等等問題都一口氣處理掉了。 如果要純前端處理，其實目前最好用的作法是用 CSS3 Background 的 background-size: cover;，這個樣式會讓標籤的背景圖調整成剛好可以填滿元素大小的程度，當然也考慮好寬高比了，這個方法最主要的缺點在於把圖片從 HTML 文件中抽掉了，在語意上不太好，像是搜尋引擎之類的，對於 &lt;img&gt; 和 CSS 背景的處理應該還是會有差異的，例如 Google 圖片搜尋我就沒印象有找到 CSS 的背景圖過。 要維持 &lt;img&gt; 標籤的存在，又要不管大小和寬高比都可以滿版，在現在是只能用 JavaScript 來輔助，實際上的邏輯也不會太複雜，其實就是比較一下版面的寬高比和圖片的寬高比，然後決定用外框的寬還是高當基準，接著維持圖片的寬高比縮放到計算的大小，定位到讓圖片置中，寫成 jQuery plugin 大概像是下面這樣： $.fn.cover = (selector) -&gt; $(@).each -&gt; $outer = $(@)...</b:summary>
				<b:mainContent><p>在一些情境下，網站的圖片來源可能無法和版面很契合，例如新聞網站，新聞的照片可能有直的橫的，甚至有不同的寬高比，但是網站的版面配置不可能配合所有的可能性，如果想要有個封面故事，又要個滿版的照片，又或者是提供給 Facebook 的照片，它的縮圖都是正方形的，但是大部分的時候，文章的照片都不會是這種比例，最理想是有個 server 端的程式可以幫忙把圖片轉成想要的大小，例如 Facebook 其實是有個程式來作這件事，包括調整大小、重新壓縮、快取，大概連雲端分散式儲存的部份等等問題都一口氣處理掉了。</p>

<p>如果要純前端處理，其實目前最好用的作法是用 <a href="http://www.w3.org/TR/css3-background/#the-background-size">CSS3 Background</a> 的 <code>background-size: cover;</code>，這個樣式會讓標籤的背景圖調整成剛好可以填滿元素大小的程度，當然也考慮好寬高比了，這個方法最主要的缺點在於把圖片從 HTML 文件中抽掉了，在語意上不太好，像是搜尋引擎之類的，對於 <code>&lt;img&gt;</code> 和 CSS 背景的處理應該還是會有差異的，例如 Google 圖片搜尋我就沒印象有找到 CSS 的背景圖過。</p>

<p>要維持 <code>&lt;img&gt;</code> 標籤的存在，又要不管大小和寬高比都可以滿版，在現在是只能用 JavaScript 來輔助，實際上的邏輯也不會太複雜，其實就是比較一下版面的寬高比和圖片的寬高比，然後決定用外框的寬還是高當基準，接著維持圖片的寬高比縮放到計算的大小，定位到讓圖片置中，寫成 jQuery plugin 大概像是下面這樣：</p>

<pre><code>$.fn.cover = (selector) -&gt;
  $(@).each -&gt;
    $outer = $(@)
    ow = $outer.width()
    oh = $outer.height()
    or = ow / oh
    $outer.find(selector).each -&gt;
      $item = $(@)
      iw = $item.width()
      ih = $item.height()
      ir = iw / ih
      if ir &lt; or
        w = ow
        h = ow / ir
        l = 0
        t = (oh - h) / 2
      else
        h = oh
        w = oh * ir
        t = 0
        l = (ow - w) / 2

      $item.css(width: w, height: h, top: t, left: l)
</code></pre>

<p>使用範例：</p>

<pre><code>$('.cell').cover('img')
</code></pre>

<p>不過實際上還要考慮的問題不少，像是執行的時間點，上面這個範例可以運作的時間不只要圖片讀好，有正確的寬高之外，<code>.cell</code> 或是說 <code>$outer</code> 也要在頁面上顯示，有 render 過，才能夠取得它的寬高，整個函式才能夠正確的運作，結果就是訪客其實會看到一瞬間圖片調整好大小位置前的樣子。</p>

<p>用 JavaScript 加上 <code>&lt;img&gt;</code> 這個方案的缺點除了上面說的之外，還有一個是會需要多一層的標籤，不過目前還是很多人會使用這個方案，也有不少 Library 在處理這個問題，像是 <a href="http://soulwire.github.io/fit.js/">fit.js</a>。</p>

<p>這個問題，其實在未來就不存在了，CSS3 Image 裡面有個新的樣式定義就是為了處理這個問題，叫做 <a href="http://dev.w3.org/csswg/css-images-3/#object-fit">object-fit</a>，可以想像成讓 <code>&lt;img&gt;</code> 標籤可以用 background-image 的方式來操控裡面的圖面了，而對應 <code>background-size</code> 的，就是 <code>object-fit</code> 了，未來可以這樣寫 HTML：</p>

<pre><code>&lt;img src="http://blah.com/blah.png" class="cover" width="300" height="300" /&gt;
</code></pre>

<p>配上 CSS：</p>

<pre><code>img.cover {
  object-fit: cover;
}
</code></pre>

<p>就可以同時達到不用多一層標籤，又有實際的 <code>&lt;img&gt;</code>，加上不用 JavaScript，不用考慮 resize 圖片的時機，非常的完美，不過這個新標準目前實作的瀏覽器不多，只有 Chrome 和換成 WebKit 前的 Opera，Opera 的 blog 也有發表過一篇文章介紹這個新屬性：<a href="http://dev.opera.com/articles/view/css3-object-fit-object-position/">CSS3 Object Fit Object Position</a>，裡面也有不少範例可以用 Chrome 開來試試看。</p>

<p>要說有什麼缺點的話，其實還是有的，就是這個 object-fit 不是排版用的，只能用在圖片上，不像 JavaScript library 基本上是什麼元素都可以調整，沒有受限。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000789" baseName="mozilla-monument">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-01-15</b:date>
				<b:time>23:54:32</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>Mozilla Monument</b:title>
			<b:content>
				<b:summary> 參加 Mozilla Summit 時說的紀念碑已經做好了，最近有社群朋友去把每面都拍下來，於是就出現了找名字的風潮，我也找到我的名字所以紀念一下，希望有機會去親眼看看。...</b:summary>
				<b:mainContent><p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/11966368896/" title="othree at Mozilla SF Monument by othree, on Flickr"><img src="https://farm6.staticflickr.com/5508/11966368896_b7bfcb2c90_b.jpg" width="1024" height="864" alt="othree at Mozilla SF Monument" srcset="https://farm6.staticflickr.com/5508/11966368896_b7bfcb2c90_b.jpg 1024w" /></a></p>

<p>參加 Mozilla Summit 時說的紀念碑已經做好了，最近有社群朋友去把每面都拍下來，於是就出現了找名字的風潮，我也找到我的名字所以紀念一下，希望有機會去親眼看看。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000787" baseName="mixed-content">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-01-08</b:date>
				<b:time>23:45:54</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Mixed Content</b:title>
			<b:content>
				<b:summary>最近在翻舊文章，檢查連結圖片時，看到幾篇文章有引用 ted.com 的影片，不過現在卻看不到影片了，研究一陣子發現是因為 ted.com 還沒有支援 https，但是我這邊已經是用 https 連線了，這種情況在現在主流瀏覽器包括 Firefox、Chrome、IE ，http 的內容都是會被擋下來的，而且即使站長在 CSP 裡面有加到白名單也沒用（後來想想還算合理，兩邊設計的角度不一樣），被擋下來時其實瀏覽器都會有通知訪客： IE 在開發工具內還會有紅字嚇人： 訪客是可以自己去打開這個限制的，不過這樣做之後，畫面上都還會有警示，像是 Firefox 在網址前面會有個黃色三角形： Chrome 則是會把 https 劃掉： 一度想要用 proxy 方式來處理，不過後來放棄了，ted.com 那邊的 html 內的連結寫法還真是多采多姿啊（遠目）。這問題其實正解就是要 ted.com 去支援安全連線，所以我寫信去跟他們建議了，不過一時半刻也不會解決，所以還是需要個暫時解決的方法，目前想法是寫個說明，就像是這篇文章，然後有引用 ted.com 影片的文章都加上連結到這篇文章，除此之外，除了 embed iframe 外，也加上普通的超連結，這樣訪客也可以不要開例外允許非安全連線內容，而是直接連去 ted.com 看影片，像是 TOSSUG HTML5 分享補充...</b:summary>
				<b:mainContent><p>最近在翻舊文章，檢查連結圖片時，看到幾篇文章有引用 <a href="http://www.ted.com/">ted.com</a> 的影片，不過現在卻看不到影片了，研究一陣子發現是因為 ted.com 還沒有支援 https，但是我這邊已經是用 https 連線了，這種情況在現在主流瀏覽器包括 Firefox、Chrome、IE ，http 的內容都是會被擋下來的，而且即使站長在 CSP 裡面有加到白名單也沒用（後來想想還算合理，兩邊設計的角度不一樣），被擋下來時其實瀏覽器都會有通知訪客：</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/11834406594/" title="Firefox block mixed content by othree, on Flickr"><img src="https://farm6.staticflickr.com/5511/11834406594_683ec5e488_b.jpg" width="1024" height="783" alt="Firefox block mixed content" srcset="https://farm6.staticflickr.com/5511/11834406594_683ec5e488_b.jpg 1024w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/11834272353/" title="Chrome block mixed content by othree, on Flickr"><img src="https://farm8.staticflickr.com/7415/11834272353_88d18f35c4_b.jpg" width="1024" height="783" alt="Chrome block mixed content" srcset="https://farm8.staticflickr.com/7415/11834272353_88d18f35c4_b.jpg 1024w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/11820942545/" title="IE block mixed content by othree, on Flickr"><img src="https://farm4.staticflickr.com/3696/11820942545_45a9948590_b.jpg" width="1024" height="768" alt="IE block mixed content" srcset="https://farm4.staticflickr.com/3696/11820942545_45a9948590_b.jpg 1024w" /></a></p>

<p>IE 在開發工具內還會有紅字嚇人：</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/11820942315/" title="IE block mixed content by othree, on Flickr"><img src="https://farm4.staticflickr.com/3742/11820942315_803c340984_b.jpg" width="930" height="520" alt="IE block mixed content" srcset="https://farm4.staticflickr.com/3742/11820942315_803c340984_b.jpg 1024w" /></a></p>

<p>訪客是可以自己去打開這個限制的，不過這樣做之後，畫面上都還會有警示，像是 Firefox 在網址前面會有個黃色三角形：</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/11834407574/" title="Firefox allow mixed content by othree, on Flickr"><img src="https://farm8.staticflickr.com/7290/11834407574_99c84f38d3_b.jpg" width="1024" height="783" alt="Firefox allow mixed content" srcset="https://farm8.staticflickr.com/7290/11834407574_99c84f38d3_b.jpg 1024w" /></a></p>

<p>Chrome 則是會把 https 劃掉：</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/11834272603/" title="Chrome allow mixed content by othree, on Flickr"><img src="https://farm4.staticflickr.com/3771/11834272603_5bf07439ea_b.jpg" width="1024" height="783" alt="Chrome allow mixed content" srcset="https://farm4.staticflickr.com/3771/11834272603_5bf07439ea_b.jpg 1024w" /></a></p>

<p>一度想要用 proxy 方式來處理，不過後來放棄了，ted.com 那邊的 html 內的連結寫法還真是多采多姿啊（遠目）。這問題其實正解就是要 ted.com 去支援安全連線，所以我寫信去跟他們建議了，不過一時半刻也不會解決，所以還是需要個暫時解決的方法，目前想法是寫個說明，就像是這篇文章，然後有引用 ted.com 影片的文章都加上連結到這篇文章，除此之外，除了 embed iframe 外，也加上普通的超連結，這樣訪客也可以不要開例外允許非安全連線內容，而是直接連去 ted.com 看影片，像是 <a href="https://blog.othree.net/log/2010/07/24/tossug-html5-talk/">TOSSUG HTML5 分享補充</a> 這篇文章。</p>

<p>最後附上瀏覽器的說明：</p>

<ul>
<li><a href="https://blog.mozilla.org/tanvi/2013/04/10/mixed-content-blocking-enabled-in-firefox-23/">Firefox Announce</a></li>
<li><a href="https://support.mozilla.org/zh-TW/kb/how-does-content-isnt-secure-affect-my-safety?as=u&amp;utm_source=inproduct">Firefox Help</a></li>
<li><a href="https://groups.google.com/a/chromium.org/forum/#!topic/chromium-dev/-fOQXnJqtWU">Chromium Announce</a></li>
<li><a href="https://support.google.com/chrome/answer/1342714?hl=zh-Hant">Chrome Help</a></li>
</ul>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000786" baseName="more-twitter-cards">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-01-05</b:date>
				<b:time>00:34:06</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>More Twitter Cards</b:title>
			<b:content>
				<b:summary>進入本題前，先岔題到 open graph 一下，就是前兩天才注意到要用 Open Graph protocol 的話，其實在 html 裡面要加上 prefix="og: http://ogp.me/ns#" 的屬性和值： &lt;!DOCTYPE html&gt; &lt;html xmlns="http://www.w3.org/1999/xhtml" lang="zh-tw" prefix="og: http://ogp.me/ns#" &gt; 這個 prefix 屬性其實是 RDFa 來的，所以其實 Open Graph Protocol 也是走 RDFa 系統，Twitter Card 就比較沒走的這麼語意網了。 這篇其實是要說 Twitter Card 的更新，首先是卡片的種類變多了，在一開始只有 Photo、Summary 和...</b:summary>
				<b:mainContent><p>進入本題前，先岔題到 open graph 一下，就是前兩天才注意到要用 <a href="http://opengraphprotocol.org/">Open Graph protocol</a> 的話，其實在 html 裡面要加上 <code>prefix="og: http://ogp.me/ns#"</code> 的屬性和值：</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html
    xmlns="http://www.w3.org/1999/xhtml"
    lang="zh-tw"
    prefix="og: http://ogp.me/ns#"
&gt;
</code></pre>

<p>這個 prefix 屬性其實是 <a href="http://www.w3.org/TR/rdfa-syntax/#s_syntax">RDFa</a> 來的，所以其實 Open Graph Protocol 也是走 RDFa 系統，Twitter Card 就比較沒走的這麼語意網了。</p>

<p>這篇其實是要說 Twitter Card 的更新，首先是卡片的種類變多了，在一開始只有 Photo、Summary 和 Player 三種，現在則又多了 App、Product、Gallery 和 Summary Large Image 四種。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/11754350766/" title="Twitter Card by othree, on Flickr"><img src="https://farm4.staticflickr.com/3755/11754350766_84fd72a647_c.jpg" width="666" height="800" alt="Twitter Card" srcset="https://farm4.staticflickr.com/3755/11754350766_84fd72a647_c.jpg 768w" /></a></p>

<p>其中 App 還蠻早就有了，以前如果貼 iTunes Store 連結的話就可以看到，只是一開始沒開放申請的樣子，新的幾種卡片我最想要的其實是 Summary Large Image，這個其實就是最早的 Photo 卡片的樣子，和 Photo 其實只差 description，我一開始會偷用 Photo 卡片來讓文章的圖片比較大，只是他們後來改成不會顯示我提供的文章摘要，直到前幾天才發現有新的 Summary Large Image，完全就是當初的 Photo 卡啊，所以看到就立馬申請下去。</p>

<p>申請的過程和以前也不一樣了，現在是在卡片<a href="https://dev.twitter.com/docs/cards/validation/validator">測試工具</a>那邊先測試，如果驗證格式沒問題就會出現黃色的通知和申請鈕可以按下去，如果是已經申請通過的話就會是綠色的。還有就是測試工具也多了組出 sample code 的功能，還算蠻不錯的，有些比較複雜的卡片格式就可以利用這個工具來搞清楚。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/11754351616/" title="Twitter Card by othree, on Flickr"><img src="https://farm3.staticflickr.com/2806/11754351616_f76fa313e2_b.jpg" width="1024" height="694" alt="Twitter Card" srcset="https://farm3.staticflickr.com/2806/11754351616_f76fa313e2_b.jpg 1024w, https://farm3.staticflickr.com/2806/11754351616_8849f50858_h.jpg 1600w" /></a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000785" baseName="scrolling-performance">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-01-01</b:date>
				<b:time>01:49:24</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>Scrolling Performance</b:title>
			<b:content>
				<b:summary>元旦就是要來發篇技術文章的啦。 一直覺得我的 blog 在 scroll 的時候好像不是很順暢，把之前亂加的 parallax 特效拿掉也沒什麼改善，於是週末花了些時間研究了一下，其實要改進捲動時效能可以作的事情大概就是那些，Fixing a parallax scrolling website to run in 60 FPS 這篇文章有整理成條目： Resize、scroll 事件不要在迴圈內綁 Resize、scroll 事件的 handler 用 requestAnimationFrame 來執行 避免 resize 大張圖片 避免 background-size HTML5 Rocks 的 Scrolling Performance 這篇文章則是介紹如何分析網站捲動的效能，也有提到一些上面那篇文章沒講到的項目，像是避免 repaint，避免一些計算比較昂貴的 style 等。另外最近還有一個很有名的...</b:summary>
				<b:mainContent><p>元旦就是要來發篇技術文章的啦。</p>

<p>一直覺得我的 blog 在 scroll 的時候好像不是很順暢，把之前亂加的 parallax 特效拿掉也沒什麼改善，於是週末花了些時間研究了一下，其實要改進捲動時效能可以作的事情大概就是那些，<a href="http://kristerkari.github.io/adventures-in-webkit-land/blog/2013/08/30/fixing-a-parallax-scrolling-website-to-run-in-60-fps/">Fixing a parallax scrolling website to run in 60 FPS</a> 這篇文章有整理成條目：</p>

<ol>
<li>Resize、scroll 事件不要在迴圈內綁</li>
<li>Resize、scroll 事件的 handler 用 requestAnimationFrame 來執行</li>
<li>避免 resize 大張圖片</li>
<li>避免 background-size</li>
</ol>

<p>HTML5 Rocks 的 <a href="http://www.html5rocks.com/en/tutorials/speed/scrolling/">Scrolling Performance</a> 這篇文章則是介紹如何分析網站捲動的效能，也有提到一些上面那篇文章沒講到的項目，像是避免 repaint，避免一些計算比較昂貴的 style 等。另外最近還有一個很有名的 <a href="http://www.thecssninja.com/javascript/pointer-events-60fps">hack</a>，是在捲動時，使用 <code>pointer-events: none;</code> 來避免元件產生 hover 的特效結果增加畫面 painting 的運算。</p>

<p>在講我遇到的問題前想先來說一下下面這張圖怎麼看：</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/11624929755/" title="Scroll cause image resize by othree, on Flickr"><img src="https://farm4.staticflickr.com/3780/11624929755_c33c8aa3f0_b.jpg" width="1024" height="750" alt="Scroll cause image resize" srcset="https://farm4.staticflickr.com/3780/11624929755_c33c8aa3f0_b.jpg 1024w" /></a></p>

<p>這張圖是 Chrome 的內建開發工具，目前要作 performance tuning 最好的工具還是 Chrome 開發工具的這個 Timeline 和 Profile，網路上找的到的相關資源也是以 Chrome 為主。這張圖的上半是 framerate 的狀態表示，上面的綠色 bar 代表的是生成畫面前運算執行的時間，所以是越短越好，可以看到那個區塊有兩條橫線，右邊寫了 30fps 和 60fps，意思是執行時間只要能壓在那條線下面，就可以讓頁面有該 frame rate 的表現。下半部就可以拉近去細看不同時間點做了哪些事情，像是圖片 decode、resize、事件的 callback 執行等等都可以分辨。</p>

<p>使用這個開發工具來看到底是那邊計算很花時間，結果發現一直有 image resize 的運算在發生，即使我的圖片都已經全部讀好，頁面從頭卷到尾過，只要從新捲動就會發現 Chrome 又重新把 resize 過的 image 再 resize 一次，後來同事 <a href="http://blog.linmic.net/">Linmic</a> 寫了 test case 來測試各種定義圖片寬高的方法：</p>

<ul>
<li><code>&lt;img&gt;</code> width/height 屬性</li>
<li>CSS 相對長度定義（百分比、em）</li>
<li>CSS 絕對長對定義（px）</li>
<li>CSS 背景圖 + background-size</li>
</ul>

<p>等等，結果發現只有第一個方法圖片不會因為頁面捲動而需要重新 resize，簡單說就是，如果圖片的寬高是用到 CSS 的定義來決定的話，那在 Chrome 下就會有個 bug 是，頁面捲動時，即使圖片尺寸沒有變過，Chrome 還是會重新去 resize。根據目測，這問題在 Firefox 和 Safari 上是沒有的樣子，Chrome 的差距比較大，而且現在因為 responsive design 的關係，文章內的插圖很多寬高都是相對的寬高，像是很多人用的 <a href="http://getbootstrap.com/">Bootstrap</a> 就是這樣，其實影響的範圍蠻廣的，而且找不到方法可以避開，搜尋一下看起來是有一張 <a href="https://code.google.com/p/chromium/issues/detail?id=162514">issue</a>，希望能夠早點修復啊。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
