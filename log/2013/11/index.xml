<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>m</b:listType>
			<b:listData listID="2013-11">November 2013</b:listData>

			<b:previous>
				<b:mTitle>October 2013</b:mTitle>
				<b:mDate>2013/10</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>December 2013</b:mTitle>
				<b:mDate>2013/12</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000770" baseName="web-component">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-11-27</b:date>
				<b:time>19:35:38</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Web Component</b:title>
			<b:content>
				<b:summary>最近覺得可以開始玩 Web Component 了，然後就開始研究，本來以為應該會是個簡單的東西，結果意外的有一些細節還蠻複雜，有些設計目前也不知道為什麼，不過還是從基本的來開始整理吧。 Web Component 其實最早只有 Shaodw DOM 的概念，不過現在已經變成好幾個標準合在一起來構成 component 了，這些標準中，最主要的三個分別是： Shadow DOM Custom Element HTML Imports 這三者分別都是構成 Web Component 很重要的元素，不過也分別規範了一些不是單純只能應用在 Web Component 上的功能，這篇文章不一定會說到這些特色，一切都看緣份吧～...</b:summary>
				<b:mainContent><p>最近覺得可以開始玩 Web Component 了，然後就開始研究，本來以為應該會是個簡單的東西，結果意外的有一些細節還蠻複雜，有些設計目前也不知道為什麼，不過還是從基本的來開始整理吧。</p>

<p>Web Component 其實最早只有 Shaodw DOM 的概念，不過現在已經變成好幾個標準合在一起來構成 component 了，這些標準中，最主要的三個分別是：</p>

<ul>
<li><a href="http://www.w3.org/TR/shadow-dom/">Shadow DOM</a></li>
<li><a href="http://www.w3.org/TR/custom-elements/">Custom Element</a></li>
<li><a href="http://www.w3.org/TR/html-imports/">HTML Imports</a></li>
</ul>

<p>這三者分別都是構成 Web Component 很重要的元素，不過也分別規範了一些不是單純只能應用在 Web Component 上的功能，這篇文章不一定會說到這些特色，一切都看緣份吧～</p>
</b:mainContent>
				<b:extendContent><h4>Shadow DOM</h4>

<p>我所知當中這是最早被提出的部分，這份文件的目的在提出一套標準來在文件樹上把一些 DOM 節點隱藏起來，有這個需求的原因是因為現在越來越多的自訂 UI 元件，為了達成效果可能用了很多的 <code>&lt;div&gt;</code>、<code>&lt;span&gt;</code> 等元素，但是在做 DOM Traversal 或是 Inspect 時，這些元素的出現其實很多餘，而且看起來會很花，如果是開發要除錯看到大量不相干的東西實在是很干擾，而最重要的其實是，如果要把能讓這些自訂元件模組化再利用，那應該也要能把東西封裝起來。</p>

<p>Shadow DOM 最大的功用就是在 DOM Tree 上能把子文件樹封裝起來的機制，使用很簡單，就在你想要放隱藏元件結構的地方，執行 <code>createShadowRoot()</code>，然後把東西塞進去就可以了：</p>

<pre><code>var host = document.querySelector('.custom-component');
var root = host.createShadowRoot();
host.innerHTML = html_template_string;
</code></pre>

<p>目前應該還只有 Chrome 支援，而且要先去 <code>about:flags</code> 裡面把「Experimental Web Platform features」打開，然後標準還沒定案，所以其實現在要執行 <code>webkitCreateShadowRoot</code> 才會動。這個 function 回傳的東西稱為 <em>shadow root</em>，它下面的文件樹就稱為 <em>shadow tree</em>，至於 <code>host</code> 那個變數所指的 DOM node 則是 <em>shadow host</em>。</p>

<p>簡單說的 Shadow DOM 就這樣講完了，不過事情當然不會這麼簡單，還有幾個問題要解決，首先第一個是 style，要給 shadow tree 內的元素加上樣式其實就把 style 標籤也插進去就可以了：</p>

<pre><code>var html_template_string = 
    '&lt;style&gt;div { color: red; }&lt;/style&gt;&lt;div&gt;Click me!&lt;/div&gt;';
</code></pre>

<p>預設這種在 shadow tree 裡面的 style 都是 <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#attr-style-scoped">scoped</a> 的，是從 host 節點開始算，所以包括 host 節點本身也會受到影響，而在這邊，一個新的 CSS at-rule <code>@host</code> 就誕生了，是專門從 shadow tree 裡面來對外面的 host 節點的樣式做調整用的：</p>

<pre><code>@host {
    .custom-component {
        display: inline-block;
    }
}
</code></pre>

<p>第二個問題則是，如果我要做的 custom element 是下拉式選單時，我的選項哪裡來呢？當然我可以直接把東西用 JS 寫到 shadow tree 裡面，但是如果是用以前的 <code>&lt;select&gt;</code> 的話，是用 <code>&lt;select&gt;</code> 下的子節點作為選項的來源。：</p>

<pre><code>&lt;select&gt;
    &lt;option value="1"&gt; 1
    &lt;option value="2"&gt; 2
    &lt;option value="3"&gt; 3
&lt;/select&gt;
</code></pre>

<p>如果要用 shadow DOM 做到類似的效果，把複雜的 UI 呈現用結構藏起來，只讓單純的選項出現在文件樹內，也是可以辦到的，不過比較複雜，這個特性叫 distribution，配合一個新的標籤 <code>&lt;content&gt;</code> 和 CSS selector 來把 shadow host 的子元素移動到 shadow tree 內。</p>

<p>舉例來說，下面是我的 shadow host 節點：</p>

<pre><code>&lt;div class="x-header"&gt;
    &lt;h1&gt;Site Name&lt;/h1&gt;
    &lt;h2&gt;Section 1&lt;/h2&gt;
    &lt;h2&gt;Section 2&lt;/h2&gt;
    &lt;h2&gt;Section 3&lt;/h2&gt;
&lt;/div&gt;
</code></pre>

<p>除了他自己外還有一個大標題，三個小標題。然後我希望丟進 shadow root 的結構如下：</p>

<pre><code>&lt;header&gt;
   &lt;img src="logo.png" /&gt;
   &lt;h1&gt;Site Name&lt;/h1&gt;
&lt;/header&gt;
&lt;nav&gt;
    &lt;div class="wrapper"&gt;
        &lt;h2&gt;Section 1&lt;/h2&gt;
        &lt;h2&gt;Section 2&lt;/h2&gt;
        &lt;h2&gt;Section 3&lt;/h2&gt;
    &lt;/div&gt;
&lt;/nav&gt;
</code></pre>

<p>那麼我可以用 <code>&lt;content&gt;</code> 來辦到：</p>

<pre><code>&lt;header&gt;
   &lt;img src="logo.png" /&gt;
   &lt;content select="h1"&gt;
&lt;/header&gt;
&lt;nav&gt;
    &lt;div class="wrapper"&gt;
        &lt;content select="h2"&gt;
    &lt;/div&gt;
&lt;/nav&gt;
</code></pre>

<p><code>select</code> 屬性的內容是 CSS selector，可以把符合該 selector 的 shadow host 子節點抓出來放在 <code>&lt;content&gt;</code> 的位置。如果不給任何 selector 的話，就會把全部的東西都抓過去，像下拉選單就可以用這種方式來把選項填入 shadow tree。</p>

<p>不過這邊要注意，distributed 的 DOM node 吃的樣式是外面的文件的樣式，shadow tree 裡面的 style 不會套用到他們上面。</p>

<p>第三個問題是，用 JS 字串或是動態產生 DOM 節點的方式來作 shadow DOM 的內容實在很多問題，所以 HTML 還多了個 <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/templates/index.html">Templates</a> 擴充，就是多了一個眾望所歸的 <code>&lt;template&gt;</code> 標籤，內容會 parse，會有內容的 DOM tree，但是不 render，所以裡面需要的圖片、JS 等等都不會抓下來，然後 template 標籤的 <code>content</code> 屬性就是內容的 DOM node，所以第一段程式碼範例就可以改寫成：</p>

<pre><code>var host = document.querySelector('.custom-component');
var root = host.createShadowRoot();
var clone = templateNode.content.cloneNode(true);
root.appendChild(clone);
</code></pre>

<p>以前比較常見的作法是用 <code>&lt;script&gt;</code> 標籤，然後說 type 是某個瀏覽器不認得的語言，像是 "text/template" 之類的，這樣瀏覽器就不會去執行內容，不過這方法的缺點一就是語意不對，二是潛藏有安全性問題。</p>

<h4>Custom Element</h4>

<p>Custom Element 的部分就是定義了怎樣在 document 下定義新的自訂標籤，不是以前剛進入 HTML5 時代時為了語意而產生的新標籤，這邊說的自訂標籤通常都是為了有特殊的用途，會能和使用者有互動，可以操控等特性的，只用 shadow DOM 的話，雖然可以把整個元件封裝起來，但是最外層還是用 div 標籤來把東西包起來，在語意上不太合，而且加上可能有非同步的問題，新標籤可能是動態插入文件樹內，傳統的方法並不方便處理這種狀況。</p>

<p>在繼續之前要先說，網路上還可以看到一些比較舊的文章有介紹 <code>&lt;element&gt;</code> 這個標籤，不過該標籤目前已經被廢棄了，custom element 現在是全由 JavaScript 那邊來和 document 作溝通，所以基本上就是定義了一組 document 的擴充 API，<em>register</em>：</p>

<pre><code>document.register('x-button', {prototype: xButtonProto});
</code></pre>

<p>這樣在這個文件樹下，就有了 <code>&lt;x-button&gt;</code> 這個新的標籤，其中標籤的命名方式是有建議一定要有個 '-' 的，有 '-' 的標籤，在有定義之前，會被認為是 unresolved element，可以用新的 CSS pseudo class <code>:unresolved</code> 來隱藏起來，避免類似 FOUT 的現象，但是如果你沒有 '-' 而只是用了簡單的單詞來作自訂標籤的名稱，像是 slider、calendar 之類的，這樣就會被認為是 unknown element，就沒辦法用 <code>:unresolved</code> 了。</p>

<p>第二個參數則是 option object，其中的 prototype 則是定義了關於這個新的自訂標籤的行為，通常會從 HTMLElement 繼承來：</p>

<pre><code>var xButtonProto = Object.create(HTMLElement.prototype);
</code></pre>

<p>然後接著定義它的 <a href="http://w3c.github.io/webcomponents/spec/custom/#custom-element-lifecycle">lifecycle</a> callback function，lifecycle 這是個新的東西，在 custom element 的標準裡面定義了一個標籤的一生會發生的事情，包括：</p>

<ul>
<li>created</li>
<li>enteredView</li>
<li>leftView</li>
<li>attributeChanged</li>
</ul>

<p>最常會用到的大概就是 created 了吧：</p>

<pre><code>xButtonProto.createdCallback = function () {
    var root = this;
    var host = this.webkitCreateShadowRoot();
    var clone = tpl.content.cloneNode(true);
    host.appendChild(clone);
};
</code></pre>

<p>像這樣定義 lifecycle callback，就會在 <code>&lt;x-button&gt;</code> 插入文件時，把他裡面的 shadow tree 建好，同時你也可以把一些事件和行為也在這個時間點建立起來。要拿到 shadow tree 裡面的元素的話，可以直接對 shadow host 下 query selector 指令來達成。</p>

<p>目前 WebKit 雖然有支援 custom element，不過也還是實驗中的狀態，要自己去把 'Experimental Web Platform features' 選項打開。</p>

<h4>HTML Imports</h4>

<p>HTML Imports 雖然是比較晚期才聽到有成形的標準，不過其實很早之前，在 Web Component 的概念成形之前，就已經有很多地方有類似的，引用外部資源需求了，所以標準的設計也沒有局現在 Web Component 的使用，結果而言，在 Web Component 這塊，import 的功能是讓 Web Component 的程式碼能夠在維護、發布時也能模組化、封裝起來的關鍵標準，但是他的設計方向卻不是以此為中心，HTML Imports 設計上市 link 標籤的一個擴充：</p>

<pre><code>&lt;link rel="import" href="component.html" /&gt;
</code></pre>

<p>結果就是，有支援 HTML Imports 的瀏覽器就會把 component.html 抓下來也 parse 過，正常網頁該抓的圖片、script，該跑的 script 也都會真的執行，而且在該檔案內的 script 執行環境的 document 和外面的 document 是同一個。所以理論上，只要把所有的 custom element 相關的東西移到獨立的檔案，然後在 import 進來就好了，這樣就可以保持主文件內容的乾淨，也可以讓這些自訂的標籤能夠獨立管理，方便維護。</p>

<p>不過這邊有個細節需要注意，就是要怎麼在被 import 的 component.html 裡面的 script 中，去 query component.html 的內容呢？例如我要 query template 出來塞到 shadow tree 裡面，那就要用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/document.currentScript">currentScript</a> 這個 HTML5 的 API：</p>

<pre><code>var doc = document.currentScript.ownerDocument;
var tpl = doc.getElementById('x-button-template');
</code></pre>

<p>這個寫法在非 import 的 HTML 文件中也是可以動的，所以即使沒有要用 HTML Imports 也可以直接用這個寫法，而 currentScript 的出現其實一部分原因是為了大量的第三方 widget 吧，像是 Facebook like button 之類的，它會給的通常是一個 script 標籤，然後我們把他放到想放的位置，script 再用 document.write 寫入 widget 元素，不過 document.write 不支援 async 的操作，還會有效能 issue，然而 currentScript 會指到現在這行程式碼所在的 <code>&lt;script&gt;</code>，就可以非同步的用標準的 DOM 操作而不需要 document.write 也可以把東西放到正確的位置，這樣就可以解決很多這種第三方 script 插入元素的定位問題。</p>

<p>到這邊就可以把上面的東西全部接在一起了，目錄下會有以下檔案：</p>

<ul>
<li>index.html</li>
<li>x-button/x-button.html</li>
<li>x-button/x-button-style.css</li>
<li>x-button/x-button-script.js</li>
</ul>

<p>x-button.html 的內容：</p>

<pre><code>&lt;template id="x-button-template"&gt;
    &lt;style&gt;
        @import 'x-button/x-button-style.css';
    &lt;/style&gt;

    &lt;div class="x-button"&gt;
        &lt;i class="icon"&gt;&lt;/i&gt;
        &lt;div class="content"&gt;&lt;content&gt;&lt;/div&gt;
    &lt;/div&gt;

&lt;/template&gt;

&lt;script src="x-button-script.js"&gt;&lt;/script&gt;
</code></pre>

<p>CSS 跳過，js 的內容：</p>

<pre><code>var doc = document.currentScript.ownerDocument;
var tpl = doc.getElementById('x-button-template');
var xButtonProto = Object.create(HTMLElement.prototype);

xButtonProto.createdCallback = function () {
    var root = this;
    var host = this.webkitCreateShadowRoot();
    var clone = tpl.content.cloneNode(true);
    host.appendChild(clone);
};

document.register('x-button', {prototype: xButtonProto});
</code></pre>

<p>最後 html 的內容：</p>

<pre><code>&lt;link rel="import" href="x-button/x-button.html"&gt;

&lt;x-button&gt;Super Button&lt;/x-button&gt;
</code></pre>

<h4>Library</h4>

<p>瀏覽器的實作，目前是 Chrome 最完整，不過都還在測試，要自己去把功能打開，其中 HTML Imports 比較新，Firefox 也還不支援，不過想要用的話還是可以透過兩套 JavaScript Library 來用，一個是 Google 的 Polymer，另外一套是 Mozilla 的 <a href="http://www.x-tags.org/">&lt;x-tags&gt;</a>，Mozilla 的比較單純，就是可以方便定義 Custom Element 的一套 Library，看上面的介紹可以知道要定義一個 custom element 有很多地方要處理，x-tags 則是另外定義了一套 API 來把東西都集中起來，順便也把 custom element 登錄到文件內，另外也開了一個 repository 來收集大家做的 custom element，至於底層的部份，其實是用 Polymer 的 polyfill - platform.js。</p>

<p>Polymer 這套涵蓋的範圍就比較大了，首先它為了讓 Web Component 的相關新標準可以在現在的主流瀏覽器上動，它把這些標準的 polyfill 的做好了，接著基於這些標準做了 polymer-element 和 data binding 機制等核心的功能，然後開發者就可以用這些東西建構自己想要的 custom component，當然它也提供一些常用的 cusotm element，拼裝起來就可以把 application 建構出來。</p>

<p>Polymer 其實除了上面說的三個標準外，還做了好幾個 polyfill，包括 Web Animations、Pointer Event 以及目前沒有在標準內的 binding 機制我覺得終極目標應該是會和 AngularJS 相輔相成，畢竟現在 AngularJS 的 directive 機制就有點像是 Web Component + data binding 的組合。</p>

<h4>Summary</h4>

<p>其實 Web Component 真的是越看越覺得細節很多，這篇文章其實還是有不少沒提到的細節，不過大部分都可以在參考文獻中找到，有很多東西其實都還在進行中，文件不完整，找的到的範例也太過單純，不過相信資源會越來越完整，目前看起來 Web Component 的潮流遲早會成為主流，加上 Google 還把這麼多標準的 polyfill 都做好了，AngularJS 也把 component 的模式在開發者之間帶起來，我想整個潮流只會越來越快。</p>

<h4>Reference</h4>

<p>最後整理一下參考資料，有不少細節和一些相關的東西這篇文章還沒有講，之後有機會在分享吧。首先是 w3c 的 editor draft，包含三份 spec 還有一篇 <a href="http://w3c.github.io/webcomponents/explainer/">intro</a>：</p>

<ul>
<li><a href="http://w3c.github.io/webcomponents/">Web Component Editor Draft</a></li>
<li><a href="http://w3c.github.io/webcomponents/spec/shadow/">Shadow DOM Editor Draft</a></li>
<li><a href="http://w3c.github.io/webcomponents/spec/custom/">Custom Element Editor Draft</a></li>
<li><a href="http://w3c.github.io/webcomponents/spec/imports/">HTML Imports Editor Draft</a></li>
</ul>

<p>Specs：</p>

<ul>
<li><a href="http://www.w3.org/TR/shadow-dom/">Shadow DOM</a></li>
<li><a href="http://www.w3.org/TR/custom-elements/">Custom Element</a></li>
<li><a href="http://www.w3.org/TR/html-imports/">HTML Imports</a></li>
<li><a href="http://www.w3.org/TR/pointerevents/">Pointer Events</a></li>
<li><a href="http://www.w3.org/TR/web-animations/">Web Animations</a></li>
</ul>

<p>然後 HTML5 Rocks 有好幾篇文章：</p>

<ul>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/customelements/">Custom Element</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/imports/">HTML Imports</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/template/">Template</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/">Shadow DOM 101</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/">Shadow DOM 201</a>，特別要注意現在 pseudo 屬性已經沒了，改成 part 了。</li>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-301/">Shadow DOM 301</a></li>
</ul>

<p>看到各主題的篇數就知道什麼東西比較複雜了，還有一些其他地方的介紹文章：</p>

<ul>
<li><a href="http://css-tricks.com/modular-future-web-components/">Modular Future Web Components</a></li>
<li><a href="http://html5-demos.appspot.com/static/webcomponents/index.html">&lt;web&gt;components&lt;/web&gt;</a></li>
<li><a href="http://robdodson.me/blog/2013/08/20/exploring-html-imports/">Exploring HTML Imports</a></li>
</ul>

<p>一個 Web Component 的 <a href="http://jonrimmer.github.io/are-we-componentized-yet/">支援度檢查表</a> 和 shadow DOM <a href="http://html5-demos.appspot.com/static/shadowdom-visualizer/index.html">視覺化工具</a>。Google 推廣還算蠻用力的，今年的 Google IO 有不少 <a href="https://developers.google.com/events/io/sessions">場次</a> 有相關，還有一個 Google Plus <a href="https://plus.google.com/103330502635338602217/posts">專頁</a>。</p>

<p>Libraries 的就是上面說到的兩個，Google 的 Polymer，建議可以去他的 Github 看看，然後還有 Mozilla 的 x-tags 和 Brick，其中 Brick 沒說到，不過他是基於 x-tag 的專案，要來收集各種 custom element，然後未來可以疊床架屋用的：</p>

<ul>
<li><a href="http://www.polymer-project.org/">Polymer</a></li>
<li><a href="http://www.x-tags.org/">x-tags</a></li>
<li><a href="http://mozilla.github.io/brick/">Brick</a></li>
</ul>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000769" baseName="start-ssl-ocsp">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-11-13</b:date>
				<b:time>20:27:47</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>Start SSL 的 OCSP 錯誤</b:title>
			<b:content>
				<b:summary>今天收到 Start SSL 的信件通知說我的憑證快過期了，所以花時間處理了一下，結果遇到 Firefox 說 OSCP 伺服器沒有憑證。 在 StartSSL 上有看到相關 討論，基本上就是放著幾小時候就會好，不過不知道為什麼只有 Firefox 受影響，理論上應該是 OCSP 上都找不到太新的 StartSSL 憑證，不過其他瀏覽器似乎都沒這問題，有差的好像只有 Firefox 剛開始支援 OCSP stapling 而已。...</b:summary>
				<b:mainContent><p>今天收到 Start SSL 的信件通知說我的憑證快過期了，所以花時間處理了一下，結果遇到 Firefox 說 OSCP 伺服器沒有憑證。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/10831576274/" title="Error code: sec_error_ocsp_unknown_cert by othree, on Flickr"><img src="https://farm3.staticflickr.com/2856/10831576274_97fe62e951_b.jpg" width="1024" height="794" alt="Error code: sec_error_ocsp_unknown_cert" srcset="https://farm3.staticflickr.com/2856/10831576274_97fe62e951_b.jpg 1024w" /></a></p>

<p>在 StartSSL 上有看到相關 <a href="https://forum.startcom.org/viewtopic.php?f=15&amp;t=2654">討論</a>，基本上就是放著幾小時候就會好，不過不知道為什麼只有 Firefox 受影響，理論上應該是 OCSP 上都找不到太新的 StartSSL 憑證，不過其他瀏覽器似乎都沒這問題，有差的好像只有 Firefox 剛開始支援 OCSP stapling 而已。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000768" baseName="olympus-e-m1">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-11-07</b:date>
				<b:time>00:54:19</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>Olympus E-M1</b:title>
			<b:content>
				<b:summary> 我覺得最近的數位相機市場有點時代轉捩點的感覺，我第一次接觸比較正式的相機是爸爸的 Canon AE-1，底片的相機，金屬機身，很重，不過很喜歡用裂相對焦轉對焦環對焦，然後按快門，手捲底片的連續動作，之後沒多久就進入了數位時代，在這個時期我其實等了很久，目標是和底片相機差不多大小的機種，當時或多或少有期待全幅的機種吧，抱持的想法是，底片相機做得到的大小，沒道理數位時代就不行。...</b:summary>
				<b:mainContent><p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/10453308904/" title="Olympus E-M1 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7383/10453308904_30d8f00143_b.jpg" width="1024" height="683" alt="Olympus E-M1" srcset="https://farm8.staticflickr.com/7383/10453308904_30d8f00143_b.jpg 1024w, https://farm8.staticflickr.com/7383/10453308904_e0116dd04e_h.jpg 1600w" /></a></p>

<p>我覺得最近的數位相機市場有點時代轉捩點的感覺，我第一次接觸比較正式的相機是爸爸的 Canon AE-1，底片的相機，金屬機身，很重，不過很喜歡用裂相對焦轉對焦環對焦，然後按快門，手捲底片的連續動作，之後沒多久就進入了數位時代，在這個時期我其實等了很久，目標是和底片相機差不多大小的機種，當時或多或少有期待全幅的機種吧，抱持的想法是，底片相機做得到的大小，沒道理數位時代就不行。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/10710491495/" title="Canon AE-1 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7430/10710491495_a9c8d117a4_b.jpg" width="1024" height="683" alt="Canon AE-1" srcset="https://farm8.staticflickr.com/7430/10710491495_a9c8d117a4_b.jpg 1024w, https://farm8.staticflickr.com/7430/10710491495_06f2f4e618_h.jpg 1600w" /></a></p>
</b:mainContent>
				<b:extendContent><p>結果從 E-P1 進場了數位相機，那時候其實有一大半是被外型吸引，非常的有老相機的味道，但是卻是不折不扣的數位相機，那時候很常被人以為用的是底片相機，之後陸續買了 E-P2、E-P3、E-M5、E-P5，一路過來也很明確的看到 Olympus 的進步，而在學習的過程中，也漸漸的了解到為什麼很難做出和以前底片相機差不多大小的全幅數位相機，機身的部分，基本上只是時間問題，硬體技術的提升、元件體積的縮小都還沒到達極限，所以終於在今年，有 SONY 的 A7、A7r 和 Nikon 剛發表的 Df 等，不過我覺得比較大的問題是鏡頭，以前的底片機鏡頭定焦的佔非常大量，加上沒有自動對焦，鏡頭內不用塞馬達什麼有的沒的，因此鏡頭大小都還在很可以接受的程度，但是現在的鏡頭，要自動對焦，要馬達結構，可能有光學防手震，如果要能夠有全幅的成像範圍，其實大小和重量就是現在的那些全幅鏡頭了，所以即使就在即將我的目標快要可以得到的時間點，我還是繼續買了 M43 的 E-M1。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/10453287694/" title="E-M1 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5518/10453287694_92ebe248a8_b.jpg" width="683" height="1024" alt="E-M1" srcset="https://farm6.staticflickr.com/5518/10453287694_92ebe248a8_b.jpg 1024w, https://farm6.staticflickr.com/5518/10453287694_5646276b87_h.jpg 1600w" /></a></p>

<p>Olympus 的 M43 相機其實我一直還是有不滿意的地方，E-M1 處理掉幾乎是目前可以處理的部份，目前剩下我還不滿的地方，一是可用 ISO 我覺得還是不夠高，不過這也算是目前的技術極限，市場是也沒有新的 43 感光元件。二是大光圈的景深效果不太滿意，還不知道是因為片幅特性還是單純因為需要更大光圈，因為要更大的就直接跳到 0.95 的福輪達手動鏡，非常貴，至於 E-M1 解決了什麼問題呢？要我說的話，最主要的是操控性，多了大量的按鈕，讓使用者可以更快速的作設定的調整，其中像是獨立的曝光鎖定鈕，新的，相機左上角連拍和曝光模式紐加上前後滾輪的功能我覺得是最大的改進，讓我覺得上一台 E-P5 推出時導入的 2x2 操控介面，其實是半成品，E-M1 的這兩個按鈕加入後才讓 Olympus 真正的目標顯現出來，而且我覺得是很聰明的設計，巧妙的把次常用的功能集放到和最常用功能集的操控介面裡。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/10453487213/" title="Olympus E-M1 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5489/10453487213_0ec571bd11_b.jpg" width="1024" height="683" alt="Olympus E-M1" srcset="https://farm6.staticflickr.com/5489/10453487213_0ec571bd11_b.jpg 1024w, https://farm6.staticflickr.com/5489/10453487213_fdd1b7f5df_h.jpg 1600w" /></a></p>

<p>現在光是前後滾輪可以調整的功能就包括，光圈、快門、曝光補償、ISO、白平衡、連拍與HDR、對焦模式、測光模式、閃燈模式、閃燈補償、包圍曝光這些功能，非常的多，這些功能的調整都不再需要進選單或是 super panel，上下左右就可以完全丟去調整對焦點，不用擔心會少一些捷徑可以用了，而且機身前面還有多兩個按鈕，其中一個預設是自訂白平衡，這個功能我也想特別說一下，就是這次有四組自訂白平衡可以用啊，比以前多了好多。</p>

<p>其他還有很多的改進之處，像是開機快很多，防水設計感覺更可靠，一些機構設計也承襲 E-P5 而來，都感覺更加有力，另外就是那個新的電子關景器，基本上是承襲 VF-4，但是內建機種的電子關景器有顯示風格可以選擇，可以選擇比較像是 DSLR 的風格，所以比起來我一直是喜歡 E-M5 更勝於 E-P5 + VF-4 的，雖然初用 VF-4 真的是對那個視野覆蓋率感到驚嘆，而這次 E-M1 的這種風格還新增了個功能，就是半按快門時，會顯示一個軸的水平儀，對於我這種還很需要水平線的人來說超實用的，</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/10453474893/" title="E-M1 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5537/10453474893_bf3b3956e9_b.jpg" width="1024" height="683" alt="E-M1" srcset="https://farm6.staticflickr.com/5537/10453474893_bf3b3956e9_b.jpg 1024w, https://farm6.staticflickr.com/5537/10453474893_b62a5b54be_h.jpg 1600w" /></a></p>

<p>另外一個改進的地方就是手動對焦的支援，從 E-P5 開始有了相位對焦，而這次搭配的 12-40 kit 鏡配上 E-M1 還有個特異功能，就是把對焦環往後拉進入手動對焦時，會自動打開對焦輔助功能，像是相位對焦，這讓新鏡頭配上手動對焦超方便的，但是經過交叉測試，很可惜只有 12-40 有支援，另外試了 12mm 和 17mm 兩顆一樣有可以後拉手動對焦環的鏡頭都沒有用，不過界面上顯示對焦模式的地方會切換到 MF，以前是不會的，不知道還缺什麼。</p>

<p>其實以基礎的操控來說，我是比較喜歡 Fuji X 系列的設計，機身上有曝光補償和快門速度轉盤，鏡頭上有光圈控制，利用光圈控制和快門速度轉盤來切換 S 模式、A 模式和 M 模式，我覺的是個非常簡單明快的設計，而且更有復古相機的感覺。不過以現在轉盤大多要控制複數功能的情形來看，不太有可能出現在其他家的產品上了。</p>

<p>E-M1 其實我是很滿意的，就是單價太高，這價錢基本上也是可以買台 Sony A7 的，雖然現在我有點在開始觀望其他新系統，不過對於 M43 還是有些期待的，目前最大的願望是能有更好的高 ISO 表現，其他機身部份我想要的，E-M1 幾乎都有了，其實如果現在要買 E-M5，我會覺的不如直接買到 E-M1，雖然兩台畫質沒什麼差，不過其他方面 E-M1 實在是贏很多，操控性、鏡頭支援、觀景器、HDR...等等。最後放幾張這陣子用 E-M1 拍的照片吧。</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/10537866324/" title="MOPCON 2013 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5483/10537866324_6395b395ef_b.jpg" width="1024" height="683" alt="MOPCON 2013" srcset="https://farm6.staticflickr.com/5483/10537866324_6395b395ef_b.jpg 1024w, https://farm6.staticflickr.com/5483/10537866324_bfa04715aa_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/10577325073/" title="高雄 by othree, on Flickr"><img src="https://farm4.staticflickr.com/3686/10577325073_6779b859b3_b.jpg" width="1024" height="683" alt="高雄" srcset="https://farm4.staticflickr.com/3686/10577325073_6779b859b3_b.jpg 1024w, https://farm4.staticflickr.com/3686/10577325073_155adb1c9d_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/10577289693/" title="高雄 by othree, on Flickr"><img src="https://farm4.staticflickr.com/3797/10577289693_0c51578175_b.jpg" width="1024" height="683" alt="高雄" srcset="https://farm4.staticflickr.com/3797/10577289693_0c51578175_b.jpg 1024w, https://farm4.staticflickr.com/3797/10577289693_b4f2aea113_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/10577006986/" title="高雄 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7399/10577006986_227be537fa_b.jpg" width="1024" height="683" alt="高雄" srcset="https://farm8.staticflickr.com/7399/10577006986_227be537fa_b.jpg 1024w, https://farm8.staticflickr.com/7399/10577006986_4ab8ed5028_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/10577009524/" title="高雄 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7321/10577009524_8d34189313_b.jpg" width="1024" height="683" alt="高雄" srcset="https://farm8.staticflickr.com/7321/10577009524_8d34189313_b.jpg 1024w, https://farm8.staticflickr.com/7321/10577009524_37a885e509_h.jpg 1600w" /></a></p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/10577085754/" title="高雄 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7402/10577085754_6cd88f57bc_b.jpg" width="1024" height="683" alt="高雄" srcset="https://farm8.staticflickr.com/7402/10577085754_6cd88f57bc_b.jpg 1024w, https://farm8.staticflickr.com/7402/10577085754_7be342d2fd_h.jpg 1600w" /></a></p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000767" baseName="bad-part-of-css-transition">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-11-05</b:date>
				<b:time>15:59:22</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>Transition 之惡</b:title>
			<b:content>
				<b:summary>好像很久之前有在 Facebook 上說過我對 CSS transition 語法的不滿，因為不是三言兩語可以解釋的，所以一直沒講清楚，之後忙了一陣子之後，今天終於有時間整理一下了。 問題可以說是因為不管有多少 CSS 屬性要 transition 效果，都要寫在同一個 transition 屬性之下造成的，這樣的設計不是不好，但是他產生了兩個問題沒有解決：第一個是如果我有不同的狀態，要的 transition 屬性不一樣的話，唯一的作法就是把全部需要的屬性都重寫，不能只改單一屬性的 transition： .case1.active { transition: top 1s ease, height 1s ease, left 1s ease, width 1s ease, opacity 1s ease; } .case2.active { transition: top 1s...</b:summary>
				<b:mainContent><p>好像很久之前有在 Facebook 上說過我對 CSS transition 語法的不滿，因為不是三言兩語可以解釋的，所以一直沒講清楚，之後忙了一陣子之後，今天終於有時間整理一下了。</p>

<p>問題可以說是因為不管有多少 CSS 屬性要 transition 效果，都要寫在同一個 transition 屬性之下造成的，這樣的設計不是不好，但是他產生了兩個問題沒有解決：第一個是如果我有不同的狀態，要的 transition 屬性不一樣的話，唯一的作法就是把全部需要的屬性都重寫，不能只改單一屬性的 transition：</p>

<pre><code>.case1.active {
    transition: top 1s ease, height 1s ease, left 1s ease, width 1s ease, opacity 1s ease;
}

.case2.active {
    transition: top 1s ease, height 1s ease, left 1s ease, width 1s ease;
}
</code></pre>

<p>這樣寫的產生的影響有二，一是造成 code 重複，維護不易，二是重複 code 會增加傳輸量，降低網站的速度。第二個問題是，當我在定義 transition 時，規範要求我將所有 transition 視為一體，但是 transitionend 事件卻是每個屬性分開觸發，我覺得這根本是陷阱，例如上面的 case1 會有 5 個 transitionend 事件一起觸發，如果沒注意到這點的話，你的 transitionend callback 就會每次都多執行了四次，如果我去檢查到底是哪個屬性的 transitionend 事件來決定要不要作 callback 的話，一是程式碼不漂亮，硬是多了個 if 判斷，二是我該選哪個屬性來作代表？會有語意不對的情形，語意不對就會有維護問題，要是未來改了 transition 的定義，剛好被我選上的代表屬性被拿掉了，callback 就不會執行了。</p>

<p>當然我不認為 transitionend 事件應該不分屬性只發生一次，畢竟有要詳細複雜的效果還是要能知道到各別屬性的轉換結束時機。其實這個問題也很難有好方法，提案修改 spec 影響很大，新增東西還比較有機會，我自己是希望要碼就可以完全拆開看，不然就是兩邊都可以視為一體來看，和 transition 比起來，animation 的問題就小一點，因為 animation 整個是被當一體，animation 事件可以用 animationName 來確定沒跑錯 callback，只要 name 沒變，動畫內容怎麼改都沒關係，animationend 事件也不會每個屬性都觸發一次，而是真的動畫結束才被呼叫，不過兩份文件的編輯幾乎一樣....</p>

<p>最後隨便講個 transition 另外的問題吧，就是 Firefox 下，一些屬性，例如高度好了，如果用百分比之類的，或是 auto 這種，不是太明確的值的話，會無法跑出 transition 效果，有點麻煩，尤其是要做全螢幕置中的效果的時候。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
