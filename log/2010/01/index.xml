<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>m</b:listType>
			<b:listData listID="2010-01">January 2010</b:listData>

			<b:previous>
				<b:mTitle>December 2009</b:mTitle>
				<b:mDate>2009/12</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>February 2010</b:mTitle>
				<b:mDate>2010/02</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000614" baseName="javascript-performance-tips">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-01-25</b:date>
				<b:time>18:56:35</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>JavaScript 的一些效率問題</b:title>
			<b:content>
				<b:summary>前幾天在測試 each 和 for 迴圈的效率時，意外的一直得到 each 效率比較好的奇怪現象，搞了兩天才找到原因。 each 這種方法效率會比 for 迴圈還要低主要是因為它是把要做的事情用 function 傳進去，多了一個 function call 和一層 function scope，要對變數作存取時會多了到不同層 scope 尋找的差，所以理論上它會比 for 迴圈還要慢。除此之外，DOM 本身就很慢了，當然 DOM NodeList 的操作和存取也不會快到哪去，所以像 Sizzle 引擎就會把 DOM NodeList 轉成陣列再傳回來，而我測試 each 和 for 兩者的效率時，也就是這個部分產生了非預想的結果，根據測試結果 Google V8 和 Firefox 3.6...</b:summary>
				<b:mainContent><p>前幾天在測試 <a href="http://api.jquery.com/each/">each</a> 和 for 迴圈的效率時，意外的一直得到 each 效率比較好的奇怪現象，搞了兩天才找到原因。</p>

<p>each 這種方法效率會比 for 迴圈還要低主要是因為它是把要做的事情用 function 傳進去，多了一個 function call 和一層 function scope，要對變數作存取時會多了到不同層 scope 尋找的差，所以理論上它會比 for 迴圈還要慢。除此之外，DOM 本身就很慢了，當然 <a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-536297177"><span class="caps">DOM</span> NodeList</a> 的操作和存取也不會快到哪去，所以像 <a href="http://sizzlejs.com/">Sizzle</a> 引擎就會把 <span class="caps">DOM</span> NodeList 轉成陣列再傳回來，而我測試 each 和 for 兩者的效率時，也就是這個部分產生了非預想的結果，根據測試結果 Google V8 和 Firefox 3.6 的 Tracemonkey 這兩個會編譯 JS 的引擎，第二次對同樣內容的 <span class="caps">DOM </span>collection 轉陣列的動作時會比第一次還要快，而且大約是兩倍快，測試的基準是第一次用 <a href="http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-getElementsByTagName">getElementsByTagName</a> 抓 &lt;span&gt; ，第二次用 jQuery，內部也是一樣用 getElementsByTagName ，並且小修改過 <span class="caps">DOM </span>結構後再做一樣的事情也是會比第一次還快，並且，不管是用 <a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Array/Slice">slice</a> 還是 for 迴圈一個元素一個元素推到陣列裡面都沒差很多，一開始因為測試都是對同樣的標籤作處理，結果先測的方法就佔了劣勢，就像是美食漫畫一樣，先上菜的都會輸一樣，不過我對編譯器的怎樣做最佳化的方法不熟，所以這兩個引擎是怎麼辦到的就不清楚了。</p>

<p>除了這點之外，還有一些不算小發現的小發現，第一個就是 Firefox 3.6 還是好慢，詳細數據我忘了，不過和 V8、Safari 比起來差距還是不小，然後就是 IE 超．級．慢！！第二是 each 真的比較慢，不過在現在 JS 引擎普遍暴力的情況下差距其實不明顯（不過 NodeList 和陣列的差距還是有）。第三是前面已經講過的 Sizzle 回傳的是陣列而不是 NodeList ，雖然實際上想要自己組合 NodeList 似乎也是不可能的。最後是 jQeury 可以用 <code>$(&quot;span&quot;)[0]</code> 這種寫法來直接存取 <span class="caps">DOM </span>節點，不過它並不是陣列，要轉成純陣列可以用 <code>$(&quot;span&quot;).get()</code> ，只是測試過後發現沒有比較快，因為還要重新轉一次陣列，這裡損失的時間也不會比直接存取來的少。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000613" baseName="why-do-we-have-an-img-element">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-01-17</b:date>
				<b:time>09:29:38</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>為什麼有 &lt;img&gt; 這個標籤</b:title>
			<b:content>
				<b:summary>dive into mark 在去年11月有一篇文章 Why do we have an IMG element? ，裡面翻出了很多當初 HTML 剛起步時的討論，當時就在針對網頁上的媒體內容要怎樣放進去作了不少爭論，過程有興趣的可以自己去看，結果還是先下手為強，先做出來的贏， mark 歸納出的幾點結論中有一點蠻有趣的：「HTML一直都是瀏覽器製造者、標準制定者、網頁製造者和其他想參與其中的人所討論而得的，而多數成功的標準都是 retro-specs （實作、制定標準同時，甚至先實作），有些人認為標準應該保持純潔，不要受到瀏覽器製造者或網頁製造者的影響，這完全是錯誤的。」HTML 5 也是一個 retro-specs ，新功能都是跟著網路的變化所產生，像是 拖拉 API 、 近端儲存系統 等，最近還多了 device 標籤 和 stream API ，這些都是現在大家需要的功能，而目前只能用其他方法弄起來，像是拖拉要去算位置、範圍，近端儲存要裝像 Google Gears 的外掛，要抓 webcam 畫面或是撥影片則要用 Flash 或是...</b:summary>
				<b:mainContent><p><a href="http://diveintomark.org/">dive into mark</a> 在去年11月有一篇文章 <a href="http://diveintomark.org/archives/2009/11/02/why-do-we-have-an-img-element">Why do we have an <span class="caps">IMG </span>element?</a> ，裡面翻出了很多當初 <span class="caps">HTML </span>剛起步時的討論，當時就在針對網頁上的媒體內容要怎樣放進去作了不少爭論，過程有興趣的可以自己去看，結果還是先下手為強，先做出來的贏， mark 歸納出的幾點結論中有一點蠻有趣的：「HTML一直都是瀏覽器製造者、標準制定者、網頁製造者和其他想參與其中的人所討論而得的，而多數成功的標準都是 <strong>retro-specs</strong> （實作、制定標準同時，甚至先實作），有些人認為標準應該保持純潔，不要受到瀏覽器製造者或網頁製造者的影響，這完全是錯誤的。」HTML 5 也是一個 retro-specs ，新功能都是跟著網路的變化所產生，像是 <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#dnd">拖拉 <span class="caps">API</span></a>  、 <a href="http://dev.w3.org/html5/webstorage/">近端儲存系統</a> 等，最近還多了 <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#devices">device 標籤</a> 和 <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#stream">stream <span class="caps">API</span></a> ，這些都是現在大家需要的功能，而目前只能用其他方法弄起來，像是拖拉要去算位置、範圍，近端儲存要裝像 Google Gears 的外掛，要抓 webcam 畫面或是撥影片則要用 Flash 或是 Java，未來這些功能都會變成瀏覽器原生支援，甚至用顯示卡 <a href="http://www.khronos.org/webgl/">加速畫 3D 圖形</a> 都不是問題。</p>

<p>另外可以拿來作反例的我覺得是 <a href="http://www.w3.org/XML/Schema"><span class="caps">XML</span> Schema</a> ，整個複雜過頭，還有難解的用詞，據之前修課時的老師說是語言學家制定的，結果造成沒有工具很難寫，就算寫了沒驗證過我看也不敢拿來用。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

		<b:entry entryID="000611" baseName="perl-style-regexp-for-vim">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-01-08</b:date>
				<b:time>01:41:44</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Perl Style RegExp for Vim</b:title>
			<b:content>
				<b:summary>今天下午在尋找能讓 Vim 的 Regular Expression 變得好看一點的方法，因為實在太多斜線了，當然直接就把目標鎖定在 perl 的語法，一開始找到一個 vim tip 有建議用 perldo ，不過編譯時要把 +perl 弄起來，使用上也不是很好用，而且不能搜尋，只能做取代，雖然 有人寫了 function 來搜尋，不過實際測試之後離方便使用還有些距離。 c9s 還有建議我用 very magic 看看，結果還是不夠滿意，後來換成找日本那邊，終於找到 eregex.vim 這個 plugin ，他的作法是把 perl/ruby 的 regexp 語法用 function 轉成 vim 的 regexp 語法，所以問題少很多，預設會把 S（大寫S）替換成用 perl/ruby 的...</b:summary>
				<b:mainContent><p>今天下午在尋找能讓 Vim 的 Regular Expression 變得好看一點的方法，因為實在太多斜線了，當然直接就把目標鎖定在 perl 的語法，一開始找到一個 <a href="http://vim.wikia.com/wiki/Perl_compatible_regular_expressions">vim tip</a> 有建議用 <a href="http://vimdoc.sourceforge.net/htmldoc/if_perl.html#:perldo">perldo</a> ，不過編譯時要把 <a href="http://vimdoc.sourceforge.net/htmldoc/various.html#+perl">+perl</a> 弄起來，使用上也不是很好用，而且不能搜尋，只能做取代，雖然 <a href="http://tech.groups.yahoo.com/group/vim/message/49561">有人寫了 function</a> 來搜尋，不過實際測試之後離方便使用還有些距離。 <a href="http://c9s.blogspot.com/">c9s</a> 還有建議我用 <a href="http://vimdoc.sourceforge.net/htmldoc/pattern.html#/\v">very magic</a> 看看，結果還是不夠滿意，後來換成找日本那邊，終於找到 <a href="http://www.vector.co.jp/soft/unix/writing/se265654.html">eregex.vim</a> 這個 plugin ，他的作法是把 perl/ruby 的 regexp 語法用 function 轉成 vim 的 regexp 語法，所以問題少很多，預設會把 S（大寫S）替換成用 perl/ruby 的 regexp 語法來搜尋搜尋取代的指令，使用方法和原來 s（小寫S）的都一樣，另外單純搜尋的部分有 :M/ 這個命令，也可以 map 到原來的 / 上：</p>



<pre><code>nnoremap / :M/</code></pre>



<p>使用上就和原來幾乎完全一樣了，超棒的～</p>

<p>順帶一提， <a href="http://www.ubuntu.com/">Ubuntu</a> 上要編譯出 +perl 的功能要 <a href="http://www.tfug.org/pipermail/tfug/2006-May/011262.html">確定一下 libperl.so 在不在</a> ，像我的系統就只有 libperl.so.5.8，還要自己做個鏈結。</p>

<p class="update">由於作者聯絡不上，我已經接起 <a href="https://github.com/othree/eregex.vim">eregex.vim</a> 的維護工作了，放在 github 上。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000610" baseName="screen_vim_f1f4_map">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-01-07</b:date>
				<b:time>22:41:26</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Screen 下 Vim F1~F4 沒辦法正常 map</b:title>
			<b:content>
				<b:summary>剛剛遇到的問題，好像是我的環境才會，不過如果有遇到的話就把下面這段 code 加到 vimrc 裡面吧，記得放在 map 前。 &quot; Screen fix if &amp;term =~ '^screen' set t_k1=^[[11~ set t_k2=^[[12~ set t_k3=^[[13~ set t_k4=^[[14~ endif...</b:summary>
				<b:mainContent><p>剛剛遇到的問題，好像是我的環境才會，不過如果有遇到的話就把下面這段 code 加到 vimrc 裡面吧，記得放在 map 前。</p>



<pre><code>&quot; Screen fix
if &amp;term =~ '^screen'
    set t_k1=^[[11~
    set t_k2=^[[12~
    set t_k3=^[[13~
    set t_k4=^[[14~
endif
</code></pre></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

		<b:entry entryID="000609" baseName="wq-post-bbs-article">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-01-07</b:date>
				<b:time>20:25:04</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>用 :wq 送出 BBS 文章</b:title>
			<b:content>
				<b:summary>因為在 BBS 想要用 :wq 發文章的次數不算少，剛剛就用 expect 弄起來了，只要加一行到 interact 裡面就可以： \033:wq\r { send \030; send &quot;\r&quot; } 實際操作是要 &lt;ESC&gt; :wq &lt;ENTER&gt; ，會直接把文章發表，如果不想跳過發文前的確認選單，那就把最後的 \r 拿掉。...</b:summary>
				<b:mainContent><p>因為在 <span class="caps">BBS </span>想要用 :wq 發文章的次數不算少，剛剛就用 expect 弄起來了，只要加一行到 interact 裡面就可以：</p>



<pre><code>\033:wq\r { send \030; send &quot;\r&quot; }</code></pre>



<p>實際操作是要 &lt;ESC&gt; :wq &lt;ENTER&gt; ，會直接把文章發表，如果不想跳過發文前的確認選單，那就把最後的 \r 拿掉。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000608" baseName="_screen_windows_terminal">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-01-05</b:date>
				<b:time>21:18:28</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>在 screen windows 裡開一個比較小的 terminal</b:title>
			<b:content>
				<b:summary>這真是超特殊的需求，不過今天還是弄出來了，花不少間走錯方向就是，會有這樣的需求是因為我同時要掛 BBS 和 IRC，BBS 的標準視窗大小是 80*24，但是這個大小對於 IRC 來說又太小了，好在現在很多 BBS 系統已經已經支援大於 80*24 的終端機了，但是有一個 bahamut 自從商業化後 BBS 系統就完全沒改進，不支援就算了，終端機大小只要不對，看文章往下卷頁時就會有錯誤排版產生，最常見就是按 下 ，本來應該是整個畫面移動一行，結果會變成只有最後一行被取代，而我現在是使用 100*35 的大小，本來是一直把這問題放著，不過今天總算解決了，其實解法很簡單，就是 screen 裡面再開一個 screen，用不同的設定檔案，裡面要拿來上 bahamut 那個的設定檔加上： width -d 80 24 重點在那個 -d 參數，本來一直在終端機的設定上跑來跑去，不是說沒辦法改大小，就是內部的終端機改大小會影響到外面的，版面就整個亂掉，不過 -d 是只改 display 的大小，不是終端機大小，本來的話是會所有的 screen 一起改，但是因為用兩層的關係，所以外面的不會受到影響。...</b:summary>
				<b:mainContent><p>這真是超特殊的需求，不過今天還是弄出來了，花不少間走錯方向就是，會有這樣的需求是因為我同時要掛 <span class="caps">BBS </span>和 <span class="caps">IRC</span>，BBS 的標準視窗大小是 80*24，但是這個大小對於 <span class="caps">IRC </span>來說又太小了，好在現在很多 <span class="caps">BBS </span>系統已經已經支援大於 80*24 的終端機了，但是有一個 <a href="http://www.gamer.com.tw/">bahamut</a> 自從商業化後 <span class="caps">BBS </span>系統就完全沒改進，不支援就算了，終端機大小只要不對，看文章往下卷頁時就會有錯誤排版產生，最常見就是按 <strong>下</strong> ，本來應該是整個畫面移動一行，結果會變成只有最後一行被取代，而我現在是使用 100*35 的大小，本來是一直把這問題放著，不過今天總算解決了，其實解法很簡單，就是 screen 裡面再開一個 screen，用不同的設定檔案，裡面要拿來上 bahamut 那個的設定檔加上：</p>



<pre><code>width -d 80 24</code></pre>



<p>重點在那個 <a href="http://www.gnu.org/software/screen/manual/screen.html#Window-Size">-d</a> 參數，本來一直在終端機的設定上跑來跑去，不是說沒辦法改大小，就是內部的終端機改大小會影響到外面的，版面就整個亂掉，不過 -d 是只改 display 的大小，不是終端機大小，本來的話是會所有的 screen 一起改，但是因為用兩層的關係，所以外面的不會受到影響。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000607" baseName="happy-2010">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-01-03</b:date>
				<b:time>22:45:04</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>新年快樂</b:title>
			<b:content>
				<b:summary>新年快樂！ 今年因為腳包著石膏，所以三天假期都沒出門，31號回到家後就等著看 紅白 ，這是我第一次有從一開始就看到啊，話說我每年12/31都會想著明年一定要裝 BSD ，然後一年一年一直過去....，算了，等電視升級時在一起好了。今年紅白有 水樹奈奈 登場，對我來說算是比較有特別意義，到不是特別迷她，而是史上第一位聲優登上紅白，總覺得要見證一下，加上今年是第 60 屆，感覺就是不能錯過～～ 話說這三天我竟然沒有很墮落的睡覺看動畫，第一天整理了 irc logs，把部落格內的文章又掃過一次，檢查有沒有圖片連結錯誤，然後重新編譯了我機器上的 vim ，之前忘了 patch ，加上沒把 gettext 功能弄上，所以介面一直是中文的，另外就是搞定了 tcsh 的 Home,、End、PageUp 等案件的功能，因為和 bash 用 inputrc 的設定不一樣，一直到這天才找到設定方法， bash 下的 inputrc 是這樣寫： &quot;\e[1~&quot;: beginning-of-line &quot;\e[2~&quot;: yank &quot;\e[3~&quot;: delete-char &quot;\e[4~&quot;: end-of-line &quot;\e[5~&quot;:...</b:summary>
				<b:mainContent><p><strong>新年快樂！</strong></p>

<p>今年因為腳包著石膏，所以三天假期都沒出門，31號回到家後就等著看 <a href="http://www9.nhk.or.jp/kouhaku/">紅白</a> ，這是我第一次有從一開始就看到啊，話說我每年12/31都會想著明年一定要裝 <a href="http://www.nhk.or.jp/bs/"><span class="caps">BSD</span></a> ，然後一年一年一直過去....，算了，等電視升級時在一起好了。今年紅白有 <a href="http://www.mizukinana.jp/">水樹奈奈</a> 登場，對我來說算是比較有特別意義，到不是特別迷她，而是史上第一位聲優登上紅白，總覺得要見證一下，加上今年是第 60 屆，感覺就是不能錯過～～</p>

<p>話說這三天我竟然沒有很墮落的睡覺看動畫，第一天整理了 irc logs，把部落格內的文章又掃過一次，檢查有沒有圖片連結錯誤，然後重新編譯了我機器上的 <a href="http://www.vim.org/">vim</a> ，之前忘了 patch ，加上沒把 <a href="http://vimdoc.sourceforge.net/htmldoc/various.html#+gettext">gettext</a> 功能弄上，所以介面一直是中文的，另外就是搞定了 <a href="http://www.tcsh.org/Welcome">tcsh</a> 的 Home,、End、PageUp 等案件的功能，因為和 <a href="http://www.gnu.org/software/bash/">bash</a> 用 inputrc 的設定不一樣，一直到這天才找到設定方法， bash 下的 inputrc 是這樣寫：</p>



<pre><code>&quot;\e[1~&quot;: beginning-of-line
&quot;\e[2~&quot;: yank
&quot;\e[3~&quot;: delete-char
&quot;\e[4~&quot;: end-of-line
&quot;\e[5~&quot;: history-search-backward
&quot;\e[6~&quot;: history-search-forward</code></pre>



<p>tcsh 則是寫在 cshrc 裡面：</p>



<pre><code>bindkey &quot;\e[1~&quot; beginning-of-line
bindkey &quot;\e[2~&quot; overwrite-mode
bindkey &quot;\e[3~&quot; delete-char
bindkey &quot;\e[4~&quot; end-of-line
bindkey &quot;\e[5~&quot; history-search-backward
bindkey &quot;\e[6~&quot; history-search-forward</code></pre>



<p>第三天玩的 zsh 也和 tcsh 一樣。</p>

<p>第二天都在看 javascript 的 <a href="http://www.nczonline.net/blog/tag/javascript/">文章</a> 和 <a href="http://www.designfollow.com/javascript/17-hours-of-javascript-from-the-masters/">影片</a> ，其中有一篇 <a href="http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/">Rendering: repaint, reflow/relayout, restyle</a> 蠻不錯的，介紹了 render tree 的概念，是以前沒接觸過的，另外還看了不少 performance 相關的文章，希望 Nicolas 的 <a href="http://www.amazon.com/dp/059680279X">High Performance JavaScript</a> 能快點出。</p>

<p>第三天早上則是弄拖了很久的 <a href="http://jedi.org/p4/Opera/pub/">Opera 三太子</a> Mac 版，因為這部份動力不大所以一直都沒什麼動，不過這次算是蠻有進度的，幾乎大部分的設定都有套上去了，該改的檔案要放哪也大概都確定了，應該過陣子會有個測試版吧，接著因為噗浪上 <a href="http://www.zsh.org/">zsh</a> 正夯，所以我也玩起來了，zsh 是真的厲害不少，自動完成的功能，git 後面的指令也會自動完成，還會列出參考，cd 可以直接切換父層目錄，例如要從 「 <code>xx/2.1/blah/blah/blah</code> 」 跑到 「 <code>xx/2.2/blah/blah/blah</code> 」 只要輸入 cd 2.1 2.2 就可以了，另外我發現他除了 <a href="http://zsh.sourceforge.net/Doc/Release/Parameters.html#IDX248"><span class="caps">PROMPT</span></a> 可以設定外，還有一個 <a href="http://zsh.sourceforge.net/Doc/Release/Parameters.html#IDX264"><span class="caps">RPROMPT</span></a> ，是會放在最右邊的，而且指令打太長時還會自動消失，不過因為在 freebsd 下設定顏色的方法找很久才找到，所以整個幾乎下午剩下的時間都在弄，我的 zsh 現在變這樣了。</p>

<p><a href="http://www.flickr.com/photos/othree/4240326365/" title="Flickr 上 othree 的 zsh"><img src="http://farm3.static.flickr.com/2531/4240326365_3ca467f0c9_o.png" width="498" height="216" alt="zsh" /></a></p>

<p>最後就是今天晚上開始用 <a href="https://github.com/">github</a> 備份我的 <a href="http://github.com/othree/rc">rc 檔</a> 了，現在比較整齊的只有 zshrc 吧XD。</p>

<p>至於動畫，不知道為什麼把 <a href="http://zh.wikipedia.org/wiki/%E5%A4%A7%E9%81%8B%E5%8B%95%E6%9C%83">大運動會</a> <span class="caps">OVA </span>版重看一遍了，其實 TV 版也在重看，只是 <span class="caps">OVA </span>比較好看，TV 最後面太超展開了，所以越看越慢，日本年假期間都沒新動畫啊&gt;&lt;。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

	</b:entries>
</b:blog>
