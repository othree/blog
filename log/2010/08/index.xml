<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>m</b:listType>
			<b:listData listID="2010-08">August 2010</b:listData>

			<b:previous>
				<b:mTitle>July 2010</b:mTitle>
				<b:mDate>2010/07</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>September 2010</b:mTitle>
				<b:mDate>2010/09</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000626" baseName="satoshi-kon-passed-away">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-08-26</b:date>
				<b:time>01:39:08</b:time>
			</b:datetime>
			<b:category>acg</b:category>
			<b:title>今敏監督過世</b:title>
			<b:content>
				<b:summary>本文非採用 CC 授權。 （圖片來源： CCSX Makes ACG NEWS ） 今天（25日）早上，我被可能是要來傳教的人的電鈴聲吵醒，當然我沒開門讓對方進來，不過我還記得她在對講機另一頭傳來的最後一句話：「其實人的生命...」然後我就掛掉了，我無法肯定她要說什麼，大概是要說人生無常怎樣怎樣的，這種事情我當然早知道了，不過反正人類就是不見棺材不掉淚的墮落物種。 之後我一如往常的上網看新文章和消息，就看到了 今敏監督過世的消息 ，果然人世無常，就在我還在等他新作品問世的時候，他突然的就走了。今敏監督是我非常喜歡的監督，他的作品非日本主流的方向（以目前來說是萌吧），也不是Ghibli 那種全家可以歡心觀賞的，很有個人風格，雖然日本當地票房表現不突出，但也屢屢獲得國際肯定，他的作品總是超乎我的想像力的最大範圍，看片時不管是誰或多或少會有預期或是猜想接下來的發展，不過他的故事總是跑的比我的想像力要快，看盜夢偵探時更是如此，也因此，他的作品我幾乎都只看一次，因為那種初看的感觸太過令人難忘，實在不捨把它磨淡。 今敏監督的過世其實對我衝擊不小，一來是我很喜歡他的作品，總是可以抓住我的情緒，二是他來過台灣，似乎上也不過幾年前，那時候他看起來人很好，我的映像也加分不少，比起同樣英年早逝也很另我惋惜的 近藤喜文 和我的交集就少了許多，今敏和我的關係更密切些，再加上期待的 新作品 還沒完成，不只是我們遺憾不能完整的看到他想給我們看的，今敏本人也是相當掛念不下他沒完成的作品，看著他的遺言真是讓我倍感難過，希望不要再有這樣令人惋惜的事情發生了，也祝福他能安心離開人世。 如果你從沒見過他的作品，我強烈推薦可以去找 千年女優 和 盜夢偵探 兩部來看看（不過前者代理版DVD的品質又是另一回事了）。 文末附上今敏監督給大家的遺言，由 PTT 版友 kinnsan 翻譯，原 刊載在今敏的部落格上 ，你也可以到 這 看中文版，或許會更好閱讀，就算你對動畫沒興趣，這篇文章也很值得靜靜體會。...</b:summary>
				<b:mainContent><p>本文非採用 CC 授權。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/ccsx/4926699112/" title="100825 - 日本動畫導演「今敏」因胰臟癌而在24日驟逝，劇場版《作夢機器》終成遺作，7000字遺書公開。 (1/2) by ccsx, on Flickr"><img src="//farm5.staticflickr.com/4100/4926699112_7e7b260f41_b.jpg" width="539" height="720" alt="100825 - 日本動畫導演「今敏」因胰臟癌而在24日驟逝，劇場版《作夢機器》終成遺作，7000字遺書公開。 (1/2)" src-1="(max-width: 768px)  //farm5.staticflickr.com/4100/4926699112_7e7b260f41.jpg 1x, //farm5.staticflickr.com/4100/4926699112_7e7b260f41_b.jpg 2x"  /></a><br />
（圖片來源： <a href="http://ccsx.wordpress.com/2010/08/25/satoshi-kon-passed-away/"><span class="caps">CCSX</span> Makes <span class="caps">ACG NEWS</span></a> ）</p>

<p>今天（25日）早上，我被可能是要來傳教的人的電鈴聲吵醒，當然我沒開門讓對方進來，不過我還記得她在對講機另一頭傳來的最後一句話：「其實人的生命...」然後我就掛掉了，我無法肯定她要說什麼，大概是要說人生無常怎樣怎樣的，這種事情我當然早知道了，不過反正人類就是不見棺材不掉淚的墮落物種。</p>

<p>之後我一如往常的上網看新文章和消息，就看到了 <a href="http://headlines.yahoo.co.jp/hl?a=20100825-00000013-flix-movi">今敏監督過世的消息</a> ，果然人世無常，就在我還在等他新作品問世的時候，他突然的就走了。今敏監督是我非常喜歡的監督，他的作品非日本主流的方向（以目前來說是萌吧），也不是Ghibli 那種全家可以歡心觀賞的，很有個人風格，雖然日本當地票房表現不突出，但也屢屢獲得國際肯定，他的作品總是超乎我的想像力的最大範圍，看片時不管是誰或多或少會有預期或是猜想接下來的發展，不過他的故事總是跑的比我的想像力要快，看盜夢偵探時更是如此，也因此，他的作品我幾乎都只看一次，因為那種初看的感觸太過令人難忘，實在不捨把它磨淡。</p>

<p>今敏監督的過世其實對我衝擊不小，一來是我很喜歡他的作品，總是可以抓住我的情緒，二是他來過台灣，似乎上也不過幾年前，那時候他看起來人很好，我的映像也加分不少，比起同樣英年早逝也很另我惋惜的 <a href="http://zh.wikipedia.org/zh-tw/%E8%BF%91%E8%97%A4%E5%96%9C%E6%96%87">近藤喜文</a> 和我的交集就少了許多，今敏和我的關係更密切些，再加上期待的 <a href="http://yume-robo.com/">新作品</a> 還沒完成，不只是我們遺憾不能完整的看到他想給我們看的，今敏本人也是相當掛念不下他沒完成的作品，看著他的遺言真是讓我倍感難過，希望不要再有這樣令人惋惜的事情發生了，也祝福他能安心離開人世。</p>

<p>如果你從沒見過他的作品，我強烈推薦可以去找 <a href="http://zh.wikipedia.org/zh-tw/%E5%8D%83%E5%B9%B4%E5%A5%B3%E5%84%AA">千年女優</a> 和 <a href="http://zh.wikipedia.org/zh-tw/%E7%9B%9C%E5%A4%A2%E5%81%B5%E6%8E%A2">盜夢偵探</a> 兩部來看看（不過前者代理版DVD的品質又是另一回事了）。</p>

<p>文末附上今敏監督給大家的遺言，由 <span class="caps">PTT </span>版友 kinnsan 翻譯，原 <a href="http://konstone.s-kon.net/modules/notebook/archives/565">刊載在今敏的部落格上</a> ，你也可以到 <a href="http://ppt.cc/RLWT">這</a> 看中文版，或許會更好閱讀，就算你對動畫沒興趣，這篇文章也很值得靜靜體會。</p></b:mainContent>
				<b:extendContent><blockquote>

<p>再見了。</p>

<p>今年的5月18日，是我忘不了的日子。<br />
這一天，武藏野紅十字醫院心臟內科的醫師作出如下的宣告：<br />
「你是胰臟癌末期，癌細胞已經轉移至全身各處骨頭，最多只能再活半年。」<br />
我跟內人一起聽到這番話。命運實在太過唐突、太過沒有道理，使我們倆幾乎無法獨力承受。<br />
我平常心裡就在想：<br />
「隨時都有可能會死掉，這也是沒辦法的。」<br />
但這未免太過突然了。</p>

<p>不過，或許真的可以說是有事先徵兆。2～3個月前，我整片背部各處，以及我的腳跟等部位都出現劇烈疼痛，右腳也使不上力，走路更出現了很大的困難。我有找過針灸師與整脊師，但狀況並未改善。經過MRI（核磁共振）與PET-CT（正子斷層掃描）等等精密儀器檢查的結果，就是剛剛那段「只能再活半年」的宣告。<br />
這簡直像是回過神來，死神就站在背後似的，我實在也是束手無策。</p>

<p>宣告後，我與內人一同摸索活下去的辦法。真的是拚了老命。<br />
我們得到了可靠的友人以及無比強力的支援。我拒絕抗癌劑，想要相信與世間普遍觀念略略不同的世界觀活下去。感覺拒絕「普通」這點，倒還挺有我的風格的。反正多數派當中也沒有我的容身之處，即使是醫療方面也一樣。同時這次也讓我體認到，現代醫療的主流派背後，究竟有著什麼樣的機制。<br />
「就在自己選擇的世界觀當中活下去吧！」<br />
可惜，光靠一股氣力是沒有用的，這點跟製作作品時一樣。<br />
病情確實一天天的惡化。</p>

<p>同時我也算是一個社會人，因此平常的我也大約接受了一半的世間普遍世界觀。畢竟我也會乖乖的繳納稅金。就算不足以自傲，我也夠資格算是日本社會的成員。<br />
所以在與我「活下去」的世界觀作準備的同時，我也打算著手<br />
「替我的死亡作準備」。<br />
雖然完全沒有就緒就是了。<br />
準備之一，就是找來兩個值得信賴的朋友協助，成立一間公司，負責管理今敏微不足道的著作權。<br />
另外一項準備就是，寫好遺囑好讓我並不算多的財產能順利地讓內人繼承。當然了，我死後應該是不會發生遺產爭奪戰，但我也想替獨活在世界上的妻子盡可能除去不安，這樣我才能稍微安心地離開。</p>

<p>各種手續，我與內人都很頭痛的事務處理、事先調查等等，由於超棒的朋友相助，進行得十分迅速。<br />
後來我併發肺炎的危急情況當中，意識矇矓地在遺囑上簽下最後的名字時，我心裡總算是覺得：這樣死掉應該也可以了吧。<br />
「唉...總算能死了。」<br />
畢竟在兩天前就被救護車送到武藏野紅十字，過了一天又被救護車送到同一間醫院。也因此住院作了詳細檢查。檢查結果是併發了肺炎，肺部也有嚴重積水。我跟醫生問了個究竟，他的回答倒是挺官腔的。就某方面而言，也挺感謝他的。<br />
「頂多只能撐個一兩天......就算熬了過去，最多月底就不行了吧。」<br />
聽著聽著我心想「怎麼講得跟天氣預報一樣...」不過事態確實越來越緊急了。<br />
那是7月7日的事。這年七夕也未免太殘忍了。</p>

<p>所以我很快地下了決定：<br />
我要死在家裡。<br />
或許對我身邊的人而言，最後仍然給他們添了很大的麻煩，好不容易才找到能讓我離開醫院回到家裡的方法。<br />
一切都多虧了我妻子的努力，醫院那看似放棄卻又真的有幫到我的實際協助，外部醫院的莫大支援，以及屢屢令人只能認為是「天賜」的偶然，甚至讓我無法相信現實當中的偶然與必然，竟然能這麼巧合地環環相扣。畢竟這又不是「東京教父」啊。</p>

<p>在我妻子替我設法離開醫院奔走時，我則是對醫生說「就算一天也好、半天也好，只要我留在家裡就一定還有辦法！」說完後我就一個人留在陰暗的病房內等死。<br />
當時很寂寞，但我心裡想的卻是：<br />
「死或許也不算壞。」<br />
這想法不是出於什麼特別的理由，或許是因為如果不這麼想我就撐不下去了吧，但總之，當時我的心情是連我自己都非常驚訝的平穩。<br />
只有一天讓我說什麼都無法接受。<br />
「我說什麼都不想死在這種地方......」<br />
此時眼前掛在牆壁上的月曆開始晃動，房間看起來越來越大。<br />
「傷腦筋......怎麼是從月曆裡跑出來接我走呢。我的幻覺真是不夠充滿個性。」<br />
此時我的職業意識仍然在運作，令我忍不住想笑。但此時或許是我最接近「死亡」的一刻吧。我真正感覺到死亡的逼近。<br />
在「死亡」與床單的包裹之下，加上許多人的盡力而為，我奇蹟似地逃出了武藏野紅十字，回到自己家中。<br />
死也是很痛苦的。<br />
我先聲明，我並不是批評或是討厭武藏野紅十字醫院，請各位不要誤會。<br />
我只是想要回自己家而已。<br />
回到那個我生活的地方。</p>

<p>有一點讓我略為吃驚。就是當我被送到家中客廳時，居然還附帶了臨死體驗中最常聽到的體驗：「站在高處看著自己被搬到房間內的模樣」。<br />
大概是站在地面上數公尺的地方，用有點廣角的鏡頭俯瞰著包含著自己的風景。房間中央的床鋪的四角形，給了我特別大的印象。被裹在床單內的自己，放在那塊四角形上。<br />
感覺並不怎麼小心翼翼，不過也沒什麼好抱怨的。</p>

<p>我本來應該是在家裡等死的。<br />
沒想到。<br />
我似乎是輕輕鬆鬆地翻過了肺炎這難關。<br />
哎呀？<br />
我居然這麼想：<br />
「竟然會沒死成啊（笑）」<br />
後來滿腦子都只有「死」的我，覺得只有一次真正死掉。<br />
在朦朧的意識深處，「reborn」這個詞彙晃動了數次。<br />
不可思議地，第二天起我的氣力再度啟動了。<br />
我覺得這一切，都是我妻子、來探我的病分我一份元氣的那些人、來替我加油的朋友、醫師、護士、看護等等所有人的功勞。我打從心裡這麼想。</p>

<p>既然活下去的氣力都再度啟動了，我就不能繼續模模糊糊地下去。<br />
我謹記這是多分到的一段壽命，所以我更得好好運用。<br />
同時我也想要至少多還一份人情。<br />
其實我罹患癌症這件事，我只告訴了身邊極少數的人，連我雙親都不知道。特別是這會替我的工作製造許多麻煩，所以我說也說不出口。<br />
我本來也想上網宣布我得了癌症，每天跟大家報告我剩餘的人生，但因為我擔心今敏即將死亡這事說來雖小，卻也會造成許多影響，也因此非常對不起身邊的親朋好友。真的是非常抱歉。</p>

<p>死前，我還想再見許多人一面，跟他們說幾句話。<br />
這段人生當中，我有家人，親戚，從國小國中開始交往的朋友，高中同學，大學認識的同伴，在漫畫的世界當中結識並交換許多刺激的人們，在動畫的世界中一同工作、一同喝酒、用同樣的作品刺激彼此的技術、同甘共苦的眾多同伴，由於擔任動畫導演得以認識的無數人們，以及世界各地願意自稱是我的影迷的許多貴人。還有透過網路認識的朋友。</p>

<p>如果可以，我還想見很多人一面（當然也有不想見到的人）。但是見了面後，感覺我腦子裡「我再也見不到這個人了！」的想法會累積得越來越多，讓我沒有辦法乾脆地赴死。<br />
同時即使略為恢復，我所剩的氣力也不多了，要見別人的面需要莫大的決心。越想見面的人，見到面卻越痛苦，真是太諷刺了。<br />
再加上，由於癌細胞轉移到骨頭上，下半身開始麻痺，我幾乎無法下床。我不想讓別人看到我瘦成皮包骨的模樣。我希望許許多多的朋友記得的能是那個還充滿元氣的今敏。<br />
不知道我病情的親氣、所有朋友、所有認識的人，我要藉這個場合跟你們道歉。但我真的很希望你們可以理解今敏的這份任性。<br />
因為今敏本來就是「這樣的傢伙」嘛。<br />
想到你們的臉，我的腦子裡就湧現許多美好的回憶與笑容。<br />
真的非常感謝大家給了我這麼棒的回憶。<br />
我好愛自己生活的這個世界。<br />
這樣的想法，本身就是一種幸福。</p>

<p>在我的人生當中認識的不算少的人們，無論影響是正面或是負面，都是構成「今敏」這個人的必要成分，我要感謝所有的邂逅。雖然結果是我四十幾歲就早逝了，但我也認為這是無可取代的我的命運。同時我也有過十分多的美好經驗。<br />
現在我對於死，只有這個想法：<br />
「也只能說遺憾了。」<br />
是真的。</p>

<p>雖然我可以把這麼多的虧欠想成是無可奈何的，並且放棄，還是有件事讓我說什麼都過意不去。<br />
就是我的雙親，以及MAD <span class="caps">HOUSE</span>丸山先生。<br />
一方是今敏的親生父母，另一方則是動畫導演方面的再造父母。<br />
雖然是有點遲了，除了坦白相告，我也沒有其他方法可選。<br />
當時我真的希望獲得原諒。</p>

<p>看到丸山先生來到家裡探望我時，我控制不了我的淚，也控制不了自慚形穢的想法。<br />
「對不起，我居然變成這樣......」<br />
丸山先生什麼話也沒說，只是搖搖頭，握住我的雙手。<br />
讓我的心裡充滿了感激。<br />
能夠跟這位先生一起工作的感激之情，化為無法訴諸言語的歡喜，怒濤般地席捲而來。<br />
這話聽起來或許十分誇張，但我真的只能這麼形容。<br />
或許只是我個人妄想，但我真的覺得有一舉獲得原諒的感覺。</p>

<p>我最放不下的，就是電影「做夢機械」。<br />
電影本身固然如此，所有參與的工作人員也讓我非常的掛心。因為搞不好，一路上含辛茹苦畫出來的畫面，是非常可能再也無法被任何人看到的。<br />
因為原作、腳本、角色與世界觀的設定、分鏡、印象音樂......等等所有的想法都在今敏一個人的心中。<br />
當然了，有很多部分也是作畫監督、美術監督等等許多工作人員所共有的，但基本上這部作品只有今敏知道是在搞什麼，也只有今敏做的出來。如果說會變成這樣全都是今敏的責任，那我也無話可說；但是我自認我也是付出了不少的努力，希望能跟大家一起分享這個世界觀的。事到如今，我的不對實在令我椎心刺骨地痛。<br />
我真的覺得很對不起各位工作人員。<br />
但我希望你們稍微理解。<br />
因為今敏就是「這樣的人」，也才有辦法作出濃縮了許多與其他人不一樣成分的動畫。<br />
這說法或許十分傲慢，但請各位看在癌症的面子上就原諒我吧。</p>

<p>我並不是茫然地等死，我也在拼命地絞盡腦汁，好讓今敏亡後作品也能繼續存續。但這想法也太單純了。<br />
我跟丸山先生提到我對「做夢機械」的掛念，<br />
他只說了：<br />
「放心，我會替你想辦法的，不用擔心。」<br />
我哭了<br />
我真的痛哭了。<br />
過去在製作電影時、在編列預算時，都欠了他不少人情，最後總是丸山先生在替我收拾善後。<br />
這次也一樣，我一點進步都沒有。<br />
我跟丸山先生有很多時間長壇。也因此，我才稍微實際體會到，今敏的才能與技術在現在的動畫業界當中是十分珍貴的。<br />
我好惋惜這些才能。我說什麼都想要留下來。<br />
不過既然The <span class="caps">MADHOUSE</span>丸山先生都這麼說了，我總算能帶點自信，安心地走了。<br />
確實，不用別人說我也單純地覺得，這怪點子以及細部描寫的技術就這麼消失了真的很可惜，但也沒辦法了。<br />
我衷心地感謝給了我站在世人面前機會的丸山先生。我真的很感謝你。<br />
以動畫導演身分而言，今敏也夠幸福的了。</p>

<p>告訴雙親時真的非常的痛苦。<br />
其實我也想趁著還能自由行動時，自己前往札幌，跟雙親報告我得了癌症這件事，但病情惡化的速度實在快得可惡，最後我只能在最接近死亡的病房內，打了通唐突至極的電話告訴他們。<br />
「我得了脾臟癌，末期了，馬上就會死。能當爸爸媽媽的孩子我真的很幸福。謝謝你們。」<br />
突然說出口的話，並沒有醞釀很久，畢竟當時我已經被將死的預感給包圍了。</p>

<p>直到我回到家，好不容易度過肺炎難關時。<br />
我下了很大的決心，才決定與雙親見面。<br />
雙親也很想見我。<br />
見面反倒痛苦，我也沒有氣力見面......但我說什麼都想看看他們的臉。我想當面跟他們說，我很感謝他們生下我。<br />
我真的很幸福。<br />
雖然說我的生命走的比別人快了一點......這點讓我對妻子、對雙親、對我喜歡的人們都很不好意思。<br />
他們很快地就回應了我的任性。第二天，我的雙親就從札幌趕到我家。<br />
剛看到我躺在床上，我媽脫口而出的那句話我畢生難忘。<br />
「對不起！我沒有把你生成一個健康的孩子！」<br />
我說不出第二句話。</p>

<p>跟雙親生活的日子並不算長，但已經夠了。<br />
我覺得他們看到我的臉，就能明白一切，事實上也是如此。</p>

<p>謝謝你們，爸爸，媽媽。<br />
能夠以你們兩人的孩子的身分誕生在這個世界上，是無比的幸福。<br />
數不盡的回憶以及感謝，充滿了我的胸膛。<br />
幸福本身也很可貴，但我更感激不盡的是，他們讓我培養出能感受到幸福的能力。<br />
真的很謝謝你們。</p>

<p>早父母一步先走非常不孝，不過這十幾年當中，我以動畫導演的身分充分施展自己的本領，達成了我的目標，也得到了相當的評價。唯一遺憾的是不算很賣座，但我覺得已經足以報答他們。<br />
特別是這十幾年來，我的生命密度是別人的好幾倍。這一點我相信雙親跟我一定都知道。</p>

<p>能夠跟雙親與丸山先生直接對話，讓我卸下了肩頭上的重擔。</p>

<p>最後，是比誰都讓我掛念，卻又直到最後都極力支撐我的妻子。<br />
接受醫生的宣告後，我們兩個人對泣數次。這段日子，每天對我們的身心都是煎熬。甚至無法用言詞形容。<br />
可是，我之所以能夠熬過這些痛苦又無奈的日子，全都是因為醫生的宣告後，妳說的那番強而有力的話：<br />
「我會陪你走到最後。」<br />
妳這話一點都沒有錯。彷彿是要擺脫我的擔心似的，面對那些怒濤般從各處湧來的要求、請求，妳整理得井然有序，同時妳一下子就學會了如何照顧自己的丈夫。妳精明幹練的模樣，讓我非常感動。<br />
「我的妻子好厲害啊！」<br />
都到這個地步就別說這些了？不不，是因為我深切體會到，妳比我一直以來所認為的都還要厲害。<br />
我相信在我死了以後，妳一定也能很順利地將今敏送走。<br />
回想起來，結婚後我每天都忙著工作工作，現在想想唯一悠閒地待在家裡的日子，就是罹癌之後，也真是太過分了。<br />
可是，我身旁的妳非常明白，忙於工作的人就是有所才能的人。我真的很幸福，真的。<br />
無論是活著的日子，還是迎接死亡的日子，我對妳的感謝都無法訴盡。謝謝妳。</p>

<p>還有很多事情讓我掛心的，但是一一細數就沒完沒了了。萬事都需要一個結束。<br />
最後，是我想現在應該很難接受的......答應讓我在家裡接受癌末照護的主治醫師H醫師，<br />
以及他的太太護理師K女士，我要對你們致上深深的謝意。<br />
雖然在家裡進行醫療是非常不方便的，但你們仍頑強地替我想出各種方法緩解癌症帶來的疼痛，在死亡逼近時你們也極力設法讓我過的更舒服一點，這真的幫了我很多。<br />
不光是如此，面對這個不光是麻煩，態度也異常高傲的病患，你們跨越了工作的框框，用更人性化的方式幫助我們。真不知道該說是你們支撐著我們夫妻，還是拯救了我們。<br />
同時醫師賢伉儷的人品也不時地給了我們鼓勵。<br />
真的非常非常感謝你們。</p>

<p>這篇文章也到了最後了。在5月半知道我壽命所剩無幾時起，不分公私給了我們異乎尋常的盡力協助以及精神支援的兩位朋友，株式會社KON'STONE的成員、同時也是我高中時起的好朋友T先生，以及製作人H，我要衷心感謝你們。<br />
真的很感謝你們。從我貧乏的語彙庫當中，很難找出適當的感謝詞，但我們夫妻都深受你們的照顧。<br />
如果沒有你們倆，我的死恐怕會更加痛苦，同時在一旁照顧我的妻子也恐怕會我吞噬吧。<br />
真的一切都受你們的照顧了。<br />
儘管一直承蒙照顧，但不好意思，能夠請你們協助我的妻子，一直到我死後出殯嗎？<br />
這樣一來，我也能安心地「上飛機」了。<br />
我衷心地拜託你們。</p>

<p>最後，感謝一路閱讀這篇落落長文章的讀者，謝謝你們。<br />
我要懷著對世上所有美好事物的謝意，放下我的筆了。</p>

<p>我就先走一步了。</p>

<p>今 敏</p>

</blockquote></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000624" baseName="javascript-best-practice-2">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-08-08</b:date>
				<b:time>16:26:44</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>JavaScript Best Practice Part.2: Performance</b:title>
			<b:content>
				<b:summary>目前 JavaScript Best Practice 想了四個主題，不過後面兩個主題的東西還有點少，雖然預計一週一篇，可能還會再看看吧，這篇主要是在效能增進的一些作法，下一篇應該會是一點安全性的東西，第四篇應該是 Loose Coupling (Special Event)。總之所以就開始吧～...</b:summary>
				<b:mainContent><p>目前 JavaScript Best Practice 想了四個主題，不過後面兩個主題的東西還有點少，雖然預計一週一篇，可能還會再看看吧，這篇主要是在效能增進的一些作法，下一篇應該會是一點安全性的東西，第四篇應該是 Loose Coupling (Special Event)。總之所以就開始吧～</p></b:mainContent>
				<b:extendContent><h4>陣列與迴圈</h4>

<p>通常用 for 迴圈處理陣列時會這樣寫：</p>



<pre><code>for (i=0; i &lt; arr.length; i++) {
    arr[i] = blah...
}
</code></pre>



<p>不過這樣效率比較差，每次都要去看陣列的長度，所以建議寫成：</p>



<pre><code>for (i=0, len=arr.length; i &lt; arr.len; i++) {
    arr[i] = blah...
}
</code></pre>



<p>這樣就只有一開始去存取陣列長度而已，其實還有其他寫法可以更快，像是反過來存取，或是改用 while，不過程式碼比較不淺顯好懂，就比較不推薦使用。</p>

<p>如果不是陣列而是 <span class="caps">DOM</span> NodeList 的話差距會更明顯，DOM NodeList 雖然行為和陣列有些相似，不過效率上一直都比較差，所以像 <a href="http://sizzlejs.com/">sizzle</a> 還會把找到的節點丟到陣列才回傳，又不過其實現在大部分的新瀏覽器在 <span class="caps">DOM</span> NodeList 存取和陣列存取的效率差距越來越小了。</p>

<h4>One var</h4>

<p>宣告多個變數時：</p>



<pre><code>var a = 1;
var b = 2;
var c = 3;
</code></pre>



<p>改成</p>



<pre><code>var a = 1,
    b = 2,
    c = 3;
</code></pre>



<p>試著讓每個 function 一開始就用一個 var 把所有需要的變數的宣告好，包括 for 迴圈要用到的 i, j, k, len 等變數，因為 JavaScript 只有 function 有 scope 的效果，所以在 <code>for (var i = 0; i &lt; arr.length; i++)</code> 這裡面宣告的 i 和在外面宣告的一樣，所以就統一移到前面去宣告吧，這在 <a href="http://blog.othree.net/log/2010/08/02/javascript-best-practice-1/">前一篇的文章</a> 有提到 <span class="caps">JSL</span>int 的 onevar 這個選項可以使用，所以可以交給 <span class="caps">JSL</span>int 檢查。</p>

<h4>字串串接</h4>

<p>如果有需要大量使用到字串串接，像是下面的程式碼：</p>



<pre><code>str = '';
for (i=0, len=arr.length; i &lt; len; i++) {
    str += arr[i].text;
}</code></pre>



<p>那改成先丟進陣列，最後用 join 一口氣接起來會快很多：</p>



<pre><code>strarr = [];
for (i=0, len=arr.length; i &lt; len; i++) {
    strarr.push(arr[i].text);
}
str = strarr.join('');</code></pre>



<h4>使用 innerHTML 還是 <span class="caps">DOM</span></h4>

<p>在我曾經還是標準狂信者的時候，我是很討厭使用 <a href="https://developer.mozilla.org/en/dom:element.innerhtml">innerHTML</a> 的，不過後來我脫離了這個階段，innerHTML 就再也不是我的禁忌了，畢竟它速度快、相容性又高，不過需要注意的是在 IE 下使用標籤語法要正確，像是標籤沒有結束的話，其他瀏覽器會產生空的標籤，IE 可能就什麼都沒產生了，不過使用上要注意，把需要的 <span class="caps">HTML </span>字串都生好了一口氣丟進去，不然速度還是會很慢，另外比較特別的是其實 webkit 瀏覽器使用 <span class="caps">DOM </span>會比較快。</p>

<h4>Scope Chain</h4>

<p>JavaScript 的 scope 是要用 function 來建立，每多一層 function scope 就會讓 scope chain 多一層，scope chain 指的尋找變數、函數時的搜尋路徑，越多層 function scope 的東西要存取起來速度就會越慢，前一篇也有提到不要使用 with，其中一個原因就是會讓本來直接可以存取的東西跑到上一層去，所以考慮到這個問題，所有會存取到兩次以上的，不同層的東西都盡量在這層存起來，舉例來說：</p>



<pre><code>function test() {
    if (/baga/.test(document.getElementById('id1').className) {
        document.getElementById('id1').style.color = 'red';
    }
}</code></pre>



<p>就可以改成下面這樣，程式碼看起來也比較精簡：</p>



<pre><code>function test() {
    var id1 = document.getElementById('id1');
    if (/baga/.test(id1.className) {
        id1.style.color = 'red';
    }
}</code></pre>



<p>有些人可能會習慣用一個匿名函數把自己的 code 包起來，避免污染到其他的 script，如下：</p>



<pre><code>(function () {
    // blah...
})();</code></pre>



<p>實際上這樣寫，會讓 global scope 的東西變得遠一層，所以像是 document 這種常用到的物件存取時間就會增加，有一個從 <a href="http://paulirish.com/2010/10-things-i-learned-from-the-jquery-source/">10 Things I Learned from the jQuery Source</a> 看到的方法如下：</p>



<pre><code>(function (window, document, undefined) {
    // blah...
})(window, document);</code></pre>



<p>這種寫法有兩個好處，一個是剛剛提到的，把 document 抓回到同一層， <a href="http://gugod.org/">gugod</a> 說這樣在 IE 下會快不少，另一個好處是使用壓縮工具時，可以把 window, document 這些變數名稱也壓縮起來。至於輸入參數的第三個 undefined 是故意的，這樣的用途是確保 undefined 沒被人覆寫過，不過 undefined 沒辦法過 <span class="caps">JSL</span>int，我是建議看自己的情形來決定需不需要，當然有的話比較安全。</p>

<h4>Reflow and Repaint</h4>

<p>當你對文件結構或是文件樣式做修改時，瀏覽器需要重新畫一次頁面，這些工作能盡量減少就盡量減少，大概有幾個方向可以做到：</p>


<ul>
<li>減少對文件樹的修改：修改文件樹會需要 reflow (當然接著 repaint)，所以要盡量減少文件樹的改動次數，如果需要插入大量的節點，可以先用 <a href="http://ejohn.org/blog/dom-documentfragments/">documentFragment</a> 包起來，再一次放進來。</li>
<li>避免直接修改 style 屬性：因為無法一次修改 style 的不同屬性，所以建議是用 class 來預先寫好不同狀況的樣式，然後改 class ，這樣就可以一口氣讓節點的樣式改好，而不會因為需要改三個屬性就讓能瀏覽器重畫了三次。</li>
<li>減少存取顯示相關的屬性：瀏覽器本身會做一些最佳化和排程來減少 reflow/repaint 工作，不過如果你需要存取這些顯示相關的資料（例如：寬、高、位置等），瀏覽器就會被迫馬上重畫，所以可以不存取就不要存取，例如做移動效果時，先把路徑設計好，然後看時間決定位置，而不要根據現在位置和函數執行的次數來移動。</li>
</ul>



<p>關於 reflow/repaint ， phpied 有篇文章 <a href="http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/">Rendering: repaint, reflow/relayout, restyle</a> 講的很詳細，有興趣深入的可以看看。</p>

<h4>Event Delegation</h4>

<p>如果你有大量的東西要加上同樣的事件，像是文件清單，要給每個文件都放上 click 事件來產生選取效果，那建議使用 event delegation 方式，而不要真的給每個元件都綁定事件，一來綁事件本身就很花時間了，二來也會吃記憶體，event delegation 的作法是把事件把在目標節點共同的祖先層，然後再用 event.target 來判斷實際上是按到哪個元素，程式碼看起來如下：</p>



<pre><code>document.getElementById('#file-list').addEventListener('click', function (e) {
    var target = e.target,
        tclass = target.className;
    if (target.nodeName.toLowerCase() == 'li') {
        tclass = tclass == 'selected' ? '' : 'selected' ;
    }
}, false);
</code></pre>



<p>這段 code 在 IE 上不能運作。Delegation 除了速度和記憶體的好處外，還有一個好處是因為事件綁在上面一層，所以內容（檔案清單）的增減都不用再去處理事件的增減，可以讓你的程式的 coupling 更鬆一點。</p>

<p>一些函式庫像是 jQuery 有提供 delegation ，讓你寫起來比較方便，除此之外它還有 live/dead，差別是 live/dead 是把事件綁在最外層，也就是 document 本身，不過這樣做有些缺點，一是綁太多時，效率會變差，因為要做太多的 target 判斷，加上一些事件可能會發生的太頻繁，整個就會卡住，二是有些事件不會跑到最上層。</p>

<h4>函數名稱和 profiling 工具</h4>

<p>匿名函數很好用，不過建議還是給它個名字，這樣在 profiling 的時候才知道是哪個函數，以下面這段程式碼為範例，用了兩種方法綁定事件，分別給了有名稱的函數和沒名稱的函數：</p>



<pre><code>function call() {
}
document.getElementById('b1').onclick = function () {
    call();
};
document.getElementById('b2').onclick = function b2() {
    call();
};
document.getElementById('b3').addEventListener('click', function () {
    call();
}, false);
document.getElementById('b4').addEventListener('click', function b4() {
    call();
}, false);
</code></pre>



<p>接著我依序點了四個目標，用 Firebug 記錄事件，結果如下圖：</p>

<p><a href="http://www.flickr.com/photos/othree/4869179392/" title="Flickr 上 othree 的 profiling"><img src="http://farm5.static.flickr.com/4138/4869179392_24f190df95_o.png" width="602" height="168" alt="profiling" /></a></p>

<p>可以看到沒有名字的兩個函數會難以分別，都叫 onclick，另外有自己取名的 b2、b4 就好辨認多了，當你的程式大起來時，會使用到匿名函數的地方可能會越來越多，如果沒有取名稱的話，到後來幾乎就無法判斷誰是誰了，因此建議函數都給它個名字吧。不過這頂多是開發時有用，正式上線程式碼過壓縮之後，YUICompressor 會把函數改名，Closure Compiler 會把不需要的函數名稱砍掉～～。</p>

<p>我最早看到這個問題是在 <a href="http://www.alertdebugging.com/2009/04/29/building-a-better-javascript-profiler-with-webkit/">Building a Better JavaScript Profiler with WebKit</a> 這篇文章，主要是在講新(當時)的 Webkit  開發工具的改變。</p></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000625" baseName="yuicompressor-vs-closure-">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-08-08</b:date>
				<b:time>10:39:33</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>YUICompressor vs Closure-Compiler</b:title>
			<b:content>
				<b:summary>總之我比較喜歡後者，兩個原因，一是壓縮出來比較小，二是不會把換行砍光光，這樣如果有錯誤出現，不得不從壓縮過的版本裡面找時，還會比較好找，用 YUICompressor 的話，因為會只剩一行，結果有錯誤的話也無法判斷是哪一部分的程式碼出錯。...</b:summary>
				<b:mainContent><p>總之我比較喜歡後者，兩個原因，一是壓縮出來比較小，二是不會把換行砍光光，這樣如果有錯誤出現，不得不從壓縮過的版本裡面找時，還會比較好找，用 <span class="caps">YUIC</span>ompressor 的話，因為會只剩一行，結果有錯誤的話也無法判斷是哪一部分的程式碼出錯。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000623" baseName="javascript-best-practice-1">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-08-02</b:date>
				<b:time>22:26:18</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>JavaScript Best Practice Part.1: JSLint</b:title>
			<b:content>
				<b:summary>前陣子有長輩問我 JavaScript 的 Best Practice，一時還真講不出來，因為我不太有把經驗整理出來的習慣，所以有了這系列的文章，雖然會有幾篇不知道XD。 那天被問到的時候我一時只想的到先過 JSLint 再說，所以第一篇就先從 JSLint 開始講起，JSLint 是 Douglas Crockford 在 2002 年時發表的 JavaScript 程式碼的檢查工具，除了基本的語法檢查外，還多了不少限制和要求，可以讓你的程式碼品質提昇，光是讓你的程式碼能過 JSLint 檢查就可以減少很多可能的問題了，接下來就針對各項主要的檢查項目做介紹。...</b:summary>
				<b:mainContent><p>前陣子有長輩問我 JavaScript 的 Best Practice，一時還真講不出來，因為我不太有把經驗整理出來的習慣，所以有了這系列的文章，雖然會有幾篇不知道XD。</p>

<p>那天被問到的時候我一時只想的到先過 <a href="http://www.jslint.com/"><span class="caps">JSL</span>int</a> 再說，所以第一篇就先從 <span class="caps">JSL</span>int 開始講起，JSLint 是 <a href="http://www.crockford.com/">Douglas Crockford</a> 在 2002 年時發表的 JavaScript 程式碼的檢查工具，除了基本的語法檢查外，還多了不少限制和要求，可以讓你的程式碼品質提昇，光是讓你的程式碼能過 <span class="caps">JSL</span>int 檢查就可以減少很多可能的問題了，接下來就針對各項主要的檢查項目做介紹。</p></b:mainContent>
				<b:extendContent><h4>全域變數</h4>

<p>全域變數很危險，因為這些變數可能會和其他的程式碼產生衝突，畢竟你可以控制自己的程式不用全域變數，但是你無法控制其他人的，甚至是其他人惡意 code，再加上 JavaScript 中只要變數使用前沒有先用 <code>var</code> 宣告過，該變數就會是全域變數，所以在 JavaScript 中是很容易誤用全域變數的，一般的作法是把自己的 code 全部放到同一個 namespace （物件）之下，這樣就可以讓程式使用到的全域變數最小化到只剩一個，或是把你的程式碼整個用 closure 包起來。JSLint 限制全域變數的使用，沒有宣告的全域變數都會被視為錯誤而跑出警告，宣告的方法是寫在註解裡面如下：</p>



<pre><code>/*global myApp:true, myApp2:true */</code></pre>



<h4>結尾分號</h4>

<p>每行結尾都要有分號，沒寫雖然程式碼也可以跑，但是寫了比較沒事，尤其是在使用簡單的 JavaScript 壓縮工具時很有差。不過有時候程式敘述沒完，到下一行還要繼續，像是太長的字串要分兩行，然後用 + 接起來時該怎麼辦？ <span class="caps">JSL</span>int 其實也是可以接受，只是加號要放在行尾，不是行首。</p>

<p>另外有有嚴格要求函數結尾的分號使用，分成兩種：</p>



<pre><code>var f1 = function () {};
function f2() {}
</code></pre>



<p>f1 這種宣告會要求要有分號結尾，f2 的方式則要求不可以加上多餘的分號。</p>

<h4>if, for 一定要大括號</h4>

<p>當然不寫大括號會有一行被認定是在該條件之內需要被執行的程式碼，不過為了保險不誤判起見（容易發生在修改程式碼時）， <span class="caps">JSL</span>int 強制要求一定要大括號。</p>

<h4>for in 要檢查該屬性是否屬於該物件直接擁有</h4>

<p>簡單說就是要這樣的寫法：</p>



<pre><code>for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
        ....
    }
}</code></pre>



<p>這是為了確保不會存取到不想存取的屬性，舉例來說，像是 prototype 這套 JavaScript 函式庫會對原生的陣列物件加上一些新的 method 到它的 prototype 裡面，這時如果想用 for in 寫法來跑這個陣列就會把這些新增的 method 也一起抓出來，所以需要用 <code>hasOwnProperty</code> 來檢查一下，不過我個人的建議是，不要用 for in 寫法，一來它效率比較慢，二來可能會遇到這種問題，還要一個一個檢查，所以能不用就不用最好，尤其是跑陣列時。</p>

<h4>不要用 with</h4>

<p>總之就是不要用 with，因為會讓你產生混淆，不知道你存取到的變數到底是哪個 scope 來的，而且還有效能問題， with 會多產生一層 scope chain ，本來直接可以存取到的變數反而跑到第二層去了。</p>

<h4><code>===</code> and <code>!==</code></h4>

<p>和 null, 0, undefined, true, false 這些值比較時，一定要用 <code>===</code> 和 <code>!==</code> ，因為 JavaScript 有神祕的型別轉換，讓你的 null <code>==</code> undefined 但是 null != false ，當然還有其他各種有趣的比較，總之你確定是要判斷是否是以上列舉值的其中任一種時，就用 <code>===</code> 和 <code>!==</code> 吧，如果只是要 true/false 判斷，可以用 !! 來把值轉成 boolean。</p>

<h4>eval is evil</h4>

<p>不要用 eval ，或是丟程式碼到 setTimeout、setInterval、Function 裡（和 eval 等價），雖然少數時候會需要 eval，不過大部分的程式應用可以不使用 eval， 它有安全性的問題和效率的問題，如果需要處理 <span class="caps">JSON </span>格式的資料，那大部分的 Library 都有函數可以處理，沒的話也可以使用 Crockford 的 <a href="http://www.json.org/js.html">json2.js</a> ，它相容於現在新瀏覽器內建的 <span class="caps">JSON </span>物件，可以安心使用。</p>

<p>說到 <span class="caps">JSON </span>就不得不提一下，其實它的字串只允許使用雙括號 " ，而且物件屬性名稱有要求一定要用字串形式，用雙括號包起來，不是只有字串值才需要，詳細可以看看 <a href="http://www.json.org/"><span class="caps">JSON </span>官網</a> 的鐵路圖，只是因為很多人使用 eval 來讀 <span class="caps">JSON </span>資料，才會產生誤解以為 <span class="caps">JSON </span>和 JavaScript 語法完全一樣，嚴格說來只是子集而已，這邊衍生的問題是，錯誤的 <span class="caps">JSON </span>格式在用原生 <span class="caps">JSON </span>或是 json2.js 時會過不了。</p>

<h4>使用 {} 建立物件， [] 建立陣列</h4>

<p>不要用 new Object() 和 new Array() 了，直接用 {} 和 [] 吧，還可以同時給初始值，速度也比較快。當然 <code>newString()</code> 、 <code>new Number()</code> 、 <code>new Boolean()</code> 也別用...</p>

<h4>parseInt </h4>

<p>parseInt 可以指定要是幾進位的整數形式，不過第二個參數也可以省略，只是預設值不是固定的，如果你的字串是 0 開頭的話，它會幫你當成 8 進位，如果是 0x 開頭的話會當成 16 進位，不過後者的問題比較小，問題是前者，如果你想要把 09 轉成整數，你本來預期是 9 ，但是因為被當成 8 進位，09 不存在，所以他會回傳 0 ，因此 <span class="caps">JSL</span>int 要求使用 parseInt 時一定要加上第二個參數，指定字串顯示的數值是幾進位的形式。</p>

<h4>使用 obj.name 取代 obj["name"]</h4>

<p>可以的話就使用前者的方法，速度比較快，也比較省程式碼。</p>

<h4>變數只能宣告一次</h4>

<p>在同一個 scope 下，同樣的變數名稱只允許宣告一次，當然也是為了錯誤認知。</p>

<h4>設定</h4>

<p>其實 <span class="caps">JSL</span>int 有不少選項可以設定，甚至可以允許 eval ，畢竟有時候會有需要，和全域變數一樣是寫在註解裡面，我自己現在的設定如下：</p>



<pre><code>/*jslint browser: true, forin: true, onevar: true, white: true*/
</code></pre>



<p>第一個 browser 選項是會提供部分瀏覽器內建的全域變數和函數，我不知道為什麼有些函數反而會關掉，像是 <code>escape</code> 有使用到的話還要自己加到 global 裡面。</p>

<p>第二個 forin 是前面提到的 hasOwnProperty 檢查，我通常是關掉不檢查的（設成 true），因為我很少需要物件繼承的複雜資料結構，所以比較不會有使用 for in 的需要，加上陣列也不會用 for in 來跑，所以就省去這項檢查了。</p>

<p>第三個 onevar 是限制每個 function 只能有一次 var 宣告，這也是一個效率問題，後面的文章會再詳細介紹。</p>

<p>第四個則是嚴格的縮排檢查，預設是四個空白，另外在有名稱的 function 宣告時會要求名稱後面直接接 () 中間不留空白， anonymous function 則否，當然主要目的是為了讓兩者區隔比較明顯，不會把 "function" 看成函數名稱。</p>



<pre><code>var f1 = function () {};
function f2() {}
</code></pre>



<p>像是前面舉過的例子，f1 後面的函數在宣告時是屬於匿名的，他的 () 就要和前面的 "function" 間留一個空白，f2 就要求函數名稱和後面的 () 接在一起。</p>

<h4>其他</h4>

<p>還有不少設定和檢查說明我這篇文章沒有提到，可以參考 <a href="http://www.jslint.com/lint.html"><span class="caps">JSL</span>int Instruction</a> ，而除了這些其實還有不少細部檢查沒列出的，就要等遇到時才知道了（要翻 <a href="http://www.jslint.com/fulljslint.js">原始碼</a> 也是可以的）。</p>

<p>下一篇文章會講一些和效能有關的東西，這兩篇應該都還很偏 coding style XD。</p>

<p class="update">補充：查了一下發現 escape/upescape 已經不推薦使用了，以後請用 encodeURI/decodeURI 。</p></b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
