<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>m</b:listType>
			<b:listData listID="2010-10">October 2010</b:listData>

			<b:previous>
				<b:mTitle>September 2010</b:mTitle>
				<b:mDate>2010/09</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>November 2010</b:mTitle>
				<b:mDate>2010/11</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000647" baseName="automjump">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-19</b:date>
				<b:time>22:27:24</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>automjump</b:title>
			<b:content>
				<b:summary>今天發現的有趣的命令列工具 autojump ，它會記錄你常用的目錄位置，然後之後就可以用簡單的關鍵字跳到路徑符合關鍵字，又最常用的目錄，以我為例，我最近常常會跑到某個位置的 vim-plugins 目錄，然後我又沒有其它目錄名稱和 plugin 相似，那不論我在哪，我都可以執行下面的指令跳到 vim-plugins： j plugin 我目前使用上是都沒什麼大問題，不過 hlb 說他的 vim 檔名自動完成會爛掉，可能要在研究看看問題在哪了。...</b:summary>
				<b:mainContent><p>今天發現的有趣的命令列工具 <a href="http://github.com/joelthelion/autojump">autojump</a> ，它會記錄你常用的目錄位置，然後之後就可以用簡單的關鍵字跳到路徑符合關鍵字，又最常用的目錄，以我為例，我最近常常會跑到某個位置的 vim-plugins 目錄，然後我又沒有其它目錄名稱和 plugin 相似，那不論我在哪，我都可以執行下面的指令跳到 vim-plugins：</p>

<pre><code>j plugin
</code></pre>

<p>我目前使用上是都沒什麼大問題，不過 <a href="http://iamhlb.com">hlb</a> 說他的 vim 檔名自動完成會爛掉，可能要在研究看看問題在哪了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000646" baseName="eregex-vim">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-19</b:date>
				<b:time>17:58:45</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>eregex.vim</b:title>
			<b:content>
				<b:summary>新開始維護的 eregex.vim，一開始的動機是因為我有小東西要修改，然後就開了 git repo，後來覺得乾脆就自己維護，順便推廣，所以目前主要貢獻幾乎都是在翻譯說明文件。 簡單介紹，eregex.vim 是讓 Vim 可以使用 Perl/Ruby 形式的正規表示式，因為實在是很不習慣 Vim 的正規表示式寫法，安裝後，把以下兩行加到 .vimrc 檔案裡： nnoremap / :M/ nnoremap ,/ / 這樣就可以用 / 和 Perl 形式的表示式進行搜尋了，如果要取代可以用 :S (大寫S)，不過這頂多是平常編輯文件時使用，要開發 plugin 的話還是只能用內建的語法寫。...</b:summary>
				<b:mainContent><p>新開始維護的 <a href="http://www.vim.org/scripts/script.php?script_id=3282">eregex.vim</a>，一開始的動機是因為我有小東西要修改，然後就開了 <a href="http://github.com/othree/eregex.vim">git repo</a>，後來覺得乾脆就自己維護，順便推廣，所以目前主要貢獻幾乎都是在翻譯說明文件。</p>

<p>簡單介紹，eregex.vim 是讓 Vim 可以使用 Perl/Ruby 形式的正規表示式，因為實在是很不習慣 Vim 的正規表示式寫法，安裝後，把以下兩行加到 .vimrc 檔案裡：</p>

<pre><code>nnoremap / :M/
nnoremap ,/ /
</code></pre>

<p>這樣就可以用 <kbd>/</kbd> 和 Perl 形式的表示式進行搜尋了，如果要取代可以用 :S (大寫S)，不過這頂多是平常編輯文件時使用，要開發 plugin 的話還是只能用內建的語法寫。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000645" baseName="introduction-to-wai-aria-3">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-17</b:date>
				<b:time>23:46:39</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>WAI-ARIA 介紹之三</b:title>
			<b:content>
				<b:summary>這篇文章是翻譯 Dev.Operv 的 Introduction to WAI ARIA 這篇文章，分成三篇刊載。由於原文為 CC-BY-NC-SA-2.5 授權，故此篇文章也採用同樣授權方式。系列文章： WAI-ARIA 介紹之一 WAI-ARIA 介紹之二 WAI-ARIA 介紹之三 - 本篇文章 ARIA 可以做什麼用？ 使用 ARIA 並不會有不好的副作用，所以你可以馬上開始使用他，而且主流的四個瀏覽器都已經支援或已經有計劃支援了，Opera 9.5 和 Firefox 1.5 已經有支援 ARIA ， IE8b 也有支援， Safari 所使用的 WebKit 框架也發表說他們將會開始支援 ARIA ， 輔助科技也廣泛的支援 ARIA...</b:summary>
				<b:mainContent><p>這篇文章是翻譯 Dev.Operv 的 <a href="http://dev.opera.com/articles/view/introduction-to-wai-aria/">Introduction to WAI ARIA</a> 這篇文章，分成三篇刊載。由於原文為 <a href="http://creativecommons.org/licenses/by-nc-sa/2.5/deed.zh_TW">CC-BY-NC-SA-2.5</a> 授權，故此篇文章也採用同樣授權方式。系列文章：</p>

<ul>
<li><a href="http://blog.othree.net/log/2010/10/10/introduction-to-wai-aria-1/">WAI-ARIA 介紹之一</a></li>
<li><a href="http://blog.othree.net/log/2010/10/13/introduction-to-wai-aria-2/">WAI-ARIA 介紹之二</a></li>
<li>WAI-ARIA 介紹之三 - 本篇文章</li>
</ul>

<h4>ARIA 可以做什麼用？</h4>

<p>使用 ARIA 並不會有不好的副作用，所以你可以馬上開始使用他，而且主流的四個瀏覽器都已經支援或已經有計劃支援了，Opera 9.5 和 Firefox 1.5 已經有支援 ARIA ， IE8b 也有支援， Safari 所使用的 WebKit 框架也發表說他們將會開始支援 ARIA ， 輔助科技也廣泛的支援 ARIA ，JAWS 7.1、Window-Eyes 5.5+、NVDA、Zoomtext 9+ 和其他輔助科技都有基本的支援，而且還會越來越好。</p>

<h4>現在就參與使用</h4>

<p>由於使用 ARIA 並沒有任何不好的副作用，而且相關的支援都已經到位，現在就參與使用百利而無一害，即使你的網站非常簡單，你也可以使用文件地標讓使用者有更好的導覽系統可以使用。</p>
</b:mainContent>
				<b:extendContent><h5>使用文件地標</h5>

<p>在我的個人網站，我就使用了 main、navigation、search、secondary 這幾個文件地標，以下面的文件結構為例：</p>

<pre><code>&lt;div id="ads"&gt;
...
&lt;/div&gt;
&lt;div id="nav"&gt;
    &lt;form id="searchform" ...&gt;
    ...
    &lt;/form&gt;
...
&lt;/div&gt;
&lt;div id="content"&gt;
...
&lt;/div&gt;
</code></pre>

<p>我們可以把 role 屬性寫進標記內以加上地標資訊。</p>

<pre><code>&lt;div id="ads" role="banner"&gt;
...
&lt;/div&gt;
&lt;div id="nav" role="navigation"&gt;
    &lt;form id="searchform" role="search" ...&gt;
    ...
    &lt;/form&gt;
...
&lt;/div&gt;
&lt;div id="content" role="main"&gt;
...
&lt;/div&gt;
</code></pre>

<p>大部分的網頁都會有設計好的結構，好方便使用 CSS 做版面配置，而此範例頁就使用到 id，id 還可以簡單的傳給 JavaScript 函數，下面的範例是一個簡單的 JavaScript 函數，它接收的參數是元素的 id 和 role 角色值，會將指定 id 元素的 role 設為指定的值。</p>

<pre><code>function addARIARole(strID, strRole)
{
    // Find the element to add a role property to
    var objElement = document.getElementById(strID);

    if (objElement)
    {
        // Add the role property to the element
        objElement.setAttribute('role', strRole);
    }
}
</code></pre>

<p>接著就可以使用這個函數，傳入文件內元素的 id 和對應的文件地標，而已前面的文件結構來說，我們可以用下面的 JavaScript 來加上地標資訊，而不必直接寫入標籤。</p>

<pre><code>function setupARIA()
{
    // Add ARIA roles to the document
    addARIARole('content', 'main');
    addARIARole('nav', 'navigation');
    addARIARole('searchform', 'search');
    addARIARole('ads', 'banner');
}
window.onload = setupARIA;
</code></pre>

<h5>標出必填欄位</h5>

<p>如果你的表單內有必填欄位，你可以使用 aria-required 屬性，此屬性告訴使用者此欄位在送出前必須要有填值，下面的範例就是有使用 aria-required 的 input 元素。</p>

<pre><code>&lt;label for="contactname"&gt;Name&lt;/label&gt;
&lt;input type="text"
       id="contactname" 
       name="contactname"
       size="30"
       aria-required="true"&gt;
</code></pre>

<p>Wordpress 已經有在迴響表單的必填欄位內加上 aria-required 屬性了。</p>

<h5>加上其他相關屬性</h5>

<p>還有許多 ARIA 屬性可以使用在簡單的網站上，像是 aria-labeledby 和 aria-describerdby，aria-labeledby 是用來定位該元素的標題是哪個或哪些元素裡，aria-describedby 則是用來定位敘述該元素的資訊放在哪。</p>

<pre><code>&lt;h2 id="limg"&gt;Paragliding&lt;/h2&gt;
&lt;p id="dimg"&gt;
A long description of our paragliding trip ...
&lt;/p&gt;
&lt;div&gt;
&lt;img src="takeoff.png"
     alt="Getting ready to take off"
     aria-labelledby="limg"
     aria-describedby="dimg"&gt;
&lt;/div&gt;
</code></pre>

<h5>更高的優先權</h5>

<p>ARIA 的屬性比 HTML 原本的屬性優先權還要高，意思是說 aria-labeledby 和 label 元素的 for一起出現時， aria-labeledby 優先度會較高，不過 label 元素還是可以讓不支援 ARIA 的舊瀏覽器能正確的找出元素間的關係，有個簡單的技巧可以避免衝突，就是用 aria-labeledby 連回 label 元素，不管 ARIA 支援如何，都可以確保 input 元素的標題存在。</p>

<pre><code>&lt;label id="lblef" for="effectiveness"&gt;Effectiveness&lt;/label&gt;
&lt;input type="image"
       role="slider"
       id="effectiveness"
       aria-labelledby="lblef"
       ...&gt;
</code></pre>

<p>看看完整的 ARIA [屬性清單][8] 可以幫助你讓你把網頁內容弄的更具有親和力。</p>

<h4>總結</h4>

<p>HTML 最初不是設計來製作網路應用程式的，但是設計師們還是藉著製作自定的介面元件，並使用 JavaScript 給予它們可以操作互動的能力而拼湊出網路應用程式，而問題是這些元件的角色、狀態和屬性以及網頁內容的更新情形並不會讓輔助科技正確的知道，因此 ARIA 規範藉由讓設計師可以詳細的描述這些介面元件、定義文件結構和即時更新的區域來解決這個問題。</p>

<p>不論你是要開發最新潮複雜的網路應用程式還是你有的只是簡單的 HTML 文件，你都可以使用 ARIA 讓身心障礙人士獲益。</p>

<h4>進階閱讀</h4>

<ul>
<li><a href="http://www.w3.org/TR/wai-aria-practices/">WAI-ARIA Best Practices</a></li>
<li><a href="http://www.marcozehe.de/2008/02/29/easy-aria-tip-1-using-aria-required/">Using aria-required</a></li>
<li><a href="http://www.marcozehe.de/2008/03/23/easy-aria-tip-2-aria-labelledby-and-aria-describedby/">Using aria-labelledby and aria-describedby</a></li>
<li><a href="http://www.marcozehe.de/2008/07/16/easy-aria-tip-3-aria-invalid-and-role-alert/">Using aria-invalid and role alert</a></li>
<li><a href="http://www.paciellogroup.com/blog/?p=53">Tri-State Checkbox Example</a></li>
<li><a href="http://www.paciellogroup.com/blog/?p=68">ARIA Slider Example</a></li>
</ul>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000637" baseName="jquery-code-style">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-17</b:date>
				<b:time>00:15:46</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>jQuery Code Style</b:title>
			<b:content>
				<b:summary>隨著 jQuery 1.4.3 發佈，還有一份 jQuery Code Style 文件也一起公開了，相較於 Google 的 JavaScript Code Guide，我覺得 jQuery 的 code style 比較有趣可以講:P。 jQuery 在某個版本開始有注意 coding style ，而使用的檢查工具就是 JSLint ，不過直到這次新版才公開講，使用上其實有故意忽略了幾個錯誤訊息，其中特別有趣的是 "Expected an identifier and instead saw 'undefined' (a reserved word)." 這個。 在 JavaScript 中 undefined...</b:summary>
				<b:mainContent><p>隨著 <a href="http://blog.jquery.com/2010/10/16/jquery-143-released/">jQuery 1.4.3 發佈</a>，還有一份 <a href="http://docs.jquery.com/JQuery_Core_Style_Guidelines">jQuery Code Style</a> 文件也一起公開了，相較於 Google 的 <a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml">JavaScript Code Guide</a>，我覺得 jQuery 的 code style 比較有趣可以講:P。</p>

<p>jQuery 在某個版本開始有注意 coding style ，而使用的檢查工具就是 <a href="http://jslint.com/">JSLint</a> ，不過直到這次新版才公開講，使用上其實有故意忽略了幾個錯誤訊息，其中特別有趣的是 "Expected an identifier and instead saw 'undefined' (a reserved word)." 這個。</p>

<p>在 JavaScript 中 undefined 不是保留關鍵字，而且它是全域的，所以任何 script 都可以把它覆寫掉，然後下面這樣判斷變數是否宣告過的方法就會爛掉了：</p>

<pre><code>if (foo === undefined) {
    // ....blah....
}
</code></pre>

<p>有一個作法可以解決這問題，我以前也有提過，就是把自己的程式碼用一個 closure 包起來，然後故意少傳一個參數：</p>

<pre><code>(function (document, undefined) {
    // ....blah....
})(document);
</code></pre>

<p>這樣 closure 內部的 undefined 就不用怕被其他地方的程式覆寫過了，不過 JSLint 會告訴你第一行的 undefined 不該使用來作為變數名稱，而應該要作為保留字，所以才會忽略這項錯誤訊息。</p>

<p>那既然 undefined 的問題解決了，在下面的 <a href="http://docs.jquery.com/JQuery_Core_Style_Guidelines#Type_Checks">TYPE CHECKS</a> 的 undefined 檢查中的全域變數還要用 typeof 來檢查呢？</p>

<pre><code>typeof variable === "undefined"
</code></pre>

<p>那是因為只要一存取到沒定義的全域變數就會噴出錯誤訊息，所以必須要用 typeof 來判斷它的類別。</p>

<p>還有一個被忽略的錯誤訊息是 "Use '===' to compare with 'null' ，如果有看過一些關於 JavaScript 的 == (equal) 、 === (strict equal) 和 null 、 undefined 等行為的文章，就會知道它們的行為實在不好搞清楚，所以都會建議盡量使用 === 和 !== 取代 == 和 != ， JSLint 則是只有在空字串、0、null、undefined 等數值的比對上才會強迫你使用 === 和 !== ，不過 jQuery 的 lint 檢查卻故意忽略 null 的部份，主要是因為可以用下面的方法來判斷一個變數使否有值，或著是根本還未定義：</p>

<pre><code>if (foo == null) {
    // ....blah....
}
</code></pre>

<p>這樣檢查的話，0 或是空字串是會當成有值，如果只是用驚嘆號做 true/false 判斷的話那就會誤判了。所以可以知道，jQuery 現在的程式碼裡面 == (equal) 和 === (strict equal) 的使用應該都是有考慮過的，話雖如此，其實也只有一種情形會使用到 == 就是。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000636" baseName="introduction-to-wai-aria-2">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-13</b:date>
				<b:time>23:08:27</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>WAI-ARIA 介紹之二</b:title>
			<b:content>
				<b:summary>這篇文章是翻譯 Dev.Operv 的 Introduction to WAI ARIA 這篇文章，分成三篇刊載。由於原文為 CC-BY-NC-SA-2.5 授權，故此篇文章也採用同樣授權方式。系列文章： WAI-ARIA 介紹之一 WAI-ARIA 介紹之二 - 本篇文章 WAI-ARIA 介紹之三 我是誰？ ARIA 導入了 role 屬性來幫助定義介面元件和頁面結構，介面元件像是滑動條控制器，頁面結構像是導覽區塊，網路應用程式的一個主要問題是任何 HTML 元素都可以用來製作介面元件，但是 HTML 元素都已經有其定義與角色了。 Role 屬性代表的是該元素是什麼東西，它在整個架構中是什麼角色，例如 heading 標題就是輔助科技所可以了解的角色。當使用既有的元素建置介面元件時，輔助科技會以元素的預設角色和定義來認知該元素，而不是它實際上在介面元件中的角色，例如滑動條控制器中的滑塊使用 img 標籤製作並標上適當的替代文字，螢幕閱讀器會讀出「圖形、滑塊」而不是更有意義的「滑動條控制器、值為百分之16。」 Figure 3 -- 滑動條控制器上的滑塊...</b:summary>
				<b:mainContent><p>這篇文章是翻譯 Dev.Operv 的 <a href="http://dev.opera.com/articles/view/introduction-to-wai-aria/">Introduction to WAI ARIA</a> 這篇文章，分成三篇刊載。由於原文為 <a href="http://creativecommons.org/licenses/by-nc-sa/2.5/deed.zh_TW">CC-BY-NC-SA-2.5</a> 授權，故此篇文章也採用同樣授權方式。系列文章：</p>

<ul>
<li><a href="http://blog.othree.net/log/2010/10/10/introduction-to-wai-aria-1/">WAI-ARIA 介紹之一</a></li>
<li>WAI-ARIA 介紹之二 - 本篇文章</li>
<li><a href="http://blog.othree.net/log/2010/10/17/introduction-to-wai-aria-3/">WAI-ARIA 介紹之三</a></li>
</ul>

<h4>我是誰？</h4>

<p>ARIA 導入了 role 屬性來幫助定義介面元件和頁面結構，介面元件像是滑動條控制器，頁面結構像是導覽區塊，網路應用程式的一個主要問題是任何 HTML 元素都可以用來製作介面元件，但是 HTML 元素都已經有其定義與角色了。 Role 屬性代表的是該元素是什麼東西，它在整個架構中是什麼角色，例如 heading 標題就是輔助科技所可以了解的角色。當使用既有的元素建置介面元件時，輔助科技會以元素的預設角色和定義來認知該元素，而不是它實際上在介面元件中的角色，例如滑動條控制器中的滑塊使用 img 標籤製作並標上適當的替代文字，螢幕閱讀器會讀出「圖形、滑塊」而不是更有意義的「滑動條控制器、值為百分之16。」</p>

<p><a href="http://www.flickr.com/photos/othree/5067918400/" title="Flickr 上 othree 的 thumb"><img src="http://farm5.static.flickr.com/4128/5067918400_56f38e1a6c_o.gif" width="166" height="81" alt="" /></a> <br />
Figure 3 -- 滑動條控制器上的滑塊</p>
</b:mainContent>
				<b:extendContent><p>role 所設定的元素角色會蓋過原本元素預設的角色，下面的例子中，有一個 role 屬性為 slider 的 input 元素（其他的屬性將會在後面介紹），因此輔助科技將會將它認為是滑動條控制器(slider) 而不是普通的文字輸入欄位 (input)。</p>

<pre><code>&lt;input type="image"
       src="thumb.gif"
       alt="Effectiveness"
       role="slider"
       aria-valuemin="0"
       aria-valuemax="100"
       aria-valuenow="42"
       aria-valuetext="42 percent" 
       aria-labelledby="leffective"&gt;
</code></pre>

<p>當這個元素被取用時，螢幕閱讀器便可以正確的告訴使用者這個介面元件是什麼。ARIA規格也有維護一份 <a href="http://www.w3.org/TR/wai-aria/roles#role_definitions">role 屬性值的清單</a>。</p>

<h5>文件地標</h5>

<p>Role 屬性除了定義介面元件外，還可以幫助建立文件的結構，<a href="http://www.w3.org/TR/wai-aria/roles#landmark_roles">文件地標</a>是 role 屬性的一個子集，它可以幫助螢幕閱讀器的使用者了解不同 HTML 內部同文件區塊的用途，好快速的定位到想要去的位置。</p>

<p><a href="http://www.flickr.com/photos/othree/5067918418/" title="Flickr 上 othree 的 pagestructure"><img src="http://farm5.static.flickr.com/4153/5067918418_ae41f9b617_o.gif" width="179" height="256" alt="" /></a> <br />
Figure 4 -- 常見的文件結構，有標頭、側邊欄和主要內容</p>

<p>ARIA 規格定義了以下的文件地標。</p>

<dl>
    <dt>article</dt>
    <dd>完整的一段內容，像是完整的一篇部落格文章、一篇迴響或是討論區的亦篇文章等</dd>
    <dt>banner</dt>
    <dd>跨網頁，屬於網站全體層級的內容，像是網站標題或是標誌等</dd>
    <dt>complementary</dt>
    <dd>和 main 內容相關的東西，不過可以獨立於主要內容之外，像是在入口網站提供的天氣資訊</dd>
    <dt>contentinfo</dt>
    <dd>相關資訊，例如註腳、版權宣告、隱私聲明、設定連結等</dd>
    <dt>main</dt>
    <dd>文件主要內容</dd>
    <dt>navigation</dt>
    <dd>內含本身以及相關文件導覽連結的部份</dd>
    <dt>search</dt>
    <dd>站內搜尋的表單區塊</dd>
</dl>

<p>下面的例子使用了文件地標指定了圖四文件中的 banner, navigation 和 main 三個區塊。</p>

<pre><code>&lt;div role="banner"&gt;
...
&lt;/div&gt;
&lt;div role="navigation"&gt;
...
&lt;/div&gt;
&lt;div role="main"&gt;
...
&lt;/div&gt;
</code></pre>

<h4>ARIA 狀態與屬性</h4>

<p>ARIA <a href="http://www.w3.org/TR/wai-aria/states_and_properties">狀態和屬性</a> 讓輔助科技可以得到介面元件的更多資訊幫助使用者了解如何操作這些介面元件，狀態是用來指定物件的某個特定資訊，例如 aria-checked 有三種狀態值， true, false 和 mixed 。而前面介紹的滑動條控制器，也有數個 aria 屬性可以幫助輔助科技描述這個元件。</p>

<dl>
    <dt>aria-valuemin</dt>
    <dd>儲存可接受數值的最小值</dd>
    <dt>aria-valuemax</dt>
    <dd>儲存可接受數值的最大值</dd>
    <dt>aria-valuenow</dt>
    <dd>儲存現在介面元件的值</dd>
    <dt>aria-valuetext</dt>
    <dd>儲存方便使用者理解接現在數值的文字，例如：30塊錢</dd>
    <dt>aria-labelledy</dt>
    <dd>儲存描述此介面元件的元素的 id 值</dd>
</dl>

<p>部分屬性可能會被 script 程式改變，例如 aria-valuenow 和 aria-valuetext 就應該在滑塊移動時跟著改變。</p>

<pre><code>// Set the ARIA property values when the thumb is 
// moved on the slider
objThumb.setAttribute('aria-valuenow', iValue);
objThumb.setAttribute('aria-valuetext', iValue + ' %');
</code></pre>

<p>網頁加上 role 屬性和 ARIA 屬性會讓文件無法通過標準檢測，但沒關係，讓 ARIA 支援古老標準的相關的工作也正在進行，像是有一個可以讓 <a href="http://www.w3.org/WAI/PF/adaptable/StatesAndProperties-20051106.HTML">模組化 XML 使用的文件類型定義(DTD)</a>，XHTML 1.1 就是一種模組化 XML 文件格式，有一份完整的 <a href="http://www.w3.org/TR/wai-aria/states_and_properties">狀態和屬性清單</a> ，可以幫助建立具親和力的介面元件。</p>

<h4>即時區塊</h4>

<p>即時區塊讓 HTML 元素在內容有更新時會通知使用者，而不會忽略掉最新的狀況，這意味著使用者可以不用離開他現在的游標位置也可以收到最新的更新內容，例如聊天室可以讓使用者接收到其他人的回覆，而不用離開文字輸入框，中斷正在輸入的訊息。</p>

<h5>aria-live</h5>

<p>無法發現網頁內容的更新是螢幕閱讀器使用者一直以來最大的障礙，ARIA 提供了 aria-live 這個屬性來設定網頁區塊更新時通知該如何通知使用者，下面是三種可以使用的設定。</p>

<dl>
    <dt>off</dt>
    <dd>預設值，區塊的更新不會通知輔助科技
    <pre><code>
        &lt;ul aria-live="off"&gt;
    </code></pre></dd>
    <dt>polite</dt>
    <dd>這是適用於大部分 live 區塊的設定， polite 區塊將會在使用者完成正在進行的動作後才會通知輔助科技
    <pre><code>
        &lt;ul aria-live="polite"&gt;
    </code></pre></dd>
    <dt>assertive</dt>
    <dd>這個值比一般的情形更為優先，但不會打斷使用者的動作。
    <pre><code>
        &lt;ul aria-live="assertive"&gt;
    </code></pre></dd>
</dl>

<p>其他還有一些重要的屬性可以幫助設定即時區塊，下面接著介紹。</p>

<h5>aria-atomic 屬性</h5>

<p>aria-atomic 是即時區塊的非必要的屬性，它的值可以是 true 或 false (預設是無指定)，當即時區塊更新時，aria-atomic 屬性是用來決定輔助科技是否要把整個區塊的內容都通報給使用者，如果設為 true，輔助科技就會把整個即時區塊的內容都通報出去，不然就只通報更改的部份。</p>

<p>下面的例子中，所有在此非排序清單中的元素都會被完整的念出，除非 aria-atomic 屬性被覆蓋。</p>

<pre><code>&lt;ul aria-atomic="true"
    aria-live="polite"&gt;
</code></pre>

<h5>aria-busy 屬性</h5>

<p>aria-busy 屬性也是非必要屬性，值可以為 true 或 false （預設為無指定），如果即時區塊內有多個地方都需要更改，之後才需要通知使用者的話，那就可以先將 aria-busy 設為 true 
，等到在內容都更新完後再把 aria-busy 設為 false，這個屬性可以避免輔助科技在即時區的內容更新完成之前就通知使用者。</p>

<pre><code>&lt;ul aria-atomic="true"
    aria-busy="true"   aria-live="polite"&gt;
</code></pre>

<h5>aria-relevant 屬性</h5>

<p>aria-relevant 屬性也是非必要屬性，是用來表示即時區塊的資訊更新要對哪些變化做出反應，此屬性接受以下的值，並可以用空白分開不同的值。</p>

<dl>
    <dt>additions</dt>
    <dd>即時區塊內有新增 DOM 節點</dd>
    <dt>removals</dt>
    <dd>即時區塊內有減少 DOM 節點</dd>
    <dt>text</dt>
    <dd>即時區塊內的文字有變化</dd>
    <dt>all</dt>
    <dd>上面所有的變化都有發生</dd>
</dl>

<p>如果沒有設定 aria-relevant 的話，預設會認為是文字變化與新增內容(aria-relevant="text additions")，下面的範例中的即時區塊，只會在區塊內有增加節點時，輔助科技才會告知使用者，如果是移除節點或是文字內容的變化，輔助科技都不會告知使用者。</p>

<pre><code>&lt;ul aria-relevant="additions" 
    aria-atomic="true"   aria-live="polite"&gt;
</code></pre>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000634" baseName="introduction-to-wai-aria-1">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-10</b:date>
				<b:time>22:06:24</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>WAI-ARIA 介紹之一</b:title>
			<b:content>
				<b:summary>這篇文章是翻譯 Dev.Operv 的 Introduction to WAI ARIA 這篇文章，會分成三篇刊載。由於原文為 CC-BY-NC-SA-2.5 授權，故此篇文章也採用同樣授權方式。系列文章： WAI-ARIA 介紹之一 - 本篇文章 WAI-ARIA 介紹之二 WAI-ARIA 介紹之三 引言 HTML最初並不是被設計來製作網路應用程式的，所以它所有的控制介面非常少，而且受限至於 client-server 的通訊模式，然後開發者們使用 JavaScript 突破了這層限制，並建置了各式各樣的介面元件。 然而不幸的是，這些突破 HTML 限制的技術通常也不具備親和力，即使這些介面元件看起來用起來都和一般的桌面應用程式沒什麼不同，但是像 screen reader 這些輔助科技並沒辦法存取到這些介面元件的角色(role，這個元件是什麼東西)、狀態(特有的設定，如 checked)和其他重要的資訊，這狀況就如同只是調整樣式讓一段文字看起來像標題，卻不使用正確的標題標籤，造成各種輔助科技並無法知道這段文字是標題一樣。 使用輔助科技的訪客通常不會注意到網頁動態更新的內容，輔助科技通常會認為只有在導航事件，例如開啟連結或是送出表單時，網頁的內容才會變動。網路應用程式使用AJAX這類新技術，會在背後默默的更新網頁的內容，即使輔助科技會去助益網頁內容的更改，使用者仍然可能不會注意到內容有更新，或是不知道如何移動到更新的位置。 WAI-ARIA為這些介面元件提供了角色(role)定義，以及各種角色狀態和屬性的規格，使用輔助科技的訪客便可以理解並使用這些資訊，除此之外，WAI-ARIA還提供了一種機制以確保訪客不會錯過資訊的更新。...</b:summary>
				<b:mainContent><p>這篇文章是翻譯 Dev.Operv 的 <a href="http://dev.opera.com/articles/view/introduction-to-wai-aria/">Introduction to WAI ARIA</a> 這篇文章，會分成三篇刊載。由於原文為 <a href="http://creativecommons.org/licenses/by-nc-sa/2.5/deed.zh_TW">CC-BY-NC-SA-2.5</a> 授權，故此篇文章也採用同樣授權方式。系列文章：</p>

<ul>
<li>WAI-ARIA 介紹之一 - 本篇文章</li>
<li><a href="http://blog.othree.net/log/2010/10/13/introduction-to-wai-aria-2/">WAI-ARIA 介紹之二</a></li>
<li><a href="http://blog.othree.net/log/2010/10/17/introduction-to-wai-aria-3/">WAI-ARIA 介紹之三</a></li>
</ul>

<h4>引言</h4>

<p>HTML最初並不是被設計來製作網路應用程式的，所以它所有的控制介面非常少，而且受限至於 client-server 的通訊模式，然後開發者們使用 JavaScript 突破了這層限制，並建置了各式各樣的介面元件。</p>

<p>然而不幸的是，這些突破 HTML 限制的技術通常也不具備親和力，即使這些介面元件看起來用起來都和一般的桌面應用程式沒什麼不同，但是像 screen reader 這些輔助科技並沒辦法存取到這些介面元件的角色(role，這個元件是什麼東西)、狀態(特有的設定，如 checked)和其他重要的資訊，這狀況就如同只是調整樣式讓一段文字看起來像標題，卻不使用正確的標題標籤，造成各種輔助科技並無法知道這段文字是標題一樣。</p>

<p>使用輔助科技的訪客通常不會注意到網頁動態更新的內容，輔助科技通常會認為只有在導航事件，例如開啟連結或是送出表單時，網頁的內容才會變動。網路應用程式使用AJAX這類新技術，會在背後默默的更新網頁的內容，即使輔助科技會去助益網頁內容的更改，使用者仍然可能不會注意到內容有更新，或是不知道如何移動到更新的位置。</p>

<p><a href="http://www.w3.org/WAI/intro/aria">WAI-ARIA</a>為這些介面元件提供了角色(role)定義，以及各種角色狀態和屬性的規格，使用輔助科技的訪客便可以理解並使用這些資訊，除此之外，WAI-ARIA還提供了一種機制以確保訪客不會錯過資訊的更新。</p>
</b:mainContent>
				<b:extendContent><h4>HTML簡史</h4>

<p>HTML 最初設計是用來作為超文字文件的，初期的 HTML 草稿規範的標籤有標題、段落、清單和連結等，<a href="http://www.w3.org/MarkUp/draft-ietf-iiir-html-01.txt">第一分由 IETF 制定的 HTML 草案</a>還包括了可以在行內顯示圖片的 img 標籤，而第一份較正式的 HTML 規格是 <a href="http://tools.ietf.org/html/rfc1866">HTML 2</a> ，基於初期的 HTML 草稿，這個版本還導入了網頁表單和一小部分的控制介面元件包括文字輸入欄位、按鈕、單選選項、勾選框和下拉式選單，然而 HTML 2 所定義的這些控制元件和現在主要使用的 <a href="http://www.w3.org/TR/html401/">HTML 4</a> 的版本相比，並沒有什麼變化。</p>

<p>HTML 所使用的溝通模式事蹟於主從式架構，主從式架構的流程為，客戶端送出請求到伺服端，並等待接收回應，伺服端則是一直在等待客戶端的請求，收到後進行處理並回覆給客戶端，由於 HTML 並沒有行為層，所有的溝通都是單線性的－客戶端向伺服端送出請求，伺服端對請求做出處理並傳回一個網頁給客戶端。</p>

<h4>網路應用程式</h4>

<p>網路應用程式試著去模擬一般的桌面應用程式，不過有個主要的差異在網路應用程式是在瀏覽器裡面執行的，除此之外，網路應用程式和桌面應用程式還有兩個根本性的差異：</p>

<ul>
<li>一般桌面應用程式有一行為層，而不用對伺服端做溝通</li>
<li>一般桌面應用程式有更多樣的介面控制元件</li>
</ul>

<h4>模擬一般桌面應用程式</h4>

<h5>背景資料傳輸</h5>

<p>為了模擬一般桌面應用程式，網路應用程式使用 JavaScript 去增加網頁的行為，例如使用 JavaScript 讓使用者可以展開或關閉選單項目。網路應用程式有時會需要跟伺服器要些資料，可能是要伺服器上資料庫內的資料來更新頁面內容，當網路應用程式需要和伺服器溝通時，這時候多會使用 AJAX 或是 IFRAME 的技術來在背景溝通。 </p>

<h5>模擬多樣化的元件</h5>

<p>由於 HTML 只有非常少的介面元件，網路應用程式有時就會需要自己創造更複雜的介面元件，像是三種狀態的勾選框或是滑動條控制器，這些介面元件通常是圖形化顯示給使用者，而它們的行為則是由另外的 script 來實作。</p>

<p><a href="http://www.flickr.com/photos/othree/5067306375/" title="Flickr 上 othree 的 tristate"><img src="http://farm5.static.flickr.com/4132/5067306375_94123b07bc_o.gif" width="228" height="171" alt="" /></a> <br />
圖一 -- 三種狀態的勾選框</p>

<p><a href="http://www.flickr.com/photos/othree/5067918384/" title="Flickr 上 othree 的 slider"><img src="http://farm5.static.flickr.com/4105/5067918384_d4b9079419_o.gif" width="358" height="65" alt="" /></a> <br />
圖二 -- 一個滑動條控制器，可能用來調整服務品質</p>

<h4>視覺與感官模擬的親和力問題</h4>

<p>從視覺上模擬各種介面元件，對伺服器進行背景的溝通都可以讓使用者有更好的使用經驗，但是不幸的是，這些都造成了親和力問題，對於使用輔助科技的使用者都產非常不好：</p>

<ul>
<li>只有圖形化顯示的介面元件通常鍵盤無法控制</li>
<li>這些介面元件的角色定義、用途等，輔助科技都無從得知</li>
<li>這需介面元件的狀態和屬性資料，輔助科技也無法得知</li>
<li>頁面的更新也沒有通知這些輔助科技</li>
</ul>

<h4>救星是 WAI-ARIA</h4>

<p>幸好，列出的這些問題都可以靠 Web Accessibility Initiative's Accessible Rich Internet Applications 來解決，ARIA 是一個正面的技術，而不是跟開發人員說什麼不能做，ARIA 讓開發人員可以製作豐富的網路應用程式，而且它也很簡單就可以上手。</p>

<h4>鍵盤導覽</h4>

<p>替非文字物件提供替代文字和讓介面元件可以用鍵盤控制都是非常基本的親和力規定，知道親和力相關議題的開發人員可能會讓他所製作的介面元件是可以用鍵盤取用並操作的，像是使用 <code>&lt;input type="image"&gt;</code> ，不過大部分的介面元件都不是以這種方式製作，而會使用像是 img 這種無法使用鍵盤取用的元素，或是複雜的元件可能會使用 div 來做為外層包覆的元素，一樣也是無法使用鍵盤取用。</p>

<p>HTML 4 開始有了 tabindex，可以用於 a、area、button、input、object、select、textarea 這幾個元素上，tabindex的值是介於 1～32767 的正整數，導覽會從數字小的開始，直到數字最大的元素，有設定 tabindex 的元素會以設定的值排入導覽順序，不過如果網頁的內容有好的邏輯結構，tabindex 就可以不必設定，介面元件會自己依序排入 tab 鍵導覽的順序中。</p>

<p>ARIA <a href="http://www.w3.org/TR/wai-aria/#tabindex">擴充了 tabindex 屬性</a>，讓他可以出現在所有可見的元素中，除此之外，還允許使用負值讓元素不在 tab 鍵導覽的順序中出現，但還是可以用 script 程式取用它，不過由於負值的大小並不重要，所以通常是使用 -1。</p>

<h5>加入預設 Tab 導覽順序</h5>

<p>下面的範例使用 tabindex 讓 div 元素可以照文件結構排入 tab 鍵導覽的順序之中，因此該元素是可以使用鍵盤取用的。</p>

<pre><code>&lt;div tabindex="0"&gt;
...
&lt;/div&gt;
</code></pre>

<h5>負的 tabindex</h5>

<p>下面的範例則是使用負值設定tabindex，因此該元素只能經由 script 取用</p>

<pre><code>&lt;div id="progaccess" tabindex="-1"&gt;
...
&lt;/div&gt;
</code></pre>

<p>在這個範例中，div 元素不會排進 Tab 導覽的順序之中,但是由於它有 tabindex 屬性，且其值為 -1 ，表示說該元素還是可以透過程式取用，下面這段程式碼會選用上面所定義的元素，並且使用 focus 函式來取用該元素。</p>

<pre><code>var objDiv = document.getElementById('progaccess');
\\ Focus on the element
objDiv.focus();
</code></pre>
</b:extendContent>
			</b:content>

			<b:comments commentCount="2"></b:comments>


		</b:entry>

		<b:entry entryID="000633" baseName="google-font-non-latin">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-04</b:date>
				<b:time>18:02:59</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Google Font 開始提供非拉丁語系字型</b:title>
			<b:content>
				<b:summary>這兩天在修理調整 blog 時才發現到 Google 現在開始 提供非拉丁語系的字型 ，不過不用太開心，因為還是沒有中日文漢字，目前只有 cyrillic、greek(希臘字)、khmer（高棉字）三種，先不說有漢字的幾種文字，我還蠻期待他們能提供一些符號的字型，像是占星符號、Rune 等等。...</b:summary>
				<b:mainContent><p>這兩天在修理調整 blog 時才發現到 Google 現在開始 <a href="http://googlewebfonts.blogspot.com/2010/09/international-fonts-launch-today.html">提供非拉丁語系的字型</a> ，不過不用太開心，因為還是沒有中日文漢字，目前只有 cyrillic、greek(希臘字)、khmer（高棉字）三種，先不說有漢字的幾種文字，我還蠻期待他們能提供一些符號的字型，像是占星符號、Rune 等等。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000632" baseName="style-guide-for-online-hy">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-03</b:date>
				<b:time>21:45:56</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>Style Guide for online hypertext</b:title>
			<b:content>
				<b:summary>這幾個月有些機緣讓我和 W3C 的距離更加接近，其中一項意外的收穫就是發現 Style Guide for online hypertext 這一系列文章，都是 Tim Bernes-Lee 寫的，內容可以說是建置網站的一些 best practice，是在程式語言、標籤語法以外的東西，講了在建置與維護網站上很多重要的觀念，像是講到 URI ，timbl 就說應該好好設計，設計之後便應該讓它一直有效，還有使用網路標準，不要專為某種設備編寫你的文件、該引言還是該做連結等、甚至還早於 AJAX 這個名詞發明之前說到網路上的內容都應該有個永久連結。雖然文章年代都有點久遠，不過所講述的東西其實很多到今天還是相當適用，當然，很多觀念也是一再有人提出來講的，不過內容都不長，我覺得還是值得花些時間看看，順便再次提醒自己。...</b:summary>
				<b:mainContent><p>這幾個月有些機緣讓我和 W3C 的距離更加接近，其中一項意外的收穫就是發現 <a href="http://www.w3.org/Provider/Style/">Style Guide for online hypertext</a> 這一系列文章，都是 <a href="http://zh.wikipedia.org/zh-hant/%E8%92%82%E5%A7%86%C2%B7%E4%BC%AF%E7%BA%B3%E6%96%AF-%E6%9D%8E">Tim Bernes-Lee</a> 寫的，內容可以說是建置網站的一些 best practice，是在程式語言、標籤語法以外的東西，講了在建置與維護網站上很多重要的觀念，像是講到 URI ，timbl 就說應該好好設計，設計之後便應該讓它一直有效，還有使用網路標準，不要專為某種設備編寫你的文件、該引言還是該做連結等、甚至還早於 AJAX 這個名詞發明之前說到網路上的內容都應該有個永久連結。雖然文章年代都有點久遠，不過所講述的東西其實很多到今天還是相當適用，當然，很多觀念也是一再有人提出來講的，不過內容都不長，我覺得還是值得花些時間看看，順便再次提醒自己。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000631" baseName="help-promoto-javascript-docs">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-03</b:date>
				<b:time>17:48:15</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>幫忙推廣好的 JavaScript 文件</b:title>
			<b:content>
				<b:summary>由於在網路上要尋找好的 JavaScript 文件不太容易，所以前陣子舉辦的 JSconf.eu 中，發起了 Promoto JS ! 的運動。事實上網路上是有不錯的 JS 文件，像是 MDN 的，不過搜尋時排序都不在前面，而且還會有些 Java 的資料混在其中，而這個運動就是希望藉由貼紙串連的方式，把 MDN 的文件排序推到前面，每個貼紙的 HTML 碼都會有個連結和寫好的連結描述連到 MDN 的一些頁面，在 Promoto JS ! 的首頁提供的貼紙內容是隨機產生的，貼紙的大小則只有兩種，長條的和方的，你可以重新整理以取得你比較想連結的頁面和你比較想要的貼紙大小，檔然也可以使用 Tweet 小按鈕幫助宣傳這個活動，希望下次我要上 Google 找文件時，不用在手動加上 mdc 這關鍵字了。...</b:summary>
				<b:mainContent><p>由於在網路上要尋找好的 JavaScript 文件不太容易，所以前陣子舉辦的 <a href="http://jsconf.eu/2010/">JSconf.eu</a> 中，發起了 <a href="http://www.promotejs.com/">Promoto JS !</a> 的運動。事實上網路上是有不錯的 JS 文件，像是 <a href="https://developer.mozilla.org/en-US/">MDN</a> 的，不過搜尋時排序都不在前面，而且還會有些 Java 的資料混在其中，而這個運動就是希望藉由貼紙串連的方式，把 MDN 的文件排序推到前面，每個貼紙的 HTML 碼都會有個連結和寫好的連結描述連到 MDN 的一些頁面，在 <a href="http://www.promotejs.com/">Promoto JS !</a> 的首頁提供的貼紙內容是隨機產生的，貼紙的大小則只有兩種，長條的和方的，你可以重新整理以取得你比較想連結的頁面和你比較想要的貼紙大小，檔然也可以使用 Tweet 小按鈕幫助宣傳這個活動，希望下次我要上 Google 找文件時，不用在手動加上 mdc 這關鍵字了。</p>

<p><a href='https://developer.mozilla.org/en/JavaScript' title='JS Reference'><img src='http://static.jsconf.us/promotejsv.gif' height='280' width='160' alt='JS Reference'/></a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000630" baseName="colorful-man-page">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-03</b:date>
				<b:time>15:42:33</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>彩色 man page</b:title>
			<b:content>
				<b:summary>忘了哪裡看到的設定了，用的是 zsh # colorful man page export PAGER="`which less` -s" export BROWSER="$PAGER" export LESS_TERMCAP_mb=$'\E[38;5;167m' export LESS_TERMCAP_md=$'\E[38;5;39m' export LESS_TERMCAP_me=$'\E[38;5;231m' export LESS_TERMCAP_se=$'\E[38;5;231m' export LESS_TERMCAP_so=$'\E[38;5;167m' export LESS_TERMCAP_ue=$'\E[38;5;231m' export LESS_TERMCAP_us=$'\E[38;5;167m' 效果預覽： Mirror on gist...</b:summary>
				<b:mainContent><p>忘了哪裡看到的設定了，用的是 zsh</p>

<pre><code># colorful man page
export PAGER="`which less` -s"
export BROWSER="$PAGER"
export LESS_TERMCAP_mb=$'\E[38;5;167m'
export LESS_TERMCAP_md=$'\E[38;5;39m'
export LESS_TERMCAP_me=$'\E[38;5;231m'
export LESS_TERMCAP_se=$'\E[38;5;231m'
export LESS_TERMCAP_so=$'\E[38;5;167m'
export LESS_TERMCAP_ue=$'\E[38;5;231m'
export LESS_TERMCAP_us=$'\E[38;5;167m'
</code></pre>

<p>效果預覽：</p>

<p><a href="http://www.flickr.com/photos/othree/5046170237/" title="Flickr 上 othree 的 colorful man page"><img src="http://farm5.static.flickr.com/4087/5046170237_01e76043f9.jpg" width="500" height="346" alt="colorful man page" /></a></p>

<ul>
<li><a href="http://gist.github.com/608425">Mirror on gist</a></li>
</ul>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="2"></b:comments>


		</b:entry>

		<b:entry entryID="000629" baseName="commandline-install-dropbox">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-03</b:date>
				<b:time>11:28:51</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>命令列安裝 Dropbox</b:title>
			<b:content>
				<b:summary>剛剛試著在命令列安裝 Dropbox ，發現超簡單的，不過還是記錄一下，我安裝的流程是跟著 howto-install-dropbox-in-ubuntu 走的，不過我剛發現 官方的安裝說明 是沒說到要修改套件庫的來源檔，只要執行以下指令： sudo apt-get update;sudo apt-get upgrade nautilus-dropbox 如果有金鑰問題的話，加入套件庫金鑰的指令如下： sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 5044912E 接著如果有用 nautilus 的話要把相關的程序全部關掉 nautilus --quit 然後安裝 Dropbox daemon dropbox start -i 啟動 Dropbox dropbox start 第一次啟動會看到下面的說明和連結 To link this...</b:summary>
				<b:mainContent><p>剛剛試著在命令列安裝 <a href="https://www.dropbox.com/">Dropbox</a> ，發現超簡單的，不過還是記錄一下，我安裝的流程是跟著 <a href="http://www.ubuntugeek.com/howto-install-dropbox-in-ubuntu-9-10karmic9-04jaunty8-10intrepid8-04hardy.html">howto-install-dropbox-in-ubuntu</a> 走的，不過我剛發現 <a href="https://www.dropbox.com/downloading?os=lnx">官方的安裝說明</a> 是沒說到要修改套件庫的來源檔，只要執行以下指令：</p>

<pre><code>sudo apt-get update;sudo apt-get upgrade nautilus-dropbox
</code></pre>

<p>如果有金鑰問題的話，加入套件庫金鑰的指令如下：</p>

<pre><code> sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 5044912E
</code></pre>

<p>接著如果有用 nautilus 的話要把相關的程序全部關掉</p>

<pre><code>nautilus --quit
</code></pre>

<p>然後安裝 Dropbox daemon</p>

<pre><code>dropbox start -i
</code></pre>

<p>啟動 Dropbox </p>

<pre><code>dropbox start
</code></pre>

<p>第一次啟動會看到下面的說明和連結</p>

<pre><code>To link this computer to a dropbox account, visit the following url:
https://www.dropbox.com/cli_link?host_id=01d51f8e353b4f9a45085***********
</code></pre>

<p>用瀏覽器開一下那個連結把帳號連結建立起來後就完成了，預設的目錄位置會在 ~/Dropbox 裡面，也可以執行 man dropbox 來看其它使用說明。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

	</b:entries>
</b:blog>
