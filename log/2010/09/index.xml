<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>m</b:listType>
			<b:listData listID="2010-09">September 2010</b:listData>

			<b:previous>
				<b:mTitle>August 2010</b:mTitle>
				<b:mDate>2010/08</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>October 2010</b:mTitle>
				<b:mDate>2010/10</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000628" baseName="html5vim">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-09-16</b:date>
				<b:time>21:30:12</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>html5.vim</b:title>
			<b:content>
				<b:summary>上週花了約三四天時間搞出來的 html5.vim ，目前主要功能是 HTML5 syntax 和 omnicomplete，omnicomplete 的部份是拿內建的 html omni complete function 出來修改，除了幾乎重建的字典檔外，還修了補完函數中一些我之前發現的錯誤，字典檔的部份還特別加上 WAI-ARIA 和一些其他規範的支援，之後有考慮加上 MathML 和 SVG ，如果有任何意見歡迎到 github repo 上提出 issue。...</b:summary>
				<b:mainContent><p>上週花了約三四天時間搞出來的 <a href="http://www.vim.org/scripts/script.php?script_id=3236">html5.vim</a> ，目前主要功能是 <span class="caps">HTML5 </span>syntax 和 omnicomplete，omnicomplete 的部份是拿內建的 html omni complete function 出來修改，除了幾乎重建的字典檔外，還修了補完函數中一些我之前發現的錯誤，字典檔的部份還特別加上 <a href="http://www.w3.org/TR/wai-aria/"><span class="caps">WAI</span>-ARIA</a> 和一些其他規範的支援，之後有考慮加上 MathML 和 <span class="caps">SVG </span>，如果有任何意見歡迎到 <a href="http://github.com/othree/html5.vim/">github repo</a> 上提出 issue。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="3"></b:comments>


		</b:entry>

		<b:entry entryID="000627" baseName="google-closure-linter">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-09-06</b:date>
				<b:time>00:07:54</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Google Closure Linter</b:title>
			<b:content>
				<b:summary>Google Closure Linter 是 Google Closure Tools 的新產品，基本上就是做和 JSLint 一樣的事情，和 Closure Compiler 不一樣的是這次是 python 寫的，直接用 easy_install 完就有命令列指令可以用，方便很多，不過試用過後我還是比較喜歡 JSLint ，因為一部分我想要的檢查項目沒有，像是 JSLint 的 onevar 這個檢查項目，而且選項也很少，預設就會檢查空白和縮排，而且沒辦法關掉。 除了 Closure Linter 外，Google 也公開了他們的 JavaScript Coding Style Guide ，有興趣的可以逐條看看。 最後順便提一下， JavaScript Best Practice 我還記得我沒寫完，不過最近幾乎都在看 WAI-ARIA 就是，也很想整理整理寫一兩篇文章說。...</b:summary>
				<b:mainContent><p><a href="http://closuretools.blogspot.com/2010/08/introducing-closure-linter.html">Google Closure Linter</a> 是 Google Closure Tools 的新產品，基本上就是做和 <a href="http://jslint.com/"><span class="caps">JSL</span>int</a> 一樣的事情，和 Closure Compiler 不一樣的是這次是 python 寫的，直接用 easy_install 完就有命令列指令可以用，方便很多，不過試用過後我還是比較喜歡 <span class="caps">JSL</span>int ，因為一部分我想要的檢查項目沒有，像是 <span class="caps">JSL</span>int 的 <a href="http://www.jslint.com/lint.html#scope">onevar</a> 這個檢查項目，而且選項也很少，預設就會檢查空白和縮排，而且沒辦法關掉。</p>

<p>除了 Closure Linter 外，Google 也公開了他們的 <a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml">JavaScript Coding Style Guide</a> ，有興趣的可以逐條看看。</p>

<p>最後順便提一下， JavaScript Best Practice 我還記得我沒寫完，不過最近幾乎都在看 <a href="http://www.w3.org/WAI/intro/aria"><span class="caps">WAI</span>-ARIA</a> 就是，也很想整理整理寫一兩篇文章說。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

	</b:entries>
</b:blog>
