<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>O3noBLOG - unix</title>
<link>https://blog.othree.net//log/ unix/</link>
<description></description>
<copyright>Copyright 2017</copyright>
<lastBuildDate>2017-04-26 14:35</lastBuildDate>
<generator>http://www.movabletype.org/?v=4.381</generator>
<docs>http://blogs.law.harvard.edu/tech/rss</docs> 


<item>
<title>My First Contribution to Nginx</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/25580381505/" title="nginx conf by othree, on Flickr"><img src="https://farm2.staticflickr.com/1525/25580381505_0825ef9c24_b.jpg" width="570" height="427" alt="nginx conf" srcset="https://farm2.staticflickr.com/1525/25580381505_0825ef9c24_b.jpg 1024w" /></a></p>

<p>因為工作上的需要，所以其實我還蠻常會編輯 nginx configuration file 的，理所當然的編輯器是用 vim，然後就會對 nginx 設定檔的支援有意見，一般人用的 nginx 設定檔的 vim script 其實是 nginx repository 的 contrib 目錄裡面的那份，這份 vim script 其實本來也是獨立的，不過原作者好像把他捐進去 nginx 裡面，之後就一直都在裡面了，也因此之後更新就很不頻繁。</p>

<p>然後因為檔案都放在 nginx repository 裡面，Vim 要使用其實不太方便，所以 Github 上還看的到不少人單獨抽出來，我一開始也是 fork <a href="https://github.com/moskytw/nginx-contrib-vim">mosky</a> 的來用，後來就直接在<a href="https://github.com/othree/nginx-contrib-vim">自己的 repository</a> 上面修改了，改一陣子之後就開始想要推回 upstream，也就是 nginx 的程式庫，然後就開始了這段協工旅程(?)。</p>

<p>要發修改上 upstream，第一步自然是看一下<a href="http://nginx.org/en/docs/contributing_changes.html">如何貢獻</a>，節錄這邊幾個重點：</p>

<ol>
<li>用 <a href="http://mailman.nginx.org/mailman/listinfo/nginx-devel">nginx-devel</a> 這個 mailing list 做討論</li>
<li>發 patch 前有一些注意事項，不過我改 vim script 比較沒關係</li>
<li>Patch 也是用 email 發到 nginx-devel，有範例</li>
<li>推薦用 <a href="https://www.mercurial-scm.org/wiki/PatchbombExtension">patchbomb</a></li>
<li>要先簽 <a href="https://www.nginx.com/resources/wiki/contributing/cla/">CLA</a>（不過目前這條已經不見了，改成最後說發 patch 等於同意用他們專案的 LCIENSE）</li>
</ol>

<p>總之我就照這份，先去訂閱了 nginx-devel 觀察一陣子，然後就直接把我的<a href="http://mailman.nginx.org/pipermail/nginx-devel/2017-February/009489.html">修改</a>整個丟上去了，一開始是直接用 Gmail 發，把 patch 檔內容直接複製貼過去，產生 patch 檔的方法是：</p>

<pre><code>hg export &gt; something.patch
</code></pre>

<p><code>hg export</code> 會直接輸出最後一個 commit 的 patch 內容到 STDOUT，然後就直接用 Gmail 發過去，結果 review 的 <a href="http://mdounin.ru/">Maxim Dounin</a> 說他沒辦法 apply patch，可能是因為我的 mail client 的關係，建議我用 <a href="https://www.mercurial-scm.org/wiki/PatchbombExtension">patchbomb</a> 發，所以就研究搜尋了一下，發現他是直接發 email 的機制，所以要把帳號密碼都寫到設定內，找了一篇 Gmail 的<a href="http://blog.sidkalra.com/2009/02/using-gmail-with-hgs-patchbomb-extension/">設定範例</a>，搭配 Google account 的應用程式密碼，設定範例如下：</p>

<pre><code>[extensions]
hgext.patchbomb =

[email]
from=othree &lt;othree@gmail.com&gt;
to=nginx-devel@nginx.org
cc=othree@gmail.com
method=smtp

[smtp]
host=smtp.gmail.com
port=587
username=othree@gmail.com
password=[gmail_password]
tls=True
</code></pre>

<p>把這些資訊填入 <code>.hg/hgrc</code> 這個檔案內，然後就可以用 <code>hg email -o --test</code> 來測試看看，這個指令會把完整的原始信件內容，包括 header 等都顯示出來（丟到 STDOUT），如果正式要發就把 <code>--test</code> 拿掉就好了。</p>

<p>確認一切沒問題後，我就改用 patchbomb 發 patch 到 nginx-devel 了，結果還是被拒絕了，問題主要是這個 patch 一次修改太多，理想上應該是不同目的的修改放到不同 patch 內，當然這和我一開始的預想不一樣就是了，我一開始的想法是因為 contrib 這邊的東西，相對於 nginx 本體的原始碼來說比較次要，所以盡量減少 commit 數，其實如果我有先去問過應該是可以少繞這段路，總之，為了一個一個修改送出，我又開了一個 github repository，叫做 <a href="https://github.com/othree/nginx-contrib-vim-patch">nginx-contrib-vim-patch</a>，想要慢慢把我的 nginx-contrib-vim 內的更動搬過去，接著開始的，就是漫長的 review 和溝通了。</p>

<p>其實我完全沒想到 Maxim Dounin 會這麼認真的 review，不止會看我這樣改是要達到什麼目的，還有認真測試，結果被抓出一堆問題，雖然都是奇妙的 conf 寫法，合語法，但是應該不會有人這樣寫的 case，這些 case 我也開始慢慢收集到 github 上的 <a href="https://github.com/othree/nginx-conf-test">nginx-conf-test</a>，方便之後測試用，總之來回許久，終於有一部分比較簡單的東西先進去 nginx repository 了，然後我發現外部貢獻者都會在 <a href="https://nginx.org/en/CHANGES">change log</a> 那邊被感謝，我貢獻進去的目前應該都在 1.11.11 那版，其實只有把新的 directive 補上（core modules, 3rd party modules）和幾個 protocol 參數的 highlight，至於其他的修改還進不去，目前看起來會是一場長期抗戰，主要是因為 reviewer 對於期望的目標和我不一樣，目前大概會維持兩個版本吧，一邊弄<a href="https://github.com/othree/nginx-contrib-vim">自己希望的</a>，一邊抽東西送回去 upstream，不得不說主事者控制太緊會讓貢獻者動力被削減不少。</p>

<p>貢獻 nginx 的過程讓我體會到以前的開源協做的模式（應該是吧？），用 mailing list 溝通，發 Patch、code review、做討論，這些點來看，nginx 的流程其實是非常老派，和現在用 Github 做溝通、協做 的流程差很大，門檻也高不少，當然這不一定是壞事，還是要看專案性質，在 Github 這類平台上做這些協做流程的話，門檻降低了，其實可能隨之而來的問題就是太多人進來造成貢獻品質落差很大，反而會吃掉主力人員的時間，剛好今天也看到知乎上有一篇「<a href="https://www.zhihu.com/question/36292298/answer/160028010">維護一個大型開源專案是怎樣的體驗？</a>」，裡面就有提到 VSCode 的狀況，變成還需要排人專門處理 issue 和 PR，感覺就很可怕。</p>

<p>順帶一題，nginx 的固定貢獻者當中不少中國人啊。</p>
]]>
</description>
<link>https://blog.othree.net/log/2017/04/26/first-contribution-to-nginx/</link>
<guid>https://blog.othree.net/log/2017/04/26/first-contribution-to-nginx/</guid>
<category>unix</category>
<pubDate>2017-04-26 14:35</pubDate>
</item>

<item>
<title>Docker 雜談</title>
<description><![CDATA[<p>最近使用的一些感想和疑問</p>

<ul>
<li><code>--name</code> 自動會變 network 內的 hostname，蠻方便</li>
<li>Image build 失敗，還是會產生一個東西在那邊，要 rm 掉才能重新 build...</li>
<li>Service 還不支援 update 修改 network</li>
<li>DB container 的資料要開 volume 掛比較保險（免得不小心砍到 container）</li>
<li>在多個 node 上開 replica，掛 volume 的話都是在該 node 上找，目前似乎沒有透過網路共享 volume container 這種事</li>
<li>很多服務的官方 docker 都是用環境變數做設定，不知道是不是本來就有的慣例</li>
<li>一直更新 registry 上的 image 好像會越來越多垃圾，不知道是不是有清理機制</li>
<li>整體而言，我覺得 docker service 介面是個很容易讓 fat finger 造成服務爆炸設計，不過架構規劃的好的話，應該不會太難修復就是</li>
</ul>
]]>
</description>
<link>https://blog.othree.net/log/2017/03/18/docker/</link>
<guid>https://blog.othree.net/log/2017/03/18/docker/</guid>
<category>unix</category>
<pubDate>2017-03-18 23:46</pubDate>
</item>

<item>
<title>Ubuntu 14.04 與 MovableType 4.x</title>
<description><![CDATA[<p>前一篇文章提到我為 SSL 安全性升級到 Ubuntu 14.04，其實升級之後遇到一些 MovableType 的相容性問題，Ubuntu 在 12.04 的時候還是用 Perl 5.14，不過到 14.04 時，Perl 升級到 5.18 了，順便提一下現在最新的穩定版是 5.20，不過 5.18 和 5.20 是同時都有在維護的。</p>

<p>然後我的 MovableType 是用很久以前的 4.38，用新的 Perl 會跑不起來，不過我也不太想升級，一來是 License 問題，二來是新的 MT 一個很大的架構改變是他變成是多 blog 系統，我也不太喜歡這點。總之剩下的方法就是想辦法修 bug，或是用舊的 Perl 跑，顯然後者容易許多，然後我也找到 gugod 開發的 <a href="http://perlbrew.pl/">perlbrew</a> 這工具，類似於Ruby 的 <a href="http://rvm.io/">RVM</a>，c9s 也有寫一篇文章<a href="http://perlbrew.pl/Perlbrew-%E4%B8%AD%E6%96%87%E7%B0%A1%E4%BB%8B.html">介紹</a>。</p>

<p>比較有趣的是我用了 perlbrew 安裝好 Perl 5.14 後，用 <code>which perl</code> 找到 Perl 5.14 執行檔位置然後手動修改 mt.cgi 等檔案，用 mt-check 檢查發現還缺 DBI 的套件，就用升級前就已經裝好的 cpanminus 裝了，不過怎麼裝都顯示正常但是 MT 就是一直抓不到，看了一下 cpanm 檔案原始碼才發現它用的 perl 是：</p>

<pre><code>#!/usr/bin/perl
</code></pre>

<p>心想 gugod 怎麼可能不處理這個問題，於是搜尋一下發現可以用 <a href="http://perlbrew.pl/Perlbrew-and-Friends.html">perlbrew 安裝 cpanm</a>：</p>

<pre><code>perlbrew install-cpanm
</code></pre>

<p>看了安裝出來的 cpanm 用的 perl 來源是不一樣的：</p>

<pre><code>#!/usr/bin/env perl
</code></pre>

<p>這樣用 cpanm 裝的 Perl 套件總算可以用了，之後還有一個 5.14.2 和 5.14.4 的差異造成的錯誤，就照網路上找到的<a href="http://www.everitz.com/2012/06/20/mt-notifier-defined-hash-is-deprecated-error/">文章</a>修正了。</p>
]]>
</description>
<link>https://blog.othree.net/log/2014/11/03/ubuntu-1404-mt4/</link>
<guid>https://blog.othree.net/log/2014/11/03/ubuntu-1404-mt4/</guid>
<category>unix</category>
<pubDate>2014-11-03 17:42</pubDate>
</item>

<item>
<title>[</title>
<description><![CDATA[<p>最近因為 <a href="http://www.pcworld.com/article/2687857/bigger-than-heartbleed-shellshock-flaw-leaves-os-x-linux-more-open-to-attack.html">shellshock</a> 的關係，跑去看了 <code>/bin/</code> 下面的東西，結果突然發現有個執行檔叫做 <code>[</code>。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15403240745/" title="ls /bin/ by othree, on Flickr"><img src="https://farm4.staticflickr.com/3908/15403240745_b6a14b8fd3_c.jpg" width="400" height="300" alt="ls /bin/" srcset="https://farm4.staticflickr.com/3908/15403240745_b6a14b8fd3_c.jpg 768w" /></a></p>

<p>執行了也完全沒反應，結果和同事討論就上去 stack overflow 來問問看，然後馬上就被回說看看 <code>man [</code>。想不到，原來 shell script 裡面的 if else condition 的 <code>[ ]</code> ，其實就是這個執行檔啊，以前一直以為是個語法的 syntax...</p>
]]>
</description>
<link>https://blog.othree.net/log/2014/10/01/bracket/</link>
<guid>https://blog.othree.net/log/2014/10/01/bracket/</guid>
<category>unix</category>
<pubDate>2014-10-01 01:14</pubDate>
</item>

<item>
<title>mozjpeg 2.1</title>
<description><![CDATA[<p>Mozilla 最近發佈了 <a href="https://github.com/mozilla/mozjpeg">mozjpeg</a> 2.1，同時還有一篇 <a href="http://blog.mozilla.com.tw/posts/6084/using-mozjpeg-to-create-efficient-jpegs">用 mozjpeg 產生高效率的 JPEG</a> 教大家使用裡面的工具，所以我之前誤會以為現在只有 c lib 可以用，這篇文章有一些範例指令讓大家可以把 <code>cjpeg</code> 把圖片重新壓縮，小缺憾是安裝講的比較不清楚，所以我另外測試過，提供一下 Mac OSX 的指令：</p>

<pre><code>cd mozjpeg
autoreconf -fiv
mkdir build &amp;&amp; cd build
sh ../configure
make
sudo make install
</code></pre>

<p>關鍵的就是 <a href="https://github.com/mozilla/mozjpeg/blob/master/BUILDING.txt">BUILDING.txt</a> 沒說 <code>build</code> 目錄是要自己建立的，不過實際測試的效果要等週一才能測試看看，目前只有編譯過確定有指令工具可以用而已。</p>

<p>另外一個比較容易漏掉的是要編譯需要 <a href="https://github.com/mozilla/mozjpeg/blob/master/BUILDING.txt">NASM</a>， homebrew 可以直接 <code>brew install nasm</code> 。</p>
]]>
</description>
<link>https://blog.othree.net/log/2014/08/16/mozjpeg-21/</link>
<guid>https://blog.othree.net/log/2014/08/16/mozjpeg-21/</guid>
<category>unix</category>
<pubDate>2014-08-16 14:34</pubDate>
</item>

<item>
<title>OSX 裝 ruby 1.9.3p392 編譯問題</title>
<description><![CDATA[<p>最近因故要在 Mac 上重新建立工作環境，結果在裝 ruby 時遇到 compile error，看起來也不是今天才有的<a href="https://github.com/sstephenson/ruby-build/issues/297">問題</a>，狀況是 clang 4.1 之後才開始有的，而 OSX 10.9 要用的 XCode 5.0.1 已經是 clang 5.0 了，所以不避開這個問題會無法在新的 OSX 上裝 Ruby，包括用其他 Ruby 管理工具也是一樣，像我其實就是用 rvm 要裝，還好有解法：</p>

<pre><code>CFLAGS=-Wno-error=shorten-64-to-32 rvm install ruby-1.9.3-p392
</code></pre>
]]>
</description>
<link>https://blog.othree.net/log/2013/10/24/osx-ruby-193p392/</link>
<guid>https://blog.othree.net/log/2013/10/24/osx-ruby-193p392/</guid>
<category>unix</category>
<pubDate>2013-10-24 16:16</pubDate>
</item>

<item>
<title>fasd, 命令列加速工具</title>
<description><![CDATA[<p>以前曾經介紹過 <a href="https://blog.othree.net/log/2010/10/19/automjump/">autojump</a> 這個很好用的快速切換目錄的指令，後來 <a href="http://blog.miaout17.net">大貓</a> 跟我說有個叫 <a href="https://github.com/rupa/z">z</a> 的，一樣用途，原理也差不多，不過 z 的位置比較好按些，最近在看 <a href="http://www.vim.org/scripts/index.php">Vim Scripts</a> 時，意外發現到有個 <a href="https://github.com/clvv/fasd">fasd</a>，也是一樣的原理，不過他的功能比較強大，配合一些 alias 就可以做到和 <a href="https://github.com/rupa/z">z</a> 或是 <a href="https://github.com/rupa/v">v</a> 一樣的功能，作者對相關的領域很熟悉，對於常用 shell 的整合很好，像是 zsh 和 bash 的 <a href="http://zsh.sourceforge.net/Doc/Release/Completion-System.html">指令補完</a> 就都有支援，目前正在改用他，Mac 安裝很方便：</p>

<pre><code>brew install fasd
</code></pre>

<p>然後在 <code>.bashrc</code> 或是 <code>.zshrc</code> 加上</p>

<pre><code>eval "$(fasd --init auto)"
</code></pre>

<p>就可以了，其他環境有包好的就比較少了，可以看看他的 Wiki: <a href="https://github.com/clvv/fasd/wiki/Installing-via-Package-Managers">Installing via Package Managers</a>，其他的環境我測試過 Ubuntu 編譯安裝都很順利，基本上只是拷拷檔案而已。</p>

<p><a href="//www.flickr.com/photos/othree/8722512795/in/photostream" class="thumbnail">
  <img src="//farm8.staticflickr.com/7307/8722512795_57068f5c05_o.gif" width="804" height="483" alt="" />
</a></p>
]]>
</description>
<link>https://blog.othree.net/log/2013/05/09/fasd-cli-booster/</link>
<guid>https://blog.othree.net/log/2013/05/09/fasd-cli-booster/</guid>
<category>unix</category>
<pubDate>2013-05-09 21:12</pubDate>
</item>

<item>
<title>Build v8</title>
<description><![CDATA[<p>平常是使用 Google V8 引擎的 command line 來做自己工作機的 js console，最主要的用途是跑 jslint，不過這需要自己來編譯，<a href="http://blog.othree.net/log/2011/01/28/osx-v8-js-command/">以前</a>是用 scons 來編譯，剛剛想要編譯新版發現 Google 又換了自動化工具，從 <a href="http://www.scons.org/">scons</a> 換成 <a href="http://code.google.com/p/gyp/">gyp</a>，安裝流程其實比較簡單，先安裝好 svn，然後執行：</p>

<pre><code>make dependencies
make console=readline native
</code></pre>

<p>產生的 d8 執行檔會在 out/native/ 下面，官方說明有提到可以用 clang 編譯，不過我嘗試後會有錯誤，還在看要怎樣處理。</p>
]]>
</description>
<link>https://blog.othree.net/log/2012/05/14/build-v8/</link>
<guid>https://blog.othree.net/log/2012/05/14/build-v8/</guid>
<category>unix</category>
<pubDate>2012-05-14 23:51</pubDate>
</item>

<item>
<title>automjump</title>
<description><![CDATA[<p>今天發現的有趣的命令列工具 <a href="http://github.com/joelthelion/autojump">autojump</a> ，它會記錄你常用的目錄位置，然後之後就可以用簡單的關鍵字跳到路徑符合關鍵字，又最常用的目錄，以我為例，我最近常常會跑到某個位置的 vim-plugins 目錄，然後我又沒有其它目錄名稱和 plugin 相似，那不論我在哪，我都可以執行下面的指令跳到 vim-plugins：</p>

<pre><code>j plugin
</code></pre>

<p>我目前使用上是都沒什麼大問題，不過 <a href="http://iamhlb.com">hlb</a> 說他的 vim 檔名自動完成會爛掉，可能要在研究看看問題在哪了。</p>
]]>
</description>
<link>https://blog.othree.net/log/2010/10/19/automjump/</link>
<guid>https://blog.othree.net/log/2010/10/19/automjump/</guid>
<category>unix</category>
<pubDate>2010-10-19 22:27</pubDate>
</item>

<item>
<title>彩色 man page</title>
<description><![CDATA[<p>忘了哪裡看到的設定了，用的是 zsh</p>

<pre><code># colorful man page
export PAGER="`which less` -s"
export BROWSER="$PAGER"
export LESS_TERMCAP_mb=$'\E[38;5;167m'
export LESS_TERMCAP_md=$'\E[38;5;39m'
export LESS_TERMCAP_me=$'\E[38;5;231m'
export LESS_TERMCAP_se=$'\E[38;5;231m'
export LESS_TERMCAP_so=$'\E[38;5;167m'
export LESS_TERMCAP_ue=$'\E[38;5;231m'
export LESS_TERMCAP_us=$'\E[38;5;167m'
</code></pre>

<p>效果預覽：</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/5046170237/" title="colorful man page by othree, on Flickr"><img src="https://farm5.staticflickr.com/4087/5046170237_01e76043f9_b.jpg" width="917" height="635" alt="colorful man page" srcset="https://farm5.staticflickr.com/4087/5046170237_01e76043f9_b.jpg 1024w" /></a></p>

<ul>
<li><a href="http://gist.github.com/608425">Mirror on gist</a></li>
</ul>
]]>
</description>
<link>https://blog.othree.net/log/2010/10/03/colorful-man-page/</link>
<guid>https://blog.othree.net/log/2010/10/03/colorful-man-page/</guid>
<category>unix</category>
<pubDate>2010-10-03 15:42</pubDate>
</item>

<item>
<title>命令列安裝 Dropbox</title>
<description><![CDATA[<p>剛剛試著在命令列安裝 <a href="https://www.dropbox.com/">Dropbox</a> ，發現超簡單的，不過還是記錄一下，我安裝的流程是跟著 <a href="http://www.ubuntugeek.com/howto-install-dropbox-in-ubuntu-9-10karmic9-04jaunty8-10intrepid8-04hardy.html">howto-install-dropbox-in-ubuntu</a> 走的，不過我剛發現 <a href="https://www.dropbox.com/downloading?os=lnx">官方的安裝說明</a> 是沒說到要修改套件庫的來源檔，只要執行以下指令：</p>

<pre><code>sudo apt-get update;sudo apt-get upgrade nautilus-dropbox
</code></pre>

<p>如果有金鑰問題的話，加入套件庫金鑰的指令如下：</p>

<pre><code> sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 5044912E
</code></pre>

<p>接著如果有用 nautilus 的話要把相關的程序全部關掉</p>

<pre><code>nautilus --quit
</code></pre>

<p>然後安裝 Dropbox daemon</p>

<pre><code>dropbox start -i
</code></pre>

<p>啟動 Dropbox </p>

<pre><code>dropbox start
</code></pre>

<p>第一次啟動會看到下面的說明和連結</p>

<pre><code>To link this computer to a dropbox account, visit the following url:
https://www.dropbox.com/cli_link?host_id=01d51f8e353b4f9a45085***********
</code></pre>

<p>用瀏覽器開一下那個連結把帳號連結建立起來後就完成了，預設的目錄位置會在 ~/Dropbox 裡面，也可以執行 man dropbox 來看其它使用說明。</p>
]]>
</description>
<link>https://blog.othree.net/log/2010/10/03/commandline-install-dropbox/</link>
<guid>https://blog.othree.net/log/2010/10/03/commandline-install-dropbox/</guid>
<category>unix</category>
<pubDate>2010-10-03 11:28</pubDate>
</item>

<item>
<title>easygit</title>
<description><![CDATA[<p>前陣子為了找 tinymce 某個 bug 是在哪個 commit 產生的，用上了 <a href="http://people.gnome.org/~newren/eg/">easygit</a> 因為照原來一直 revert 回去的作法實在弄到會吐血， easygit 可以這樣下命令：</p>



<pre><code>eg revert -since a326cfb0ff21c928fe69f9f18d62ece31b95c47e</code></pre>



<p>這樣可以直接回去那個版本了，而不是只 revert 那個 commit 。</p>]]></description>
<link>https://blog.othree.net/log/2010/04/03/easygit/</link>
<guid>https://blog.othree.net/log/2010/04/03/easygit/</guid>
<category>unix</category>
<pubDate>2010-04-03 14:09</pubDate>
</item>

<item>
<title>用 :wq 送出 BBS 文章</title>
<description><![CDATA[<p>因為在 <span class="caps">BBS </span>想要用 :wq 發文章的次數不算少，剛剛就用 expect 弄起來了，只要加一行到 interact 裡面就可以：</p>



<pre><code>\033:wq\r { send \030; send &quot;\r&quot; }</code></pre>



<p>實際操作是要 &lt;ESC&gt; :wq &lt;ENTER&gt; ，會直接把文章發表，如果不想跳過發文前的確認選單，那就把最後的 \r 拿掉。</p>]]></description>
<link>https://blog.othree.net/log/2010/01/07/wq-post-bbs-article/</link>
<guid>https://blog.othree.net/log/2010/01/07/wq-post-bbs-article/</guid>
<category>unix</category>
<pubDate>2010-01-07 20:25</pubDate>
</item>

<item>
<title>在 screen windows 裡開一個比較小的 terminal</title>
<description><![CDATA[<p>這真是超特殊的需求，不過今天還是弄出來了，花不少間走錯方向就是，會有這樣的需求是因為我同時要掛 <span class="caps">BBS </span>和 <span class="caps">IRC</span>，BBS 的標準視窗大小是 80*24，但是這個大小對於 <span class="caps">IRC </span>來說又太小了，好在現在很多 <span class="caps">BBS </span>系統已經已經支援大於 80*24 的終端機了，但是有一個 <a href="http://www.gamer.com.tw/">bahamut</a> 自從商業化後 <span class="caps">BBS </span>系統就完全沒改進，不支援就算了，終端機大小只要不對，看文章往下卷頁時就會有錯誤排版產生，最常見就是按 <strong>下</strong> ，本來應該是整個畫面移動一行，結果會變成只有最後一行被取代，而我現在是使用 100*35 的大小，本來是一直把這問題放著，不過今天總算解決了，其實解法很簡單，就是 screen 裡面再開一個 screen，用不同的設定檔案，裡面要拿來上 bahamut 那個的設定檔加上：</p>



<pre><code>width -d 80 24</code></pre>



<p>重點在那個 <a href="http://www.gnu.org/software/screen/manual/screen.html#Window-Size">-d</a> 參數，本來一直在終端機的設定上跑來跑去，不是說沒辦法改大小，就是內部的終端機改大小會影響到外面的，版面就整個亂掉，不過 -d 是只改 display 的大小，不是終端機大小，本來的話是會所有的 screen 一起改，但是因為用兩層的關係，所以外面的不會受到影響。</p>]]></description>
<link>https://blog.othree.net/log/2010/01/05/screen-windows-terminal/</link>
<guid>https://blog.othree.net/log/2010/01/05/screen-windows-terminal/</guid>
<category>unix</category>
<pubDate>2010-01-05 21:18</pubDate>
</item>

<item>
<title>closure-compiler on OSX</title>
<description><![CDATA[<p>Google 的 <a href="http://code.google.com/intl/en/closure/compiler/">Closure Cmpiler</a> 要 Java 1.6 ，蘋果雖然有提供 1.6 的 <a href="http://www.apple.com/downloads/macosx/apple/application_updates/javaformacosx105update1.html">更新</a> ，不過在終端機下直接打 java 還是 1.5 版，至於 1.6 版則是放在</p>



<pre><code>/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Commands/java</code></pre>



<p>如果要跑 closure-compiler 建立shell script 時 java 執行檔要改用這個。</p>]]></description>
<link>https://blog.othree.net/log/2009/12/29/closure-compiler-osx/</link>
<guid>https://blog.othree.net/log/2009/12/29/closure-compiler-osx/</guid>
<category>unix</category>
<pubDate>2009-12-29 23:16</pubDate>
</item>


</channel>
</rss>