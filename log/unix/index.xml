<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>c</b:listType>
			<b:listData listID="unix">unix</b:listData>
		</b:entriesMeta>

		<b:entry entryID="000893" baseName="first-contribution-to-nginx">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-04-26</b:date>
				<b:time>14:35:29</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>My First Contribution to Nginx</b:title>
			<b:content>
				<b:summary> 因為工作上的需要，所以其實我還蠻常會編輯 nginx configuration file 的，理所當然的編輯器是用 vim，然後就會對 nginx 設定檔的支援有意見，一般人用的 nginx 設定檔的 vim script 其實是 nginx repository 的 contrib 目錄裡面的那份，這份 vim script 其實本來也是獨立的，不過原作者好像把他捐進去 nginx 裡面，之後就一直都在裡面了，也因此之後更新就很不頻繁。 然後因為檔案都放在 nginx repository 裡面，Vim 要使用其實不太方便，所以 Github 上還看的到不少人單獨抽出來，我一開始也是 fork mosky 的來用，後來就直接在自己的 repository 上面修改了，改一陣子之後就開始想要推回 upstream，也就是 nginx 的程式庫，然後就開始了這段協工旅程(?)。 要發修改上...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/25580381505/" title="nginx conf by othree, on Flickr"><img src="https://farm2.staticflickr.com/1525/25580381505_0825ef9c24_b.jpg" width="570" height="427" alt="nginx conf" srcset="https://farm2.staticflickr.com/1525/25580381505_0825ef9c24_b.jpg 1024w" /></a></p>

<p>因為工作上的需要，所以其實我還蠻常會編輯 nginx configuration file 的，理所當然的編輯器是用 vim，然後就會對 nginx 設定檔的支援有意見，一般人用的 nginx 設定檔的 vim script 其實是 nginx repository 的 contrib 目錄裡面的那份，這份 vim script 其實本來也是獨立的，不過原作者好像把他捐進去 nginx 裡面，之後就一直都在裡面了，也因此之後更新就很不頻繁。</p>

<p>然後因為檔案都放在 nginx repository 裡面，Vim 要使用其實不太方便，所以 Github 上還看的到不少人單獨抽出來，我一開始也是 fork <a href="https://github.com/moskytw/nginx-contrib-vim">mosky</a> 的來用，後來就直接在<a href="https://github.com/othree/nginx-contrib-vim">自己的 repository</a> 上面修改了，改一陣子之後就開始想要推回 upstream，也就是 nginx 的程式庫，然後就開始了這段協工旅程(?)。</p>

<p>要發修改上 upstream，第一步自然是看一下<a href="http://nginx.org/en/docs/contributing_changes.html">如何貢獻</a>，節錄這邊幾個重點：</p>

<ol>
<li>用 <a href="http://mailman.nginx.org/mailman/listinfo/nginx-devel">nginx-devel</a> 這個 mailing list 做討論</li>
<li>發 patch 前有一些注意事項，不過我改 vim script 比較沒關係</li>
<li>Patch 也是用 email 發到 nginx-devel，有範例</li>
<li>推薦用 <a href="https://www.mercurial-scm.org/wiki/PatchbombExtension">patchbomb</a></li>
<li>要先簽 <a href="https://www.nginx.com/resources/wiki/contributing/cla/">CLA</a>（不過目前這條已經不見了，改成最後說發 patch 等於同意用他們專案的 LCIENSE）</li>
</ol>

<p>總之我就照這份，先去訂閱了 nginx-devel 觀察一陣子，然後就直接把我的<a href="http://mailman.nginx.org/pipermail/nginx-devel/2017-February/009489.html">修改</a>整個丟上去了，一開始是直接用 Gmail 發，把 patch 檔內容直接複製貼過去，產生 patch 檔的方法是：</p>

<pre><code>hg export &gt; something.patch
</code></pre>

<p><code>hg export</code> 會直接輸出最後一個 commit 的 patch 內容到 STDOUT，然後就直接用 Gmail 發過去，結果 review 的 <a href="http://mdounin.ru/">Maxim Dounin</a> 說他沒辦法 apply patch，可能是因為我的 mail client 的關係，建議我用 <a href="https://www.mercurial-scm.org/wiki/PatchbombExtension">patchbomb</a> 發，所以就研究搜尋了一下，發現他是直接發 email 的機制，所以要把帳號密碼都寫到設定內，找了一篇 Gmail 的<a href="http://blog.sidkalra.com/2009/02/using-gmail-with-hgs-patchbomb-extension/">設定範例</a>，搭配 Google account 的應用程式密碼，設定範例如下：</p>

<pre><code>[extensions]
hgext.patchbomb =

[email]
from=othree &lt;othree@gmail.com&gt;
to=nginx-devel@nginx.org
cc=othree@gmail.com
method=smtp

[smtp]
host=smtp.gmail.com
port=587
username=othree@gmail.com
password=[gmail_password]
tls=True
</code></pre>

<p>把這些資訊填入 <code>.hg/hgrc</code> 這個檔案內，然後就可以用 <code>hg email -o --test</code> 來測試看看，這個指令會把完整的原始信件內容，包括 header 等都顯示出來（丟到 STDOUT），如果正式要發就把 <code>--test</code> 拿掉就好了。</p>

<p>確認一切沒問題後，我就改用 patchbomb 發 patch 到 nginx-devel 了，結果還是被拒絕了，問題主要是這個 patch 一次修改太多，理想上應該是不同目的的修改放到不同 patch 內，當然這和我一開始的預想不一樣就是了，我一開始的想法是因為 contrib 這邊的東西，相對於 nginx 本體的原始碼來說比較次要，所以盡量減少 commit 數，其實如果我有先去問過應該是可以少繞這段路，總之，為了一個一個修改送出，我又開了一個 github repository，叫做 <a href="https://github.com/othree/nginx-contrib-vim-patch">nginx-contrib-vim-patch</a>，想要慢慢把我的 nginx-contrib-vim 內的更動搬過去，接著開始的，就是漫長的 review 和溝通了。</p>

<p>其實我完全沒想到 Maxim Dounin 會這麼認真的 review，不止會看我這樣改是要達到什麼目的，還有認真測試，結果被抓出一堆問題，雖然都是奇妙的 conf 寫法，合語法，但是應該不會有人這樣寫的 case，這些 case 我也開始慢慢收集到 github 上的 <a href="https://github.com/othree/nginx-conf-test">nginx-conf-test</a>，方便之後測試用，總之來回許久，終於有一部分比較簡單的東西先進去 nginx repository 了，然後我發現外部貢獻者都會在 <a href="https://nginx.org/en/CHANGES">change log</a> 那邊被感謝，我貢獻進去的目前應該都在 1.11.11 那版，其實只有把新的 directive 補上（core modules, 3rd party modules）和幾個 protocol 參數的 highlight，至於其他的修改還進不去，目前看起來會是一場長期抗戰，主要是因為 reviewer 對於期望的目標和我不一樣，目前大概會維持兩個版本吧，一邊弄<a href="https://github.com/othree/nginx-contrib-vim">自己希望的</a>，一邊抽東西送回去 upstream，不得不說主事者控制太緊會讓貢獻者動力被削減不少。</p>

<p>貢獻 nginx 的過程讓我體會到以前的開源協做的模式（應該是吧？），用 mailing list 溝通，發 Patch、code review、做討論，這些點來看，nginx 的流程其實是非常老派，和現在用 Github 做溝通、協做 的流程差很大，門檻也高不少，當然這不一定是壞事，還是要看專案性質，在 Github 這類平台上做這些協做流程的話，門檻降低了，其實可能隨之而來的問題就是太多人進來造成貢獻品質落差很大，反而會吃掉主力人員的時間，剛好今天也看到知乎上有一篇「<a href="https://www.zhihu.com/question/36292298/answer/160028010">維護一個大型開源專案是怎樣的體驗？</a>」，裡面就有提到 VSCode 的狀況，變成還需要排人專門處理 issue 和 PR，感覺就很可怕。</p>

<p>順帶一題，nginx 的固定貢獻者當中不少中國人啊。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000888" baseName="docker">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-03-18</b:date>
				<b:time>23:46:02</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>Docker 雜談</b:title>
			<b:content>
				<b:summary>最近使用的一些感想和疑問 --name 自動會變 network 內的 hostname，蠻方便 Image build 失敗，還是會產生一個東西在那邊，要 rm 掉才能重新 build... Service 還不支援 update 修改 network DB container 的資料要開 volume 掛比較保險（免得不小心砍到 container） 在多個 node 上開 replica，掛 volume 的話都是在該 node 上找，目前似乎沒有透過網路共享 volume container 這種事 很多服務的官方 docker 都是用環境變數做設定，不知道是不是本來就有的慣例 一直更新 registry 上的...</b:summary>
				<b:mainContent><p>最近使用的一些感想和疑問</p>
<ul>
<li><code>--name</code> 自動會變 network 內的 hostname，蠻方便</li>
<li>Image build 失敗，還是會產生一個東西在那邊，要 rm 掉才能重新 build...</li>
<li>Service 還不支援 update 修改 network</li>
<li>DB container 的資料要開 volume 掛比較保險（免得不小心砍到 container）</li>
<li>在多個 node 上開 replica，掛 volume 的話都是在該 node 上找，目前似乎沒有透過網路共享 volume container 這種事</li>
<li>很多服務的官方 docker 都是用環境變數做設定，不知道是不是本來就有的慣例</li>
<li>一直更新 registry 上的 image 好像會越來越多垃圾，不知道是不是有清理機制</li>
<li>整體而言，我覺得 docker service 介面是個很容易讓 fat finger 造成服務爆炸設計，不過架構規劃的好的話，應該不會太難修復就是</li>
</ul>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000818" baseName="ubuntu-1404-mt4">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-11-03</b:date>
				<b:time>17:42:28</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>Ubuntu 14.04 與 MovableType 4.x</b:title>
			<b:content>
				<b:summary>前一篇文章提到我為 SSL 安全性升級到 Ubuntu 14.04，其實升級之後遇到一些 MovableType 的相容性問題，Ubuntu 在 12.04 的時候還是用 Perl 5.14，不過到 14.04 時，Perl 升級到 5.18 了，順便提一下現在最新的穩定版是 5.20，不過 5.18 和 5.20 是同時都有在維護的。 然後我的 MovableType 是用很久以前的 4.38，用新的 Perl 會跑不起來，不過我也不太想升級，一來是 License 問題，二來是新的 MT 一個很大的架構改變是他變成是多 blog 系統，我也不太喜歡這點。總之剩下的方法就是想辦法修 bug，或是用舊的 Perl 跑，顯然後者容易許多，然後我也找到 gugod 開發的 perlbrew...</b:summary>
				<b:mainContent><p>前一篇文章提到我為 SSL 安全性升級到 Ubuntu 14.04，其實升級之後遇到一些 MovableType 的相容性問題，Ubuntu 在 12.04 的時候還是用 Perl 5.14，不過到 14.04 時，Perl 升級到 5.18 了，順便提一下現在最新的穩定版是 5.20，不過 5.18 和 5.20 是同時都有在維護的。</p>

<p>然後我的 MovableType 是用很久以前的 4.38，用新的 Perl 會跑不起來，不過我也不太想升級，一來是 License 問題，二來是新的 MT 一個很大的架構改變是他變成是多 blog 系統，我也不太喜歡這點。總之剩下的方法就是想辦法修 bug，或是用舊的 Perl 跑，顯然後者容易許多，然後我也找到 gugod 開發的 <a href="http://perlbrew.pl/">perlbrew</a> 這工具，類似於Ruby 的 <a href="http://rvm.io/">RVM</a>，c9s 也有寫一篇文章<a href="http://perlbrew.pl/Perlbrew-%E4%B8%AD%E6%96%87%E7%B0%A1%E4%BB%8B.html">介紹</a>。</p>

<p>比較有趣的是我用了 perlbrew 安裝好 Perl 5.14 後，用 <code>which perl</code> 找到 Perl 5.14 執行檔位置然後手動修改 mt.cgi 等檔案，用 mt-check 檢查發現還缺 DBI 的套件，就用升級前就已經裝好的 cpanminus 裝了，不過怎麼裝都顯示正常但是 MT 就是一直抓不到，看了一下 cpanm 檔案原始碼才發現它用的 perl 是：</p>

<pre><code>#!/usr/bin/perl
</code></pre>

<p>心想 gugod 怎麼可能不處理這個問題，於是搜尋一下發現可以用 <a href="http://perlbrew.pl/Perlbrew-and-Friends.html">perlbrew 安裝 cpanm</a>：</p>

<pre><code>perlbrew install-cpanm
</code></pre>

<p>看了安裝出來的 cpanm 用的 perl 來源是不一樣的：</p>

<pre><code>#!/usr/bin/env perl
</code></pre>

<p>這樣用 cpanm 裝的 Perl 套件總算可以用了，之後還有一個 5.14.2 和 5.14.4 的差異造成的錯誤，就照網路上找到的<a href="http://www.everitz.com/2012/06/20/mt-notifier-defined-hash-is-deprecated-error/">文章</a>修正了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000812" baseName="bracket">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-10-01</b:date>
				<b:time>01:14:24</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>[</b:title>
			<b:content>
				<b:summary>最近因為 shellshock 的關係，跑去看了 /bin/ 下面的東西，結果突然發現有個執行檔叫做 [。 執行了也完全沒反應，結果和同事討論就上去 stack overflow 來問問看，然後馬上就被回說看看 man [。想不到，原來 shell script 裡面的 if else condition 的 [ ] ，其實就是這個執行檔啊，以前一直以為是個語法的 syntax......</b:summary>
				<b:mainContent><p>最近因為 <a href="http://www.pcworld.com/article/2687857/bigger-than-heartbleed-shellshock-flaw-leaves-os-x-linux-more-open-to-attack.html">shellshock</a> 的關係，跑去看了 <code>/bin/</code> 下面的東西，結果突然發現有個執行檔叫做 <code>[</code>。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15403240745/" title="ls /bin/ by othree, on Flickr"><img src="https://farm4.staticflickr.com/3908/15403240745_b6a14b8fd3_c.jpg" width="400" height="300" alt="ls /bin/" srcset="https://farm4.staticflickr.com/3908/15403240745_b6a14b8fd3_c.jpg 768w" /></a></p>

<p>執行了也完全沒反應，結果和同事討論就上去 stack overflow 來問問看，然後馬上就被回說看看 <code>man [</code>。想不到，原來 shell script 裡面的 if else condition 的 <code>[ ]</code> ，其實就是這個執行檔啊，以前一直以為是個語法的 syntax...</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000807" baseName="mozjpeg-21">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-08-16</b:date>
				<b:time>14:34:37</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>mozjpeg 2.1</b:title>
			<b:content>
				<b:summary>Mozilla 最近發佈了 mozjpeg 2.1，同時還有一篇 用 mozjpeg 產生高效率的 JPEG 教大家使用裡面的工具，所以我之前誤會以為現在只有 c lib 可以用，這篇文章有一些範例指令讓大家可以把 cjpeg 把圖片重新壓縮，小缺憾是安裝講的比較不清楚，所以我另外測試過，提供一下 Mac OSX 的指令： cd mozjpeg autoreconf -fiv mkdir build &amp;&amp; cd build sh ../configure make sudo make install 關鍵的就是 BUILDING.txt 沒說 build 目錄是要自己建立的，不過實際測試的效果要等週一才能測試看看，目前只有編譯過確定有指令工具可以用而已。 另外一個比較容易漏掉的是要編譯需要 NASM， homebrew...</b:summary>
				<b:mainContent><p>Mozilla 最近發佈了 <a href="https://github.com/mozilla/mozjpeg">mozjpeg</a> 2.1，同時還有一篇 <a href="http://blog.mozilla.com.tw/posts/6084/using-mozjpeg-to-create-efficient-jpegs">用 mozjpeg 產生高效率的 JPEG</a> 教大家使用裡面的工具，所以我之前誤會以為現在只有 c lib 可以用，這篇文章有一些範例指令讓大家可以把 <code>cjpeg</code> 把圖片重新壓縮，小缺憾是安裝講的比較不清楚，所以我另外測試過，提供一下 Mac OSX 的指令：</p>

<pre><code>cd mozjpeg
autoreconf -fiv
mkdir build &amp;&amp; cd build
sh ../configure
make
sudo make install
</code></pre>

<p>關鍵的就是 <a href="https://github.com/mozilla/mozjpeg/blob/master/BUILDING.txt">BUILDING.txt</a> 沒說 <code>build</code> 目錄是要自己建立的，不過實際測試的效果要等週一才能測試看看，目前只有編譯過確定有指令工具可以用而已。</p>

<p>另外一個比較容易漏掉的是要編譯需要 <a href="https://github.com/mozilla/mozjpeg/blob/master/BUILDING.txt">NASM</a>， homebrew 可以直接 <code>brew install nasm</code> 。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000764" baseName="osx-ruby-193p392">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-10-24</b:date>
				<b:time>16:16:44</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>OSX 裝 ruby 1.9.3p392 編譯問題</b:title>
			<b:content>
				<b:summary>最近因故要在 Mac 上重新建立工作環境，結果在裝 ruby 時遇到 compile error，看起來也不是今天才有的問題，狀況是 clang 4.1 之後才開始有的，而 OSX 10.9 要用的 XCode 5.0.1 已經是 clang 5.0 了，所以不避開這個問題會無法在新的 OSX 上裝 Ruby，包括用其他 Ruby 管理工具也是一樣，像我其實就是用 rvm 要裝，還好有解法： CFLAGS=-Wno-error=shorten-64-to-32 rvm install ruby-1.9.3-p392...</b:summary>
				<b:mainContent><p>最近因故要在 Mac 上重新建立工作環境，結果在裝 ruby 時遇到 compile error，看起來也不是今天才有的<a href="https://github.com/sstephenson/ruby-build/issues/297">問題</a>，狀況是 clang 4.1 之後才開始有的，而 OSX 10.9 要用的 XCode 5.0.1 已經是 clang 5.0 了，所以不避開這個問題會無法在新的 OSX 上裝 Ruby，包括用其他 Ruby 管理工具也是一樣，像我其實就是用 rvm 要裝，還好有解法：</p>

<pre><code>CFLAGS=-Wno-error=shorten-64-to-32 rvm install ruby-1.9.3-p392
</code></pre>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000742" baseName="fasd-cli-booster">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-05-09</b:date>
				<b:time>21:12:45</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>fasd, 命令列加速工具</b:title>
			<b:content>
				<b:summary>以前曾經介紹過 autojump 這個很好用的快速切換目錄的指令，後來 大貓 跟我說有個叫 z 的，一樣用途，原理也差不多，不過 z 的位置比較好按些，最近在看 Vim Scripts 時，意外發現到有個 fasd，也是一樣的原理，不過他的功能比較強大，配合一些 alias 就可以做到和 z 或是 v 一樣的功能，作者對相關的領域很熟悉，對於常用 shell 的整合很好，像是 zsh 和 bash 的 指令補完 就都有支援，目前正在改用他，Mac 安裝很方便： brew install fasd 然後在 .bashrc 或是 .zshrc 加上 eval "$(fasd --init auto)"...</b:summary>
				<b:mainContent><p>以前曾經介紹過 <a href="https://blog.othree.net/log/2010/10/19/automjump/">autojump</a> 這個很好用的快速切換目錄的指令，後來 <a href="http://blog.miaout17.net">大貓</a> 跟我說有個叫 <a href="https://github.com/rupa/z">z</a> 的，一樣用途，原理也差不多，不過 z 的位置比較好按些，最近在看 <a href="http://www.vim.org/scripts/index.php">Vim Scripts</a> 時，意外發現到有個 <a href="https://github.com/clvv/fasd">fasd</a>，也是一樣的原理，不過他的功能比較強大，配合一些 alias 就可以做到和 <a href="https://github.com/rupa/z">z</a> 或是 <a href="https://github.com/rupa/v">v</a> 一樣的功能，作者對相關的領域很熟悉，對於常用 shell 的整合很好，像是 zsh 和 bash 的 <a href="http://zsh.sourceforge.net/Doc/Release/Completion-System.html">指令補完</a> 就都有支援，目前正在改用他，Mac 安裝很方便：</p>

<pre><code>brew install fasd
</code></pre>

<p>然後在 <code>.bashrc</code> 或是 <code>.zshrc</code> 加上</p>

<pre><code>eval "$(fasd --init auto)"
</code></pre>

<p>就可以了，其他環境有包好的就比較少了，可以看看他的 Wiki: <a href="https://github.com/clvv/fasd/wiki/Installing-via-Package-Managers">Installing via Package Managers</a>，其他的環境我測試過 Ubuntu 編譯安裝都很順利，基本上只是拷拷檔案而已。</p>

<p><a href="//www.flickr.com/photos/othree/8722512795/in/photostream" class="thumbnail">
  <img src="//farm8.staticflickr.com/7307/8722512795_57068f5c05_o.gif" width="804" height="483" alt="" />
</a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000700" baseName="build-v8">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-05-14</b:date>
				<b:time>23:51:22</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>Build v8</b:title>
			<b:content>
				<b:summary>平常是使用 Google V8 引擎的 command line 來做自己工作機的 js console，最主要的用途是跑 jslint，不過這需要自己來編譯，以前是用 scons 來編譯，剛剛想要編譯新版發現 Google 又換了自動化工具，從 scons 換成 gyp，安裝流程其實比較簡單，先安裝好 svn，然後執行： make dependencies make console=readline native 產生的 d8 執行檔會在 out/native/ 下面，官方說明有提到可以用 clang 編譯，不過我嘗試後會有錯誤，還在看要怎樣處理。...</b:summary>
				<b:mainContent><p>平常是使用 Google V8 引擎的 command line 來做自己工作機的 js console，最主要的用途是跑 jslint，不過這需要自己來編譯，<a href="http://blog.othree.net/log/2011/01/28/osx-v8-js-command/">以前</a>是用 scons 來編譯，剛剛想要編譯新版發現 Google 又換了自動化工具，從 <a href="http://www.scons.org/">scons</a> 換成 <a href="http://code.google.com/p/gyp/">gyp</a>，安裝流程其實比較簡單，先安裝好 svn，然後執行：</p>

<pre><code>make dependencies
make console=readline native
</code></pre>

<p>產生的 d8 執行檔會在 out/native/ 下面，官方說明有提到可以用 clang 編譯，不過我嘗試後會有錯誤，還在看要怎樣處理。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000647" baseName="automjump">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-19</b:date>
				<b:time>22:27:24</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>automjump</b:title>
			<b:content>
				<b:summary>今天發現的有趣的命令列工具 autojump ，它會記錄你常用的目錄位置，然後之後就可以用簡單的關鍵字跳到路徑符合關鍵字，又最常用的目錄，以我為例，我最近常常會跑到某個位置的 vim-plugins 目錄，然後我又沒有其它目錄名稱和 plugin 相似，那不論我在哪，我都可以執行下面的指令跳到 vim-plugins： j plugin 我目前使用上是都沒什麼大問題，不過 hlb 說他的 vim 檔名自動完成會爛掉，可能要在研究看看問題在哪了。...</b:summary>
				<b:mainContent><p>今天發現的有趣的命令列工具 <a href="http://github.com/joelthelion/autojump">autojump</a> ，它會記錄你常用的目錄位置，然後之後就可以用簡單的關鍵字跳到路徑符合關鍵字，又最常用的目錄，以我為例，我最近常常會跑到某個位置的 vim-plugins 目錄，然後我又沒有其它目錄名稱和 plugin 相似，那不論我在哪，我都可以執行下面的指令跳到 vim-plugins：</p>

<pre><code>j plugin
</code></pre>

<p>我目前使用上是都沒什麼大問題，不過 <a href="http://iamhlb.com">hlb</a> 說他的 vim 檔名自動完成會爛掉，可能要在研究看看問題在哪了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000630" baseName="colorful-man-page">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-03</b:date>
				<b:time>15:42:33</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>彩色 man page</b:title>
			<b:content>
				<b:summary>忘了哪裡看到的設定了，用的是 zsh # colorful man page export PAGER="`which less` -s" export BROWSER="$PAGER" export LESS_TERMCAP_mb=$'\E[38;5;167m' export LESS_TERMCAP_md=$'\E[38;5;39m' export LESS_TERMCAP_me=$'\E[38;5;231m' export LESS_TERMCAP_se=$'\E[38;5;231m' export LESS_TERMCAP_so=$'\E[38;5;167m' export LESS_TERMCAP_ue=$'\E[38;5;231m' export LESS_TERMCAP_us=$'\E[38;5;167m' 效果預覽： Mirror on gist...</b:summary>
				<b:mainContent><p>忘了哪裡看到的設定了，用的是 zsh</p>

<pre><code># colorful man page
export PAGER="`which less` -s"
export BROWSER="$PAGER"
export LESS_TERMCAP_mb=$'\E[38;5;167m'
export LESS_TERMCAP_md=$'\E[38;5;39m'
export LESS_TERMCAP_me=$'\E[38;5;231m'
export LESS_TERMCAP_se=$'\E[38;5;231m'
export LESS_TERMCAP_so=$'\E[38;5;167m'
export LESS_TERMCAP_ue=$'\E[38;5;231m'
export LESS_TERMCAP_us=$'\E[38;5;167m'
</code></pre>

<p>效果預覽：</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/5046170237/" title="colorful man page by othree, on Flickr"><img src="https://farm5.staticflickr.com/4087/5046170237_01e76043f9_b.jpg" width="917" height="635" alt="colorful man page" srcset="https://farm5.staticflickr.com/4087/5046170237_01e76043f9_b.jpg 1024w" /></a></p>

<ul>
<li><a href="http://gist.github.com/608425">Mirror on gist</a></li>
</ul>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
