<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>c</b:listType>
			<b:listData listID="unix">unix</b:listData>
		</b:entriesMeta>

		<b:entry entryID="000742" baseName="fasd-cli-booster">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-05-09</b:date>
				<b:time>21:12:45</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>fasd, 命令列加速工具</b:title>
			<b:content>
				<b:summary>以前曾經介紹過 autojump 這個很好用的快速切換目錄的指令，後來 大貓 跟我說有個叫 z 的，一樣用途，原理也差不多，不過 z 的位置比較好按些，最近在看 Vim Scripts 時，意外發現到有個 fasd，也是一樣的原理，不過他的功能比較強大，配合一些 alias 就可以做到和 z 或是 v 一樣的功能，作者對相關的領域很熟悉，對於常用 shell 的整合很好，像是 zsh 和 bash 的 指令補完 就都有支援，目前正在改用他，Mac 安裝很方便： brew install fasd 然後在 .bashrc 或是 .zshrc 加上 eval "$(fasd --init auto)"...</b:summary>
				<b:mainContent><p>以前曾經介紹過 <a href="https://blog.othree.net/log/2010/10/19/automjump/">autojump</a> 這個很好用的快速切換目錄的指令，後來 <a href="http://blog.miaout17.net">大貓</a> 跟我說有個叫 <a href="https://github.com/rupa/z">z</a> 的，一樣用途，原理也差不多，不過 z 的位置比較好按些，最近在看 <a href="http://www.vim.org/scripts/index.php">Vim Scripts</a> 時，意外發現到有個 <a href="https://github.com/clvv/fasd">fasd</a>，也是一樣的原理，不過他的功能比較強大，配合一些 alias 就可以做到和 <a href="https://github.com/rupa/z">z</a> 或是 <a href="https://github.com/rupa/v">v</a> 一樣的功能，作者對相關的領域很熟悉，對於常用 shell 的整合很好，像是 zsh 和 bash 的 <a href="http://zsh.sourceforge.net/Doc/Release/Completion-System.html">指令補完</a> 就都有支援，目前正在改用他，Mac 安裝很方便：</p>

<pre><code>brew install fasd
</code></pre>

<p>然後在 <code>.bashrc</code> 或是 <code>.zshrc</code> 加上</p>

<pre><code>eval "$(fasd --init auto)"
</code></pre>

<p>就可以了，其他環境有包好的就比較少了，可以看看他的 Wiki: <a href="https://github.com/clvv/fasd/wiki/Installing-via-Package-Managers">Installing via Package Managers</a>，其他的環境我測試過 Ubuntu 編譯安裝都很順利，基本上只是拷拷檔案而已。</p>

<p><a href="//www.flickr.com/photos/othree/8722512795/in/photostream" class="thumbnail">
  <img src="//farm8.staticflickr.com/7307/8722512795_57068f5c05_o.gif" width="804" height="483" alt="" />
</a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="2"></b:comments>


		</b:entry>

		<b:entry entryID="000700" baseName="build-v8">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-05-14</b:date>
				<b:time>23:51:22</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>Build v8</b:title>
			<b:content>
				<b:summary>平常是使用 Google V8 引擎的 command line 來做自己工作機的 js console，最主要的用途是跑 jslint，不過這需要自己來編譯，以前是用 scons 來編譯，剛剛想要編譯新版發現 Google 又換了自動化工具，從 scons 換成 gyp，安裝流程其實比較簡單，先安裝好 svn，然後執行： make dependencies make console=readline native 產生的 d8 執行檔會在 out/native/ 下面，官方說明有提到可以用 clang 編譯，不過我嘗試後會有錯誤，還在看要怎樣處理。...</b:summary>
				<b:mainContent><p>平常是使用 Google V8 引擎的 command line 來做自己工作機的 js console，最主要的用途是跑 jslint，不過這需要自己來編譯，<a href="http://blog.othree.net/log/2011/01/28/osx-v8-js-command/">以前</a>是用 scons 來編譯，剛剛想要編譯新版發現 Google 又換了自動化工具，從 <a href="http://www.scons.org/">scons</a> 換成 <a href="http://code.google.com/p/gyp/">gyp</a>，安裝流程其實比較簡單，先安裝好 svn，然後執行：</p>

<pre><code>make dependencies
make console=readline native
</code></pre>

<p>產生的 d8 執行檔會在 out/native/ 下面，官方說明有提到可以用 clang 編譯，不過我嘗試後會有錯誤，還在看要怎樣處理。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000647" baseName="automjump">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-19</b:date>
				<b:time>22:27:24</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>automjump</b:title>
			<b:content>
				<b:summary>今天發現的有趣的命令列工具 autojump ，它會記錄你常用的目錄位置，然後之後就可以用簡單的關鍵字跳到路徑符合關鍵字，又最常用的目錄，以我為例，我最近常常會跑到某個位置的 vim-plugins 目錄，然後我又沒有其它目錄名稱和 plugin 相似，那不論我在哪，我都可以執行下面的指令跳到 vim-plugins： j plugin 我目前使用上是都沒什麼大問題，不過 hlb 說他的 vim 檔名自動完成會爛掉，可能要在研究看看問題在哪了。...</b:summary>
				<b:mainContent><p>今天發現的有趣的命令列工具 <a href="http://github.com/joelthelion/autojump">autojump</a> ，它會記錄你常用的目錄位置，然後之後就可以用簡單的關鍵字跳到路徑符合關鍵字，又最常用的目錄，以我為例，我最近常常會跑到某個位置的 vim-plugins 目錄，然後我又沒有其它目錄名稱和 plugin 相似，那不論我在哪，我都可以執行下面的指令跳到 vim-plugins：</p>

<pre><code>j plugin
</code></pre>

<p>我目前使用上是都沒什麼大問題，不過 <a href="http://iamhlb.com">hlb</a> 說他的 vim 檔名自動完成會爛掉，可能要在研究看看問題在哪了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000630" baseName="colorful-man-page">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-03</b:date>
				<b:time>15:42:33</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>彩色 man page</b:title>
			<b:content>
				<b:summary>忘了哪裡看到的設定了，用的是 zsh # colorful man page export PAGER="`which less` -s" export BROWSER="$PAGER" export LESS_TERMCAP_mb=$'\E[38;5;167m' export LESS_TERMCAP_md=$'\E[38;5;39m' export LESS_TERMCAP_me=$'\E[38;5;231m' export LESS_TERMCAP_se=$'\E[38;5;231m' export LESS_TERMCAP_so=$'\E[38;5;167m' export LESS_TERMCAP_ue=$'\E[38;5;231m' export LESS_TERMCAP_us=$'\E[38;5;167m' 效果預覽： Mirror on gist...</b:summary>
				<b:mainContent><p>忘了哪裡看到的設定了，用的是 zsh</p>

<pre><code># colorful man page
export PAGER="`which less` -s"
export BROWSER="$PAGER"
export LESS_TERMCAP_mb=$'\E[38;5;167m'
export LESS_TERMCAP_md=$'\E[38;5;39m'
export LESS_TERMCAP_me=$'\E[38;5;231m'
export LESS_TERMCAP_se=$'\E[38;5;231m'
export LESS_TERMCAP_so=$'\E[38;5;167m'
export LESS_TERMCAP_ue=$'\E[38;5;231m'
export LESS_TERMCAP_us=$'\E[38;5;167m'
</code></pre>

<p>效果預覽：</p>

<p><a href="http://www.flickr.com/photos/othree/5046170237/" title="Flickr 上 othree 的 colorful man page"><img src="http://farm5.static.flickr.com/4087/5046170237_01e76043f9.jpg" width="500" height="346" alt="colorful man page" /></a></p>

<ul>
<li><a href="http://gist.github.com/608425">Mirror on gist</a></li>
</ul>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="3"></b:comments>


		</b:entry>

		<b:entry entryID="000629" baseName="commandline-install-dropbox">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-10-03</b:date>
				<b:time>11:28:51</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>命令列安裝 Dropbox</b:title>
			<b:content>
				<b:summary>剛剛試著在命令列安裝 Dropbox ，發現超簡單的，不過還是記錄一下，我安裝的流程是跟著 howto-install-dropbox-in-ubuntu 走的，不過我剛發現 官方的安裝說明 是沒說到要修改套件庫的來源檔，只要執行以下指令： sudo apt-get update;sudo apt-get upgrade nautilus-dropbox 如果有金鑰問題的話，加入套件庫金鑰的指令如下： sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 5044912E 接著如果有用 nautilus 的話要把相關的程序全部關掉 nautilus --quit 然後安裝 Dropbox daemon dropbox start -i 啟動 Dropbox dropbox start 第一次啟動會看到下面的說明和連結 To link this...</b:summary>
				<b:mainContent><p>剛剛試著在命令列安裝 <a href="https://www.dropbox.com/">Dropbox</a> ，發現超簡單的，不過還是記錄一下，我安裝的流程是跟著 <a href="http://www.ubuntugeek.com/howto-install-dropbox-in-ubuntu-9-10karmic9-04jaunty8-10intrepid8-04hardy.html">howto-install-dropbox-in-ubuntu</a> 走的，不過我剛發現 <a href="https://www.dropbox.com/downloading?os=lnx">官方的安裝說明</a> 是沒說到要修改套件庫的來源檔，只要執行以下指令：</p>

<pre><code>sudo apt-get update;sudo apt-get upgrade nautilus-dropbox
</code></pre>

<p>如果有金鑰問題的話，加入套件庫金鑰的指令如下：</p>

<pre><code> sudo apt-key adv --keyserver pgp.mit.edu --recv-keys 5044912E
</code></pre>

<p>接著如果有用 nautilus 的話要把相關的程序全部關掉</p>

<pre><code>nautilus --quit
</code></pre>

<p>然後安裝 Dropbox daemon</p>

<pre><code>dropbox start -i
</code></pre>

<p>啟動 Dropbox </p>

<pre><code>dropbox start
</code></pre>

<p>第一次啟動會看到下面的說明和連結</p>

<pre><code>To link this computer to a dropbox account, visit the following url:
https://www.dropbox.com/cli_link?host_id=01d51f8e353b4f9a45085***********
</code></pre>

<p>用瀏覽器開一下那個連結把帳號連結建立起來後就完成了，預設的目錄位置會在 ~/Dropbox 裡面，也可以執行 man dropbox 來看其它使用說明。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000618" baseName="easygit">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-04-03</b:date>
				<b:time>14:09:27</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>easygit</b:title>
			<b:content>
				<b:summary>前陣子為了找 tinymce 某個 bug 是在哪個 commit 產生的，用上了 easygit 因為照原來一直 revert 回去的作法實在弄到會吐血， easygit 可以這樣下命令： eg revert -since a326cfb0ff21c928fe69f9f18d62ece31b95c47e 這樣可以直接回去那個版本了，而不是只 revert 那個 commit 。...</b:summary>
				<b:mainContent><p>前陣子為了找 tinymce 某個 bug 是在哪個 commit 產生的，用上了 <a href="http://people.gnome.org/~newren/eg/">easygit</a> 因為照原來一直 revert 回去的作法實在弄到會吐血， easygit 可以這樣下命令：</p>



<pre><code>eg revert -since a326cfb0ff21c928fe69f9f18d62ece31b95c47e</code></pre>



<p>這樣可以直接回去那個版本了，而不是只 revert 那個 commit 。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="2"></b:comments>


		</b:entry>

		<b:entry entryID="000609" baseName="wq-post-bbs-article">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-01-07</b:date>
				<b:time>20:25:04</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>用 :wq 送出 BBS 文章</b:title>
			<b:content>
				<b:summary>因為在 BBS 想要用 :wq 發文章的次數不算少，剛剛就用 expect 弄起來了，只要加一行到 interact 裡面就可以： \033:wq\r { send \030; send &quot;\r&quot; } 實際操作是要 &lt;ESC&gt; :wq &lt;ENTER&gt; ，會直接把文章發表，如果不想跳過發文前的確認選單，那就把最後的 \r 拿掉。...</b:summary>
				<b:mainContent><p>因為在 <span class="caps">BBS </span>想要用 :wq 發文章的次數不算少，剛剛就用 expect 弄起來了，只要加一行到 interact 裡面就可以：</p>



<pre><code>\033:wq\r { send \030; send &quot;\r&quot; }</code></pre>



<p>實際操作是要 &lt;ESC&gt; :wq &lt;ENTER&gt; ，會直接把文章發表，如果不想跳過發文前的確認選單，那就把最後的 \r 拿掉。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000608" baseName="_screen_windows_terminal">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2010-01-05</b:date>
				<b:time>21:18:28</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>在 screen windows 裡開一個比較小的 terminal</b:title>
			<b:content>
				<b:summary>這真是超特殊的需求，不過今天還是弄出來了，花不少間走錯方向就是，會有這樣的需求是因為我同時要掛 BBS 和 IRC，BBS 的標準視窗大小是 80*24，但是這個大小對於 IRC 來說又太小了，好在現在很多 BBS 系統已經已經支援大於 80*24 的終端機了，但是有一個 bahamut 自從商業化後 BBS 系統就完全沒改進，不支援就算了，終端機大小只要不對，看文章往下卷頁時就會有錯誤排版產生，最常見就是按 下 ，本來應該是整個畫面移動一行，結果會變成只有最後一行被取代，而我現在是使用 100*35 的大小，本來是一直把這問題放著，不過今天總算解決了，其實解法很簡單，就是 screen 裡面再開一個 screen，用不同的設定檔案，裡面要拿來上 bahamut 那個的設定檔加上： width -d 80 24 重點在那個 -d 參數，本來一直在終端機的設定上跑來跑去，不是說沒辦法改大小，就是內部的終端機改大小會影響到外面的，版面就整個亂掉，不過 -d 是只改 display 的大小，不是終端機大小，本來的話是會所有的 screen 一起改，但是因為用兩層的關係，所以外面的不會受到影響。...</b:summary>
				<b:mainContent><p>這真是超特殊的需求，不過今天還是弄出來了，花不少間走錯方向就是，會有這樣的需求是因為我同時要掛 <span class="caps">BBS </span>和 <span class="caps">IRC</span>，BBS 的標準視窗大小是 80*24，但是這個大小對於 <span class="caps">IRC </span>來說又太小了，好在現在很多 <span class="caps">BBS </span>系統已經已經支援大於 80*24 的終端機了，但是有一個 <a href="http://www.gamer.com.tw/">bahamut</a> 自從商業化後 <span class="caps">BBS </span>系統就完全沒改進，不支援就算了，終端機大小只要不對，看文章往下卷頁時就會有錯誤排版產生，最常見就是按 <strong>下</strong> ，本來應該是整個畫面移動一行，結果會變成只有最後一行被取代，而我現在是使用 100*35 的大小，本來是一直把這問題放著，不過今天總算解決了，其實解法很簡單，就是 screen 裡面再開一個 screen，用不同的設定檔案，裡面要拿來上 bahamut 那個的設定檔加上：</p>



<pre><code>width -d 80 24</code></pre>



<p>重點在那個 <a href="http://www.gnu.org/software/screen/manual/screen.html#Window-Size">-d</a> 參數，本來一直在終端機的設定上跑來跑去，不是說沒辦法改大小，就是內部的終端機改大小會影響到外面的，版面就整個亂掉，不過 -d 是只改 display 的大小，不是終端機大小，本來的話是會所有的 screen 一起改，但是因為用兩層的關係，所以外面的不會受到影響。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000605" baseName="closure-compiler-osx">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2009-12-29</b:date>
				<b:time>23:16:50</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>closure-compiler on OSX</b:title>
			<b:content>
				<b:summary>Google 的 Closure Cmpiler 要 Java 1.6 ，蘋果雖然有提供 1.6 的 更新 ，不過在終端機下直接打 java 還是 1.5 版，至於 1.6 版則是放在 /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Commands/java 如果要跑 closure-compiler 建立shell script 時 java 執行檔要改用這個。...</b:summary>
				<b:mainContent><p>Google 的 <a href="http://code.google.com/intl/en/closure/compiler/">Closure Cmpiler</a> 要 Java 1.6 ，蘋果雖然有提供 1.6 的 <a href="http://www.apple.com/downloads/macosx/apple/application_updates/javaformacosx105update1.html">更新</a> ，不過在終端機下直接打 java 還是 1.5 版，至於 1.6 版則是放在</p>



<pre><code>/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Commands/java</code></pre>



<p>如果要跑 closure-compiler 建立shell script 時 java 執行檔要改用這個。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="2"></b:comments>


		</b:entry>

		<b:entry entryID="000602" baseName="spidermonkey-utf-8">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2009-12-27</b:date>
				<b:time>16:01:39</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>spidermonkey 的 UTF-8 支援</b:title>
			<b:content>
				<b:summary>JSLint 其實是用 javascript 寫的 javascript 語法檢查工具， jslint.vim 並沒有把它轉成 vim script ，而是呼叫 JS 引擎來跑 JSLint ，最好找的 JS 引擎就是 mozilla 的 spidermonkey ，很多 linux 有包好的套件，FreeBSD 也有 port ，不過實際上用的時候發現有個問題，就是不支援 UTF-8 字串，結果就是在 JSLint 的字元檢查時會把一些中文當成不安全字元，例如：「下」。 其實要 spidermonkey 支援 UTF-8 字串也不難，FreeBSD 的話在裝 port 時加個參數就可以了，OSX 的話把 MacPorts...</b:summary>
				<b:mainContent><p><a href="http://www.jslint.com/"><span class="caps">JSL</span>int</a> 其實是用 javascript 寫的 javascript 語法檢查工具， <a href="http://github.com/hallettj/jslint.vim">jslint.vim</a> 並沒有把它轉成 vim script ，而是呼叫 JS 引擎來跑 <span class="caps">JSL</span>int ，最好找的 JS 引擎就是 mozilla 的 <a href="http://www.mozilla.org/js/spidermonkey/">spidermonkey</a> ，很多 linux 有包好的套件，FreeBSD 也有 <a href="http://www.freebsd.org/cgi/cvsweb.cgi/ports/lang/spidermonkey/">port</a> ，不過實際上用的時候發現有個問題，就是不支援 <span class="caps">UTF</span>-8 字串，結果就是在 <span class="caps">JSL</span>int 的字元檢查時會把一些中文當成不安全字元，例如：「下」。</p>

<p>其實要 spidermonkey 支援 <span class="caps">UTF</span>-8 字串也不難，FreeBSD 的話在裝 port 時加個參數就可以了，OSX 的話把 <a href="http://www.macports.org/">MacPorts</a> 更新到新版的再裝就可以了，Linux 的話就沒辦法用套件安裝，要自己抓來編， 1.7 的話要去修改 Makefile 讓 <span class="caps">CFLAGS </span>加上 "-DJS_C_STRINGS_ARE_UTF8" 這個參數，或是參考 <a href="http://www.mongodb.org/display/DOCS/Building+Spider+Monkey">mongoDB</a> 的作法，如果是 1.8 版的話有內建支援，不用修改 makefile，但是以後要執行的 js 檔案裡面都要先呼叫 <a href="https://developer.mozilla.org/En/SpiderMonkey/JSAPI_Reference/JS_CStringsAreUTF8">JS_CStringsAreUTF8</a> 這個函式，以 jslint.vim 來說就要加到 ~/.vim/plugin/jslint/runjslint.js 這個檔案。</p>

<p>其實要解決 <span class="caps">UTF</span>-8 問題還有其他方法，就是換其他的 JS 引擎，像是 <a href="http://code.google.com/p/v8/">Google V8</a> ， 要用 V8 的話 <a href="http://code.google.com/apis/v8/build.html">編譯</a> 時要編 developer shell ，產生的執行檔檔名叫 <strong>d8</strong> ，弄個鏈結讓 <strong>js</strong> 這個指令可以執行就可以了，V8 直接支援 <span class="caps">UTF</span>-8 ，弄起來就可以用了，不用再去改其他東西，理論上速度應該也比較快吧，JSLint 都跑很快，無從比較XD。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

	</b:entries>
</b:blog>
