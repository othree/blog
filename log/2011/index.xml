<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>y</b:listType>
			<b:listData listID="2011">2011</b:listData>

			<b:previous>
				<b:mTitle>2010</b:mTitle>
				<b:mDate>2010</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>2012</b:mTitle>
				<b:mDate>2012</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000692" baseName="mnemosyne">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-10-20</b:date>
				<b:time>07:00:00</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>Mnemosyne</b:title>
			<b:content>
				<b:summary> 說起來我還真是喜歡買一堆有的沒的，房間一堆漫畫、又會買相機、出門看到包包也一直想買，有點像是女生永遠少一個包包一樣的症狀吧，而除了上面列舉的這些東西，其實還有文具也是我讓我會想花錢亂買的東西，像是省力平針釘書機、筆心會旋轉的自動筆、氣壓筆 ，或是進口的筆記本 RHODIA、Moleskine 等等，這兩年在誠品的推波助瀾之下，台灣要買到這些文具，尤其是這些進口筆記本實在是方便很多，雖然相較於其他一般筆記本來說單價實在非常之高，不過還是信者眾多，誠品也樂的不斷引進各種廠牌的筆記本，真是可謂一個願打一個願挨，當然我是後者就是。 前兩天不小心走到信義誠品，然後又不小心走到樓上的風格文具館，下場就是買了四樣東西，花了數百塊，包括 OLFA 的 Limited Series 美工刀 Ltd-01 和黑刃刀片，一個鈔票夾，還有最後一樣就是 maruman 的 Mnemosyne 筆記本（日本官網），這系列的筆記本我以前沒接觸過，那天才第一次看到，宣傳版上強調書寫時的滑順，然後有給人試寫，試了一下真的很不錯，又是日本製的，就買了一本小本的 Root 方格筆記本，回來查了一下才發現其實這系列筆記本來頭還不小。 Mnemosyne 是希臘神話中的專司記憶的女神，從這層含意上來看，這名字用來當筆記本的名字其實蠻適合的，而且不太好記XD，我寫這篇文章寫到這打了 n 次還是記不起來，生產的 maruman 是一間 90 年的老公司了，Mnemosyne 則是 2009 年的日本文具大賞的得獎產品，也是電視冠軍文具王高畑正幸的愛用產品。這系列筆記本在設計的時候是以社會人士的筆記本為出發點來設計，相較於學生用筆記本是操寫老師的筆記，資訊都是已經整理好的，這些筆記本則是用來進行創意發想，雜亂的會議記錄等等，著重在筆記的自由度上，不過你如果問我這些細微的差異真的有差嘛？我其實也不能回答你，因為一來我還沒開始用，二來日本人這方面很龜毛，應該是真的有研究吧，像是有名的 1101 手帳，上市十年，它的方格尺寸就調整了三次，從一開始的 3mm ，2003 改成 4mm ， 2009 改成 3.45mm...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6260795917/" title="Flickr 上 othree 的 Mnemosyne"><img src="http://farm7.static.flickr.com/6154/6260795917_b8bd35168e.jpg" width="500" height="333" alt="Mnemosyne"/></a></p>

<p>說起來我還真是喜歡買一堆有的沒的，房間一堆漫畫、又會買相機、出門看到包包也一直想買，有點像是女生永遠少一個包包一樣的症狀吧，而除了上面列舉的這些東西，其實還有文具也是我讓我會想花錢亂買的東西，像是<a href="http://wis.max-ltd.co.jp/op/product_catalog.html?product_code=HD90474">省力平針釘書機</a>、<a href="http://www.mpuni.co.jp/product/category/sharp_pen/kurutoga/">筆心會旋轉的自動筆</a>、<a href="http://www.tombow.com/products/airpress/index.html">氣壓筆</a> ，或是進口的筆記本 <a href="http://rhodiapads.com/">RHODIA</a>、<a href="http://blog.eslite.com/mainstore_libraire/110">Moleskine</a> 等等，這兩年在誠品的推波助瀾之下，台灣要買到這些文具，尤其是這些進口筆記本實在是方便很多，雖然相較於其他一般筆記本來說單價實在非常之高，不過還是信者眾多，誠品也樂的不斷引進各種廠牌的筆記本，真是可謂一個願打一個願挨，當然我是後者就是。</p>

<p>前兩天不小心走到信義誠品，然後又不小心走到樓上的風格文具館，下場就是買了四樣東西，花了數百塊，包括 OLFA 的 Limited Series 美工刀 <a href="http://www.olfa.co.jp/ja/products/series/limited/limited.html">Ltd-01</a> 和黑刃刀片，一個鈔票夾，還有最後一樣就是 <a href="http://www.e-maruman.co.jp/chinese/index.html">maruman</a> 的 <a href="http://www.e-maruman.co.jp/chinese/products/notebook/mnysn/">Mnemosyne 筆記本</a>（<a href="http://www.mnemosyne-japan.com/">日本官網</a>），這系列的筆記本我以前沒接觸過，那天才第一次看到，宣傳版上強調書寫時的滑順，然後有給人試寫，試了一下真的很不錯，又是日本製的，就買了一本小本的 Root 方格筆記本，回來查了一下才發現其實這系列筆記本來頭還不小。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6258253268/" title="Flickr 上 othree 的 Mnemosyne"><img src="http://farm7.static.flickr.com/6044/6258253268_a134a866a7.jpg" width="500" height="333" alt="Mnemosyne" /></a></p>

<p><a href="http://zh.wikipedia.org/wiki/%E8%B0%9F%E6%B6%85%E6%91%A9%E5%8F%99%E6%B6%85">Mnemosyne</a> 是希臘神話中的專司記憶的女神，從這層含意上來看，這名字用來當筆記本的名字其實蠻適合的，而且不太好記XD，我寫這篇文章寫到這打了 n 次還是記不起來，生產的 maruman 是一間 90 年的老公司了，Mnemosyne 則是 <a href="http://www.stationeria.com/2010/06/03518.html">2009 年的日本文具大賞的得獎產品</a>，也是電視冠軍文具王高畑正幸的愛用產品。這系列筆記本在設計的時候是以社會人士的筆記本為出發點來設計，相較於學生用筆記本是操寫老師的筆記，資訊都是已經整理好的，這些筆記本則是用來進行創意發想，雜亂的會議記錄等等，著重在筆記的自由度上，不過你如果問我這些細微的差異真的有差嘛？我其實也不能回答你，因為一來我還沒開始用，二來日本人這方面很龜毛，應該是真的有研究吧，像是有名的 <a href="http://www.1101.com/store/techo/index.html">1101 手帳</a>，上市十年，它的方格尺寸就調整了三次，從一開始的 3mm ，2003 改成 4mm ， 2009 改成 3.45mm 到 2010 改成 3.7mm ，這麼細微的差異不說可能很多人還不會注意，尤其是最近一次改只差了 0.25mm 而已，而看看其它廠商出的筆記本，清一色都是 5mm 方格，但是日本人就是會對這細節一再調整，實際拿起來看過，我確實是喜歡 3.7mm 方格更甚於 5mm 方格，格子小一點感覺畫東西時可以控制的比較精緻，哈，不過這只是我幻想而已，畢竟 1101 手帳是日記帳，對於我這種沒耐心的人絕對是不適用的。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6258253246/" title="Flickr 上 othree 的 Mnemosyne"><img src="http://farm7.static.flickr.com/6216/6258253246_4fd3bdd3fc.jpg" width="500" height="333" alt="Mnemosyne"/></a></p>

<p>Mnemosyne 畢竟是蠻貴的，不是每個人都花的下幾百塊錢買筆記本，不過還好，無印良品有出一款 <a href="http://www.muji.tw/mujilife/stationery/note.aspx#sec4">滑順筆記本</a>，標榜使用的是高級紙（上質紙），外觀和紙的觸感幾乎都和 Mnemosyne 一樣，而且根據可靠 <a href="http://www.stationeria.com/2011/08/110-1.html">情報</a>，其實這款筆記本就是 Mnemosyne，當然價格便宜許多，差在開數和樣式的選擇沒這麼豐富而已，而且這系列筆記本台灣也有賣了，不只店面有，<a href="http://search.books.com.tw/exep/prod_search.php?cat=all&amp;key=muji+%E6%BB%91%E9%A0%86+%E7%AD%86%E8%A8%98%E6%9C%AC">博客來</a>都買的到，如果真的買不下手又想試試看的，無印良品這系列也是可以考慮看看，只是消息來源是覺得兩者還是有差就是了。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6258253220/" title="Flickr 上 othree 的 Mnemosyne"><img src="http://farm7.static.flickr.com/6162/6258253220_bf5280c92d.jpg" width="333" height="500" alt="Mnemosyne"/></a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000691" baseName="vim-plugin-deployment">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-10-12</b:date>
				<b:time>02:16:23</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Vim Plugin Deployment</b:title>
			<b:content>
				<b:summary> /* A_A */ Vim-Taiwan 第一次聚會我的分享題目：「Vim Plugin Deployment」，內容是在介紹怎樣發佈自己寫的 Vim Plugin，不是 Plugin Developer 才需要知道的東西，不論是偶爾會修改別人的 plugin，抑或是會在 vimrc 裡面寫 function 的人都可以了解一下的。...</b:summary>
				<b:mainContent><p>
<script async="async" class="speakerdeck-embed" data-id="4e9480b51c29c60051017171" data-ratio="1.3333333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</p>

<p><a href="https://groups.google.com/forum/?hl=zh-TW_US#!forum/vim-taiwan">Vim-Taiwan</a> 第一次聚會我的分享題目：「Vim Plugin Deployment」，內容是在介紹怎樣發佈自己寫的 Vim Plugin，不是 Plugin Developer 才需要知道的東西，不論是偶爾會修改別人的 plugin，抑或是會在 vimrc 裡面寫 function 的人都可以了解一下的。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

		<b:entry entryID="000690" baseName="steve-jobs">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-10-06</b:date>
				<b:time>23:39:41</b:time>
			</b:datetime>
			<b:category>mac</b:category>
			<b:title>Steve Jobs</b:title>
			<b:content>
				<b:summary> Steve Jobs 過世已經不讓我意外了，我倒是蠻意外我真的因為這個消息受影響而有些失落，甚至連我媽從沒用過蘋果產品的人也覺得惋惜，這也可以看到他對於世界到底有怎樣的影響力。我是從研究所時期開始使用蘋果的產品的，從末代的前一代 iBook 小白用起，後來換到初代鋁磚 MacBook，同時還有用 iPod 、iPad 等，也跟了好幾年在半夜看發表會，到今天我還可以稍微回想起那 "One More Thing" 的魔力，一群長輩邊開 IRC 邊閒聊邊關注新訊息也是非常快樂的經驗，蘋果這幾年從 iPod 開始， iTunes、iPhone、iPad，回到 OSX 再到 iCloud，整個發展的歷程看下來其實非常可怕，從硬體、軟體、內容到更進一步的雲端服務，整個都包了下來，某天晚上我拿著 iPad 躺在床上使用時，我突然有一個念頭：「這東西大概是科幻小說中才會出現的吧。」如果10年前有人跟我描述 iPad 這個產品，說會有這麼薄，只要用手指就可以控制，還有這麼多功能的設備，我只會認為那是小說或電影裡面的東西，不過 Steve Jobs 帶領的蘋果就是把這樣一個產品做了出來，而且 iPad 發表時，沒人看好，我看發表會時也不覺的怎樣，但是結果非常的出乎意料，大賣到不行，而且也是我唯一有買的 iOS 裝置，這讓我想起 Twitter 創辦人 Biz Stone 說過一句話來形容 Twitter：「It's the...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6217617800/" title="Flickr 上 othree 的 Apple"><img src="http://farm7.static.flickr.com/6170/6217617800_b887b2a496.jpg" width="500" height="343" alt="Apple" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6217617806/" title="Flickr 上 othree 的 Google"><img src="http://farm7.static.flickr.com/6217/6217617806_00d6b45e31.jpg" width="500" height="343" alt="Google" /></a></p>

<p>Steve Jobs 過世已經不讓我意外了，我倒是蠻意外我真的因為這個消息受影響而有些失落，甚至連我媽從沒用過蘋果產品的人也覺得惋惜，這也可以看到他對於世界到底有怎樣的影響力。我是從研究所時期開始使用蘋果的產品的，從末代的前一代 iBook 小白用起，後來換到初代鋁磚 MacBook，同時還有用 iPod 、iPad 等，也跟了好幾年在半夜看發表會，到今天我還可以稍微回想起那 "One More Thing" 的魔力，一群長輩邊開 IRC 邊閒聊邊關注新訊息也是非常快樂的經驗，蘋果這幾年從 iPod 開始， iTunes、iPhone、iPad，回到 OSX 再到 iCloud，整個發展的歷程看下來其實非常可怕，從硬體、軟體、內容到更進一步的雲端服務，整個都包了下來，某天晚上我拿著 iPad 躺在床上使用時，我突然有一個念頭：「這東西大概是科幻小說中才會出現的吧。」如果10年前有人跟我描述 iPad 這個產品，說會有這麼薄，只要用手指就可以控制，還有這麼多功能的設備，我只會認為那是小說或電影裡面的東西，不過 Steve Jobs 帶領的蘋果就是把這樣一個產品做了出來，而且 iPad 發表時，沒人看好，我看發表會時也不覺的怎樣，但是結果非常的出乎意料，大賣到不行，而且也是我唯一有買的 iOS 裝置，這讓我想起 Twitter 創辦人 Biz Stone 說過一句話來形容 Twitter：「It's the messaging system that we didn't know we needed until we had it」，同樣的話，我覺得拿來形容 iPad 也很貼切，唯一不同的是，Steve Jobs 知道人們會需要 iPad，他把它做了出來，改變了人們的生活方式，同樣由他創造出來，改變了世界的產品還有 Apple II 和 iPhone，甚至連賣的不太好的 NeXT 都間接讓現在的網際網路成形，或許他腦袋中還有其它可以改變世界的東西，只可惜我們已經看不到了，或許我也是因此而感到失落的吧。</p>

<p>最後就引述紐約市長彭博的<a href="http://www.mikebloomberg.com/index.cfm?objectid=D6B0FDDF-C29C-7CA2-FB86D55317402D79">悼詞</a>作結（<a href="http://tech.ifeng.com/it/special/jobsdie/content-2/detail_2011_10/06/9659513_0.shtml">翻譯來源</a>）：</p>

<blockquote>
  <p>今夜，美國失去了一位天才。賈伯斯的名字將與愛迪生和愛因斯坦一同被銘記。他們的理念改變世界，影響數代人。過去40年，賈伯斯一次次預見到未來，並在多數人遠未洞察之前就將設想付諸實際。賈伯斯才識和力量改變文明。我們每個人都受益於此。</p>
</blockquote>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

		<b:entry entryID="000689" baseName="bitbucket-rocks-with-git">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-10-04</b:date>
				<b:time>01:43:44</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>BitBucket 支援 Git</b:title>
			<b:content>
				<b:summary> 剛剛看到的 消息，BitBucket 開始支援 Git 了，實在是非常讓人振奮，因為 BitBucket 免費帳號就可以有無限量的私人專案了，以前是受限於只支援 hg ，所以很少真的到 BitBucket 來開專案，不過今天這項更新過後，我覺得 Github 應該會受到不小的威脅，像是我自己雖然是會被 Github Pages 和 Markdown 留住，不過真的需要開私人專案的時候，大概還是不會付錢給 Github 而去 BitBucket 開吧。...</b:summary>
				<b:mainContent><p><a href="http://www.flickr.com/photos/othree/6208421062/" title="Flickr 上 othree 的 BitBucket-800x800"><img src="http://farm7.static.flickr.com/6019/6208421062_9ac6d694e4_m.jpg" width="240" height="240" alt="BitBucket-800x800" /></a></p>

<p>剛剛看到的 <a href="http://blog.bitbucket.org/2011/10/03/bitbucket-now-rocks-git/">消息</a>，<a href="https://bitbucket.org/">BitBucket</a> 開始支援 Git 了，實在是非常讓人振奮，因為 BitBucket 免費帳號就可以有無限量的私人專案了，以前是受限於只支援 <a href="http://mercurial.selenic.com/">hg</a> ，所以很少真的到 BitBucket 來開專案，不過今天這項更新過後，我覺得 Github 應該會受到不小的威脅，像是我自己雖然是會被 <a href="http://pages.github.com/">Github Pages</a> 和 <a href="http://github.github.com/github-flavored-markdown/">Markdown</a> 留住，不過真的需要開私人專案的時候，大概還是不會付錢給 Github 而去 BitBucket 開吧。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000688" baseName="wai-aria-is-more-than-acc">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-08-26</b:date>
				<b:time>01:28:35</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>WAI-ARIA is More Than Accessibility</b:title>
			<b:content>
				<b:summary> /* A_A */ 這次 COSCUP 分享題目的投影片，授權一樣是 CC-BY，有沒有講者心得就看天了。...</b:summary>
				<b:mainContent><p>
<script async="async" class="speakerdeck-embed" data-id="4e8134522d853c00600030bd" data-ratio="1.3333333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</p>

<p>這次 COSCUP 分享題目的投影片，授權一樣是 CC-BY，有沒有講者心得就看天了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000687" baseName="getelementbyid-not-on-element">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-07-31</b:date>
				<b:time>11:46:54</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>getElementById </b:title>
			<b:content>
				<b:summary>前陣子才注意到的問題，顯然都被 JavaScript library 慣壞了，就是 getElementById 這個函式其實只有 document 物件 才有，element 物件 是沒有的，因為一份文件中，每個 id 都必須要是唯一的。而如果是用 jQuery 想要找某個節點下面的某 id，直接用 find，根本也不太會注意這個問題，最近我比較常接觸的 mootools 還直接實作了 element 的 getElementById 函式，不過問題就來了，它的實作其實還是去用 document 的 getElementById （因為 id 唯一），但是我去給他找的目標 element ，其實是動態產生，還沒有放進 document 的節點，所以它的實作方法就會找不到我要的目標。 於是我改用 jQuery ，更精確的一點說我是用 Sizzle，結果我發現用 find 狀況依舊，因為 Sizzle...</b:summary>
				<b:mainContent><p>前陣子才注意到的問題，顯然都被 JavaScript library 慣壞了，就是 <a href="https://developer.mozilla.org/en/DOM/document.getElementById">getElementById</a> 這個函式其實只有 <a href="https://developer.mozilla.org/en/DOM/document#Methods">document 物件</a> 才有，<a href="https://developer.mozilla.org/en/DOM/element#Methods">element 物件</a> 是沒有的，因為一份文件中，每個 id 都必須要是唯一的。而如果是用 jQuery 想要找某個節點下面的某 id，直接用 find，根本也不太會注意這個問題，最近我比較常接觸的 <a href="http://mootools.net/">mootools</a> 還直接實作了 element 的 getElementById 函式，不過問題就來了，它的實作其實還是去用 document 的 getElementById （因為 id 唯一），但是我去給他找的目標 element ，其實是動態產生，還沒有放進 document 的節點，所以它的實作方法就會找不到我要的目標。</p>

<p>於是我改用 <a href="http://jquery.com/">jQuery</a> ，更精確的一點說我是用 <a href="http://sizzlejs.com/">Sizzle</a>，結果我發現用 find 狀況依舊，因為 Sizzle 引擎有對選擇器做一些最佳化，如果看到是 <code>"#id"</code> 這樣的形式，就會直接用 <code>document.getElementById()</code> ，然後就悲劇重演了～</p>

<p>結果目前這種狀況我是只能先用 <code>*#id</code> 這樣的寫法來給 Sizzle 處理，應該會去報 jQuery 和 mootools 的 bug。這問題我也有在 W3C <a href="http://www.w3.org/html/ig/zh/">中文興趣小組</a>的討論群組裡面 <a href="http://lists.w3.org/Archives/Public/public-html-ig-zh/2011Jul/0030.html">提出</a>，目前還沒空回文，有興趣的可以一起來參與討論啊。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000686" baseName="vundle">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-06-05</b:date>
				<b:time>08:14:33</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Vundle, Bundler for Vim</b:title>
			<b:content>
				<b:summary>Vim 雖然本身功能就很強大，但是要讓它好用，支援更多的功能，那不可缺少的就是安裝外掛 (plugin) 了，不過 Vim 的外掛安裝和尋找本身對新手來說就是一道不小的門檻，Vim 自己的網站雖然有 scripts 這塊讓人上傳外掛的地方，不過基本上不太好用，所以有些開發者不會把東西丟到這，取而代之的，這幾年最主流的方式反而是用 github 來放 Vim 外掛，然後配上 pathogen 來安裝和管理，不但讓外掛安裝時互相不干擾，用 git 管理的外掛也可以直接更新，要反安裝也不用怕不乾淨，和以前壓縮檔、Vimball 時期比起來真的是好太多了。 gmarik 受到 pathogen 和 Ruby 的 bundler 的啟發，開發了 Vundle 這個 Vim 外掛，除了可以像 pathogen 那樣把外掛分到不同目錄管理，更厲害的是你可以很簡單的新增要安裝的外掛，然後透過指令簡單的安裝和更新。 set rtp+=~/.vim/bundle/vundle/ call vundle#rc() " let Vundle manage...</b:summary>
				<b:mainContent><p><a href="http://www.vim.org/">Vim</a> 雖然本身功能就很強大，但是要讓它好用，支援更多的功能，那不可缺少的就是安裝外掛 (plugin) 了，不過 Vim 的外掛安裝和尋找本身對新手來說就是一道不小的門檻，Vim 自己的網站雖然有 <a href="http://www.vim.org/scripts/index.php">scripts</a> 這塊讓人上傳外掛的地方，不過基本上不太好用，所以有些開發者不會把東西丟到這，取而代之的，這幾年最主流的方式反而是用 <a href="https://github.com">github</a> 來放 Vim 外掛，然後配上 <a href="http://www.vim.org/scripts/script.php?script_id=2332">pathogen</a> 來安裝和管理，不但讓外掛安裝時互相不干擾，用 git 管理的外掛也可以直接更新，要反安裝也不用怕不乾淨，和以前壓縮檔、<a href="http://www.vim.org/scripts/script.php?script_id=1502">Vimball</a> 時期比起來真的是好太多了。</p>

<p><a href="http://gmarik.info">gmarik</a> 受到 pathogen 和 Ruby 的 <a href="http://gembundler.com/">bundler</a> 的啟發，開發了 <a href="https://github.com/gmarik/vundle">Vundle</a> 這個 Vim 外掛，除了可以像 pathogen 那樣把外掛分到不同目錄管理，更厲害的是你可以很簡單的新增要安裝的外掛，然後透過指令簡單的安裝和更新。</p>

<pre><code>set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'

Bundle 'YankRing.vim'
Bundle 'VisIncr'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-surround'
Bundle 'Align'
Bundle 'othree/eregex.vim'
Bundle 'mru.vim'
Bundle 'sjl/gundo.vim'

filetype plugin indent on
</code></pre>

<p>節錄一段我現在的 <a href="https://github.com/othree/rc/blob/master/home/.vimrc">.vimrc</a> 設定，要新增外掛，就只要加上一行，然後進入 Vim 執行 <code>:BundleInstall</code> ，如果要更新就是 <code>:BundleInstall!</code> ，非常簡單，Bundle 支援的參數有三種，第一種是直接一個普通字串，會去找 Vim Script 裡面的外掛，第二種是中間有個 <code>/</code> 的，前面是 github 帳號，後面則是他的 Vim 外掛專案路徑，其實也就是 github 專案頁面路徑的後面那段，第三種就是 git repository 的位置了，基本上這樣就很夠用了，如果有遇到外掛沒有上述三種地方可以裝，或是想要自己修改的話怎麼辦？</p>

<p>舉例來說， <a href="https://github.com/hallettj/jslint.vim">jslint.vim</a> 我就自己改成用 Douglas Crockford 的 <a href="https://github.com/douglascrockford/JSLint">JSLint repo</a> 下的最新版 jslint.js ，這種情形，我會自己 <a href="https://github.com/othree/jslint.vim">fork 一份 jslint.vim</a> 下來修改，然後安裝就裝自己的那份。使用 Vundle 之後，把 plugin 裝回來的過程比以前要簡單上數百倍，所以只要備份 .vimrc 就可以了，整個 <a href="https://github.com/othree/rc/tree/master/home">目錄</a> 看起來清爽太多了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

		<b:entry entryID="000685" baseName="html5">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-05-27</b:date>
				<b:time>05:29:46</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>HTML5 盾牌</b:title>
			<b:content>
				<b:summary></b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5763109772/" title="Flickr 上 othree 的 ThinkGeek HTML5 T-Shirt"><img src="http://farm3.static.flickr.com/2646/5763109772_38521c684a.jpg" width="375" height="500" alt="P5260203" /></a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="2"></b:comments>


		</b:entry>

		<b:entry entryID="000682" baseName="front-end-coding-styles">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-05-14</b:date>
				<b:time>01:14:43</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Front End Coding Style</b:title>
			<b:content>
				<b:summary>前陣子收集整理了一些和前端相關的 Coding Style 和 Guideline，整理一下放上來。 首先是 Google 的 JavaScript Coding Style，我很推薦這份規範，裡面的規範數量不少，我覺得其他幾份比較缺乏的變數命名原則在這份規範內就可以找到，更棒的是每條都有詳細的解釋，如果有想要訂規範又不想花太多時間人力來訂的話，我是建議可以直接拿 Google 的這份來用。 第二份是 jQuery 核心開發用的 jQuery Core Style Guideline ，因為已經有了 Google 的那份規範，這份我覺得就看過就好，其實 JavaScript 的一些開發準則都大同小異，這份規範涵蓋的內容比起 Google 的，要小上不少，比較特別的是有要求程式碼要能通過 JSLint 的檢查，JSLint 是我蠻喜歡的檢查工具，雖然檢查的項目很多很煩，不過所有的檢查項目都是有原因的。講到 jQuery 的 Core Style Guideline 就一定要提一下 #8926 這個 Issue，有人提報說 jQuery...</b:summary>
				<b:mainContent><p>前陣子收集整理了一些和前端相關的 Coding Style 和 Guideline，整理一下放上來。</p>

<p>首先是 Google 的 <a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml">JavaScript Coding Style</a>，我很推薦這份規範，裡面的規範數量不少，我覺得其他幾份比較缺乏的變數命名原則在這份規範內就可以找到，更棒的是每條都有詳細的解釋，如果有想要訂規範又不想花太多時間人力來訂的話，我是建議可以直接拿 Google 的這份來用。</p>

<p>第二份是 jQuery 核心開發用的 <a href="http://docs.jquery.com/JQuery_Core_Style_Guidelines">jQuery Core Style Guideline</a> ，因為已經有了 Google 的那份規範，這份我覺得就看過就好，其實 JavaScript 的一些開發準則都大同小異，這份規範涵蓋的內容比起 Google 的，要小上不少，比較特別的是有要求程式碼要能通過 <a href="http://www.jslint.com/">JSLint</a> 的檢查，JSLint 是我蠻喜歡的檢查工具，雖然檢查的項目很多很煩，不過所有的檢查項目都是有原因的。講到 jQuery 的 Core Style Guideline 就一定要提一下 <a href="http://bugs.jquery.com/ticket/8926">#8926</a> 這個 Issue，有人提報說 jQuery 送的活動紀念 T-shirt 上面印的程式碼沒有符合 Core Style Guideline，而且還是 blocker 等級的 issue :P。</p>

<p>接下來幾份規範文件就不是單純只針對 JavaScript 的了。首先是 <a href="http://www.isobar.com/">isobar</a> 的 <a href="http://na.isobar.com/standards/">Code Standard</a> ，這份文件其實很全面，不只是 HTML、JavaScript、CSS 而已，還有親和力、效率、SEO 等等的建議和規範，甚至還有推薦的工具，而且文件有持續在更新，內容相當充實，現在看到的版本就比我當初看到的時候多了不少內容。</p>

<p>然後是 Mozilla 的 <a href="https://wiki.mozilla.org/WebDev:FrontendCodeStandards">Frontend Code Standard</a>， Mozilla 因為組織目標的關係，所以有些部分比較有趣，大方向就是朝著推廣和自由的方向前進，所以有規定像是不同 OS 不同瀏覽器的支援程度，所有專案的網站都要有多國語言支援，甚至是右到左書寫的文字也要顧到等等，有一些比較像是網站需求而不是規範性質的內容混在裡面，以前看的時候好像還有規定影音檔案也不能用商業的格式。除了這份文件外，Mozilla 另外還有一份 <a href="https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines">Securing Code Guideline</a> ，整篇都是安全性相關的東西，有興趣的可以看看。</p>

<p>這些程式寫作規範除了有由公司或組織發表外，也是有以個人為單位發表的，<a href="http://taitems.tumblr.com/">Tait Brown</a> 最近就發表了一份 <a href="http://taitems.github.com/Front-End-Development-Guidelines/">Front End Development Guidelines</a>，這份規範的內容就比較單純在 HTML、JavaScript、CSS 這三塊，內容我大概看過覺得還不錯，而且也不會太長，很適合新手使用。另外還有一份也很適合新手看的，也是放在 <a href="https://github.com/">Github</a> 上的教學文件，是由 Ivo Wetzel 和 Zhang Yi Jiang 做的 <a href="http://bonsaiden.github.com/JavaScript-Garden/">JavaScript Garden</a> ，不過這份算是教學文件，而不是規範性質的文件。</p>

<p>其它的，還有一份是 Drupal 的 <a href="http://drupal.org/node/172169">JavaScript Coding Standards</a> 比較沒什麼特色就不另外介紹，Dojo 的則只能在 archive.org 裡面挖。國內的話相關資源就很少了，目前我只知道有 JosephJ 提供他在 D-Link 那邊建立的 <a href="http://josephj.com/entry.php?id=337">前端開發規範</a> ，如果還有其他人知道國內有哪裡有類似的資源有公開的話，還請不吝告知。</p>

<p>文章最後要介紹的是大師推薦的 Coding Style 參考資料，首先是 <a href="https://twitter.com/#!/gugod">gugod</a> 大師，據說他在今年 OSDC 推薦的是 <a href="http://www.amazon.com/Elements-Programming-Style-Brian-Kernighan/dp/0070342075/">The Elements of Programming Style</a> ，是本 1978 年出版的書，當然內容應該就如書名一樣，不過我還沒時間看就是。另外一位大師就更厲害了，<a href="http://www.crockford.com/">Douglas Crockford</a> 在他的 <a href="http://javascript.crockford.com/style1.html">The Elements of JavaScript Style</a> (<a href="http://javascript.crockford.com/style2.html">Part 2</a>) 提到了 <a href="http://www.crockford.com/wrrrld/style.html">The Element of Style</a> 這本 1918 年出版的英文寫作經典，要從文章寫作去連接到程式的編寫風格，我還真是到不了這層高度啊～～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000684" baseName="jquery-161">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-05-13</b:date>
				<b:time>12:08:01</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>jQuery 1.6.1</b:title>
			<b:content>
				<b:summary>jQuery 1.6.1 釋出了，主要的修改就是讓我前一篇提到的 attr() 可以像下相容，如果本來因為 attr() 變動的關係不敢升上 1.6 的話，現在可以試試看 1.6.1 。...</b:summary>
				<b:mainContent><p><a href="http://blog.jquery.com/2011/05/12/jquery-1-6-1-released/">jQuery 1.6.1 釋出</a>了，主要的修改就是讓我前一篇提到的 attr() 可以像下相容，如果本來因為 attr() 變動的關係不敢升上 1.6 的話，現在可以試試看 1.6.1 。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000683" baseName="jquery-16">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-05-07</b:date>
				<b:time>11:33:24</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>jQuery 1.6</b:title>
			<b:content>
				<b:summary>jQuery 1.6 前兩天剛出來，改變不少，其中我覺得影響最大的就是 attr() 和 prop() 這兩個東西了，attr 變成完全是依照 HTML 原始碼的內容回傳東西，所以像是 checkbox 標籤的 checked 屬性： &lt;input type="checkbox" checked&gt; 以前用 attr 會傳回 true，但是現在會傳回空字串，因為他沒有設定內容，如果要向以前一樣使用，變成要改用 prop 來純取屬性了，我用 jsFiddle 作了個簡單範例給大家看看： 順便趁機問問大家意見，attribute 和 properties 同時出現時，中文翻譯要怎樣區別呢？...</b:summary>
				<b:mainContent><p><a href="http://blog.jquery.com/2011/05/03/jquery-16-released/">jQuery 1.6</a> 前兩天剛出來，改變不少，其中我覺得影響最大的就是 <a href="http://api.jquery.com/attr/">attr()</a> 和 <a href="http://api.jquery.com/prop/">prop()</a> 這兩個東西了，attr 變成完全是依照 HTML 原始碼的內容回傳東西，所以像是 checkbox 標籤的 checked 屬性：</p>

<pre><code>&lt;input type="checkbox" checked&gt;
</code></pre>

<p>以前用 attr 會傳回 true，但是現在會傳回空字串，因為他沒有設定內容，如果要向以前一樣使用，變成要改用 prop 來純取屬性了，我用 jsFiddle 作了個簡單範例給大家看看：</p>

<iframe style="width: 500px; height: 300px" src="http://jsfiddle.net/othree/YQAL8/embedded/"></iframe>

<p>順便趁機問問大家意見，attribute 和 properties 同時出現時，中文翻譯要怎樣區別呢？</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="3"></b:comments>


		</b:entry>

		<b:entry entryID="000681" baseName="eye-fi-direct-mode">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-04-22</b:date>
				<b:time>00:15:25</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>Eye-Fi Direct Mode</b:title>
			<b:content>
				<b:summary>對我來說，期待很久的 Eye-Fi Direct Mode 終於出來了，有這個功能後，Eye-Fi 卡片就可以自己做成 AP ，然後直接傳輸檔案到指定的裝置上，而不用在找一個 Wifi AP 來做中間點，所以理想上我可以相機拍完直接進 iPad ，然後就可以看大圖了！ 上圖是我的 Android 手機在使用直接傳輸模式接收相機那邊傳來的新鮮照片，不過理想畢竟是理想，我在使用上其實遇到不小的問題，其實問題也只有一個，就是卡片應該要建立 AP，但是確沒有，或是連上之後，AP 就消失了，最慘的是照片傳到一半時，AP 消失了，今天甚至因此沒有成功傳輸照片到 iPad 上，不然本來要附上傳輸到 iPad 的照片的，只能先用 Android 將就一下，我已經在討論區發出 問題 了，也有人說有一樣的問題，事實上我還有位朋友也是一樣的狀況，希望這個問題能夠解決，不然 Direct Mode 成功率現在是低到無法使用的狀態。 總之，這篇一樣是給有意買進 Eye-Fi 的人參考用的，有任何新消息貨更新我還會在 po 上來。...</b:summary>
				<b:mainContent><p>對我來說，期待很久的 Eye-Fi Direct Mode 終於出來了，有這個功能後，Eye-Fi 卡片就可以自己做成 AP ，然後直接傳輸檔案到指定的裝置上，而不用在找一個 Wifi AP 來做中間點，所以理想上我可以相機拍完直接進 iPad ，然後就可以看大圖了！</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5633010595/" title="Flickr 上 othree 的 Eye-Fi Direct Mode"><img src="http://farm6.static.flickr.com/5062/5633010595_52b6e8f72d.jpg" width="500" height="375" alt="Eye-Fi Direct Mode" /></a></p>

<p>上圖是我的 Android 手機在使用直接傳輸模式接收相機那邊傳來的新鮮照片，不過理想畢竟是理想，我在使用上其實遇到不小的問題，其實問題也只有一個，就是卡片應該要建立 AP，但是確沒有，或是連上之後，AP 就消失了，最慘的是照片傳到一半時，AP 消失了，今天甚至因此沒有成功傳輸照片到 iPad 上，不然本來要附上傳輸到 iPad 的照片的，只能先用 Android 將就一下，我已經在討論區發出 <a href="http://forums.eye.fi/viewtopic.php?f=2&amp;t=3820">問題</a> 了，也有人說有一樣的問題，事實上我還有位朋友也是一樣的狀況，希望這個問題能夠解決，不然 Direct Mode 成功率現在是低到無法使用的狀態。</p>

<p>總之，這篇一樣是給有意買進 Eye-Fi 的人參考用的，有任何新消息貨更新我還會在 po 上來。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="2"></b:comments>


		</b:entry>

		<b:entry entryID="000680" baseName="markdown-intro-and-doc">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-04-07</b:date>
				<b:time>14:49:14</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>Markdown 介紹與文件</b:title>
			<b:content>
				<b:summary>之前寫過一篇 文章 介紹了一下 Markdown，其實那時候我就已經在翻譯它的 文件 了（類似 BSD 的 License，所以應該是可以自由翻譯吧:P），最近才差不多完成，除了完整文件外，我還把簡介語法的那篇 文章 也翻譯了，全文就放在繼續閱讀裡，建議大家可以先看看這篇本文再去看完整的中文版文件。 Markdown 文件中文版： markdown.tw 。 喔，對了，現在缺人潤稿，然後東西都放在 github 上，如果你有發現什麼問題可以上去開 issue，網頁本身也是用 github pages 來 host ，只有 domain 是我花錢買的:P。...</b:summary>
				<b:mainContent><p>之前寫過一篇 <a href="http://blog.othree.net/log/2011/03/08/markdown-syntax/">文章</a> 介紹了一下 Markdown，其實那時候我就已經在翻譯它的 <a href="http://daringfireball.net/projects/markdown/syntax">文件</a> 了（類似 BSD 的 License，所以應該是可以自由翻譯吧:P），最近才差不多完成，除了完整文件外，我還把簡介語法的那篇 <a href="http://daringfireball.net/projects/markdown/basics">文章</a> 也翻譯了，全文就放在繼續閱讀裡，建議大家可以先看看這篇本文再去看完整的中文版文件。</p>

<ul>
<li>Markdown 文件中文版： <a href="http://markdown.tw/">markdown.tw</a> 。</li>
</ul>

<p>喔，對了，現在缺人潤稿，然後東西都放在 <a href="https://github.com/othree/markdown-syntax-zhtw">github</a> 上，如果你有發現什麼問題可以上去開 issue，網頁本身也是用 github pages 來 host ，只有 domain 是我花錢買的:P。</p>
</b:mainContent>
				<b:extendContent><h4>Markdown 的語法要領</h4>

<p>這頁提供了 Markdown 簡單的概觀給想使用的人， <a href="http://markdown.tw" title="Markdown Syntax">語法說明</a> 頁提供了完整詳細的文件，說明每項功能，但是 Markdown 其實很簡單就可以上手，這頁文件提供了一些範例，並且每個範例都有提供輸出的 HTML 結果。</p>

<p>其實直接試試看也是一個很不錯的方法， <a href="http://daringfireball.net/projects/markdown/dingus" title="Markdown Dingus">Dingus</a> 是一個網頁應用程式，讓你可以把你的 Markdown 文件轉成 XHTML。</p>

<p><strong>Note:</strong> 這份文件本身也是用 Markdown 寫的，你也可以看看 <a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/basics.md">它的原始碼</a></p>

<h4>段落、標題、區塊程式碼</h4>

<p>一個段落是由一個以上的連接的行句組成，而一個以上的空行則會切分出不同的段落（空行的定義是顯示上看起來像是空行，就被視為空行，例如有一行只有空白和 tab，那該行也會被視為空行），一般的段落不需要用空白或斷行縮排。</p>

<p>Markdown 支援兩種標題的語法，[Setext] [1] 和 [atx] [2] 形式。Setext 形式是用底線的形式，利用 <code>=</code> （最高階標題）和 <code>-</code> （第二階標題），Atx 形式在行首插入 1 到 6 個 <code>#</code> ，對應到標題 1 到 6 階。</p>

<p>區塊引言則使用 email 形式的 '<code>&gt;</code>' 角括號。</p>

<p>Markdown:</p>

<pre><code>A First Level Header
====================

A Second Level Header
---------------------

Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.

The quick brown fox jumped over the lazy
dog's back.

### Header 3

&gt; This is a blockquote.
&gt; 
&gt; This is the second paragraph in the blockquote.
&gt;
&gt; ## This is an H2 in a blockquote
</code></pre>

<p>輸出：</p>

<pre><code>&lt;h1&gt;A First Level Header&lt;/h1&gt;

&lt;h2&gt;A Second Level Header&lt;/h2&gt;

&lt;p&gt;Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.&lt;/p&gt;

&lt;p&gt;The quick brown fox jumped over the lazy
dog's back.&lt;/p&gt;

&lt;h3&gt;Header 3&lt;/h3&gt;

&lt;blockquote&gt;
    &lt;p&gt;This is a blockquote.&lt;/p&gt;

    &lt;p&gt;This is the second paragraph in the blockquote.&lt;/p&gt;

    &lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;
&lt;/blockquote&gt;
</code></pre>

<h5>修辭和強調</h5>

<p>Markdown 使用星號和底線來標記需要強調的區段。</p>

<p>Markdown:</p>

<pre><code>Some of these words *are emphasized*.
Some of these words _are emphasized also_.

Use two asterisks for **strong emphasis**.
Or, if you prefer, __use two underscores instead__.
</code></pre>

<p>輸出:</p>

<pre><code>&lt;p&gt;Some of these words &lt;em&gt;are emphasized&lt;/em&gt;.
Some of these words &lt;em&gt;are emphasized also&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Use two asterisks for &lt;strong&gt;strong emphasis&lt;/strong&gt;.
Or, if you prefer, &lt;strong&gt;use two underscores instead&lt;/strong&gt;.&lt;/p&gt;
</code></pre>

<h5>清單</h5>

<p>無序清單使用星號、加號和減號來做為清單的項目標記，這些符號是都可以使用的，使用星號：</p>

<pre><code>*   Candy.
*   Gum.
*   Booze.
</code></pre>

<p>加號：</p>

<pre><code>+   Candy.
+   Gum.
+   Booze.
</code></pre>

<p>和減號</p>

<pre><code>-   Candy.
-   Gum.
-   Booze.
</code></pre>

<p>都會輸出：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;Candy.&lt;/li&gt;
&lt;li&gt;Gum.&lt;/li&gt;
&lt;li&gt;Booze.&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>有序的清單則是使用一般的數字接著一個英文句點作為項目標記：</p>

<pre><code>1.  Red
2.  Green
3.  Blue
</code></pre>

<p>輸出：</p>

<pre><code>&lt;ol&gt;
&lt;li&gt;Red&lt;/li&gt;
&lt;li&gt;Green&lt;/li&gt;
&lt;li&gt;Blue&lt;/li&gt;
&lt;/ol&gt;
</code></pre>

<p>如果你在項目之間插入空行，那項目的內容會備用 <code>&lt;p&gt;</code> 包起來，你也可以在一個項目內放上多個段落，只要在它前面縮排 4 個空白或 1 個 tab 。</p>

<pre><code>*   A list item.

    With multiple paragraphs.

*   Another item in the list.
</code></pre>

<p>輸出：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;
&lt;p&gt;With multiple paragraphs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<h5>連結</h5>

<p>Markdown 支援兩種形式的連結語法： <em>行內</em> 和 <em>參考</em> 兩種形式，兩種都是使用角括號來把文字轉成連結。</p>

<p>行內形式形式是直接在後面用括號直接接上連結：</p>

<pre><code>This is an [example link](http://example.com/).
</code></pre>

<p>輸出：</p>

<pre><code>&lt;p&gt;This is an &lt;a href="http://example.com/"&gt;
example link&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<p>你也可以選擇性的加上 title 屬性：</p>

<pre><code>This is an [example link](http://example.com/ "With a Title").
</code></pre>

<p>輸出：</p>

<pre><code>&lt;p&gt;This is an &lt;a href="http://example.com/" title="With a Title"&gt;
example link&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<p>參考形式的連結讓你可以為連結定一個名稱，之後你可以在文件的其他地方定義該連結的內容：</p>

<pre><code>I get 10 times more traffic from [Google][1] than from
[Yahoo][2] or [MSN][3].

[1]: http://google.com/        "Google"
[2]: http://search.yahoo.com/  "Yahoo Search"
[3]: http://search.msn.com/    "MSN Search"
</code></pre>

<p>輸出：</p>

<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"
title="Google"&gt;Google&lt;/a&gt; than from &lt;a href="http://search.yahoo.com/"
title="Yahoo Search"&gt;Yahoo&lt;/a&gt; or &lt;a href="http://search.msn.com/"
title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<p>title 屬性是選擇性的，連結名稱可以用字母、數字和空格，但是不分大小寫：</p>

<pre><code>I start my morning with a cup of coffee and
[The New York Times][NY Times].

[ny times]: http://www.nytimes.com/
</code></pre>

<p>輸出：</p>

<pre><code>&lt;p&gt;I start my morning with a cup of coffee and
&lt;a href="http://www.nytimes.com/"&gt;The New York Times&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<h5>圖片</h5>

<p>圖片的語法和連結很像。</p>

<p>行內形式（title 是選擇性的）：</p>

<pre><code>![alt text](/path/to/img.jpg "Title")
</code></pre>

<p>參考形式：</p>

<pre><code>![alt text][id]

[id]: /path/to/img.jpg "Title"
</code></pre>

<p>上面兩種方法都會輸出：</p>

<pre><code>&lt;img src="/path/to/img.jpg" alt="alt text" title="Title" /&gt;
</code></pre>

<h5>程式碼</h5>

<p>在一般的段落文字中，你可以使用反引號 <code>`</code> 來標記程式碼區段，區段內的 <code>&amp;</code>、<code>&lt;</code> 和 <code>&gt;</code> 都會被自動的轉換成 HTML 實體，這項特性讓你可以很容易的在程式碼區段內插入 HTML 碼：</p>

<pre><code>I strongly recommend against using any `&lt;blink&gt;` tags.

I wish SmartyPants used named entities like `&amp;mdash;`
instead of decimal-encoded entites like `&amp;#8212;`.
</code></pre>

<p>輸出：</p>

<pre><code>&lt;p&gt;I strongly recommend against using any
&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;I wish SmartyPants used named entities like
&lt;code&gt;&amp;amp;mdash;&lt;/code&gt; instead of decimal-encoded
entites like &lt;code&gt;&amp;amp;#8212;&lt;/code&gt;.&lt;/p&gt;
</code></pre>

<p>如果要建立一個已經格式化好的程式碼區塊，只要每行都縮排 4 個空格或是一個 tab 就可以了，而 <code>&amp;</code>、<code>&lt;</code> 和 <code>&gt;</code> 也一樣會自動轉成 HTML 實體。</p>

<p>Markdown:</p>

<pre><code>If you want your page to validate under XHTML 1.0 Strict,
you've got to put paragraph tags in your blockquotes:

    &lt;blockquote&gt;
        &lt;p&gt;For example.&lt;/p&gt;
    &lt;/blockquote&gt;
</code></pre>

<p>輸出：</p>

<pre><code>&lt;p&gt;If you want your page to validate under XHTML 1.0 Strict,
you've got to put paragraph tags in your blockquotes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;
    &amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000679" baseName="jquery-ujs">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-03-09</b:date>
				<b:time>23:06:35</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>jQuery-ujs</b:title>
			<b:content>
				<b:summary>Rails 預設是配合 prototype 來做到一些 Ajax 的功能的，不過他其實也可以配合 jQuery ，只要配合 jQuery-ujs 這個 Gem 就可以，前陣子從頭開始學 Rails 3 的時候開始接觸到這個 plugin，後來花了些時間看他的原始碼，發現他的設計其實很棒，一如 Rails 的風格，非常的 Best Practice 的設計，因此事實上，不需要是 Rails Application 也很容易就可以利用它。 jQuery-ujs 全名 Unobtrusive scripting adapter for jQuery ，是由 Rails Team 的人開發，所以也是個官方支援，用了 custom event 和 data-* 屬性...</b:summary>
				<b:mainContent><p><a href="http://rubyonrails.org/">Rails</a> 預設是配合 <a href="http://www.prototypejs.org/">prototype</a> 來做到一些 Ajax 的功能的，不過他其實也可以配合 <a href="http://jquery.com/">jQuery</a> ，只要配合 <a href="https://github.com/rails/jquery-ujs">jQuery-ujs</a> 這個 Gem 就可以，前陣子從頭開始學 Rails 3 的時候開始接觸到這個 plugin，後來花了些時間看他的原始碼，發現他的設計其實很棒，一如 Rails 的風格，非常的 Best Practice 的設計，因此事實上，不需要是 Rails Application 也很容易就可以利用它。</p>

<p>jQuery-ujs 全名 <strong>Unobtrusive scripting adapter for jQuery</strong> ，是由 Rails Team 的人開發，所以也是個官方支援，用了 <a href="http://benalman.com/news/2010/03/jquery-special-events/">custom event</a> 和 <a href="http://html5doctor.com/html5-custom-data-attributes/">data-* 屬性</a> 這兩種東西所建立出來的，不亂入的 JavaScript adapter ，jQuery-ujs 的基本設計是用 data-* 屬性來記錄連結或是表單的一些行為，是不是要用XHR 送 request ，HTTP request 是 POST、GET 還是 DELETE 等等，而這些 XHR request 的事件就用 ajax:beforeSend、ajax:success 等自定事件來處理，所以假設你要做一個連結，點下去會去遠端抓一個 JSON 資料回來，那你的 HTML 會要這樣寫：</p>

<pre><code>&lt;a href="/getme.json" data-remote="true" data-type="json"&gt;Click Me !&lt;/a&gt;
</code></pre>

<p>然後 JavaScript 這邊這樣寫：</p>

<pre><code>$('a').bind('ajax:success', function (data, status, xhr) {
    //data is parsed JSON object
    //do something with data here
});
</code></pre>

<p>這樣就可以讓 <em>Click Me !</em> 這個連結被點到時，用 XHR Request 取代換頁到那個網址，然後回來的資料就會自動進 callback function ，而除了 ajax:success 外，還有 ajax:error 可以做錯誤處理，另外還有兩個事件，詳細的資料在官方 <a href="https://github.com/rails/jquery-ujs/wiki/ajax">文件</a> 有，另外還有一份文件則是關於 <a href="https://github.com/rails/jquery-ujs/wiki/Unobtrusive-scripting-support-for-jQuery">支援的 data-* 屬性</a> ，這兩份看一下就可以正確的使用 jQuery-ujs 了。</p>

<p>而除了文件上寫到的，還有兩個特色是直接沿用 Rails 的 Best Practice ，第一個是 _method 參數，雖然 HTTP 有設計了四種 request method：POST、GET、PUT、DELETE，但是 HTML 表單卻只有 POST 和 GET 兩種可以用，但是 Rails 的 <a href="http://ihower.tw/rails3/routing.html">RESTful API</a> 定義的七種動作中，把四種 request method 都用到了，所以為了讓 PUT 和 DELETE 也可以動作， jQuery-ujs 會在必要的時候，多送一個 _method 參數，告訴 server 端，現在實際上是哪種 request 。</p>

<p>另一個就是 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">CSRF</a> 了，Rails 對付 CSRF 的方法就是很常見的，用 token，只不過它是寫在 <code>&lt;meta name='csrf-token'&gt;</code> 裡面，然後 jQuery-ujs 會去把它的值抓出來，也當成參數一起送出，如果是 XHR 的話，則會寫在 HTTP header 裡面，因為使用的方法都很簡單好懂，如果是自己寫的 server 架構，也可以依照這個原則來配合 jQuery-ujs 來檔 CSRF 的攻擊。</p>

<p>這篇簡單介紹了幾個 <strong>jQuery-ujs</strong> 的特色，而我最後還有一個覺得可以使用它的理由，就是它現在是 Rails 官方維護，有持續更新，而且品質還算可靠（最近 jQuery 1.5 改了 ajax 結果就...）。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000678" baseName="markdown-syntax">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-03-08</b:date>
				<b:time>21:28:45</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>Markdown</b:title>
			<b:content>
				<b:summary>這個部落格最早的文章，我是直接寫原始的 HTML 碼，後來久了也是會嫌煩，就開始用 Textile ，功能蠻多，而且還可以寫 id、class 之類的，不過同時，我對另外一個也是類似的 text to HTML 的文件格式 Markdown 就一直很有印象，不過那時候只覺得他的語法功能比較少，還感覺不出他的特色，直到過了幾年，在學校寫了幾篇論文，有訂閱的 mailing-list，寫作的觀念和態度也被指導教授盯過之後，某一天又再次看到一篇 Markdown 格式的文件，它的連結用的很像是論文的參考文獻的用法，它的程式碼區塊很像我部落格上排版過顯示的樣子，而它的引言看起來和 BBS 的幾乎一樣，每個細節都非常的熟悉，於是再次讓我對它產生了興趣，就開始試著用 Markdown 來寫部落格了，沒想到一試成主顧，因為語法都很熟悉，幾乎是不用再花時間學，而且我覺得更棒的一點是 Markdown 的文件直接閱讀也很方便，它的語法可以讓文章的感覺保持的很好。 Markdown 是 John Gruber 在 2004 年左右推出的，然後他自己提供了 Perl 版的程式碼，當時支援 MovableType 和 BLOSXOM 兩個部落格系統，也可以用在命令列直接執行轉換文字檔，而現在使用比例最高的 Wordpress 也有人寫 外掛 讓它支援 ，程式語言的部份除了...</b:summary>
				<b:mainContent><p>這個部落格最早的文章，我是直接寫原始的 HTML 碼，後來久了也是會嫌煩，就開始用 <a href="http://www.textism.com/tools/textile/">Textile</a> ，功能蠻多，而且還可以寫 id、class 之類的，不過同時，我對另外一個也是類似的 text to HTML 的文件格式 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> 就一直很有印象，不過那時候只覺得他的語法功能比較少，還感覺不出他的特色，直到過了幾年，在學校寫了幾篇論文，有訂閱的 mailing-list，寫作的觀念和態度也被指導教授盯過之後，某一天又再次看到一篇 Markdown 格式的文件，它的連結用的很像是論文的參考文獻的用法，它的程式碼區塊很像我部落格上排版過顯示的樣子，而它的引言看起來和 BBS 的幾乎一樣，每個細節都非常的熟悉，於是再次讓我對它產生了興趣，就開始試著用 Markdown 來寫部落格了，沒想到一試成主顧，因為語法都很熟悉，幾乎是不用再花時間學，而且我覺得更棒的一點是 Markdown 的文件直接閱讀也很方便，它的語法可以讓文章的感覺保持的很好。</p>

<p>Markdown 是  John Gruber 在 2004 年左右推出的，然後他自己提供了 Perl 版的程式碼，當時支援 <a href="http://www.movabletype.org/">MovableType</a> 和 <a href="http://www.blosxom.com/">BLOSXOM</a> 兩個部落格系統，也可以用在命令列直接執行轉換文字檔，而現在使用比例最高的 Wordpress 也有人寫 <a href="http://wordpress.org/extend/plugins/markdown-for-wordpress-and-bbpress/">外掛</a> 讓它支援 ，程式語言的部份除了 Perl 外，還有 <a href="http://michelf.com/projects/php-markdown/">PHP</a>、<a href="http://deveiate.org/projects/BlueCloth/">Ruby</a> 等，在 <a href="http://xbeta.org/wiki/show/Markdown">Markdown Wiki</a> 還有一份更詳細的清單，其實支援很廣泛，可惜的是大部分的 BSP 都沒有提供，目前似乎就只有 <a href="http://www.tumblr.com/">Tumblr</a> 而已，而這幾年在推廣上，我覺得有兩個網站的功勞不小，第一個是 <a href="https://github.com/">github</a> ，因為他支援用 Markdown 寫 README ，其實它還支援很多其他的格式，不過我看到使用最多的還是 Markdown，就這樣，為了寫出可以在 github 上顯示的良好結構的 HTML README 文件，很多人就寫起了 Markdown 文件， github 支援的格式其實是一個修改過的版本，叫做 <a href="http://github.github.com/github-flavored-markdown/">GitHub Flavored Markdown</a> ，稍微有些行為上的不一樣，然後多加了一些方便 Github 使用的功能，不過整體而言其實可以說是一樣的文件格式。</p>

<p>另一個則是 <a href="http://stackoverflow.com/">StackOverflow</a> ，Markdown 是 StackOverflow 發問、回覆所使用的預設格式，而且 StackOverflow 還有即時的預覽功能，實在很棒，我在深入了解之後，才發現 他們用的編輯器還有一段故事。StackOverflow 用的是 <em>John Fraser</em> 的 WMD Editor，他同時也是 JavaScript 版的 Markdown 轉換器，showdown.js 的作者，如果去看現在版本的 WMD Editor 和 showdown.js 的程式碼，都還可以看到他的名字，本來 StackOverflow 和 John 是有合作而不是只是單純拿它的編輯器來用，結果有一天突然就聯絡不上 John 了，就這樣一直無法聯繫上 John <a href="http://blog.stackoverflow.com/2008/12/reverse-engineering-the-wmd-editor/">四個月</a> 後，StackOveflow 的 Jeff Atwood 在網路跟大家說了這件事情，除了持續的想要連絡上 John 或是了解他狀況之外，還發起了一個工作，就是要對 WMD Editor 做反向工程，因為當時他們手上只有最小化過 JavaScript 檔案，裡面的變數名稱什麼的，都已經是失去意義的了，確認過授權沒問題後，一群社群朋友就開始幫忙了，後來他們利用 github 作為協做平台，成果就是現在 StackOverflow 的 <a href="https://github.com/cky/wmd">版本</a> ，至於 John Fraser 到底發生了什麼事，則是到現在也沒人知道。</p>

<p>如果想要看看 Markdown 文件長怎樣，可以看看 <a href="http://daringfireball.net/projects/markdown/basics">Markdown Basics</a> 這篇文章，至於完整的文件，我正找了幾位網友在翻譯中，等全部處理好就會公開了，雖然這樣說，其實東西都在 github 上啦。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

		<b:entry entryID="000677" baseName="update">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-03-07</b:date>
				<b:time>00:41:22</b:time>
			</b:datetime>
			<b:category>about</b:category>
			<b:title>狀況更新</b:title>
			<b:content>
				<b:summary>來更新一下近況，我之前有說過要寫一篇文章講一下我的 ID 由來，本來的計畫是想把前年的東京行的文章完成後在寫的，不過那篇文章一直寫不出來，因為那次行程對我蠻有意義的，結果就是一直寫不出來，所以最打算先寫 ID 來源那篇，不過來源沒什麼有趣的故事，只是多種東西的合成而已，不用太期待:P。 另外就是部落格這邊有些更新，本來是想要整個樣式大改，原來的目標是以可讀性為主，然後黑白主色，單欄的排版（比較不會有雜訊干擾讀者），不過實在是沒有個起頭，所以暫時還沒有進度，最近幾天發的文章比較多，想說短時間還是不會改版，所以就順便改了一些之前覺得不是很好的地方，CSS 也有微幅的修改，希望能夠讓訪客體驗更好點，其它就是還拿掉了引用和 OpenID 的支援，前者幾乎沒人用，後者實在是因為支援做的不太好，不然我自己還會用的說，大概就是這樣，最近預計要寫的文章還有三篇左右（隨時可能增加），應該也會維持一兩天發一篇的速度吧。...</b:summary>
				<b:mainContent><p>來更新一下近況，我之前有說過要寫一篇文章講一下我的 ID 由來，本來的計畫是想把前年的東京行的文章完成後在寫的，不過那篇文章一直寫不出來，因為那次行程對我蠻有意義的，結果就是一直寫不出來，所以最打算先寫 ID 來源那篇，不過來源沒什麼有趣的故事，只是多種東西的合成而已，不用太期待:P。</p>

<p>另外就是部落格這邊有些更新，本來是想要整個樣式大改，原來的目標是以可讀性為主，然後黑白主色，單欄的排版（比較不會有雜訊干擾讀者），不過實在是沒有個起頭，所以暫時還沒有進度，最近幾天發的文章比較多，想說短時間還是不會改版，所以就順便改了一些之前覺得不是很好的地方，CSS 也有微幅的修改，希望能夠讓訪客體驗更好點，其它就是還拿掉了引用和 OpenID 的支援，前者幾乎沒人用，後者實在是因為支援做的不太好，不然我自己還會用的說，大概就是這樣，最近預計要寫的文章還有三篇左右（隨時可能增加），應該也會維持一兩天發一篇的速度吧。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000676" baseName="default-font-style">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-03-06</b:date>
				<b:time>11:44:53</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>預設字型樣式</b:title>
			<b:content>
				<b:summary>前兩天介紹 TypeHelper.js 時，有提供了我現在用的字型樣式設定， Ethan 則提出了它的 建議 ， Ethan 的建議如下： html { font-family: sans-serif; } html.hasFontSmoothing-false { font-family: "新細明體", PMingLiU, serif; } Ethan 的想法應該是在確定沒支援 Clear Type 的話，就改用新細明體為預設字型，不然就用系統內建的黑體（sans-serif），他的建議給我不少想法，讓我重新確認了一下我的需求： 如果系統支援 Clear Type，那就用微軟正黑體做預設字型（sans-serif） 不支援的話，用新細明體（serif） 假如無法判斷就當成沒有 Clear Type 不支援 JavaScript 的情形當成沒有 Clear Type 然後考慮到系統環境，事實上只有 Windows...</b:summary>
				<b:mainContent><p>前兩天介紹 TypeHelper.js 時，有提供了我現在用的字型樣式設定， <a href="http://ethantw.net/">Ethan</a> 則提出了它的<a href="http://blog.othree.net/log/2011/03/04/detect-clear-type/#comment111723"> 建議</a> ， Ethan 的建議如下：</p>

<pre><code>html {
    font-family: sans-serif;
}

html.hasFontSmoothing-false {
    font-family: "新細明體", PMingLiU, serif;
}
</code></pre>

<p>Ethan 的想法應該是在確定沒支援 Clear Type 的話，就改用新細明體為預設字型，不然就用系統內建的黑體（sans-serif），他的建議給我不少想法，讓我重新確認了一下我的需求：</p>

<ul>
<li>如果系統支援 Clear Type，那就用微軟正黑體做預設字型（sans-serif）</li>
<li>不支援的話，用新細明體（serif）</li>
<li>假如無法判斷就當成沒有 Clear Type</li>
<li>不支援 JavaScript 的情形當成沒有 Clear Type</li>
</ul>

<p>然後考慮到系統環境，事實上只有 Windows 需要做這個判斷，OSX 不用說自然是都有，Linux 雖然不一定，但是它並沒有新細明體和微軟正黑體的選擇問題，所以只要考慮 Windows 的情形，有沒有 Clear Type 和有沒有安裝微軟正黑體，最後其實只有改一行就是了：</p>

<pre><code>html {
    font-family: serif;
}

html.hasFontSmoothing-true {
    font-family: "微軟正黑體", "Microsoft JhengHei", sans-serif;
}
</code></pre>

<p>我的和 Ethan 的差別在於，分別是對於 JavaScript 有無的像下相容方式和他使用瀏覽器設定的黑體字型，或是強迫指定新細明體，我則是使用瀏覽器預設的明體字型，或是強迫指定微軟正黑體，我想選擇用哪個，就變成是網站主人的決定了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="2"></b:comments>


		</b:entry>

		<b:entry entryID="000675" baseName="revcanonical-and-relshortlink">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-03-05</b:date>
				<b:time>22:34:51</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>RevCanonical and rel-shortlink</b:title>
			<b:content>
				<b:summary>前兩天介紹了 Canonical URL ，這篇要介紹的是有點關係的 RevCanonical ，Chris Shiflett 有寫一篇蠻不錯的 介紹 ，RevCanonical 是用來記錄自己的短網址的，以 Canonical URL 那篇的 Flickr 網址為例： http://www.flickr.com/photos/othree/5478867242/ http://flic.kr/p/9m9Cmj 第二個網址是 Flickr 官方提供的短網址，在繼續往下之前，先來說說為什麼要提供自己的短網址，Chris 那篇文章有列舉幾項： 網址是我的，是否正常運作由我負責 網址有其意義，像是 flic.kr 這個網域名稱就很明顯可以代表 Flickr 因為訪客可以看的出網址的意義，就不用擔心會跑到奇怪的地方 並且，短網址服務被認為是對安全性不好的，所以其實很多短網址服務是有提供 preview 的功能，訪客可以先確認會連到哪裡才確定要不要連結過去，但是這網址要從哪邊取得呢？其實就放在網頁的 HTML 碼裡面： &lt;link id="shorturl" rev="canonical" type="text/html" href="http://flic.kr/p/9m9Cmj"&gt; RevCanonical 就只是這樣而已，非常簡單，...</b:summary>
				<b:mainContent><p>前兩天介紹了 <a href="http://blog.othree.net/log/2011/03/03/canonical-url/">Canonical URL</a> ，這篇要介紹的是有點關係的 <a href="http://revcanonical.appspot.com/">RevCanonical</a> ，Chris Shiflett 有寫一篇蠻不錯的 <a href="http://shiflett.org/blog/2009/apr/save-the-internet-with-rev-canonical">介紹</a> ，RevCanonical 是用來記錄自己的短網址的，以 Canonical URL 那篇的 Flickr 網址為例：</p>

<pre><code>http://www.flickr.com/photos/othree/5478867242/
http://flic.kr/p/9m9Cmj
</code></pre>

<p>第二個網址是 Flickr 官方提供的短網址，在繼續往下之前，先來說說為什麼要提供自己的短網址，Chris 那篇文章有列舉幾項：</p>

<ul>
<li>網址是我的，是否正常運作由我負責</li>
<li>網址有其意義，像是 <strong>flic.kr</strong> 這個網域名稱就很明顯可以代表 Flickr</li>
<li>因為訪客可以看的出網址的意義，就不用擔心會跑到奇怪的地方</li>
</ul>

<p>並且，短網址服務被認為是對安全性不好的，所以其實很多短網址服務是有提供 preview 的功能，訪客可以先確認會連到哪裡才確定要不要連結過去，但是這網址要從哪邊取得呢？其實就放在網頁的 HTML 碼裡面：</p>

<pre><code>&lt;link id="shorturl" rev="canonical" type="text/html" href="http://flic.kr/p/9m9Cmj"&gt;
</code></pre>

<p>RevCanonical 就只是這樣而已，非常簡單， 當初會使用這樣的標記，是因為 Kevin Marks 覺得短網址和 Canonical URL 的某種層面的 <a href="http://twitter.com/#!/kevinmarks/status/1448424167">反向關係</a> ，並且提議給 Kellan Elliott-McCrea ，Kellan 當時為了 Flickr 的短網址系統不知道該如何在網頁原始碼內標記而 <a href="http://laughingmeme.org/2009/04/03/url-shortening-hinting/">徵詢意見</a>。</p>

<p>不過其實現在已經不推薦使用 RevCanonical 了， Mark Nottingham 提出了不少它的 <a href="http://www.mnot.net/blog/2009/04/14/rev_canonical_bad">問題</a> ，其中像是 canonical 的語意不正確，rev 屬性已經從 HTML5 中被 <a href="http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2006-July/006888.html">拿掉了</a> ，還好 Microformats 有個 <a href="http://microformats.org/wiki/rel-shortlink">rel-shortlink</a> ，而且是已經成為 Spec 的標準之一，寫起來也是很簡單，範例如下：</p>

<pre><code>&lt;link rel="shortlink" href="http://youtu.be/zJhTLzTjhwM"&gt;
</code></pre>

<p>Microformat 的 wiki 頁面上有列出不少在使用 rel-shortlink 的網站，像是 <a href="http://en.blog.wordpress.com/2009/08/14/shorten/">wordpress.com</a> ，還有 <a href="http://youtube-global.blogspot.com/2009/12/make-way-for-youtube-links.html">YouTube</a> 也是，不過至於 Flickr，現在還是繼續在使用 RevCanonical 就是，希望有天能改掉。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000674" baseName="html5-developer-edition">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-03-05</b:date>
				<b:time>16:19:36</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>HTML5 Web Developer Edition</b:title>
			<b:content>
				<b:summary> HTML5 標準的文件 和以前的版本有些地方有很大的不同，像是標籤的語意說明比起以前就詳細很多，還會提出範例，另外也更詳細的規範了瀏覽器應該怎樣實作的細節，也因此整份文件的長度非常驚人，WHATWG 那邊有提供 A4 PDF 的版本 ，將近有 800 頁的內容，非常驚人， HTML 4 也才接近 400 頁而已，文字量則接近 3 倍，而這麼多的內容其實不是所有人都需要的，例如網頁設計師，它就不需要理解一些 API 的實作細節，他只要知道不同的標籤應該怎樣使用，怎樣編排網頁結構符合語義，因此 Ben Schwars 就做出了一份針對 Web Developer 的 HTML5 文件「HTML5 - Edition for Web Developers」，只保留了 Web Developer 需要的資訊，而且還整個把頁面樣式大改，不只是更漂亮而已，還針對可讀性下了不少 功夫 ，還有搜尋、單一章節的目錄等，閱讀的體驗實在是提昇非常多。 而一如往常的，W3C 那邊也有一份...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5498667619/" title="Flickr 上 othree 的 HTML5 -- Edition for Web Developers"><img src="http://farm6.static.flickr.com/5171/5498667619_1817f41fba.jpg" width="500" height="475" alt="HTML5 -- Edition for Web Developers" /></a></p>

<p><a href="http://dev.w3.org/html5/spec/">HTML5 標準的文件</a> 和以前的版本有些地方有很大的不同，像是標籤的語意說明比起以前就詳細很多，還會提出範例，另外也更詳細的規範了瀏覽器應該怎樣實作的細節，也因此整份文件的長度非常驚人，WHATWG 那邊有提供 <a href="http://www.whatwg.org/specs/web-apps/current-work/html-a4.pdf">A4 PDF 的版本</a> ，將近有 800 頁的內容，非常驚人， <a href="http://www.w3.org/TR/html401/html40.pdf.gz">HTML 4</a> 也才接近 400 頁而已，文字量則接近 3 倍，而這麼多的內容其實不是所有人都需要的，例如網頁設計師，它就不需要理解一些 API 的實作細節，他只要知道不同的標籤應該怎樣使用，怎樣編排網頁結構符合語義，因此 <a href="http://germanforblack.com/">Ben Schwars</a> 就做出了一份針對 Web Developer 的 HTML5 文件「<a href="http://developers.whatwg.org/">HTML5 - Edition for Web Developers</a>」，只保留了 Web Developer 需要的資訊，而且還整個把頁面樣式大改，不只是更漂亮而已，還針對可讀性下了不少 <a href="http://www.germanforblack.com/articles/moving-towards-readable-w3c-specs">功夫</a> ，還有搜尋、單一章節的目錄等，閱讀的體驗實在是提昇非常多。</p>

<p>而一如往常的，W3C 那邊也有一份 <a href="http://dev.w3.org/html5/spec-author-view/">HTML5 Edition for Web Authors</a> ，兩份其實是同樣的文件，我在 Ben Schwars 的 <a href="http://www.slideshare.net/benschwarz/building-a-better-web">Building a better web</a> 這份投影片中看到的網址就是 W3C 這邊的，目前的關係大概也只是不同的更新版本吧，我剛發現時幾乎是只有配色不同，現在樣式兩邊就有些差異了，不過章節內容還是差不多，順序有些調動，喔對了，這份投影片第 14 頁還有個不錯 W3C 標誌。</p>

<p>最後要提的是 Ben Schwars 是自己主動建立了這份文件的，他在看 HTML5 標準後受不了，跑去 WHATWG IRC 說他要做這東西，編輯說 ok 後他就開始動手了，他也把這段 <a href="http://germanforblack.com/articles/taking-the-web-back">過程</a> 寫出來，呼籲大家盡量參與標準的發展，不要只是對 W3C 有意見卻不參與不貢獻。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000673" baseName="detect-clear-type">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-03-04</b:date>
				<b:time>00:40:31</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>偵測 Clear Type</b:title>
			<b:content>
				<b:summary>Windows 上的網頁中文字型一直是很多設計師的痛苦來源，像我這種喜歡黑體字型的，就喜歡微軟正黑體大於新細明體很多，當然如果是蘋果電腦或是有很多 Linux 版本都已經內建字型渲染和預設的中文黑體字型（Linux 部分我比較不確定，有錯誤煩請指正），使用這些平台的看中文網頁比起 Windows 的使用者實在是愉悅很多，因為字型漂亮，網頁看起來就漂亮100倍，然後心情也跟著好起來。 雖然微軟從 Windows Vista 開始在系統上使用了新的預設字體「微軟正黑體」，不過網頁的使用上卻有不少的問題，也一再的被提出來討論，最近剛正式成立的 W3C 中文小組 內也才剛又被提出來 討論中 ，如果直接從 CSS 中強制設定微軟正黑體當網頁的中文字型，那會遇到一個比較直接的問題是，假如訪客的電腦是 Windows Vista 以前的版本，又剛好有裝微軟正黑體，但是沒開 Clear Type ，那結果是他會看到一個不太適合閱讀的字體，因為微軟正黑體如果沒有字型渲染的話，其實看起來不是很好，會覺得淡淡的顏色不夠深，辨識度還比新細明體差很多。 這樣其實蠻可惜的，因為很多人的系統其實是可以使用微軟正黑體來瀏覽網頁，但是卻因為需要像下相容，預設給了他們新細明體，要處理這個問題，最好的方法就是照漸進增強的原則，有支援字型渲染的給他微軟正黑體，沒支援的給他新細明體，IE 的話很簡單，看一下 screen.fontSmoothingEnabled 就好了，不過其他幾個瀏覽器可只能哭哭了。還好 canvas 發展到了可以在裡面畫字，而這部份的功能其他幾家瀏覽器都實作的比較快，於是 Zoltan 就想到用這個功能來判斷系統有沒有支援字體渲染，作法就是先用到處都有的字型畫個字進去，然後再看幾個關鍵點的顏色來判斷，如果有支援的話它就會在 html 標籤加上 hasFontSmoothing-true 這個 class，然後我就可以這樣寫 CSS： html {...</b:summary>
				<b:mainContent><p>Windows 上的網頁中文字型一直是很多設計師的痛苦來源，像我這種喜歡黑體字型的，就喜歡微軟正黑體大於新細明體很多，當然如果是蘋果電腦或是有很多 Linux 版本都已經內建字型渲染和預設的中文黑體字型（Linux 部分我比較不確定，有錯誤煩請指正），使用這些平台的看中文網頁比起 Windows 的使用者實在是愉悅很多，因為字型漂亮，網頁看起來就漂亮100倍，然後心情也跟著好起來。</p>

<p>雖然微軟從 Windows Vista 開始在系統上使用了新的預設字體「<a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=87e726a9-5c79-4a73-9347-78a557314d0b&amp;displayLang=zh-tw">微軟正黑體</a>」，不過網頁的使用上卻有不少的問題，也一再的被提出來討論，最近剛正式成立的 <a href="http://www.w3.org/html/ig/zh/">W3C 中文小組</a> 內也才剛又被提出來 <a href="http://lists.w3.org/Archives/Public/public-html-ig-zh/2011Mar/0098.html">討論中</a> ，如果直接從 CSS 中強制設定微軟正黑體當網頁的中文字型，那會遇到一個比較直接的問題是，假如訪客的電腦是 Windows Vista 以前的版本，又剛好有裝微軟正黑體，但是沒開 <a href="http://www.microsoft.com/typography/cleartype/tuner/step1.aspx">Clear Type</a> ，那結果是他會看到一個不太適合閱讀的字體，因為微軟正黑體如果沒有字型渲染的話，其實看起來不是很好，會覺得淡淡的顏色不夠深，辨識度還比新細明體差很多。</p>

<p>這樣其實蠻可惜的，因為很多人的系統其實是可以使用微軟正黑體來瀏覽網頁，但是卻因為需要像下相容，預設給了他們新細明體，要處理這個問題，最好的方法就是照漸進增強的原則，有支援字型渲染的給他微軟正黑體，沒支援的給他新細明體，IE 的話很簡單，看一下 <code>screen.fontSmoothingEnabled</code> 就好了，不過其他幾個瀏覽器可只能哭哭了。還好 canvas 發展到了可以在裡面畫字，而這部份的功能其他幾家瀏覽器都實作的比較快，於是  Zoltan 就想到用這個功能來判斷系統有沒有支援字體渲染，作法就是先用到處都有的字型畫個字進去，然後再看幾個關鍵點的顏色來判斷，如果有支援的話它就會在 html 標籤加上 <code>hasFontSmoothing-true</code> 這個 class，然後我就可以這樣寫 CSS：</p>

<pre><code>html {
    font-family: sans-serif;
}
html.hasFontSmoothing-true {
    font-family: "微軟正黑體", "Microsoft JhengHei", sans-serif;
}</code></pre>

<p>Christian Beier 還有提供一個 <a href="https://gist.github.com/283689">修改</a> 過的版本，讓事件綁定改用比較多人用的 jQuery，不然本來的要用 <a href="http://www.useragentman.com/shared/js/EventHelpers.js">EventHelpers.js</a> ，是個神祕（網站上找不到介紹）且知名度不高的 JS Event Library，而實際上這部份的修改很簡單，所以你也可以根據你的需要改用其他的方法來做一樣的事件綁定。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="3"></b:comments>


		</b:entry>

		<b:entry entryID="000672" baseName="canonical-url">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-03-03</b:date>
				<b:time>00:57:59</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>Canonical URL</b:title>
			<b:content>
				<b:summary>我本來以為我應該寫過這東西了，可是剛剛找卻找不到文章，決定就當成沒寫過，介紹一下這個兩年前的東西。Canonical URL 是為了解決網路上很多不同網址可能其實是同樣頁面的問題，例如下面三個網址其實都是同樣的 Amazon 商品： http://www.amazon.com/gp/product/0596522304/ref=s9_qpp_gw_p14_ir03?pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=center-3&amp;amp;pf_rd_r=0BC0MGCJ16BHCYNY6AYG&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=470938811&amp;amp;pf_rd_i=507846 http://www.amazon.com/Even-Faster-Web-Sites-Performance/dp/0596522304 http://www.amazon.com/dp/0596522304 但是可能是因為來源不同，Amazon 藉由不同的網址記錄一些行為，像是不同的廣告來源，或是為使用者提供不同的相關訊息等，不過這些網址其實都應該是一樣的，都是代表那本書的頁面，這時就產生個問題了，三個網址在搜尋引擎的紀錄是分開的，頁面整體的影響力也因此被低估，同樣會有這個問題的還有像是 flickr： http://www.flickr.com/photos/othree/5478867242/in/set-72157626142121334/ http://www.flickr.com/photos/othree/5478867242/in/photostream/ http://www.flickr.com/photos/othree/5478867242/ http://flic.kr/p/9m9Cmj 或是 T 客邦： http://www.techbang.com.tw/posts/5033-ios-great-copy-mac-os-x-107-lion-info http://www.techbang.com.tw/posts/5033 這些不同長度的網址其實都是一樣的頁面，卻因為被當成不同的頁面而讓分數下降，不只是網站本身的 SEO 問題，對於搜尋引擎來說也是一個會讓搜尋結果排序不好的問題，為解決這個問題，Google、微軟、Yahoo!、ask.com 等搜尋引擎大廠在 2009 共同合作，制定了 canonical URL 這樣的一個機制，機制很簡單，就是在網頁內加上一個 link 標籤記錄實際上代表的網址，以第一個 Amazon 的網址為例，每個網址開進去看他的原始碼，都可以發現有一個如下的 link 標籤 &lt;link rel="canonical" href="http://www.amazon.com/Even-Faster-Web-Sites-Performance/dp/0596522304" /&gt; 裡面的...</b:summary>
				<b:mainContent><p>我本來以為我應該寫過這東西了，可是剛剛找卻找不到文章，決定就當成沒寫過，介紹一下這個兩年前的東西。Canonical URL 是為了解決網路上很多不同網址可能其實是同樣頁面的問題，例如下面三個網址其實都是同樣的 Amazon 商品：</p>

<pre><code>http://www.amazon.com/gp/product/0596522304/ref=s9_qpp_gw_p14_ir03?pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=center-3&amp;amp;pf_rd_r=0BC0MGCJ16BHCYNY6AYG&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=470938811&amp;amp;pf_rd_i=507846
http://www.amazon.com/Even-Faster-Web-Sites-Performance/dp/0596522304
http://www.amazon.com/dp/0596522304
</code></pre>

<p>但是可能是因為來源不同，Amazon 藉由不同的網址記錄一些行為，像是不同的廣告來源，或是為使用者提供不同的相關訊息等，不過這些網址其實都應該是一樣的，都是代表那本書的頁面，這時就產生個問題了，三個網址在搜尋引擎的紀錄是分開的，頁面整體的影響力也因此被低估，同樣會有這個問題的還有像是 flickr：</p>

<pre><code>http://www.flickr.com/photos/othree/5478867242/in/set-72157626142121334/
http://www.flickr.com/photos/othree/5478867242/in/photostream/
http://www.flickr.com/photos/othree/5478867242/
http://flic.kr/p/9m9Cmj
</code></pre>

<p>或是 T 客邦：</p>

<pre><code>http://www.techbang.com.tw/posts/5033-ios-great-copy-mac-os-x-107-lion-info
http://www.techbang.com.tw/posts/5033
</code></pre>

<p>這些不同長度的網址其實都是一樣的頁面，卻因為被當成不同的頁面而讓分數下降，不只是網站本身的 SEO 問題，對於搜尋引擎來說也是一個會讓搜尋結果排序不好的問題，為解決這個問題，<a href="http://googlewebmastercentral.blogspot.com/2009/02/specify-your-canonical.html">Google</a>、<a href="http://www.bing.com/community/site_blogs/b/webmaster/archive/2009/02/12/partnering-to-help-solve-duplicate-content-issues.aspx">微軟</a>、<a href="http://www.ysearchblog.com/2009/02/12/fighting-duplication-adding-more-arrows-to-your-quiver/">Yahoo!</a>、<a href="http://blog.ask.com/2009/02/ask-is-going-canonical.html">ask.com</a> 等搜尋引擎大廠在 2009 共同合作，制定了 canonical URL 這樣的一個機制，機制很簡單，就是在網頁內加上一個 link 標籤記錄實際上代表的網址，以第一個 Amazon 的網址為例，每個網址開進去看他的原始碼，都可以發現有一個如下的 link 標籤</p>

<pre><code>&lt;link rel="canonical" href="http://www.amazon.com/Even-Faster-Web-Sites-Performance/dp/0596522304" /&gt;
</code></pre>

<p>裡面的 <strong>href</strong> 的值，就是這些網址的實際目標，代表這些網址們實際上的 URL 都是這個實際目標，搜尋引擎看到的話就會把該網址的權重、分數等等算在它上面，也就可以簡單解決上面提到的問題，如果你用 <a href="http://www.google.com.tw/search?hl=zh-TW&amp;q=amazon+even+fast+website&amp;meta=">Google 搜尋 Amazon 上面那本書</a> ，就會發現連結過去的網址就是 canonical 設定的網址了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="6"></b:comments>


		</b:entry>

		<b:entry entryID="000671" baseName="jquery-deferred-object">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-02-27</b:date>
				<b:time>12:09:36</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>jQuery Deferred Object</b:title>
			<b:content>
				<b:summary>jQuery 的 .ready() 有兩個特性，一是可以丟多個函式進去，它會照順序執行，第二個就是如果文件已經讀完，還丟函式進去的話，變成會馬上執行，這兩個特性讓 .ready() 變得非常好用，寫程式寫到有需要在頁面讀完才執行的東西，隨時都可以丟個函式進去，不過同樣是讀取資料下來，ajax 的 request 卻沒辦法做到一樣的事情，只能使用 callback ，所有要做的事情都要一次指定好，侷限了程式的結構設計。 jQuery 1.5 的幾個新功能中，有一項特別吸引人注目的，就是 deferred 物件 這個新的物件兼行為，我剛開始看文件時，一直不能了解為什麼要設計這個物件和設計它這樣的行為，直到我遇到前一段的問題時才整個豁然開朗， jQuery 1.5 把 ajax 改寫，其中一項變化就是回傳的值從 XMLHttpRequest 變成 jqXHR 物件，而這個 jqXHR 物件其實就是個 deferred 物件，deferred 物件用來代表某件事情，我們可以用來設定該事情的結果是否成功，並且根據不同的結果要做哪些事情，程式執行到可以判斷這個 deferred 物件代表的事件是成功的話就執行 resolve()，deferred 物件會把它所知道，事情成功的話要做的事情照順序做過，失敗的話就執行 reject()，一樣 deferred 物件會把失敗時要做的事情做一遍。而在事件結果確定之後，deferred 物件還是可以繼續接收函式，只是就像 .ready()...</b:summary>
				<b:mainContent><p>jQuery 的 <a href="http://api.jquery.com/ready/">.ready()</a> 有兩個特性，一是可以丟多個函式進去，它會照順序執行，第二個就是如果文件已經讀完，還丟函式進去的話，變成會馬上執行，這兩個特性讓 .ready() 變得非常好用，寫程式寫到有需要在頁面讀完才執行的東西，隨時都可以丟個函式進去，不過同樣是讀取資料下來，ajax 的 request 卻沒辦法做到一樣的事情，只能使用 callback ，所有要做的事情都要一次指定好，侷限了程式的結構設計。</p>

<p><a href="http://api.jquery.com/category/version/1.5/">jQuery 1.5</a> 的幾個新功能中，有一項特別吸引人注目的，就是 <a href="http://api.jquery.com/category/deferred-object">deferred 物件</a> 這個新的物件兼行為，我剛開始看文件時，一直不能了解為什麼要設計這個物件和設計它這樣的行為，直到我遇到前一段的問題時才整個豁然開朗， jQuery 1.5 把 ajax 改寫，其中一項變化就是回傳的值從 XMLHttpRequest 變成 <a href="http://api.jquery.com/Types/#jqXHR">jqXHR</a> 物件，而這個 jqXHR 物件其實就是個 deferred 物件，deferred 物件用來代表某件事情，我們可以用來設定該事情的結果是否成功，並且根據不同的結果要做哪些事情，程式執行到可以判斷這個 deferred 物件代表的事件是成功的話就執行 <a href="http://api.jquery.com/deferred.resolve/">resolve()</a>，deferred 物件會把它所知道，事情成功的話要做的事情照順序做過，失敗的話就執行 <a href="http://api.jquery.com/deferred.resolve/">reject()</a>，一樣 deferred 物件會把失敗時要做的事情做一遍。而在事件結果確定之後，deferred 物件還是可以繼續接收函式，只是就像 <code>.ready()</code> 一樣，會變成馬上執行（或是直接丟掉不裡）。而 jqXHR 物件本身就代表 XMLHttpRequest 這件事情，request 的結果就是 jqXHR 的結果，它會在 request 成功的時候 resolve，失敗的時候 reject，換成這樣的架構後，做 ajax 變成可以在任何時間丟入複數的 callback，再也不用在建立 request 的時候就把需要的 callback 都準備好，使用上整個方便很多，程式的架構也因此可以變得更自由。</p>

<p>而除了 ajax 相關的函式之外， jQuery 也提供函式可以產生空白的 deferred 物件，然後程式設計師可以自己設計它代表的事件以及其行為，相信這個新的設計可以讓 jQuery 的 plugin 開發變得更簡單，基本上非同步的東西都可以使用 deferred 物件，我想應該不少的使用者行為可以用 deferred 物件來重新設計並且有更好的架構才是。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000670" baseName="gundovim">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-02-27</b:date>
				<b:time>00:01:32</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Gundo.vim</b:title>
			<b:content>
				<b:summary> 詳細可以看 Vimcast 最新的一期：Undo branching and Gundo.vim，簡單說就是 Vim 有個 undo branch 讓你 undo 後又做了修改後，還可以回到原來 undo 前的版本，不過標準的操作方式並不好用，甚至很多人都不知道有這個功能，因此 Steve Losh 做了個 Gundo ，讓 undo branch 圖形化，並且可以直接移動到特定的版本，實在是非常強大，還在開發的時候我就一直很注意了，沒想到忘了一陣子，它就已經發展到 2.0 了，總之看到後馬上就變成必備的 vim plugin 了:P。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5478866289/" title="Gundo 的 undo branch 圖"><img src="http://farm6.static.flickr.com/5260/5478866289_5f64b4da86.jpg" width="500" height="490" alt="Gundo 的 undo branch 圖" /></a></p>

<p>詳細可以看 Vimcast 最新的一期：<a href="http://vimcasts.org/episodes/undo-branching-and-gundo-vim/">Undo branching and Gundo.vim</a>，簡單說就是 Vim 有個 undo branch 讓你 undo 後又做了修改後，還可以回到原來 undo 前的版本，不過標準的操作方式並不好用，甚至很多人都不知道有這個功能，因此  <a href="http://stevelosh.com/">Steve Losh</a> 做了個 <a href="http://sjl.bitbucket.org/gundo.vim/">Gundo</a> ，讓 undo branch 圖形化，並且可以直接移動到特定的版本，實在是非常強大，還在開發的時候我就一直很注意了，沒想到忘了一陣子，它就已經發展到 2.0 了，總之看到後馬上就變成必備的 vim plugin 了:P。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="2"></b:comments>


		</b:entry>

		<b:entry entryID="000669" baseName="dom-range-ierange-rangy">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-02-26</b:date>
				<b:time>20:44:02</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>DOM Range, IERange, rangy</b:title>
			<b:content>
				<b:summary>有在接觸 JavaScript 編輯器的比較會遇到這問題，就是如何存取、甚至修改使用者選取的文字，按照標準的話，應該是使用 DOM 的 Range ，不過一如往常，IE 不支援，預計是 IE9 才會有正式的支援，而之前的版本則是用他們自己的 TextRange ，基本上，TextRange 這個標準還蠻難懂的（意思就是我也還沒能了解），然後總之就是不好使用，所以就有了 IERange 這個函式庫，利用 TextRange 實作了 W3C 的 DOM Range ，而且發展蠻久了，還蠻可靠。 不過 IERange 還有一個問題沒辦法解決，就是輸入欄位如 input 和 textarea 內，文字選取狀態的存取，現在大部分瀏覽器都是支援 selectionStart 、 selectionEnd 這兩個屬性和 setSelectionRange() ，標準是定在 HTML5 的 text field selections...</b:summary>
				<b:mainContent><p>有在接觸 JavaScript 編輯器的比較會遇到這問題，就是如何存取、甚至修改使用者選取的文字，按照標準的話，應該是使用 <a href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html">DOM 的 Range</a> ，不過一如往常，IE 不支援，預計是 <a href="http://blogs.msdn.com/b/ie/archive/2010/05/11/dom-range.aspx">IE9 才會有正式的支援</a>，而之前的版本則是用他們自己的 <a href="http://msdn.microsoft.com/en-us/library/ms535872.aspx">TextRange</a> ，基本上，TextRange 這個標準還蠻難懂的（意思就是我也還沒能了解），然後總之就是不好使用，所以就有了 <a href="http://code.google.com/p/ierange/">IERange</a> 這個函式庫，利用 TextRange 實作了 W3C 的 DOM Range ，而且發展蠻久了，還蠻可靠。</p>

<p>不過 IERange 還有一個問題沒辦法解決，就是輸入欄位如 input 和 textarea 內，文字選取狀態的存取，現在大部分瀏覽器都是支援 <code>selectionStart</code> 、 <code>selectionEnd</code> 這兩個屬性和 <code>setSelectionRange()</code> ，標準是定在 <a href="http://dev.w3.org/html5/spec/Overview.html#textFieldSelection">HTML5 的 text field selections API</a> 裡面，IE 的話則是要使用上面提到的 TextRange 來存取，而且實際上操作也沒很簡單，所以也有位 <a href="http://stackoverflow.com/users/96100/tim-down">Tim Down</a> 弄了 <a href="http://code.google.com/p/rangyinputs/">rangyinputs</a> 這個 <a href="http://code.google.com/p/rangy/">rangy</a> 的簡化版，專門針對跨瀏覽器、文字輸入框的選取所做的函式庫，也有包好的 jQuery Plugin，我看 Stack Overflow 上不少篇相關的問題都有人推薦 rangy （作者本人的推薦也不少XD），實際上下去並測了一下還沒有遇到什麼問題，雖然功能上沒什麼問題，不過還是有些地方有些可惜，就是它的 API 沒有跟著 HTML 標準，然後沒有文件，所以要怎麼用要自己看原始碼，另外我覺得有一些地方設計似乎不是很好，像是 <code>getSelection()</code> 會傳回 range 物件，但是 <code>setSelection()</code> 卻不能直接把 range 物件送進去，要把選取的開始和結束兩個直分成兩個參數丟進去，不過相較於要跟 TextRange 打交道這檔事，這些缺點根本就是優點啊！</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000668" baseName="command-line-js-beautifie">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-01-28</b:date>
				<b:time>01:05:08</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Command Line JS Beautifier</b:title>
			<b:content>
				<b:summary>JS Beautifier 也算是個蠻久的東西了，最近因為需要看一個蠻大的檔案，本身有被縮減檔案的字元過，所以要重新排版才方便閱讀，本來用 Vim 的 JavaScript 縮排功能，不過結果還蠻慘的，後來就想到這個服務，不過不想要貼到網站上，所以先是測試了 Vim 版的，可惜效能超差，後來發現他原始檔有放在 github ，而且有個用 v8 做的 命令列版 ，就照文件說明的來編譯，沒遇到問題就可以用了，而且效能超好，輸出結果又很不錯，如果有相同需求的話推薦使用這個方法來處理。...</b:summary>
				<b:mainContent><p><a href="http://jsbeautifier.org/">JS Beautifier</a> 也算是個蠻久的東西了，最近因為需要看一個蠻大的檔案，本身有被縮減檔案的字元過，所以要重新排版才方便閱讀，本來用 Vim 的 JavaScript 縮排功能，不過結果還蠻慘的，後來就想到這個服務，不過不想要貼到網站上，所以先是測試了 Vim 版的，可惜效能超差，後來發現他原始檔有放在 <a href="https://github.com/einars/js-beautify">github</a> ，而且有個用 v8 做的 <a href="https://github.com/einars/js-beautify/tree/master/v8">命令列版</a> ，就照文件說明的來編譯，沒遇到問題就可以用了，而且效能超好，輸出結果又很不錯，如果有相同需求的話推薦使用這個方法來處理。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000667" baseName="osx-v8-js-command">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-01-28</b:date>
				<b:time>00:45:20</b:time>
			</b:datetime>
			<b:category>mac</b:category>
			<b:title>OSX 安裝 v8 js command</b:title>
			<b:content>
				<b:summary>今天在乾淨的機器上裝，步驟很簡單，不過總之記錄一下 brew install scons git clone git://github.com/v8/v8.git v8 cd v8 scons scons d8 console=readline 然後我會把執行檔放到 ~/bin 裡面 cp d8 ~/bin/ cd ~/bin/ ln -s d8 js...</b:summary>
				<b:mainContent><p>今天在乾淨的機器上裝，步驟很簡單，不過總之記錄一下</p>

<pre><code>brew install scons
git clone git://github.com/v8/v8.git v8
cd v8
scons
scons d8 console=readline</code></pre>

<p>然後我會把執行檔放到 ~/bin 裡面</p>

<pre><code>cp d8 ~/bin/
cd ~/bin/
ln -s d8 js</code></pre>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000666" baseName="html5-2011-01">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2011-01-22</b:date>
				<b:time>09:13:44</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>HTML5 近況 </b:title>
			<b:content>
				<b:summary>首先是比較多人知道的 HTML5 官方 logo ，除了大 logo 外，你還可以根據你用到哪些技術來建立屬於自的小貼紙，現在還有賣 T-shirt ，也有免費的貼紙可以索取，logo 設計好壞見仁見智，我是兩種聲音都有聽到，不過已經有不少地方開始拿來使用了，像是 Chrome 馬上就有人寫個 HTML5 Powered 的小擴充套件，只是在位址列顯示該網站有沒有用 HTML5 而已:P。...</b:summary>
				<b:mainContent><p>首先是比較多人知道的 <a href="http://www.w3.org/html/logo/">HTML5 官方 logo</a> ，除了大 logo 外，你還可以根據你用到哪些技術來建立屬於自的小貼紙，現在還有賣 T-shirt ，也有免費的貼紙可以索取，logo 設計好壞見仁見智，我是兩種聲音都有聽到，不過已經有不少地方開始拿來使用了，像是 Chrome 馬上就有人寫個 <a href="https://chrome.google.com/webstore/detail/klleofbhhghgacodijohlacbfhfcefom">HTML5 Powered</a> 的小擴充套件，只是在位址列顯示該網站有沒有用 HTML5 而已:P。</p>

<p><img src="http://blog.othree.net/log/2011/01/22/html5-2011-01/HTML5_Logo_256.png" width="256" height="256" alt="HTML5 Logo" /></p>
</b:mainContent>
				<b:extendContent><p>最近不少新東西，首先是 HTML-WG 在 13 日時更新了大量的文件，除了 HTML5 標準本身外，周邊的一些文件也一起更新了，包括以下這些文件：</p>

<ul>
<li><a href="http://www.w3.org/TR/2011/WD-html5-20110113/">HTML5</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-html5-diff-20110113/">HTML5 differences from HTML4</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-html-markup-20110113/">HTML: The Markup Language</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-rdfa-in-html-20110113/">HTML+RDFa 1.1</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-microdata-20110113/">HTML Microdata</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-2dcontext-20110113/">HTML Canvas 2D Context</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-html-alt-techniques-20110113/">HTML5: Techniques for providing useful text alternatives</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-html-polyglot-20110113/">Polyglot Markup: HTML-Compatible XHTML Documents</a></li>
</ul>

<p>其中 HTML5 標準本身最主要的變動是多了 <a href="http://www.w3.org/TR/2011/WD-html5-20110113/text-level-semantics.html#the-bdi-element">&lt;bdi&gt;</a> 這個標籤，用途是和 i18n 的文字方向相關的，其實文字方向，光只是左右方向就有不少問題要處理，事實上是比想像的複雜許多，而如果加上直排，那還會更加複雜。其他也還有一些新東西，如果想要看每一版差異， <a href="http://www.w3.org/TR/html5-diff/#changelog">HTML5 differences from HTML4</a> 的 changelog 可以參考，雖然不能保證他是照著主要文件在更新的就是。</p>

<p>另外一份值得推薦的文件是 <a href="http://www.w3.org/TR/html-alt-techniques/">HTML5: Techniques for providing useful text alternatives</a> ，內容是如何提供有用的替代文字，包括給圖片、影片等用的。</p>

<p>上面是 W3C 那邊，接下來要說的是 WHATWG 那邊，他們決定現在維護中 <a href="http://blog.whatwg.org/html-is-the-new-html5">HTML5 要改為 HTML</a> ，並且持續開發，不會照 W3C 那邊的發展流程，會有定案不再修改的一天，算是一個方針性的修改，這樣的方式是好是壞現在還難以定論就是，原來 2012 年 HTML5 會進入 PR 的計畫應該是不會變動，只是狀況可能變成 W3C 那邊進入 PR ，功能不再修改，但是 WHATWG 那邊的 HTML 標準還會持續的修改並加新東西進去。</p>

<p>最後是 <a href="http://www.w3.org/TR/2011/CR-wai-aria-20110118/">WAI-ARIA</a> 進入 CR 了，除了文件狀態更新外，其實 HTML5 的發展和 WAI-ARIA 等一些互相支援的標準還蠻密切的，像是 <a href="http://html5.validator.nu/">html5.validator.nu</a> 這個 HTML5 驗證工具就有支援 WAI-ARIA、SVG、MathML 等，甚至你如果是使用 XHTML 的文件，他也可以正確的處理 namespace 的東西。</p>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

	</b:entries>
</b:blog>
