<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>y</b:listType>
			<b:listData listID="2012">2012</b:listData>

			<b:previous>
				<b:mTitle>2011</b:mTitle>
				<b:mDate>2011</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>2013</b:mTitle>
				<b:mDate>2013</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000728" baseName="2012">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-12-25</b:date>
				<b:time>23:34:08</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>2012</b:title>
			<b:content>
				<b:summary> 因為覺得今年剩下的一週不會再拍什麼照片了，所以就先整理了 2012 年的回顧，和 去年 一樣一個月挑選一張，今年總照片數約是去年的 1.5 倍，不過 12 月的照片超少的，基本上是只有去一次活動，除了 12 月外，其實挑起來都蠻辛苦的......</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/6770411459/" title="Flickr 上 othree 的 初五 行天宮"><img src="//farm8.staticflickr.com/7008/6770411459_53e5e7dc33_b.jpg" width="683" height="1024" alt="初五 行天宮" srcset="//farm8.staticflickr.com/7008/6770411459_53e5e7dc33.jpg 768w, //farm8.staticflickr.com/7008/6770411459_53e5e7dc33_b.jpg 768w 2x" /></a></p>

<p>因為覺得今年剩下的一週不會再拍什麼照片了，所以就先整理了 2012 年的回顧，和 <a href="https://blog.othree.net/log/2012/01/11/2011/">去年</a> 一樣一個月挑選一張，今年總照片數約是去年的 1.5 倍，不過 12 月的照片超少的，基本上是只有去一次活動，除了 12 月外，其實挑起來都蠻辛苦的...</p>
</b:mainContent>
				<b:extendContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/6934844627/" title="Flickr 上 othree 的 武陵"><img src="//farm8.staticflickr.com/7048/6934844627_ba2c5c2c69_b.jpg" width="1024" height="683" alt="武陵" srcset="//farm8.staticflickr.com/7048/6934844627_ba2c5c2c69.jpg 768w, //farm8.staticflickr.com/7048/6934844627_ba2c5c2c69_b.jpg 768w 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/6867823690/" title="Flickr 上 othree 的 仙跡岩"><img src="//farm8.staticflickr.com/7055/6867823690_a536e6f464_b.jpg" width="683" height="1024" alt="仙跡岩" srcset="//farm8.staticflickr.com/7055/6867823690_a536e6f464.jpg 768w, //farm8.staticflickr.com/7055/6867823690_a536e6f464_b.jpg 768w 2x, //farm8.staticflickr.com/7055/6867823690_2c073ad2e5_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/6934148884/" title="Flickr 上 othree 的 OSDC 2012"><img src="//farm8.staticflickr.com/7128/6934148884_0cc8a966e8_b.jpg" width="683" height="1024" alt="OSDC 2012" srcset="//farm8.staticflickr.com/7128/6934148884_0cc8a966e8.jpg 768w, //farm8.staticflickr.com/7128/6934148884_0cc8a966e8_b.jpg 768w 2x, //farm8.staticflickr.com/7128/6934148884_f38bf1c52f_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/7237130650/" title="Flickr 上 othree 的 Ecllipse"><img src="//farm8.staticflickr.com/7096/7237130650_3a35094d95_b.jpg" width="1024" height="683" alt="Ecllipse" srcset="//farm8.staticflickr.com/7096/7237130650_3a35094d95.jpg 768w, //farm8.staticflickr.com/7096/7237130650_3a35094d95_b.jpg 768w 2x, //farm8.staticflickr.com/7096/7237130650_a4c379b407_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/7386204566/" title="Flickr 上 othree 的 象山 101"><img src="//farm6.staticflickr.com/5448/7386204566_6ddcf8273c_b.jpg" width="683" height="1024" alt="象山 101" srcset="//farm6.staticflickr.com/5448/7386204566_6ddcf8273c.jpg 768w, //farm6.staticflickr.com/5448/7386204566_6ddcf8273c_b.jpg 768w 2x, //farm6.staticflickr.com/5448/7386204566_5f26561260_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/7615276736/" title="Flickr 上 othree 的 ROOTAN"><img src="//farm8.staticflickr.com/7273/7615276736_e9f37fec02_b.jpg" width="683" height="1024" alt="ROOTAN" srcset="//farm8.staticflickr.com/7273/7615276736_e9f37fec02.jpg 768w, //farm8.staticflickr.com/7273/7615276736_e9f37fec02_b.jpg 768w 2x, //farm8.staticflickr.com/7273/7615276736_59b65830ef_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/7844871948/" title="Flickr 上 othree 的 COSCUP 2012 Day 1"><img src="//farm8.staticflickr.com/7264/7844871948_e54ef520d0_b.jpg" width="1024" height="394" alt="COSCUP 2012 Day 1" srcset="//farm8.staticflickr.com/7264/7844871948_e54ef520d0.jpg 768w, //farm8.staticflickr.com/7264/7844871948_e54ef520d0_b.jpg 768w 2x, //farm8.staticflickr.com/7264/7844871948_dea6c5b249_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/7996766620/" title="Flickr 上 othree 的 函館夜景"><img src="//farm9.staticflickr.com/8447/7996766620_f2b0f32f39_b.jpg" width="1024" height="343" alt="函館夜景" srcset="//farm9.staticflickr.com/8447/7996766620_f2b0f32f39.jpg 768w, //farm9.staticflickr.com/8447/7996766620_f2b0f32f39_b.jpg 768w 2x, //farm9.staticflickr.com/8447/7996766620_1c8fd0877f_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/8086360690/" title="Flickr 上 othree 的 Police Car"><img src="//farm9.staticflickr.com/8464/8086360690_9d28307700_b.jpg" width="1024" height="683" alt="Police Car" srcset="//farm9.staticflickr.com/8464/8086360690_9d28307700.jpg 768w, //farm9.staticflickr.com/8464/8086360690_9d28307700_b.jpg 768w 2x, //farm9.staticflickr.com/8464/8086360690_220cd0f434_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/8152700231/" title="Flickr 上 othree 的 PHPConf 2012"><img src="//farm9.staticflickr.com/8202/8152700231_f2ece4c3ae_b.jpg" width="683" height="1024" alt="PHPConf 2012" srcset="//farm9.staticflickr.com/8202/8152700231_f2ece4c3ae.jpg 768w, //farm9.staticflickr.com/8202/8152700231_f2ece4c3ae_b.jpg 768w 2x, //farm9.staticflickr.com/8202/8152700231_96f8bc1c66_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/8257302429/" title="Flickr 上 othree 的 摩茲連續聚 TP 榮耀勇士篇"><img src="//farm9.staticflickr.com/8219/8257302429_7756b96b2d_b.jpg" width="683" height="1024" alt="摩茲連續聚 TP 榮耀勇士篇" srcset="//farm9.staticflickr.com/8219/8257302429_7756b96b2d.jpg 768w, //farm9.staticflickr.com/8219/8257302429_7756b96b2d_b.jpg 768w 2x, //farm9.staticflickr.com/8219/8257302429_f95f6b91ec_k.jpg 2x" /></a></p>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000727" baseName="cache-control-and-etag">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-12-22</b:date>
				<b:time>01:24:54</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>Cache Control 與 ETag</b:title>
			<b:content>
				<b:summary>俗話說的好，最快的連線就是不要連線，最快的下載就是不要下載，訪客連到網站的網路狀況其實是不容易由網站這邊來控制的，所以要提升網頁的速度，除了提升網路的可達性外，還有一個方法就是 cache，瀏覽器在需要某個檔案的時候，首先它會檢查是否有 cache，有的話會看有沒有過期，過期的話就根據現有資訊去問 server 有沒有新版，如果 server 比對之後發現有新版的，才會把要求的檔案傳給瀏覽器。這一個流程一共有三個判斷點，分別是： 是否需要無視 cache，前面沒講到，可能是 cache 設定或是瀏覽器設定 有沒有 cache、有沒有過期 Server 端檔案有沒有更新 Cache 的機制早在 HTTP 1.0 時就有制訂了，不過當時只有 Expires 和 Pragma 這兩個 header，其中一個可以指定 cache 過期的時間，另外一個就只能指定叫瀏覽器 no-cache，到了 HTTP 1.1 之後，改成用 Cache-Control 提供更多功能來控制，支援 HTTP 1.1 的瀏覽器，只要看到 Cache-Control 就會忽略 Expires，除了因為 Cache-Control...</b:summary>
				<b:mainContent><p>俗話說的好，最快的連線就是不要連線，最快的下載就是不要下載，訪客連到網站的網路狀況其實是不容易由網站這邊來控制的，所以要提升網頁的速度，除了提升網路的可達性外，還有一個方法就是 cache，瀏覽器在需要某個檔案的時候，首先它會檢查是否有 cache，有的話會看有沒有過期，過期的話就根據現有資訊去問 server 有沒有新版，如果 server 比對之後發現有新版的，才會把要求的檔案傳給瀏覽器。這一個流程一共有三個判斷點，分別是：</p>

<ol>
<li>是否需要無視 cache，前面沒講到，可能是 cache 設定或是瀏覽器設定</li>
<li>有沒有 cache、有沒有過期</li>
<li>Server 端檔案有沒有更新</li>
</ol>

<p>Cache 的機制早在 HTTP 1.0 時就有制訂了，不過當時只有 Expires 和 Pragma 這兩個 header，其中一個可以指定 cache 過期的時間，另外一個就只能指定叫瀏覽器 no-cache，到了 HTTP 1.1 之後，改成用 Cache-Control 提供更多功能來控制，支援 HTTP 1.1 的瀏覽器，只要看到 Cache-Control 就會忽略 Expires，除了因為 Cache-Control 的功能比較強大外，單純就過期時間的這點來看，Expires 看的是 ISO Time，會有 server 和 client 之間的時差問題，而 Cache-Control 則是用 max-age 直接說這個 Cache 可以活多久，就沒了時差問題。</p>

<p>Cache-Control 除了 max-age 外還有很多參數可以用，簡單介紹幾個常用的：</p>

<ul>
<li>no-store, 完全不存下來，所以完全沒有 cache</li>
<li>no-cache, 雖然會 cache，但還是會每次都問有沒有新內容，就是三個判斷點的第一個</li>
<li>private, 限制在只有現在這個使用者可以用，通常用於敏感資料</li>
<li>public, cache 公開讓不同使用者用，如果是有 HTTP Auth 的網頁，預設會是 private cache</li>
<li>must-revalidate, 在一些情形下會去檢查內容是否有更新，像是使用者自己重新造訪頁面時，也是第一個判斷點</li>
</ul>

<p>根據 Cache-Control 的規則，瀏覽器在有需要時會去問 Server 是否有新版本，而這裡根據的資訊就是 Date 和 ETag 兩個資訊。Date 很簡單，就是回 request 的時間，ETag 全名是 Entity Tag，可以想成是該檔案的版本 hash，理想上確實是用 hash 來當 ETag 最合適，不過不可能每次 request 都算 hash，所以 Apache 內建的 ETag 機制是用 inode、檔案大小和最後修改時間來產生的，不過這種方法有個缺點，在 YSlow 的 guide 有提到其中的 inode 在有負載平衡的架構下，不同機器會產生出不一樣的 ETag，結果反而可能會造成不需要重新抓的檔案又下載一次，雖然說 Apache 也是可以指定說不要用 inode 來生 ETag 啦。</p>

<p>個人建議是如果是 CMS 之類的系統，每個節點都可以在變動時重算 hash，然後在 response 的時候加上 ETag header，其他靜態檔案就用 Apache 的 ETag，有負載平衡機制的話就把 inode 的部分拿掉就好了。當然也是可以照 YSlow 的建議就是完全不用 ETag，只看修改時間，當然有個小缺點是，時間單位的最小精度是秒，如果是一秒內內容就會一直變動的話，就不適合使用了，似乎也很少這種需求就是（又要 cache 又要在一秒內數次變動還要能反應）。</p>

<p>瀏覽器如果要問 Server 有沒有新東西的話，就會帶著這兩個資訊一起去問，Date 會變成 If-Modified-Since，字面意思就是從那個時間點以後有更新的話。Etag 則會變成 If-None-Match，字面上意思就是如果和這個不一樣的話。Server 端除非是 Apache 直接 host 的靜態檔案，都要 Server Side 的程式自己來處理，有些 Framework 就有內建支援，像是 Rails。如果要自己實做的話，其實檢查是否有新東西這個動作有分嚴謹 (strong) 和寬鬆 (weak) 兩種驗證方式，其中用更新時間判斷的話，是屬於寬鬆驗證的，因為它的時間精度只有一秒。而 ETag 也不是完全就是嚴謹的驗證方式，其實 ETag 的格式有兩種：</p>

<pre><code>ETag: "1234abcd"
ETag: W/"1234abcd"
</code></pre>

<p>第一種是嚴謹的 ETag，第二種就是寬鬆的格式，W 代表的是 weak，如果宣告是寬鬆的話，那代表的意思是檔案內容不完全相同，但是可以互相通用，像是有沒有最小化過的 JS/CSS，更新解析度的圖片或是小修正排版的文章等等都是，不過如果用寬鬆判斷，由於檔案內容可能不相同，所以就無法用區段下載的功能，也就是所謂的續傳功能，通常這會搭配的是 If-Match，確定要抓的檔案是同一份。理想上支援寬鬆驗證的話可以減少更多的實際傳輸，因為一些小修改可以不用更新訪客端的 cache，不過實際上好像沒看到有人實做，而且實做起來也不是很簡單，所以一般看到有用 ETag 的話都是用嚴謹版的。</p>

<p>總之，如果 server 端判斷說沒有新內容的話，那就回個 304 Not Modified 的 header 就可以了，同時還可以趁機更新 cache 的 expire time，這樣就不會內容依然沒更新，但是 cache 過期讓瀏覽器還是一直問你更新了沒。</p>

<p>最前面提到三個判斷點當中的第一二兩個判斷點是用來決定要不要跟 Server 發 request，而不管這邊判斷的依據為何，只要結果是有發 request 的話，都還是會照著標準的流程來看 Server 端檔案是否有更新，不過一些情形下，像是瀏覽器關閉 cache 支援的時候，發出去的 request 不會有 If-Modified-Since 和 If-None-Match，所以這時候一定會把檔案抓一份回來。</p>

<p>最後設定完後，以本 blog 為例，還沒有 cache 時：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8293989580/" title="Flickr 上 othree 的 chrome nocache"><img src="//farm9.staticflickr.com/8216/8293989580_ec78ce5c8e_b.jpg" width="885" height="931" alt="chrome nocache" srcset="//farm9.staticflickr.com/8216/8293989580_ec78ce5c8e.jpg 768w, //farm9.staticflickr.com/8216/8293989580_ec78ce5c8e_b.jpg 768w 2x" /></a></p>

<p>有 cache 還沒過期，request 不會發出，速度最快：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8292934577/" title="Flickr 上 othree 的 chrome norequest"><img src="//farm9.staticflickr.com/8080/8292934577_d28fd98f9b_b.jpg" width="885" height="931" alt="chrome norequest" srcset="//farm9.staticflickr.com/8080/8292934577_d28fd98f9b.jpg 768w, //farm9.staticflickr.com/8080/8292934577_d28fd98f9b_b.jpg 768w 2x" /></a></p>

<p>Cache 過期去問 server 有沒有更新版時，檔案沒更新所以都是 304 沒抓內容下來：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8293989462/" title="Flickr 上 othree 的 chrome cache"><img src="//farm9.staticflickr.com/8353/8293989462_1dbe5fec22_b.jpg" width="885" height="931" alt="chrome cache" srcset="//farm9.staticflickr.com/8353/8293989462_1dbe5fec22.jpg 768w, //farm9.staticflickr.com/8353/8293989462_1dbe5fec22_b.jpg 768w 2x" /></a></p>

<p>參考資料：</p>

<ul>
<li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">HTTP 1.1 Cache Control</a></li>
<li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.3.3">Weak and Strong Validator</a></li>
<li><a href="http://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation">ETag</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/HTTP_Caching_FAQ">HTTP Caching FAQ</a></li>
<li><a href="http://wp.xdite.net/?p=1045">Rails ETag</a></li>
<li><a href="http://developer.yahoo.com/performance/rules.html#etags">YSlow ETag</a></li>
</ul>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="6"></b:comments>


		</b:entry>

		<b:entry entryID="000726" baseName="mod-proxy">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-12-16</b:date>
				<b:time>22:59:23</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>mod_proxy 的注意事項</b:title>
			<b:content>
				<b:summary> 最近調整 HTTPS 支援的時候，啟用了 Apache 的 mod_proxy，結果我沒注意到預設的 config 檔案會把 open proxy 開起來，沒兩天就被人 scan 到然後狂打，結果就是上圖那個慘狀，我大概第二天有覺得怪怪的，到第三天才發現問題在哪，可以看到關掉之後流量馬上掉下來，又過了好幾天才比較看不出來，不過看 CPU 和 Disk IO： 到現在都還沒回覆到之前的狀況，尤其是 Disk IO，因為會一直寫 log，到現在還是和當初的 loading 有一段差距，後遺症持續很久，到現在還是一直會被打，整個就是長尾理論(?)的活例子。 在這邊奉勸大家要用 Apache 的 mod_proxy 的時候記得要把 ProxyRequests 設成 Off 啊，預設是 On 什麼的根本是蓄意謀殺啊！...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8277973312/" title="Flickr 上 othree 的 Network"><img src="//farm9.staticflickr.com/8217/8277973312_82f5c92af6_b.jpg" width="829" height="384" alt="Network" srcset="//farm9.staticflickr.com/8217/8277973312_82f5c92af6.jpg 768w, //farm9.staticflickr.com/8217/8277973312_82f5c92af6_b.jpg 768w 2x" /></a></p>

<p>最近調整 HTTPS 支援的時候，啟用了 <a href="http://httpd.apache.org/">Apache</a> 的 <a href="http://httpd.apache.org/docs/2.2/mod/mod_proxy.html">mod_proxy</a>，結果我沒注意到預設的 config 檔案會把 open proxy 開起來，沒兩天就被人 scan 到然後狂打，結果就是上圖那個慘狀，我大概第二天有覺得怪怪的，到第三天才發現問題在哪，可以看到關掉之後流量馬上掉下來，又過了好幾天才比較看不出來，不過看 CPU 和 Disk IO：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8276915051/" title="Flickr 上 othree 的 CPU"><img src="//farm9.staticflickr.com/8082/8276915051_90d24d435c_b.jpg" width="829" height="342" alt="CPU" srcset="//farm9.staticflickr.com/8082/8276915051_90d24d435c.jpg 768w, //farm9.staticflickr.com/8082/8276915051_90d24d435c_b.jpg 768w 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8277973240/" title="Flickr 上 othree 的 Disk IO"><img src="//farm9.staticflickr.com/8079/8277973240_8d262d60d7_b.jpg" width="829" height="356" alt="Disk IO" srcset="//farm9.staticflickr.com/8079/8277973240_8d262d60d7.jpg 768w, //farm9.staticflickr.com/8079/8277973240_8d262d60d7_b.jpg 768w 2x" /></a></p>

<p>到現在都還沒回覆到之前的狀況，尤其是 Disk IO，因為會一直寫 log，到現在還是和當初的 loading 有一段差距，後遺症持續很久，到現在還是一直會被打，整個就是長尾理論(?)的活例子。</p>

<p>在這邊奉勸大家要用 Apache 的 mod_proxy 的時候記得要把 <a href="http://httpd.apache.org/docs/2.2/mod/mod_proxy.html#proxyrequests">ProxyRequests</a> 設成 Off 啊，預設是 On 什麼的根本是蓄意謀殺啊！</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000725" baseName="flickr-share-with-templat">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-12-08</b:date>
				<b:time>14:17:54</b:time>
			</b:datetime>
			<b:category>software</b:category>
			<b:title>Flickr Share with Template </b:title>
			<b:content>
				<b:summary> 前幾天在做 srcset 支援 支援時，遇到一個問題是，Flickr 雖然有提供到 2048px 和原始大小的檔案，可是這些高解析度檔案的檔名和 1024px 以下的檔案是不一樣的，所以不能用簡單的加 postfix 來找到位置，所以我每要貼一張圖，就要辛苦的去開 Flickr 的各種 size 來抓他的路徑，然後剪剪貼貼組合出原始碼，這實在太辛苦了，而且手工作業長期下來很容易會出錯，剛好我也對 Flickr 預設的分享用 HTML code 不支援 XHTML 不滿很久了，所以我就決定寫個 Chrome extension 來做這件事。 目前還沒正式公開，沒有上架，專案在 Github 上，現在因為還沒上架，要使用比較麻煩一點，把專案 clone 到本機後，先開啟 Chrome 擴充功能的開發人員模式，然後選 載入未封裝擴充功能，路徑指到專案下的 source 去。 目前樣版語法用 mustache 語法，大概看一下預設的樣版就能懂怎麼用了，不過不是很正式的 parser...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8233565165/" title="Flickr 上 othree 的 flickr share with template"><img src="//farm9.staticflickr.com/8198/8233565165_befb00d8cd_b.jpg" width="1022" height="766" alt="flickr share with template" srcset="//farm9.staticflickr.com/8198/8233565165_befb00d8cd.jpg 768w, //farm9.staticflickr.com/8198/8233565165_befb00d8cd_b.jpg 768w 2x" /></a></p>

<p>前幾天在做 <a href="http://blog.othree.net/log/2012/12/02/srcset/">srcset 支援</a> 支援時，遇到一個問題是，Flickr 雖然有提供到 2048px 和原始大小的檔案，可是這些高解析度檔案的檔名和 1024px 以下的檔案是不一樣的，所以不能用簡單的加 postfix 來找到位置，所以我每要貼一張圖，就要辛苦的去開 Flickr 的各種 size 來抓他的路徑，然後剪剪貼貼組合出原始碼，這實在太辛苦了，而且手工作業長期下來很容易會出錯，剛好我也對 Flickr 預設的分享用 HTML code 不支援 XHTML 不滿很久了，所以我就決定寫個 Chrome extension 來做這件事。</p>

<p>目前還沒正式公開，沒有上架，<a href="https://github.com/othree/flickr-share-template">專案</a>在 Github 上，現在因為還沒上架，要使用比較麻煩一點，把專案 clone 到本機後，先開啟 Chrome 擴充功能的開發人員模式，然後選 <strong>載入未封裝擴充功能</strong>，路徑指到專案下的 source 去。</p>

<p>目前樣版語法用 mustache 語法，大概看一下預設的樣版就能懂怎麼用了，不過不是很正式的 parser 來處理，以後可能會換成 <a href="http://twitter.github.com/hogan.js/">hogan.js</a> 引擎，東西現狀其實只是可以用，還沒有寫文件，寫 License...等，先貼上來其實主要目的是，徵求一組可用的 icon，沒有 icon 就上架好像怪怪，有興趣提供的麻煩跟我聯絡，專案本身會是 MIT License，之後還會弄 Firefox 版，大概就這樣，非常感謝。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000724" baseName="website-improvent">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-12-04</b:date>
				<b:time>23:06:16</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>WebSite Improvent</b:title>
			<b:content>
				<b:summary>這篇文章整理一下這次改版大概是做了哪些東西，其實一開始的目標很簡單，就是對以前的樣式不滿很久了，想要一個簡潔，沒有多餘東西的版面，不過實際上讓我動手的原因其實是我開始有 Responsive Web Site 的需求了，我想很多人都知道，現在全世界可以上網的設備，手持裝置的數量已經和電腦不相上下了，以前我想說要看文章應該不會想在手機上看，可是後來我慢慢瞭解，有很多時候可能是點到朋友在 Twitter 上的分享，所以訪客才會用手機打開你的網頁，如果訪客這時候點開的網頁有支援行動裝置的低解析度，那使用者體驗會好很多。總之，我就想要讓我的部落格也有支援就是，一開始只是想要套用 Twitter Bootstrap，不過之後又陸續加上不少東西，整理如下： Bootstrap 這次使用 Bootstrap 的 CSS Framework 來支援不同解析度的瀏覽介面，套用起來很簡單，預設的樣式就很不錯，像是表單之類的元件我就不用另外費心思來處理，主要是調整行高之類的改善排版，讓中文文章的閱讀更輕鬆些，顏色和背景則是從 日本的傳統色 那裡挑來的，目前是還沒考慮到配色的協調，應該還會再調整。 Web Fonts 用了 Google Web fonts，分別在頁首 logo 和程式碼區塊，範例： @media (-webkit-min-device-pixel-ratio: 2), (min--moz-device-pixel-ratio: 2), (min-resolution: 2dppx) Logo 部分當然就是要讓它比較不一樣些，所以找了個很特別的 8bit 風格字體，至於程式碼區塊，有一個基本要求是要是等寬字形，不然程式碼每個字元垂直對不齊會超難受的，後來用的是設計給 Android 手機的 Droid...</b:summary>
				<b:mainContent><p>這篇文章整理一下這次改版大概是做了哪些東西，其實一開始的目標很簡單，就是對以前的樣式不滿很久了，想要一個簡潔，沒有多餘東西的版面，不過實際上讓我動手的原因其實是我開始有 Responsive Web Site 的需求了，我想很多人都知道，現在全世界可以上網的設備，手持裝置的數量已經和電腦不相上下了，以前我想說要看文章應該不會想在手機上看，可是後來我慢慢瞭解，有很多時候可能是點到朋友在 Twitter 上的分享，所以訪客才會用手機打開你的網頁，如果訪客這時候點開的網頁有支援行動裝置的低解析度，那使用者體驗會好很多。總之，我就想要讓我的部落格也有支援就是，一開始只是想要套用 Twitter Bootstrap，不過之後又陸續加上不少東西，整理如下：</p>

<h5>Bootstrap</h5>

<p>這次使用 Bootstrap 的 CSS Framework 來支援不同解析度的瀏覽介面，套用起來很簡單，預設的樣式就很不錯，像是表單之類的元件我就不用另外費心思來處理，主要是調整行高之類的改善排版，讓中文文章的閱讀更輕鬆些，顏色和背景則是從 <a href="http://blog.othree.net/log/2012/11/22/nippon-colors/">日本的傳統色</a> 那裡挑來的，目前是還沒考慮到配色的協調，應該還會再調整。</p>

<h5>Web Fonts</h5>

<p>用了 <a href="http://www.google.com/webfonts">Google Web fonts</a>，分別在頁首 logo 和程式碼區塊，範例：</p>

<pre><code>@media (-webkit-min-device-pixel-ratio: 2),
       (min--moz-device-pixel-ratio: 2),
       (min-resolution: 2dppx)
</code></pre>

<p>Logo 部分當然就是要讓它比較不一樣些，所以找了個很特別的 8bit 風格字體，至於程式碼區塊，有一個基本要求是要是等寬字形，不然程式碼每個字元垂直對不齊會超難受的，後來用的是設計給 Android 手機的 Droid Sans，Google Web Fonts 有個好處是完全照標準 CSS 的用法，而且免費。</p>

<h5>DevicePixelRatio Support</h5>

<p>這也是之前 <a href="http://blog.othree.net/log/2012/10/28/device-pixel-ratio/">介紹</a> 過，讓高解析度螢幕的環境可以使用比較大張的圖片，配合 flickr 的命名規則作的，自己用 iPad 看起來是蠻漂亮的啦。</p>

<h5>Default sans-serif font</h5>

<p>以前有介紹過判斷訪客瀏覽器是否支援字體渲染的 <a href="http://blog.othree.net/log/2011/03/06/default-font-style/">方法</a>，當時我給 Windows 的預設是不支援，不過時代在改變，所以現在預設的字型都是黑體了，如果瀏覽器判斷出來不支援字體渲染，那會改用系統預設字形，通常會是新細明體，會做這樣的改變事我自己有時候會看到切換字型那瞬間的跳動，老實說一直跳是不太舒服啦，所以我想讓看到的人盡量減少，考量到現在數據上訪客用 Windows 7 的使用者已經大於其他所有的 Windows 的使用者的總和，所以我就這樣改了。</p>

<h5>Twitter Cards and Open Graph Protocol</h5>

<p>接下來的改造則是社群網路的結合，這部分是以前完全沒弄過的部分，主要的原因是太多社群網路了，但是每個社群網路間都有堵 <a href="http://www.w3.org/2010/Talks/0303-socialcloud-tbl/">高牆</a>，使用者要跨越這些高牆非常困難，一個只用 Facebook 的人無法和只用 Twitter 的人從社群網路上有太多互動，就像是陷入飛彈發射井一樣。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8215041817/" title="Flickr 上 othree 的 Social Network Silos"><img src="//farm9.staticflickr.com/8489/8215041817_a15170fb3d_b.jpg" width="1024" height="845" alt="Social Network Silos" srcset="//farm9.staticflickr.com/8489/8215041817_a15170fb3d.jpg 768w, //farm9.staticflickr.com/8489/8215041817_a15170fb3d_b.jpg 768w 2x" /></a></p>

<p>從網站開發者這端來看，要減少這個社群網路的壟斷，基本上就是增加支援不同的社群網路，不過社群網站太多了，簡單 Google 一下 <a href="https://www.google.com.tw/search?num=10&amp;hl=zh-TW&amp;site=imghp&amp;tbm=isch&amp;source=hp&amp;q=social+network+buttons&amp;oq=social+network+buttons">Social Network Buttons</a> 就可以看到一大堆按鈕，要公平的對待每個社群網路，那就是每個都支援，可以想像要是每篇文章都這麼多按鈕要加，那是會多可怕的畫面，所以現狀雖然很殘酷，不過網際網路目前確實是被社群網路控制著的，最大的就是 Facebook 和 Twitter 兩家。</p>

<p>不過先不看社群網路的壟斷問題，資訊在網路上傳播的方式已經從最早的入口網站、搜尋網站這種使用者主動尋找的模式，經過 RSS 訂閱機制這種半被動方式，到現在透過社群網路分享，使用者只要做這那邊等朋友們分享的資訊，看似被動模式，不過其實是角色之間界線的消失了，在社群網路內的每個人都可能是資訊的提供者、傳播者或接收者。</p>

<p>話題有點扯遠了，總之社群網站礙於使用性我不可能全部支援，所以就挑最大的三家支援，Facebook、Twitter、Google+，而第一步就是 <a href="http://blog.othree.net/log/2012/11/02/opengraph-protocol-twitter-card/">Twitter Cards 和 Open Graph Protocol</a>，其中 Twitter Cards 目前需要申請，而且我自己測試過，個人網站也是會通過的。</p>

<h5>Twitter Feed</h5>

<p>第二步就是讓新文章能主動發佈到社群網站上，這邊是使用 <a href="http://twitterfeed.com/">twitter feed</a> 這個服務，目前由於 Google+ 沒有開放 API，所以只支援 Twitter 和 Facebook，只要給該服務你網站內容的 RSS 並透過社群網站的授權機制授權給它發文，它就會在 RSS 有更新時，自動用你的帳號在你的 timeline 貼連結，不過這個服務其實是 <a href="https://bitly.com/">bit.ly</a> 的相關服務，所以貼過去的連結其實是 bit.ly 短網址，好處是會有 bit.ly 的統計資料，而且也不影響 Twitter Card 的功能。</p>

<h5>Social Network Buttons</h5>

<p>最後一個社群網站相關的修改是加上這三個社群網站的分享按鈕，也是很基本就照文件說明，不過比較麻煩的是按鈕樣式的選擇，本來是想要放最小的，20px 高的那種，可是因為寬度問題，由於都是用 iframe 實做，iframe 裡不同網域的程式碼無法動到 iframe 本身的大小，結果就是會讓這些按鈕後面需要預留空間，當多個按鈕要放一起時，就會出現間距不相同的情形。後來我就改成現在的形式，好處是寬高固定，比較可以控制位置，不過我發現三家社群網路的類似形式的按鈕還是故意有些不相容，眼尖的人可以能會發現他們高度不一樣，分別有 59px、60px、61px，如果把 Pinterest 也算上來，那還有 57px，還真是不知道該說什麼...</p>

<h5>HTTPS</h5>

<p>最後還有一個比較不重要，純粹是自爽的，就是現在本 blog 支援 HTTPS 連線了，一開始的動機只是因為看到 Chrome 會說網站尚未驗證身份，所以就一不做二不休，弄到有綠色鎖頭出現，不過目前還有一些問題需要處理，所以沒有弄成強制轉成 HTTPS，像是 Twitter Card 白名單好像有分，還有提交給搜尋引擎的 sitemap.xml，還有 canonical url 等都要統一，其實還很多細節要處理就是。</p>

<p>這一兩個月大概就是做了這些改進，斷斷續續的修改，看到什麼就修什麼，其實沒有先列清單，其實還有剛完成的 <a href="http://blog.othree.net/log/2012/12/02/srcset/">srcset</a> 支援的東西就是。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000723" baseName="id-quest">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-12-04</b:date>
				<b:time>22:55:26</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>id 的由來  </b:title>
			<b:content>
				<b:summary>這篇文章實在是拖了很久，最近剛好比較有動力，然後這邊又九週年(2003/12/04)了，所以就來說一下啦，取這 id 是在大學入學時期，加入台大卡漫社後需要取個暱稱和 bbs 系統的 id，othree 這個 id 可以說是從三種地方來的元素組合起來： 首先是 O 這個字母，其實我是要它的形狀，其實就是圓形，取其無意，我記得這部分曾經有人講對過，可是時間太久遠我忘了是誰XD。 小時候台視有撥過一部影集叫「異形終結者」，2005 年 Tom Cruise 有一部片台灣叫「世界大戰」，就是同一部原著小說，原名都叫「War of the Worlds」，總之，3 這個數字對片中的外星人有很特別的意義，手指是三隻，指揮官有三位，機體有三隻腳，其實我一直都對這部影集印象蠻深刻的，而我的 id 的 3 的元素就是從這邊來的。 1997 年的最後一部勇者動畫「勇者王」中，主角群的組織叫做 GGG(Gusty Geoid Guard)，念法是 three G，其實我本來是要模仿這個念法的，結果我當時記錯了，所以就變成 o three 了 XDrz。 所以最後決定的 id 就是 othree，唸做...</b:summary>
				<b:mainContent><p>這篇文章實在是拖了很久，最近剛好比較有動力，然後這邊又九週年(2003/12/04)了，所以就來說一下啦，取這 id 是在大學入學時期，加入台大卡漫社後需要取個暱稱和 bbs 系統的 id，othree 這個 id 可以說是從三種地方來的元素組合起來：</p>

<ol>
<li>首先是 O 這個字母，其實我是要它的形狀，其實就是圓形，取其無意，我記得這部分曾經有人講對過，可是時間太久遠我忘了是誰XD。</li>
<li>小時候台視有撥過一部影集叫「異形終結者」，2005 年 Tom Cruise 有一部片台灣叫「世界大戰」，就是同一部原著小說，原名都叫「War of the Worlds」，總之，3 這個數字對片中的外星人有很特別的意義，手指是三隻，指揮官有三位，機體有三隻腳，其實我一直都對這部影集印象蠻深刻的，而我的 id 的 3 的元素就是從這邊來的。</li>
<li>1997 年的最後一部勇者動畫「勇者王」中，主角群的組織叫做 GGG(Gusty Geoid Guard)，念法是 three G，其實我本來是要模仿這個念法的，結果我當時記錯了，所以就變成 o three 了 XDrz。</li>
</ol>

<p>所以最後決定的 id 就是 othree，唸做 O three，翻成中文的 <strong><em>歐三</em></strong> 大概是最多人叫的，也有用過才三（才和日文假名オ很像）的代稱，其實有時候會被寫成 Othree，雖然是遇到名字首字大寫的禮儀，不過我自己用的時候其實只有 OOO 的形式會用大寫。</p>

<p>大概就是這樣了，其實也不是什麼秘密，只是當面被問到的時候要講清楚實在不容易，所以想說整理寫成文章還可以騙文章數，結果又拖很久才真的動手寫，最後就，未來的日子還請大家多多指教。</p>

<p>參考資料：</p>

<ul>
<li><a href="http://www.gamebase.com.tw/forum/30032/topic/94472130/2#94575377">War of the Worlds 影集介紹</a></li>
<li><a href="http://www.imdb.com/title/tt0407304/">War of the Worlds (2005)</a></li>
<li><a href="http://www.gaogaigar.net/">勇者王ガオガイガー</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%8B%87%E8%80%85%E7%8E%8B">勇者王 wikipedia</a></li>
</ul>
</b:mainContent>
				<b:extendContent><p>最後附一下個人近照:P</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8244815068/" title="Flickr 上 othree 的 PB250965"><img src="//farm9.staticflickr.com/8068/8244815068_7cb819e04d.jpg" width="333" height="500" alt="PB250965" srcset="//farm9.staticflickr.com/8068/8244815068_7cb819e04d.jpg 768w, //farm9.staticflickr.com/8068/8244815068_7cb819e04d_b.jpg 768w 2x" /></a></p>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000722" baseName="srcset">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-12-02</b:date>
				<b:time>17:52:46</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>srcset 支援</b:title>
			<b:content>
				<b:summary> 之前的 Device Pixel Ratio 支援過後，繼續花了時間研究目前的 responsive image spec，目前大概就是 picture 標籤和 srcset 屬性兩種，好像是會兩種併行，picture 標籤的話看起來就像： &lt;picture&gt; &lt;source media="(min-width: 40em)" srcset="big.jpg 1x, big-hd.jpg 2x"&gt; &lt;source srcset="small.jpg 1x, small-hd.jpg 2x"&gt; &lt;img src="fallback.jpg" alt=""&gt; &lt;/picture&gt; 至於 srcset 就長的像： &lt;img src="fallback.jpg" alt="" srcset="small.jpg 640w 1x,...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8229879792/" title="Flickr 上 othree 的 Large"><img src="//farm9.staticflickr.com/8202/8229879792_f364c8645f_b.jpg" width="1024" height="768" alt="Large" srcset="//farm9.staticflickr.com/8202/8229879792_f364c8645f.jpg 768w, //farm9.staticflickr.com/8202/8229879792_f364c8645f_b.jpg 768w 2x, //farm9.staticflickr.com/8202/8229879792_eba1553052_k.jpg 2x" /></a></p>

<p>之前的 <a href="http://blog.othree.net/log/2012/10/28/device-pixel-ratio/">Device Pixel Ratio</a> 支援過後，繼續花了時間研究目前的 responsive image spec，目前大概就是 <a href="http://picture.responsiveimages.org/">picture</a> 標籤和 <a href="http://dev.w3.org/html5/srcset/">srcset</a> 屬性兩種，好像是會兩種併行，picture 標籤的話看起來就像：</p>

<pre><code>&lt;picture&gt;
  &lt;source media="(min-width: 40em)" srcset="big.jpg 1x, big-hd.jpg 2x"&gt;
  &lt;source srcset="small.jpg 1x, small-hd.jpg 2x"&gt;
  &lt;img src="fallback.jpg" alt=""&gt;
&lt;/picture&gt;
</code></pre>

<p>至於 srcset 就長的像：</p>

<pre><code>&lt;img src="fallback.jpg" alt="" srcset="small.jpg 640w 1x, small-hd.jpg 640w 2x, med.jpg 1x, med-hd.jpg 2x "&gt;
</code></pre>

<p>基本上差異就是，picture 標籤內可以用 <a href="http://www.w3.org/TR/css3-mediaqueries/">media-query</a>，而 srcset 裡面的寬高則是代表最大值，也就是等價於 max-width 和 max-height，而不能設定 min-width 或 min-height，目前這兩份標準都是由 <a href="http://responsiveimages.org/">Responsive Images Community Group</a>(RICG) 來制訂，這個 Community Group(CG) 我覺得還蠻特別的，因為他們有自己的 domain，自己的網站，還有 <a href="https://twitter.com/respimg">twitter 帳號</a>、<a href="https://github.com/responsiveimagescg">Github 帳號</a>，和以往的標準 CG 比起來實在差蠻多，不知道組成成員是哪些，都用些很新世代的服務。</p>

<p>我自己是比較喜歡 srcset 這個作法，簡潔很多，不過相對的也就沒有 picture 那樣結構化，不過兩者都有正確的 fallback 機制，所以不管選那個方法，目前的瀏覽器至少都還是可以顯示圖片。現在由於還沒有任何一個瀏覽器開始支援，所以要能實現 responsive image，要碼就是用 javascript library 來實做，要碼就是在 server 端做這件事，RICG 他們推薦的 polyfill library 是 <a href="https://github.com/scottjehl/picturefill">picturefill</a> 這套，不過我不太喜歡，因為它不是用 picture 標籤，而是自定義了一組用 div 和 data attribute 的寫法：</p>

<pre><code>&lt;div data-picture data-alt="A giant stone face at The Bayon temple in Angkor Thom, Cambodia"&gt;
    &lt;div data-src="small.jpg"&gt;&lt;/div&gt;
    &lt;div data-src="medium.jpg"     data-media="(min-width: 400px)"&gt;&lt;/div&gt;
    &lt;div data-src="large.jpg"      data-media="(min-width: 800px)"&gt;&lt;/div&gt;
    &lt;div data-src="extralarge.jpg" data-media="(min-width: 1000px)"&gt;&lt;/div&gt;

    &lt;!-- Fallback content for non-JS browsers. Same img src as the initial, unqualified source element. --&gt;
    &lt;noscript&gt;
        &lt;img src="external/imgs/small.jpg" alt="A giant stone face at The Bayon temple in Angkor Thom, Cambodia"&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
</code></pre>

<p>目前 <a href="http://dribbble.com/">dribbble</a> 是使用這套，另外有一套實做 srcset 的 library 叫 <a href="https://github.com/borismus/srcset-polyfill">srcset-polyfill</a>，這套就是完全照 spec 草稿下去寫的，不過我自己是沒用過，因為我自己是能少用 polyfill 就少用的那種，剛好我的 blog 架構有多一層 XSLT，所以我就把支援做在那層了。我的作法就是 server 端想辦法判斷應該要給瀏覽器哪張圖片，然後 parse 網頁內容後，對有 srcset 的圖片作處理，把原來的 src 替換成適合的圖片位置，做在 XSLT 端的好處是反正那邊本來就要處理網頁的 DOM tree 了，用專門 XML parser 來做這件事情比較不會發生意外這樣，不過基本上就是個 server 端實做，也沒很特別，倒是判斷依據和規則想比較久。</p>

<pre><code>&lt;a class="thumbnail" href="http://www.flickr.com/photos/othree/7877215448/" title="Flickr 上 othree 的 花蓮"&gt;
    &lt;img src="//farm9.staticflickr.com/8431/7877215448_1d8dcf278c_b.jpg" width="1024" height="683" alt="花蓮" 
        srcset="//farm9.staticflickr.com/8431/7877215448_1d8dcf278c.jpg 768w,
            //farm9.staticflickr.com/8431/7877215448_1d8dcf278c_b.jpg 768w 2x,
            //farm9.staticflickr.com/8431/7877215448_9a51e0f42a_k.jpg 2x" /&gt;
&lt;/a&gt;
</code></pre>

<p>目前我會在 srcset 裡面放三張圖，寬度分別是 500px、1024px 和 2048px 的，500px 那張的主要目標是給手機，1024px 那張是一般電腦，2048px 則是要給螢幕夠大且支援 HiDPI 的設備，像是 MBPR 和 iPad 3，基本上和 Device Pixel Ratio 的方法一樣，第一次來的訪客會寫入 cookie，記錄寬高最短邊的長度，只要最短邊小於 768 就給他最小張的寬 500px 的圖，剩下的情形就看 Dvice Pixel Ratio 決定要給哪張。不過光是這樣的規則其實還有些問題，就是頻寬的問題，像是用手機的人用 3G 網路加上螢幕不大，即使只是第一次來也很不需要抓 1024px 的圖片，所以第一次來的訪客我還會用 <a href="https://github.com/serbanghita/Mobile-Detect">Mobile_Detect</a> 來判斷，如果發現是手機的話第一次就會給 500px 的小圖。</p>

<p>目前用 Android Chrome、iPad Safari 還有桌上型電腦測過都有符合預期目標，目前也還沒想到其他改進的方向，可能等市面上的裝置分布有改變的話再調整了吧，不過如果瀏覽器直接支援 srcset 的話，那是最好，我也不需要在修改了:P。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000721" baseName="php-xslt-2">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-12-01</b:date>
				<b:time>23:03:58</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>PHP and XSLT 2.0</b:title>
			<b:content>
				<b:summary>最近弄 srcset 支援的時候，一度需要 XSLT 2.0 的 xsl:function，所以研究一下要怎樣在 php 下可以使用 XSLT 2.0，PHP 自己的 extension 用的是 libxslt，只支援到 1.0，而且沒有支援 2.0 的計畫，所以就需要找其他的引擎，後來是看上 SAXON 這套 Java 寫的 XSLT Processor，有支援 XSLT 2.0，而且近期還有在更新，主要是由 Saxonica 這間公司維護的，有 open source 的 home edition。 找好引擎後第二步就是要怎樣用 PHP load Java 的程式來用了，本來是想看 PHP/Java Bridge，不過我覺得還要弄...</b:summary>
				<b:mainContent><p>最近弄 <a href="http://dev.w3.org/html5/srcset/">srcset</a> 支援的時候，一度需要 XSLT 2.0 的 <a href="http://www.w3.org/TR/xslt20/#element-function">xsl:function</a>，所以研究一下要怎樣在 php 下可以使用 XSLT 2.0，PHP 自己的 <a href="http://php.net/manual/en/book.xsl.php">extension</a> 用的是 <a href="http://xmlsoft.org/XSLT/">libxslt</a>，只支援到 1.0，而且沒有支援 2.0 的計畫，所以就需要找其他的引擎，後來是看上 <a href="http://saxon.sourceforge.net/">SAXON</a> 這套 Java 寫的 XSLT Processor，有支援 XSLT 2.0，而且近期還有在更新，主要是由 <a href="http://www.saxonica.com/welcome/welcome.xml">Saxonica</a> 這間公司維護的，有 open source 的 home edition。</p>

<p>找好引擎後第二步就是要怎樣用 PHP load Java 的程式來用了，本來是想看 <a href="http://php-java-bridge.sourceforge.net/pjb/">PHP/Java Bridge</a>，不過我覺得還要弄 proxy 有些麻煩，幸好有找到 <a href="http://sourceforge.net/projects/xslt2processor/">XML_XSLT2Processor</a> 這個專門來把第三方 XSLT 引擎包起來給 PHP 用的專案，用起來很簡單，API 開的和 PHP 自己的版本都一樣，只是產生物件時要跟他說是要用那個引擎，檔案位置在哪而已：</p>

<pre><code>$proc = new XML_XSLT2Processor('SAXON9', './saxon/saxon9he.jar', 'JAVA-CLI');
</code></pre>

<p>像這樣，後面的用法就和以前都一樣了，設計的很不錯，等於可以只動兩行就換過去，不過實際上用了之後覺得，速度差太多 >_&lt; ，而且我後來發現本來讓我想要使用 XSLT 2.0 的那個錯誤並不是因為需要 xsl:function，而是我沒把 namespace 搞好就去用 <a href="http://www.exslt.org/">EXSLT</a> 的 <a href="http://www.exslt.org/str/functions/tokenize/index.html">tokenize</a> 這個 function，後來根據 stackoverflow 上的 <a href="http://stackoverflow.com/questions/10447292/how-to-implement-xslt-tokenize-function">回答</a> 改動之後，發現可以動我就換去 PHP extension 了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000720" baseName="large-photo-test">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-11-29</b:date>
				<b:time>19:02:18</b:time>
			</b:datetime>
			<b:category>about</b:category>
			<b:title>大圖測試</b:title>
			<b:content>
				<b:summary></b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7877215448/" title="Flickr 上 othree 的 花蓮"><img src="//farm9.staticflickr.com/8431/7877215448_1d8dcf278c_b.jpg" width="1024" height="683" alt="花蓮" srcset="//farm9.staticflickr.com/8431/7877215448_1d8dcf278c.jpg 768w, //farm9.staticflickr.com/8431/7877215448_1d8dcf278c_b.jpg 768w 2x, //farm9.staticflickr.com/8431/7877215448_9a51e0f42a_k.jpg 2x" /></a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000719" baseName="nippon-colors">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-11-22</b:date>
				<b:time>01:34:21</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Nippon Colors</b:title>
			<b:content>
				<b:summary> 最近看到一個很棒的網站，叫做 日本的傳統色，網站顧名思義，就是把日本古時候的一些衣服、器物、裝飾等等的顏色整理出來，提供傳統的顏色名稱還有該顏色的 CMYK、RGB、HEX RGB 等色碼，如果只是這樣那其實就是一些整理加輸入工作而已，不過這個網站做得很漂亮，剛看到時真是驚為天人，整個網站其實是用了不少技巧才弄起來的，像是每個顏色 CMYK 都有各自的圓圈表示百分比，便用到了 mask 和 transform，背景用的那張半透明 png 所產生的質感更是出色，它網站可以讓背景能同時有紙張的質感又讓顏色漸變便是要靠這張圖。 網站的作者是 ONO TAKEHIKO，顏色名稱和色碼的參考資料是 日本の伝統色 這本書，看到資料來源後，我就順手搜尋了一下，發現日本關於日本自己的傳統顏色的書籍意外的多，在 Amazon 搜尋 日本 伝統色 的書籍，結果可以看到 180 筆資料，看起來直接相關的也有 20 本左右。這個數量有多多呢？我在博客來搜尋 中國 傳統色 是找不多顏色相關的書的，改成用 中國 顏色 才找到一本，書名就叫 中國顏色，想說就這一本的話，那就買一下吧，結果我收到貨之後才發現這本書有抄襲的 問題，書中不少篇幅抄襲了雲林科技大學 曾啟雄 教授的 色言色語 系列專欄文章，該專欄文章可以在台灣藝術教育網的 期刊論文...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8205369955/" title="Flickr 上 othree 的 NIPPON COLORS - 日本-伝統色"><img src="//farm9.staticflickr.com/8209/8205369955_27810459ab_b.jpg" width="1024" height="700" alt="NIPPON COLORS - 日本-伝統色" srcset="//farm9.staticflickr.com/8209/8205369955_27810459ab.jpg 768w, //farm9.staticflickr.com/8209/8205369955_27810459ab_b.jpg 768w 2x" /></a></p>

<p>最近看到一個很棒的網站，叫做 <a href="http://nipponcolors.com/">日本的傳統色</a>，網站顧名思義，就是把日本古時候的一些衣服、器物、裝飾等等的顏色整理出來，提供傳統的顏色名稱還有該顏色的 CMYK、RGB、HEX RGB 等色碼，如果只是這樣那其實就是一些整理加輸入工作而已，不過這個網站做得很漂亮，剛看到時真是驚為天人，整個網站其實是用了不少技巧才弄起來的，像是每個顏色 CMYK 都有各自的圓圈表示百分比，便用到了 mask 和 transform，背景用的那張半透明 png 所產生的質感更是出色，它網站可以讓背景能同時有紙張的質感又讓顏色漸變便是要靠這張圖。</p>

<p>網站的作者是 <a href="http://onotakehiko.com/">ONO TAKEHIKO</a>，顏色名稱和色碼的參考資料是 <a href="http://www.amazon.co.jp/dp/475624100X/">日本の伝統色</a> 這本書，看到資料來源後，我就順手搜尋了一下，發現日本關於日本自己的傳統顏色的書籍意外的多，在 Amazon 搜尋 <strong>日本 伝統色</strong> 的書籍，結果可以看到 180 筆資料，看起來直接相關的也有 20 本左右。這個數量有多多呢？我在博客來搜尋 <strong>中國 傳統色</strong> 是找不多顏色相關的書的，改成用 <strong>中國 顏色</strong> 才找到一本，書名就叫 <a href="http://www.books.com.tw/exep/prod/booksfile.php?item=0010529206">中國顏色</a>，想說就這一本的話，那就買一下吧，結果我收到貨之後才發現這本書有抄襲的 <a href="https://www.facebook.com/events/296703853709997/">問題</a>，書中不少篇幅抄襲了雲林科技大學 <a href="http://www.vc.yuntech.edu.tw/program.php?po=member&amp;auth_id=8035991&amp;type=1">曾啟雄</a> 教授的 <strong>色言色語</strong> 系列專欄文章，該專欄文章可以在台灣藝術教育網的 <a href="http://ed.arte.gov.tw/ch/Periodical/list_1.aspx?PageNo=5">期刊論文</a> 區找到不少（找作者），而且都是 <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/tw/">CC BY-NC-ND</a> 授權的，有興趣的人可以去找來看看。</p>

<p>其實我會開始找這些資料，一個原因是我有想做個中國的傳統色彩網頁，因為日本的傳統色網站除了質感很高之外，日本這些顏色的名稱我覺得都漂亮，比較抽象一點的說法或許可以說很有意境、很有 fu，所以就很好奇中國傳統色彩的那些色彩名稱不知道有沒有這麼漂亮。那時候還沒看到 <a href="http://ylbook.com/cms/web/chuantongsecai/chuantongsecai.htm">中國傳統色彩</a> 這網站，所以動力比較高，就一路找到了曾教授那邊，發現他有成立一個 Facebook 社團叫 <a href="https://www.facebook.com/groups/314215438614691/">人民公色</a> ，還算蠻活躍的，而除此之外，曾教授也是有顏色相關的專書，其中一本「<strong>中國失落的色彩</strong>」特別吸引我，很可惜的是已經絕版了，不過我在尋找這些資訊的途中發現，其實在色彩學這塊，對岸的大陸同胞也很多人在探討，甚至專門書籍還比台灣這邊多，曾教授的文章被抄襲也有人幫忙打抱不平。</p>

<p>總之，我開始找起簡體的中國傳統色彩書籍，結果找到一本 <a href="http://book.douban.com/subject/4091840/">中国传统色彩图鉴</a> 很符合我的目標，於是就下訂了，目前是還沒收到書，我之後又發現書中介紹的顏色已經有人把他放上 <a href="http://www.anfuture.cn/blog/?p=1091">網路</a> 了，所以我其實好像已經可以開始動工了，不過最近有懶，想到要自己動手輸入色碼就....</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="3"></b:comments>


		</b:entry>

		<b:entry entryID="000718" baseName="yilang">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-11-17</b:date>
				<b:time>01:58:03</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>宜蘭 </b:title>
			<b:content>
				<b:summary> 最近因故去宜蘭玩了兩趟，所以挑了 10 張照片來分享，這次都是用新的 Olympus M.ZD 12mm 鏡頭拍的，這顆本來只是要取代 14mm 那顆，當成拍研討會時的廣角鏡，不過沒想到出來玩也可以一顆鏡頭用到底，Olympus 最近出的鏡頭真是都很不錯，做工精美，解析度也高，售價也跟著高很多就是，也只買的起一顆而已，不過過陣子還會入手長焦段鏡頭，這樣有研討紀錄應該可以弄的更好吧。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8174030719/" title="Flickr 上 othree 的 蘭陽博物館"><img src="//farm9.staticflickr.com/8065/8174030719_e33d1d1cb4_b.jpg" width="1024" height="683" alt="蘭陽博物館" srcset="//farm9.staticflickr.com/8065/8174030719_e33d1d1cb4.jpg 768w, //farm9.staticflickr.com/8065/8174030719_e33d1d1cb4_b.jpg 768w 2x, //farm9.staticflickr.com/8065/8174030719_471b186ad4_k.jpg 2x" /></a></p>

<p>最近因故去宜蘭玩了兩趟，所以挑了 10 張照片來分享，這次都是用新的 Olympus M.ZD 12mm 鏡頭拍的，這顆本來只是要取代 14mm 那顆，當成拍研討會時的廣角鏡，不過沒想到出來玩也可以一顆鏡頭用到底，Olympus 最近出的鏡頭真是都很不錯，做工精美，解析度也高，售價也跟著高很多就是，也只買的起一顆而已，不過過陣子還會入手長焦段鏡頭，這樣有研討紀錄應該可以弄的更好吧。</p>
</b:mainContent>
				<b:extendContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8107594901/" title="Flickr 上 othree 的 蘭城晶英紅樓"><img src="//farm9.staticflickr.com/8324/8107594901_4f601a123f_b.jpg" width="1024" height="683" alt="蘭城晶英紅樓" srcset="//farm9.staticflickr.com/8324/8107594901_4f601a123f.jpg 768w, //farm9.staticflickr.com/8324/8107594901_4f601a123f_b.jpg 768w 2x, //farm9.staticflickr.com/8324/8107594901_7819c7e820_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8174067348/" title="Flickr 上 othree 的 嘉澎碳烤"><img src="//farm9.staticflickr.com/8067/8174067348_9c5df53b7b_b.jpg" width="1024" height="683" alt="嘉澎碳烤" srcset="//farm9.staticflickr.com/8067/8174067348_9c5df53b7b.jpg 768w, //farm9.staticflickr.com/8067/8174067348_9c5df53b7b_b.jpg 768w 2x, //farm9.staticflickr.com/8067/8174067348_7477f36e17_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8107604020/" title="Flickr 上 othree 的 蘭城晶英紅樓 櫻桃鴨"><img src="//farm9.staticflickr.com/8334/8107604020_b027a69c20_b.jpg" width="1024" height="683" alt="蘭城晶英紅樓 櫻桃鴨" srcset="//farm9.staticflickr.com/8334/8107604020_b027a69c20.jpg 768w, //farm9.staticflickr.com/8334/8107604020_b027a69c20_b.jpg 768w 2x, //farm9.staticflickr.com/8334/8107604020_dfc8483d01_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8107675994/" title="Flickr 上 othree 的 金車酒廠"><img src="//farm9.staticflickr.com/8334/8107675994_76c1096d24_b.jpg" width="1024" height="683" alt="金車酒廠" srcset="//farm9.staticflickr.com/8334/8107675994_76c1096d24.jpg 768w, //farm9.staticflickr.com/8334/8107675994_76c1096d24_b.jpg 768w 2x, //farm9.staticflickr.com/8334/8107675994_7ff9658c32_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8174041543/" title="Flickr 上 othree 的 羅東林場 四方無節"><img src="//farm9.staticflickr.com/8070/8174041543_bfa2483078_b.jpg" width="683" height="1024" alt="羅東林場 四方無節" srcset="//farm9.staticflickr.com/8070/8174041543_bfa2483078.jpg 768w, //farm9.staticflickr.com/8070/8174041543_bfa2483078_b.jpg 768w 2x, //farm9.staticflickr.com/8070/8174041543_b1bfbfbdad_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8107745940/" title="Flickr 上 othree 的 羅東林業文化園區"><img src="//farm9.staticflickr.com/8047/8107745940_64cef06753_b.jpg" width="1024" height="683" alt="羅東林業文化園區" srcset="//farm9.staticflickr.com/8047/8107745940_64cef06753.jpg 768w, //farm9.staticflickr.com/8047/8107745940_64cef06753_b.jpg 768w 2x, //farm9.staticflickr.com/8047/8107745940_baad657d6d_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8107744393/" title="Flickr 上 othree 的 羅東夜市"><img src="//farm9.staticflickr.com/8049/8107744393_eb696a593b_b.jpg" width="1024" height="683" alt="羅東夜市" srcset="//farm9.staticflickr.com/8049/8107744393_eb696a593b.jpg 768w, //farm9.staticflickr.com/8049/8107744393_eb696a593b_b.jpg 768w 2x, //farm9.staticflickr.com/8049/8107744393_cd56c2686a_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8107757282/" title="Flickr 上 othree 的 羅東夜市 阿灶伯"><img src="//farm9.staticflickr.com/8052/8107757282_390ca601eb_b.jpg" width="1024" height="683" alt="羅東夜市 阿灶伯" srcset="//farm9.staticflickr.com/8052/8107757282_390ca601eb.jpg 768w, //farm9.staticflickr.com/8052/8107757282_390ca601eb_b.jpg 768w 2x, //farm9.staticflickr.com/8052/8107757282_cde78d66f4_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8174050538/" title="Flickr 上 othree 的 魏姐包心粉圓"><img src="//farm9.staticflickr.com/8066/8174050538_7da32abb85_b.jpg" width="1024" height="683" alt="魏姐包心粉圓" srcset="//farm9.staticflickr.com/8066/8174050538_7da32abb85.jpg 768w, //farm9.staticflickr.com/8066/8174050538_7da32abb85_b.jpg 768w 2x, //farm9.staticflickr.com/8066/8174050538_6920ed9036_k.jpg 2x" /></a></p>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000717" baseName="ctrlpvim">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-11-10</b:date>
				<b:time>00:11:53</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>ctrlp.vim </b:title>
			<b:content>
				<b:summary> Mac 上很有名的編輯軟體 TextMate 在推出時，有很多厲害的功能是以前從未見過的，雖然現在 TextMate 幾乎是處於停滯狀態，新版本遲遲生不出來，最後甚至整個 open source 出來了，不過當年 TextMate 的出現可以說是掀起一波風潮，各家編輯器都開始出現類似的功能，甚至還有些更厲害的變化出現，可以說是文字編輯軟體的革命時期了吧，其中 Vim 這個本來就有廣大的開發者使用的編輯器，當然也出現不少 TextMate 功能的 plugin，像是 snipmate.vim，就是其中之一，至於今天要介紹的，則是另一個很實用的功能，在 TextMate 開啟專案後，可以用 CMD + T 的快速鍵叫出一個快速尋找專案內檔案的小視窗，然後使用者就可以輸入關鍵字來搜尋檔案以便開啟，特別的地方是，這裡它收的關鍵字不是比對檔案內容，而是路徑和檔名，這個功能對於程式設計師這種命令列工具用的很多的人來說，實在是非常的方便，對程式設計師來說，自己想要開啟的檔案路徑、檔名基本上都會有些印象，加上鍵盤打字打的很習慣了，這種操作模式簡直是如魚得水。 Vim 也很快的就有人做出了相似的功能，第一套叫做 command-t，我在初期有嘗試使用過，不過發現一些問題，一是它是使用 Ruby 寫的，不是原生的 Vim Script，所以使用的 Vim 可能還需要自己重新編譯過，第二個問題是它想要把 CMD + T 這個快速鍵也帶過來，不過我記得設定上有些麻煩。因為這兩個原因我後來就沒使用下去。而後來出現的，就是今天的主角： ctrlp.vim，ctrlp.vim 剛好就把我在 command-t...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8157305010/" title="Flickr 上 othree 的 Ctrl + P on Vim with ctrlp.vim"><img src="//farm9.staticflickr.com/8339/8157305010_8f603b1e30_b.jpg" width="1003" height="775" alt="Ctrl + P on Vim with ctrlp.vim" srcset="//farm9.staticflickr.com/8339/8157305010_8f603b1e30.jpg 768w, //farm9.staticflickr.com/8339/8157305010_8f603b1e30_b.jpg 768w 2x" /></a></p>

<p>Mac 上很有名的編輯軟體 <a href="http://macromates.com/">TextMate</a> 在推出時，有很多厲害的功能是以前從未見過的，雖然現在 TextMate 幾乎是處於停滯狀態，新版本遲遲生不出來，最後甚至整個 <a href="https://github.com/textmate/textmate">open source</a> 出來了，不過當年 TextMate 的出現可以說是掀起一波風潮，各家編輯器都開始出現類似的功能，甚至還有些更厲害的變化出現，可以說是文字編輯軟體的革命時期了吧，其中 <a href="http://www.vim.org/">Vim</a> 這個本來就有廣大的開發者使用的編輯器，當然也出現不少 TextMate 功能的 plugin，像是 <a href="https://github.com/garbas/vim-snipmate">snipmate.vim</a>，就是其中之一，至於今天要介紹的，則是另一個很實用的功能，在 TextMate 開啟專案後，可以用 CMD + T 的快速鍵叫出一個快速尋找專案內檔案的小視窗，然後使用者就可以輸入關鍵字來搜尋檔案以便開啟，特別的地方是，這裡它收的關鍵字不是比對檔案內容，而是路徑和檔名，這個功能對於程式設計師這種命令列工具用的很多的人來說，實在是非常的方便，對程式設計師來說，自己想要開啟的檔案路徑、檔名基本上都會有些印象，加上鍵盤打字打的很習慣了，這種操作模式簡直是如魚得水。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8166619003/" title="Flickr 上 othree 的 CMD + T on Textmate"><img src="//farm8.staticflickr.com/7262/8166619003_a615549145_b.jpg" width="1000" height="673" alt="CMD + T on Textmate" srcset="//farm8.staticflickr.com/7262/8166619003_a615549145.jpg 768w, //farm8.staticflickr.com/7262/8166619003_a615549145_b.jpg 768w 2x" /></a></p>

<p>Vim 也很快的就有人做出了相似的功能，第一套叫做 <a href="https://wincent.com/products/command-t">command-t</a>，我在初期有嘗試使用過，不過發現一些問題，一是它是使用 Ruby 寫的，不是原生的 Vim Script，所以使用的 Vim 可能還需要自己重新編譯過，第二個問題是它想要把 CMD + T 這個快速鍵也帶過來，不過我記得設定上有些麻煩。因為這兩個原因我後來就沒使用下去。而後來出現的，就是今天的主角： <a href="http://kien.github.com/ctrlp.vim/">ctrlp.vim</a>，ctrlp.vim 剛好就把我在 command-t 上面遇到的兩個問題都解決了，一是它是純 Vim Script ，有使用 cache 機制做好索引，所以效能也不差，再來，它直接拋棄 CMD + T 這組快速鍵，而挑選了另外一組： Ctrl + P，用 Ctrl 的優點在於跨平台，設定簡單，用了一陣子感覺都很順暢，至於 command-t 我則就沒再使用過了，不過它還有在開發，有興趣的人還是可以試試看，或許我說的那些問題已經小很多了吧。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000716" baseName="schemaorg">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-11-04</b:date>
				<b:time>21:34:29</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>schema.org  </b:title>
			<b:content>
				<b:summary>語意網基本的組成可以分成描述框架和知識本體，框架就是如 RDF 或是 N3 那樣的標準規範，我一開始看到 RDF 規範的時候其實就很納悶，說是語意網很重要的標準，怎麼一點語意的知識都沒有，後來才了解，它只是一個框架，知識是由其他地方來的，在語意網設計下的知識，可以把它分為語彙 (vocabulary) 和關係 (relation)，舉例來說：相機有鏡頭，這句話之中就包含了三個語彙，分別是 相機 、 鏡頭 和 有，相機和鏡頭都是屬於某個特定領域（相機、攝影這個領域）的語彙，會由該領域的人編撰它的相關知識，在這邊就先當他們代表某個物體，而 有 則是一個不同領域來的語彙，它同時也是代表一個關係，代表前者內包含後者，和相機有關的這種關係不勝枚舉，例如相機有關景窗、有快門、要裝底片、標價多少等等，W3C 有一套標準專門是用來制定這些詞彙的意義以及之間的關係，稱作 Web Ontology Language，簡稱為 OWL，應該會有人注意到它的縮寫字母順序不太對，我猜是故意取貓頭鷹的名稱來用的，因為在很多國家貓頭鷹是智慧的象徵。 OWL 要編寫起來其實很辛苦，因為即使只是一個很小很專門的領域，要把特定領域的所有語彙和他們之間的關係整理出來就很不容易了，若不是由有公信力的機構或專家背書，甚至也會被質疑這些知識的可靠度，而且 OWL 語言本身也是很複雜的 XML 語言，是複雜到不會想用純文字編輯軟體寫的程度，另外還有一個我也不想用純文字編輯器編輯的 XML 文件，叫做 XML Schema Definition(XSD)，是用來定義 XML 文件格式的 XML 文件，兩者我都寧願用專門的編輯軟體來處理。 不過回來先只看語彙的部分，目前可以應用的語彙其來源上都不是 W3C，有名的像是 FOAF,...</b:summary>
				<b:mainContent><p>語意網基本的組成可以分成描述框架和知識本體，框架就是如 <a href="http://www.w3.org/RDF/">RDF</a> 或是 <a href="http://www.w3.org/2000/10/swap/doc/">N3</a> 那樣的標準規範，我一開始看到 RDF 規範的時候其實就很納悶，說是語意網很重要的標準，怎麼一點語意的知識都沒有，後來才了解，它只是一個框架，知識是由其他地方來的，在語意網設計下的知識，可以把它分為語彙 (vocabulary) 和關係 (relation)，舉例來說：<em>相機有鏡頭</em>，這句話之中就包含了三個語彙，分別是 <em>相機</em> 、 <em>鏡頭</em> 和 <em>有</em>，相機和鏡頭都是屬於某個特定領域（相機、攝影這個領域）的語彙，會由該領域的人編撰它的相關知識，在這邊就先當他們代表某個物體，而 <em>有</em> 則是一個不同領域來的語彙，它同時也是代表一個關係，代表前者內包含後者，和相機有關的這種關係不勝枚舉，例如相機有關景窗、有快門、要裝底片、標價多少等等，W3C 有一套標準專門是用來制定這些詞彙的意義以及之間的關係，稱作 <a href="http://www.w3.org/TR/owl-features/">Web Ontology Language</a>，簡稱為 OWL，應該會有人注意到它的縮寫字母順序不太對，我猜是故意取貓頭鷹的名稱來用的，因為在很多國家貓頭鷹是智慧的象徵。</p>

<p>OWL 要編寫起來其實很辛苦，因為即使只是一個很小很專門的領域，要把特定領域的所有語彙和他們之間的關係整理出來就很不容易了，若不是由有公信力的機構或專家背書，甚至也會被質疑這些知識的可靠度，而且 OWL 語言本身也是很複雜的 XML 語言，是複雜到不會想用純文字編輯軟體寫的程度，另外還有一個我也不想用純文字編輯器編輯的 XML 文件，叫做 XML Schema Definition(XSD)，是用來定義 XML 文件格式的 XML 文件，兩者我都寧願用專門的編輯軟體來處理。</p>

<p>不過回來先只看語彙的部分，目前可以應用的語彙其來源上都不是 W3C，有名的像是 <a href="http://www.foaf-project.org/">FOAF</a>, <a href="http://dublincore.org/">Dublin Core</a>，前者是用來描述人際關係的，FOAF 是 Friend Of A Friend 的意思，後者則是 1995 年的第一屆 Metadata Workshop 所制訂的，一整套通用性很高，專門用來描述電子資源的後設資料 (metadata) 語彙，W3C 的網站也有<a href="http://semanticweb.org/wiki/Ontology">整理</a>了不少現存 ontology 資源出來，不過有很多時候，即使只有語彙的定義就很有幫助了，像是 microformats 就是用了很多其他地方已經先定義好的語彙來讓結構化的資料值可以對應到不同的屬性上，而且現在的搜尋引擎不止支援 microformats 你也可以用 <a href="http://www.w3.org/TR/xhtml-rdfa-primer/">RDFa</a> 來在網頁中加入結構化的語意資料，去年，三大搜尋引擎龍頭：Google, Yahoo, Bing 宣布了一個合作計畫叫 <a href="http://schema.org/">schema.org</a>，制訂了非常多的語彙建議，像是文章、書、電影、電視、活動、聽眾、工作機會、醫療相關等等的主題都有，並且建議使用 HTML5 的 microdata 機制來內嵌在網頁內提供給搜尋引擎。</p>

<p>舉一個例子，以前介紹 microformats 時的範例：</p>

<pre><code>&lt;div class="hreview"&gt;
 &lt;span&gt;&lt;span class="rating"&gt;5&lt;/span&gt; out of 5 stars&lt;/span&gt;
 &lt;h4 class="summary"&gt;&lt;span class="item fn"&gt;Crepes on Cole&lt;/span&gt; is awesome&lt;/h4&gt;
 &lt;span&gt;Reviewer: &lt;span class="reviewer fn"&gt;Tantek&lt;/span&gt; - 
 &lt;abbr class="dtreviewed" title="20050418T2300-0700"&gt;April 18, 2005&lt;/abbr&gt;&lt;/span&gt;
 &lt;blockquote class="description"&gt;&lt;p&gt;
  Crepes on Cole is one of the best little creperies in San Francisco.
  Excellent food and service. Plenty of tables in a variety of sizes 
  for parties large and small.  Window seating makes for excellent 
  people watching to/from the N-Judah which stops right outside.  
  I've had many fun social gatherings here, as well as gotten 
  plenty of work done thanks to neighborhood WiFi.
 &lt;/p&gt;&lt;/blockquote&gt;
 &lt;p&gt;Visit date: &lt;span&gt;April 2005&lt;/span&gt;&lt;/p&gt;
 &lt;p&gt;Food eaten: &lt;span&gt;Florentine crepe&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>如果改成用 schema.org 建議的 microdata 寫法：</p>

<pre><code>&lt;div itempscope itemtype="http://schema.org/Review"&gt;
 &lt;span&gt;&lt;span itemprop="ratingValue"&gt;5&lt;/span&gt; out of 5 stars&lt;/span&gt;
 &lt;h4 itemprop="itemReviewed" itemscope itemtype="http://schema.org/Book"&gt;&lt;span itemprop="name"&gt;Crepes on Cole&lt;/span&gt; is awesome&lt;/h4&gt;
 &lt;span itemprop="author" itemscope itemtype="http://schema.org/Person"&gt;Reviewer: &lt;span itemprop="name"&gt;Tantek&lt;/span&gt;&lt;/span&gt; - 
 &lt;time itemprop="dateCreated" datetime="20050418T2300"&gt;April 18, 2005&lt;/time&gt;
 &lt;p itemprop="reviewBody"&gt;
  Crepes on Cole is one of the best little creperies in San Francisco.
  Excellent food and service. Plenty of tables in a variety of sizes 
  for parties large and small.  Window seating makes for excellent 
  people watching to/from the N-Judah which stops right outside.  
  I've had many fun social gatherings here, as well as gotten 
  plenty of work done thanks to neighborhood WiFi.
 &lt;/p&gt;
 &lt;p&gt;Visit date: &lt;time&gt;April 2005&lt;/span&gt;&lt;/p&gt;
 &lt;p&gt;Food eaten: &lt;span&gt;Florentine crepe&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>用 microdata 的方法和 microformats 和 RDFa 兩種比起來，我覺得優點在：</p>

<ol>
<li>使用的是標準，設計語意上確實描述資料的屬性來用，這是 microformats 無法辦到的，我覺得 microformats 是屬於過渡時期的規範，所以多要求了最大的相容性</li>
<li>撰寫起來也不會太複雜，且不要求使用 XHTML，這點則是相較於 RDFa，因為規範上，要使用 RDFa 來加註 metadata，是透過 XHTML 的擴充性達到的，如果是單純的 HTML 文件，其實是不能加入其他文件的標籤或屬性的</li>
<li>使用了 URI 的概念作為資料類別的值，用 URI 取代普通單純的類別值有兩個好處，一是在網路上他是絕對唯一，二是未來如果要和其他的標準、後設資料等接軌，或是有人要補上這些資訊的 OWL 文件，都不會是問題</li>
</ol>

<p>基於這些優點，我現在也很推薦使用 schema.org 建議的格式化資料結構，然後我想說看看國內有沒有人用，發現清單上有個 <a href="http://schema.org/Recipe">食譜</a>，就上 <a href="http://icook.tw/">iCook</a> 看看，結果發現有耶！</p>

<p>以下面這道<a href="http://icook.tw/recipes/16641">食譜</a>為例</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8153705385/" title="Flickr 上 othree 的 品靚上菜-照燒雞排 - 食譜、食材與作法 - 《愛料理》食譜分享社群"><img src="//farm8.staticflickr.com/7254/8153705385_cf5b849f07.jpg" width="500" height="343" alt="品靚上菜-照燒雞排 - 食譜、食材與作法 - 《愛料理》食譜分享社群"/></a></p>

<p>丟進 Google 的<a href="http://www.google.com/webmasters/tools/richsnippets">結構化資料測試工具</a>，會產生如下的分析結果（可以自己 <a href="http://www.google.com/webmasters/tools/richsnippets?url=http%3A%2F%2Ficook.tw%2Frecipes%2F16641&amp;html=">試試看</a>，看圖要看原始大小也沒比較方便）：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8153733486/" title="Flickr 上 othree 的 Google Structured Data Testing Tool"><img src="//farm9.staticflickr.com/8490/8153733486_c3527b34b5.jpg" width="207" height="500" alt="Google Structured Data Testing Tool"/></a></p>

<p>這份結果可以很清楚的看到， Google 可以把 iCook 的食譜網頁的各項資訊包括菜名、作者、材料、步驟等都正確的抓出來。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000715" baseName="opengraph-protocol-twitter-card">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-11-02</b:date>
				<b:time>11:07:11</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>Open Graph Protocol, Twitter Card</b:title>
			<b:content>
				<b:summary> 大部分人應該都會有注意到，Facebook 上在分享網誌的時候，會顯示出該網頁的文章摘要以及圖片的縮圖，一般的情形，這是 Facebook 的機器人去分析網頁後，抓出來的資訊，不過對於網站主人來說，其實是可以主動提供這些資訊的，也就是說你可以提供不一樣的網頁標題，摘要內容和要顯示的縮圖給 Facebook 的讀者，Facebook 在 2011 年的 F8 中發表了一個新的 Open Graph Protocol，藉由預先定義好的 meta 標籤來提供這些可以給 Facebook 機器人接收的資訊，使用上很簡單，就是插入一組 meta 標籤在 head 裡面，看起來如下： &lt;meta property="og:title" content="Device Pixel Ratio" /&gt; &lt;meta property="og:url" content="http://blog.othree.net/log/2012/10/28/device-pixel-ratio/" /&gt; &lt;meta property="og:type" content="article" /&gt; &lt;meta property="og:description" content="...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="//www.flickr.com/photos/othree/8146654174/" title="Flickr 上 othree 的 Twitter Card from 影像紀錄區"><img src="//farm9.staticflickr.com/8332/8146654174_48699279f9.jpg" width="422" height="500" alt="Twitter Card from 影像紀錄區" /></a></p>

<p>大部分人應該都會有注意到，Facebook 上在分享網誌的時候，會顯示出該網頁的文章摘要以及圖片的縮圖，一般的情形，這是 Facebook 的機器人去分析網頁後，抓出來的資訊，不過對於網站主人來說，其實是可以主動提供這些資訊的，也就是說你可以提供不一樣的網頁標題，摘要內容和要顯示的縮圖給 Facebook 的讀者，Facebook 在 2011 年的 F8 中發表了一個新的 <a href="http://ogp.me/">Open Graph Protocol</a>，藉由預先定義好的 meta 標籤來提供這些可以給 Facebook 機器人接收的資訊，使用上很簡單，就是插入一組 meta 標籤在 head 裡面，看起來如下：</p>

<pre><code>&lt;meta property="og:title" content="Device Pixel Ratio" /&gt;
&lt;meta property="og:url" content="http://blog.othree.net/log/2012/10/28/device-pixel-ratio/" /&gt;
&lt;meta property="og:type" content="article" /&gt;
&lt;meta property="og:description" content=" 這兩天又對 blog 做了一些加強..." /&gt;
&lt;meta property="og:image" content="http://farm9.staticflickr.com/8463/8128174518_387a27b3dd.jpg" /&gt;
</code></pre>

<p>這組標籤放在你的 head 裡面，如果有人在分享的 facebook 上分享的話，看起來就如下圖：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8146662104/" title="Flickr 上 othree 的 Facebook Open Graph Protocol"><img src="//farm9.staticflickr.com/8191/8146662104_50ff447a3b.jpg" width="500" height="183" alt="Facebook Open Graph Protocol" /></a></p>

<p>Open Graph Protocol 定義的標籤很好理解，也沒有複雜的結構，所以對於開發人員是非常友善，不過其實我是不太樂觀其成的，主要原因是我覺得它是個被 Facebook 控制的封閉標準，網路標準的發展最不希望發生的就是某個標準受至於特定的人或公司，不過其實一年過後的今天，我對 Open Graph Protocol 有改觀不少，也讓我願意在自己的網站上加入這樣的標籤，會讓我改觀的原因有兩個，一是雖然 Facebook 沒有明說過，不過 Open Graph Protocol 的網站上其實是一點 Facebook 的色彩都沒有的，如果不知道前因後果的話，其實不容易發現這套格式是由他們家提出，這讓我覺得他們有希望把這個格式推出去，而不是只限於 Facebook 使用，當然這一切可能都是商業陰謀，所以直到 Twitter 推出了 <a href="https://dev.twitter.com/docs/cards">Twitter Cards</a> 之前，我都還是不敢貿然進場。</p>

<p>今年 Twitter 推出一項新的 API 規格，叫做 Twitter Cards，可以把他想成是 Open Graph Protocol 的 Twitter 版，meta 標籤的部分看起來就像：</p>

<pre><code>&lt;meta name="twitter:card" content="summary" /&gt;
&lt;meta name="twitter:title" content="Device Pixel Ratio" /&gt;
&lt;meta name="twitter:url" content="http://blog.othree.net/log/2012/10/28/device-pixel-ratio/" /&gt;
&lt;meta name="twitter:description" content=" 這兩天又對 blog 做了一些加強..." /&gt;
&lt;meta name="twitter:image" content="http://farm9.staticflickr.com/8463/8128174518_387a27b3dd.jpg" /&gt;
</code></pre>

<p>這張 Twitter Card 結果會在 Twitter 呈現成如下圖的樣子：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8146619231/" title="Flickr 上 othree 的 Twitter Card Preview"><img src="//farm9.staticflickr.com/8193/8146619231_4c368a50d9.jpg" width="464" height="500" alt="Twitter Card Preview" /></a></p>

<p>Twitter Cards 基本上也和 Open Graph Ptotocol 一樣定義了整套相近的標籤屬性，像是 title, desciption, url, image 等就是兩種規格都有的屬性，而最讓我意外的一件事情是，Twitter Card 相容於 Open Graph Protocol，大部分兩種規格都有的屬性，Twitter Cards 都可以支援 Open Graph Protocol 已經寫好的 meta 標籤，所以我如果要同時支援 Twitter 和 Open Graph 不用兩套重複的內容都寫出來，只要先寫 Open Graph Protocol，然後再把 Twitter 不足的部分補上去就可以了：</p>

<pre><code>&lt;meta name="twitter:card" content="summary" /&gt;
&lt;meta property="og:title" content="Device Pixel Ratio" /&gt;
&lt;meta property="og:url" content="http://blog.othree.net/log/2012/10/28/device-pixel-ratio/" /&gt;
&lt;meta property="og:type" content="article" /&gt;
&lt;meta property="og:description" content=" 這兩天又對 blog 做了一些加強..." /&gt;
&lt;meta property="og:image" content="http://farm9.staticflickr.com/8463/8128174518_387a27b3dd.jpg" /&gt;
</code></pre>

<p>其實這樣的相容是可以用語意網的觀念來解釋的，在語意網的世界中，描述事物的框架和事物本身的說明與資訊兩者是分開的，前者基本上是 RDF 標準，在這篇文章的例子就只是簡單的 meta 標籤，而後者也稱為知識本體（ontology），兩者基本上是完全獨立，而知識本體包括了語彙以及語彙之間的關係，在 Open Graph Protocol 中，像是 <em>og:title</em>, <em>og:type</em>, <em>og:decrition</em> 等都是屬於知識本體的語彙，分別有著標題、類別和敘述的意義，而 Twitter Cards 則是瞭解兩者間語彙的關係，建立了像是 <code>og:title = twitter:title</code>, <code>og:description = twitter:description</code> 這樣的關係，因此兩種屬性就是等價的存在。</p>

<p>語意網的部分就先到這部分暫停，下一篇繼續介紹些新東西，回到 Open Graph Protocol，其實我對他有些不滿意的地方，就是 title, description 和 url 這三個屬性，其實在 HTML 裡已經早就有定義好的地方會記錄了，title 當然就是 title 標籤， description 就是 meta description，url 則是 <a href="http://blog.othree.net/log/2011/03/03/canonical-url/">canonical url</a>，不瞭解是什麼原因才讓他們捨棄使用既有的資訊，結果是雖然 Twitter Cards 相容 Open Graph Protocol，但是網頁的 meta data 還是會有重複的資料，實在很可惜，當然我想到一個可能性，就是語意網的支援。</p>

<p>另外一個要提的就是兩個規範都有開發用的預覽工具，分別是 <a href="https://developers.facebook.com/tools/debug">Facebook Object Debugger</a> 和 <a href="https://dev.twitter.com/docs/cards/preview">Twitter Cards Preview Tool</a>，Facebook 對 Open Graph Protocol 的支援是完全開放的，不過 Twitter Cards 目前是白名單機制，似乎是有計畫要完全開放，不過沒有時程，目前是要先申請，台灣我目前只知道 <a href="https://twitter.com/toomore">@Toomore</a> 的 <a href="http://pi.isuphoto.org/">影像紀錄區</a> 申請有過，所以如果有人分享影像紀錄區的作品的話，在 Twitter 上就可以直接預覽到照片了！</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="3"></b:comments>


		</b:entry>

		<b:entry entryID="000714" baseName="device-pixel-ratio">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-10-28</b:date>
				<b:time>22:42:31</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Device Pixel Ratio</b:title>
			<b:content>
				<b:summary> 這兩天又對 blog 做了一些加強，主要是處理 Device Pixel Ratio 和 OpenGraph Protocol 及 Twitter Card 的支援，這篇當然主要是要說 Device Pixel Ratio，這東西是隨著 Apple Device 的 Retina Display 上市後才有的，Retina Display 有著原來的四倍的點數，長寬的 DPI 都是原來的兩倍，但是網頁瀏覽不可能會是直接讓瀏覽器的 window size 變成兩倍寬，這樣的話字會小到難以閱讀，因此有了 Device Pixel Ratio 這樣的設計出現，以橫置的 iPad with Retina Display 為例，window 的...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8128174518/" title="Flickr 上 othree 的 2x compare to 1x"><img src="//farm9.staticflickr.com/8463/8128174518_387a27b3dd.jpg" width="500" height="333" alt="2x compare to 1x"/></a></p>

<p>這兩天又對 blog 做了一些加強，主要是處理 Device Pixel Ratio 和 OpenGraph Protocol 及 Twitter Card 的支援，這篇當然主要是要說 Device Pixel Ratio，這東西是隨著 Apple Device 的 Retina Display 上市後才有的，Retina Display 有著原來的四倍的點數，長寬的 DPI 都是原來的兩倍，但是網頁瀏覽不可能會是直接讓瀏覽器的 window size 變成兩倍寬，這樣的話字會小到難以閱讀，因此有了 Device Pixel Ratio 這樣的設計出現，以橫置的 iPad with Retina Display 為例，window 的 width 是 1024px，而其實際的螢幕點數有 2048 點，除上 Device Pixel Ratio 是 2，結果會剛好回到 1024，對於網頁製作上來說，直接當程式 1024px 寬的畫面來處理基本上就沒問題了。</p>

<p>雖然說好像瀏覽器都幫你把東西解決了，不過其實還會有一個問題需要處理，那就是圖片 asset 的問題，原來的圖片在這些高 DPI 的螢幕上顯示，解析度不夠，結果都會有鉅齒出現，而這裡出現的就是 Device Pixel Ratio 了，要得到 Device Pixel Ratio 的方法目前有兩種，一個是 CSS 用 <a href="https://developer.mozilla.org/en-US/docs/CSS/Media_queries#-moz-device-pixel-ratio">media query</a>：</p>

<pre><code>@media (-webkit-min-device-pixel-ratio: 2),
       (min--moz-device-pixel-ratio: 2),
       (min-resolution: 2dppx)
</code></pre>

<p>這個 <a href="https://developer.mozilla.org/en-US/docs/CSS/Media_queries#-moz-device-pixel-ratio">MDN 提供的範例</a>中，共有三行，第一行是 WebKit Based 瀏覽器用的，像是 iOS 內建的瀏覽器就是用這行，第二行則是給比較舊的 Firefox （&lt; 16）用的，第三行則是 <a href="http://www.w3.org/TR/css3-mediaqueries/#resolution">W3C 提出的標準</a>，W3C 的應該還是會是以後的主流，dppx 代表的是 dots per pixel，除了這個單位外其實還可以用 dpi, dpcm 等密度單位，考量的比較全面，CSS 那邊管的圖片像是元件背景之類的，透過這個 media query 就可以順利的在需要的時候換成不同品質的圖片，另外還有一種圖片來源是動態從 JavaScript 那邊插入的，這目前也有個方法可以支援：</p>

<pre><code>window.devicePixelRatio
</code></pre>

<p>直接讀取這個值就可以知道現在的 device pixel ratio 了，然後根據讀到的值來選擇適當的圖片，不過講到網頁的圖片，其實最先應該想到的是 img 標籤才是，偏偏這兩個方法都不直接適用，而且實際上目前也還沒有針對這個問題，可直接使用的新機制，有人有寫 jQuery plugin 來把圖片換掉，我的作法則是第一次瀏覽不管，不過同時就把 device pixel ratio 數值寫進 cookie，這樣下次使用者來訪，或是他點到其他頁時，server 端就可以知道他用的 device pixel ratio，然後先一步把 img 要丟出的圖片網址處理好，以 flickr 的圖片為例，我平常貼的都是 500px 寬的縮圖，要給 ratio 2 的裝置看則需要 1000px 以上，flickr 最大的縮圖是 1024px，剛好很接近 1000px，又很幸運的兩者檔案路徑只有在檔名最後面差一個 _b ，所以我就很開心的拿來用了，在 XSLT parse 時把 img 標籤，src 是 flickrfarm 來的，檔名結尾不是 _o 的（代表原始檔）的圖片路徑都加上 _b ，結果的差異就是上面第一張圖那樣，其他還抓了不少比較圖，不過都要到 flickr 那去開原始檔比較才看得出差異。</p>

<p><figure class="thumbnail">
<a href="http://www.flickr.com/photos/othree/8128147819/" title="Flickr 上 othree 的 2x compare to 1x"><img src="//farm9.staticflickr.com/8043/8128147819_45f5f33352.jpg" width="500" height="333" alt="2x compare to 1x"/></a>
<figcaption>比較圖原始大小</figcaption>
</figure></p>

<p><figure class="thumbnail">
<a href="http://www.flickr.com/photos/othree/8127784377/" title="Flickr 上 othree 的 Support device pixel ratio 2x"><img src="//farm9.staticflickr.com/8052/8127784377_5db2831fb7.jpg" width="375" height="500" alt="Support device pixel ratio 2x"/></a>
<figcaption>2x 圖片</figcaption>
</figure></p>

<p><figure class="thumbnail">
<a href="http://www.flickr.com/photos/othree/8127811546/" title="Flickr 上 othree 的 Not support device pixel ratio 2x"><img src="//farm9.staticflickr.com/8336/8127811546_4e62af122b.jpg" width="375" height="500" alt="Not support device pixel ratio 2x"/></a>
<figcaption>1x 圖片</figcaption>
</figure></p>

<p>這支寫 device pixel ratio cookie 的程式很簡單，我也放上 github 了，就叫 <a href="https://github.com/othree/dpr-cookie">dpr-cookie</a>，完全 stand alone，不需要其他 Library，有需要的歡迎使用，還沒放上 License 宣告，不過會用 MIT License。</p>

<p>最後提一下 img 標籤的問題，WHATWG 目前是有<a href="http://www.w3.org/community/respimg/2012/05/11/respimg-proposal/">候選方案</a>的，不過我覺得各方意見還很多，要有個定案應該不會太快，看起來會像是這樣：</p>

<pre><code>&lt;img src="face-600-200@1.jpg" alt=""
    set="face-600-200@1.jpg 600w 200h 1x, face-600-200@2.jpg 600w 200h 2x, face-icon.png 200w 200h"&gt;
</code></pre>

<p>或是：</p>

<pre><code>&lt;picture alt=""&gt;
    &lt;source src="mobile.jpg" /&gt;
    &lt;source src="large.jpg" media="min-width: 600px" /&gt;
    &lt;source src="large_1.5x-res.jpg" media="min-width: 600px, min-device-pixel-ratio: 1.5" /&gt;
    &lt;img src="mobile.jpg" /&gt;
&lt;/picture&gt;
</code></pre>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="2"></b:comments>


		</b:entry>

		<b:entry entryID="000713" baseName="seiko-standard">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-10-23</b:date>
				<b:time>00:52:51</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>SEIKO STANDARD</b:title>
			<b:content>
				<b:summary> 大約上個月發現鬧鐘的電池接點已經氧化了，剛好一直有想花錢的衝動，所以就下單買了肖想很久的 SEIKO STANDARD 電子鬧鐘，這系列雖然稱為 STANDARD，會讓人覺得是所謂的標準款，不過其實是只有日本才有，而且不是一直量產的。這個 STANDARD 系列其實除了電子鐘外，還有類比的指針式掛鐘，是 SEIKO 2006 年的 Power Design Project 中，由 深澤直人 設計的，似乎是在 2010 年才開始販賣，設計的主題就是 STANDARD ，標準，看著這系列的時鐘，就會覺得這是一個最基本的電子鐘的樣子，好像每個人都知道的造型一般，可是實際上你會發現，除了這系列外，根本買不到這個造型的時鐘，雖然有廠牌有出些相近的，可是看起來就是元素太多，感覺不對，也因此即使定價不便宜，我還是一口氣買了黑和白兩種顏色，一個放家裡，一個放在辦公室，比較可惜的是現在只買的到最小的，M 和 L 都已經買不到了，使用了幾天感覺都還不差，主要缺點就是液晶面板的對比不夠明顯而已。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8102801682/" title="Flickr 上 othree 的 SEIKO STANDARD"><img src="//farm9.staticflickr.com/8475/8102801682_bf4f3d28b7.jpg" width="500" height="333" alt="SEIKO STANDARD"/></a></p>

<p>大約上個月發現鬧鐘的電池接點已經氧化了，剛好一直有想花錢的衝動，所以就下單買了肖想很久的 <a href="http://www.seiko-clock.co.jp/power_design_project/standard/index.html">SEIKO STANDARD</a> 電子鬧鐘，這系列雖然稱為 STANDARD，會讓人覺得是所謂的標準款，不過其實是只有日本才有，而且不是一直量產的。這個 STANDARD 系列其實除了電子鐘外，還有類比的指針式掛鐘，是 SEIKO 2006 年的 Power Design Project 中，由 <a href="http://www.plusminuszero.jp/">深澤直人</a> 設計的，似乎是在 2010 年才開始販賣，設計的主題就是 <strong>STANDARD</strong> ，標準，看著這系列的時鐘，就會覺得這是一個最基本的電子鐘的樣子，好像每個人都知道的造型一般，可是實際上你會發現，除了這系列外，根本買不到這個造型的時鐘，雖然有廠牌有出些相近的，可是看起來就是元素太多，感覺不對，也因此即使定價不便宜，我還是一口氣買了黑和白兩種顏色，一個放家裡，一個放在辦公室，比較可惜的是現在只買的到最小的，M 和 L 都已經買不到了，使用了幾天感覺都還不差，主要缺點就是液晶面板的對比不夠明顯而已。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8100150468/" title="Flickr 上 othree 的 SEIKO STANDARD"><img src="//farm9.staticflickr.com/8331/8100150468_36382df05e.jpg" width="500" height="333" alt="SEIKO STANDARD"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8100146341/" title="Flickr 上 othree 的 SEIKO STANDARD"><img src="//farm9.staticflickr.com/8043/8100146341_1e12d5a248.jpg" width="500" height="333" alt="SEIKO STANDARD"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8100147393/" title="Flickr 上 othree 的 SEIKO STANDARD"><img src="//farm9.staticflickr.com/8190/8100147393_6de7470720.jpg" width="500" height="333" alt="SEIKO STANDARD"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8100147955/" title="Flickr 上 othree 的 SEIKO STANDARD"><img src="//farm9.staticflickr.com/8185/8100147955_f4e202c10c.jpg" width="500" height="333" alt="SEIKO STANDARD"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8112728924/" title="Flickr 上 othree 的 SEIKO STANDARD"><img src="//farm9.staticflickr.com/8332/8112728924_1384041de2.jpg" width="500" height="333" alt="SEIKO STANDARD"/></a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="3"></b:comments>


		</b:entry>

		<b:entry entryID="000712" baseName="source-code-pro">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-09-27</b:date>
				<b:time>19:55:02</b:time>
			</b:datetime>
			<b:category>mac</b:category>
			<b:title>Source Code Pro</b:title>
			<b:content>
				<b:summary>Adobe 昨天發表了新的等寬字形，叫做 Source Code Pro，從名稱上就知道這設計的目標就是 coding 用，coding 用的字形有幾個需求，像是等寬，數字 1、小寫 l、大寫 I 這些形體上很接近的字母都要可以一眼就能分辨等，目前我使用的是 Inconsolata。 Inconsolata 14 這套字形非常受歡迎，使用的人很多，我也用了很久，每次有新的 coding 字形出來我都還是會嘗試一下，不過大部分時候都只是切過去看一下，沒辦法滿意後就又換回 Inconsolata，不過這次 Adobe 的 Source Code Pro 我有打算用了一陣子看看。 Source Code Pro 14 Regular 直接比較這兩套字形，第一印象就是 Inconsolata 的字寬和字高都比較小，所以同樣面積的畫面其實它是可以顯示比較多東西的，這樣當然是會有缺點，就是畫面比較擁擠，不過這缺點其實沒很嚴重，因為沒有對照組出來其實沒什麼這樣的感覺，不過由於同樣都是 14 字級，Source Code Pro 實在大上不少，所以我決定降一級看看。 Source Code...</b:summary>
				<b:mainContent><p>Adobe 昨天發表了新的等寬字形，叫做 <a href="http://blogs.adobe.com/typblography/2012/09/source-code-pro.html">Source Code Pro</a>，從名稱上就知道這設計的目標就是 coding 用，coding 用的字形有幾個需求，像是等寬，數字 1、小寫 l、大寫 I 這些形體上很接近的字母都要可以一眼就能分辨等，目前我使用的是 <a href="http://levien.com/type/myfonts/inconsolata.html">Inconsolata</a>。</p>

<p><figure class="thumbnail">
<a href="http://www.flickr.com/photos/othree/8028810367/" title="Flickr 上 othree 的 Inconsolata 14"><img src="//farm9.staticflickr.com/8450/8028810367_271ba86417.jpg" width="500" height="275" alt="Inconsolata 14"/></a>
<figcaption>Inconsolata 14</figcaption>
</figure></p>

<p>這套字形非常受歡迎，使用的人很多，我也用了很久，每次有新的 coding 字形出來我都還是會嘗試一下，不過大部分時候都只是切過去看一下，沒辦法滿意後就又換回 Inconsolata，不過這次 Adobe 的 Source Code Pro 我有打算用了一陣子看看。</p>

<p><figure class="thumbnail">
<a href="http://www.flickr.com/photos/othree/8028806742/" title="Flickr 上 othree 的 Source Code Pro 14 Regular"><img src="//farm9.staticflickr.com/8450/8028806742_5b2cd588c1.jpg" width="500" height="275" alt="Source Code Pro 14 Regular"/></a>
<figcaption>Source Code Pro 14 Regular</figcaption>
</figure></p>

<p>直接比較這兩套字形，第一印象就是 Inconsolata 的字寬和字高都比較小，所以同樣面積的畫面其實它是可以顯示比較多東西的，這樣當然是會有缺點，就是畫面比較擁擠，不過這缺點其實沒很嚴重，因為沒有對照組出來其實沒什麼這樣的感覺，不過由於同樣都是 14 字級，Source Code Pro 實在大上不少，所以我決定降一級看看。</p>

<p><figure class="thumbnail">
<a href="http://www.flickr.com/photos/othree/8028806772/" title="Flickr 上 othree 的 Source Code Pro 13 Regular"><img src="//farm9.staticflickr.com/8181/8028806772_3c3db65638.jpg" width="500" height="275" alt="Source Code Pro 13 Regular"/></a>
<figcaption>Source Code Pro 13 Regular</figcaption>
</figure></p>

<p>Source Code Pro 的 14 和 13 實在很接近，基本上只有高度有點差異，不過總之這樣又會覺得字體線條有些太粗，所以最後我是選擇 Light 的 13 字級來使用一陣子，和 Inconsolata 比基本上就是我的字間比較不會那麼擁擠，不過還好我螢幕大，所以也不用擔心可以顯示的程式碼太少的問題。</p>

<p><figure class="thumbnail">
<a href="http://www.flickr.com/photos/othree/8029038525/" title="Flickr 上 othree 的 Source Code Pro 13 Light"><img src="//farm9.staticflickr.com/8319/8029038525_9f60c646f3.jpg" width="500" height="275" alt="Source Code Pro 13 Light"/></a>
<figcaption>Source Code Pro 13 Light</figcaption>
</figure></p>

<p>Source Code Pro 除了在 <a href="http://sourceforge.net/projects/sourcesans.adobe/">Source Forege</a> 和 <a href="https://github.com/adobe/Source-Code-Pro">Github</a> 上發布外，還一起在 <a href="http://www.google.com/webfonts#UsePlace:use/Collection:Source+Code+Pro">Google Web Font</a>、<a href="http://html.adobe.com/edge/webfonts/">Adobe Edge Fonts</a> 等免費的 web font 服務上提供，而且六種粗細等級全部都有，所以我也趁機把我 blog 的程式碼用的字形換過去，本來是用 <a href="http://www.google.com/webfonts#UsePlace:use/Collection:Droid+Sans+Mono">Droid Sans Mono</a> 的，下面可以看到兩者之間的比較：</p>

<p><figure class="thumbnail">
<a href="http://www.flickr.com/photos/othree/8028811136/" title="Flickr 上 othree 的 droid sans vs source code pro"><img src="//farm9.staticflickr.com/8319/8028811136_bc3326f7b2_o.png" width="640" height="160" alt="droid sans vs source code pro"/></a>
<figcaption>Doird Sans vs Source Code Pro (weight: 600)</figcaption>
</figure></p>

<p>這邊我選的是字重 600 的 Semi Bold Source Code Pro，因為 Regular 的在網頁上看起來實在太細，所以選了粗一點的，其實很難說哪個好，Droid Sans Mono 其實看起來還是不錯的，不過總之就先這樣試用一陣子吧～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000711" baseName="apple-earpods">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-09-23</b:date>
				<b:time>23:46:31</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>Apple EarPods</b:title>
			<b:content>
				<b:summary> 這次 Apple 的發表會，當天的主角算是有三樣吧，新的 iPod 產品，iPhone 5，還有一個比較意外的就是新耳機 EarPods，不過其實講到這耳機時，我已經撐不住睡著了，所以我看到消息已經是隔天早上醒來了，一開始也沒很注意，不過看到一些介紹吸引了我的注意，Apple 設計這隻耳機是其中一個目標是可以符合所有人的耳朵，他們還掃描了上百人的耳朵來做為設計的參考，事實上，我就是一個找不到適合的耳塞式耳機的人，因為我的耳朵比較小，所以一般耳塞耳機都會有點擠，然後大約戴個半小時就會開始不舒服，耳朵痛了，所以我要是要買耳機都會考慮耳掛式或是耳罩式，不過這兩種耳機還會有其他的問題需要考慮，總之，看到這點就讓我很想嘗試看看這款新耳機了，後來又聽到網路上其他長輩評價說聲音表現也不錯，可以打死其他同價位的耳機，就更讓我堅定信心，於是昨天我聽說台灣蘋果專賣店已經有現貨，就特別跑了一趟去買了一隻回來。 這次包裝也是依然維持一段簡潔，不過他這繞線真的是講究，我敢保證線條長度是和包裝盒一起決定的，這也是第一次我沒有信心可以還原的蘋果產品包裝，不過包裝畢竟不是重點，重點還是他到底有沒說的這麼神，可以適合這麼多人的耳朵，所以來看一下他新的神祕造型： 令人意外的是，這造型真的很厲害，我戴上去兩三個小時一點都沒有不舒服，真的就只像是放在耳朵那邊，完全沒有壓迫到我的耳朵，而且聲音品質還不錯，至少和我印象中前代耳機差很多（不過我上次使用是很久以前了），低音和空間感都有出來，聲音完整很多，玩 Zoo Keeper Battle 馬上就七連勝，不過今天又一直輸 :'(...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8015602105/" title="Flickr 上 othree 的 Apple EarPod"><img src="//farm9.staticflickr.com/8456/8015602105_b161872e4b.jpg" width="333" height="500" alt="Apple EarPods"/></a></p>

<p>這次 Apple 的發表會，當天的主角算是有三樣吧，新的 iPod 產品，iPhone 5，還有一個比較意外的就是新耳機 <a href="http://www.apple.com/iphone/design/#earpods">EarPods</a>，不過其實講到這耳機時，我已經撐不住睡著了，所以我看到消息已經是隔天早上醒來了，一開始也沒很注意，不過看到一些介紹吸引了我的注意，Apple 設計這隻耳機是其中一個目標是可以符合所有人的耳朵，他們還掃描了上百人的耳朵來做為設計的參考，事實上，我就是一個找不到適合的耳塞式耳機的人，因為我的耳朵比較小，所以一般耳塞耳機都會有點擠，然後大約戴個半小時就會開始不舒服，耳朵痛了，所以我要是要買耳機都會考慮耳掛式或是耳罩式，不過這兩種耳機還會有其他的問題需要考慮，總之，看到這點就讓我很想嘗試看看這款新耳機了，後來又聽到網路上其他長輩評價說聲音表現也不錯，可以打死其他同價位的耳機，就更讓我堅定信心，於是昨天我聽說台灣蘋果專賣店已經有現貨，就特別跑了一趟去買了一隻回來。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8015603167/" title="Flickr 上 othree 的 Apple EarPod"><img src="//farm9.staticflickr.com/8459/8015603167_e6e2e0a8eb.jpg" width="500" height="333" alt="Apple EarPods"/></a></p>

<p>這次包裝也是依然維持一段簡潔，不過他這繞線真的是講究，我敢保證線條長度是和包裝盒一起決定的，這也是第一次我沒有信心可以還原的蘋果產品包裝，不過包裝畢竟不是重點，重點還是他到底有沒說的這麼神，可以適合這麼多人的耳朵，所以來看一下他新的神祕造型：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8015604005/" title="Flickr 上 othree 的 Apple EarPods"><img src="//farm9.staticflickr.com/8173/8015604005_6ddf3b9dce.jpg" width="500" height="333" alt="Apple EarPod"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8015604585/" title="Flickr 上 othree 的 Apple EarPods"><img src="//farm9.staticflickr.com/8296/8015604585_88a4434775.jpg" width="500" height="333" alt="Apple EarPod"/></a></p>

<p>令人意外的是，這造型真的很厲害，我戴上去兩三個小時一點都沒有不舒服，真的就只像是放在耳朵那邊，完全沒有壓迫到我的耳朵，而且聲音品質還不錯，至少和我印象中前代耳機差很多（不過我上次使用是很久以前了），低音和空間感都有出來，聲音完整很多，玩 Zoo Keeper Battle 馬上就七連勝，不過今天又一直輸 :'(</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

		<b:entry entryID="000710" baseName="hokkaido">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-09-16</b:date>
				<b:time>18:49:26</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>北海道</b:title>
			<b:content>
				<b:summary>上上週去了一趟北海道，一路上運氣都不錯，五天行程大約有兩三天是下雨的，不過剛好都是比較不會被下雨影響的後兩天的行程，函館夜景更是幸運，我們下山時看到大量的日本學生證要上去，而且接著就開始下雨了，另外在北海道神宮還抽到大吉，現場還看到日本新人在神宮拍婚紗，回想起來真是運氣不錯，最後挑了12張照片放上來。...</b:summary>
				<b:mainContent><p>上上週去了一趟北海道，一路上運氣都不錯，五天行程大約有兩三天是下雨的，不過剛好都是比較不會被下雨影響的後兩天的行程，函館夜景更是幸運，我們下山時看到大量的日本學生證要上去，而且接著就開始下雨了，另外在北海道神宮還抽到大吉，現場還看到日本新人在神宮拍婚紗，回想起來真是運氣不錯，最後挑了12張照片放上來。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7979247409/" title="Flickr 上 othree 的 美瑛"><img src="//farm9.staticflickr.com/8441/7979247409_18355fcabe.jpg" width="500" height="333" alt="美瑛"/></a></p>
</b:mainContent>
				<b:extendContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7979251757/" title="Flickr 上 othree 的 北海道"><img src="//farm9.staticflickr.com/8443/7979251757_9c740af13b.jpg" width="500" height="333" alt="北海道"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7979273752/" title="Flickr 上 othree 的 四季彩之丘"><img src="//farm9.staticflickr.com/8171/7979273752_ea49906e7a.jpg" width="500" height="333" alt="四季彩之丘"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7979494116/" title="Flickr 上 othree 的 北海道 Flower Land"><img src="//farm9.staticflickr.com/8437/7979494116_e95e7cfe7d.jpg" width="500" height="333" alt="北海道 Flower Land"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7982386148/" title="Flickr 上 othree 的 小樽運河"><img src="//farm9.staticflickr.com/8032/7982386148_367292c092.jpg" width="500" height="333" alt="小樽運河"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7982545860/" title="Flickr 上 othree 的 北海道神宮"><img src="//farm9.staticflickr.com/8297/7982545860_34497c4591.jpg" width="500" height="333" alt="北海道神宮"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7982674965/" title="Flickr 上 othree 的 洞爺湖"><img src="//farm9.staticflickr.com/8041/7982674965_7ea202588c.jpg" width="500" height="333" alt="洞爺湖"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7982818549/" title="Flickr 上 othree 的 洞爺湖煙火"><img src="//farm9.staticflickr.com/8040/7982818549_647dca53ff.jpg" width="500" height="333" alt="洞爺湖煙火"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7985805971/" title="Flickr 上 othree 的 大沼國定公園"><img src="//farm9.staticflickr.com/8042/7985805971_c5b2f8d5a7.jpg" width="500" height="333" alt="大沼國定公園"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7985871129/" title="Flickr 上 othree 的 金森紅磚倉庫群"><img src="//farm9.staticflickr.com/8460/7985871129_2c0b1a2bbf.jpg" width="500" height="333" alt="金森紅磚倉庫群"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7985933181/" title="Flickr 上 othree 的 函館夜景"><img src="//farm9.staticflickr.com/8306/7985933181_64ce7d1c1d.jpg" width="500" height="333" alt="函館夜景"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7986033206/" title="Flickr 上 othree 的 聖女修道院"><img src="//farm9.staticflickr.com/8298/7986033206_7ae0ae76a5.jpg" width="500" height="333" alt="聖女修道院"/></a></p>

<p>最後 bonus 一張飛機上拍的好像是富士山</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7987271604/" title="Flickr 上 othree 的 富士山？"><img src="//farm9.staticflickr.com/8318/7987271604_0353131b77.jpg" width="500" height="333" alt="富士山？"/></a></p>
</b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

		<b:entry entryID="000709" baseName="ie-bug">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-09-06</b:date>
				<b:time>00:30:54</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>我找過最...的 bug</b:title>
			<b:content>
				<b:summary> 最近因為總總原因，工作上在弄的東西要開始處理 IE 的相容問題，讓我想起我寫 JavaScript 以來，找過最難找的一個 bug，當然不意外的，這是一個 IE 上發生的錯誤，因為已經有兩年以上的時間了，所以一些細節其實已經不記得了。 一開始我看到的是有個 JavaScript 錯誤，以前 IE 的 JavaScript 錯誤是只會說有錯誤，錯誤訊息沒什麼幫助，好一點你會看到是哪一行（不過沒說是哪個檔案喔～），於是，我看到了一個不記得是六位數還是七位數的數字，總之是個大到全站的程式碼加起來都沒這麼多的數字... 要定位錯誤發生的位置還有個方法，就是用除錯工具，那時候就是用 Script Debugger，然後就會比較接近現在除錯工具那樣用法，不過想當然，那神祕行號的錯誤自然是用 Script Debugger 也定位不到。 到這種情形就只省下最後一招了，排除法，一步一步的把網頁內用到的 script 拿掉，然後看錯誤什麼時候消失，理論上就可以找到錯誤發生的位置了，理應當是這樣的，我一直是這樣相信的，直到我發現頁面上已經被我砍到沒有 script 了，而錯誤訊息依舊。 最後還好我沒放棄，繼續移除其他東西，結果發現這其實是一個 CSS pseudo-class 造成的 JavaScript 錯誤訊息，當下實在是不知道要說什麼好啊～～...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7827733700/" title="Flickr 上 othree 的 IE &gt;_&lt;"><img src="//farm8.staticflickr.com/7113/7827733700_a217d1b314.jpg" width="500" height="333" alt="IE &gt;_&lt;"/></a></p>

<p>最近因為總總原因，工作上在弄的東西要開始處理 IE 的相容問題，讓我想起我寫 JavaScript 以來，找過最難找的一個 bug，當然不意外的，這是一個 IE 上發生的錯誤，因為已經有兩年以上的時間了，所以一些細節其實已經不記得了。</p>

<p>一開始我看到的是有個 JavaScript 錯誤，以前 IE 的 JavaScript 錯誤是只會說有錯誤，錯誤訊息沒什麼幫助，好一點你會看到是哪一行（不過沒說是哪個檔案喔～），於是，我看到了一個不記得是六位數還是七位數的數字，總之是個大到全站的程式碼加起來都沒這麼多的數字...</p>

<p>要定位錯誤發生的位置還有個方法，就是用除錯工具，那時候就是用 <a href="http://www.microsoft.com/en-us/download/details.aspx?id=22185">Script Debugger</a>，然後就會比較接近現在除錯工具那樣用法，不過想當然，那神祕行號的錯誤自然是用 Script Debugger 也定位不到。</p>

<p>到這種情形就只省下最後一招了，排除法，一步一步的把網頁內用到的 script 拿掉，然後看錯誤什麼時候消失，理論上就可以找到錯誤發生的位置了，理應當是這樣的，我一直是這樣相信的，直到我發現頁面上已經被我砍到沒有 script 了，而錯誤訊息依舊。</p>

<p>最後還好我沒放棄，繼續移除其他東西，結果發現這其實是一個 CSS pseudo-class 造成的 JavaScript 錯誤訊息，當下實在是不知道要說什麼好啊～～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

		<b:entry entryID="000708" baseName="ipad-photo-manager">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-08-24</b:date>
				<b:time>23:55:00</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>iPad 的照片管理</b:title>
			<b:content>
				<b:summary> 現在已經很多人會用 iPad 來看照片了，個人覺得拿一台 iPad 當電子相框其實也還蠻划算的，尤其是 new iPad 的視網模螢幕，看起照片感覺真的是很棒，可是我還是必須要說，iPad 的相片管理真是一團混亂。 先不考慮 iCloud 的 photostream，iPad 內的相片來源有兩種，一種是你從電腦用 iTunes 設定同步 iPhoto 相簿上來，另外一種是直接用相機拍或是用 camera kit 傳進去的，這篇文章要說的第一個問題就是這兩種來源的差異，前者，從電腦同步來的，沒辦法在 iPad 上刪除！你只能接回電腦來處理這種相片，我甚至不能在 iPad 上說我要取消同步這個相簿。 第二個問題是 camera kit 來的相片，如果你是拍 RAW+JPG 的話，用 camera kit 只能把兩種檔案都抓進 iPad，你不能選擇只匯入 RAW 或是只要 JPG，這就算了，匯進 iPad...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7851498758/" title="Flickr 上 othree 的 iPad 看照片"><img src="//farm9.staticflickr.com/8290/7851498758_3d96884dd5.jpg" width="500" height="333" alt="iPad 看照片"/></a></p>

<p>現在已經很多人會用 iPad 來看照片了，個人覺得拿一台 iPad 當電子相框其實也還蠻划算的，尤其是 new iPad 的視網模螢幕，看起照片感覺真的是很棒，可是我還是必須要說，iPad 的相片管理真是一團混亂。</p>

<p>先不考慮 iCloud 的 photostream，iPad 內的相片來源有兩種，一種是你從電腦用 iTunes 設定同步 iPhoto 相簿上來，另外一種是直接用相機拍或是用 camera kit 傳進去的，這篇文章要說的第一個問題就是這兩種來源的差異，前者，從電腦同步來的，沒辦法在 iPad 上刪除！你只能接回電腦來處理這種相片，我甚至不能在 iPad 上說我要取消同步這個相簿。</p>

<p>第二個問題是 camera kit 來的相片，如果你是拍 RAW+JPG 的話，用 camera kit 只能把兩種檔案都抓進 iPad，你不能選擇只匯入 RAW 或是只要 JPG，這就算了，匯進 iPad 的 RAW 是完全用不到的，基本上就是佔空間，而且你也不能透過任何方法只刪除 RAW 或 JPG，整個就是無法理解的設計啊，我覺得要是 iPad 只支援匯入 JPG 也非常合理，但是就做成要就全要，不要拉倒的狀況...</p>

<p>第三個問題是，本來我以為買了 iPhoto 就可以把內建的那個<strong>照片</strong>丟到一邊了，結果我發現，iPhoto 不能刪除照片，而且更鳥的事情是，照片裡面不能作範圍選取，所以我要刪除大量照片就要一張一張點，100 張要點 100 次，還不支援 multitouch 連點，真是非常不親切，不知道這些操作上的不方便什麼時候才會修正，至少我在 iOS 6 上測試過還是一樣就是了。</p>

<p>PS: iPhoto 是可以作範圍選取的。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

		<b:entry entryID="000706" baseName="jquery-deferred-pipe">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-08-21</b:date>
				<b:time>18:41:56</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>jQuery.Deferred.pipe</b:title>
			<b:content>
				<b:summary>這次的 COSCUP 有介紹到 jQuery 的 deferred，當時沒講到的 pipe，其實是非常強大的，當我開始會使用 pipe 時，那種衝擊不遜於當初看到 deferred 和 when 的時候。deferred 是用來監聽非同步變數的狀態，簡單說就是拿到變數的時候，程式還不知道它的值是什麼，deferred 常使用於像是 ajax call，使用者回應等等地方，而配合 deferred 的 when 則是用來監聽複數個 deferred 物件，利用 when 還可以處理比較複雜的非同步相依性問題，不過其實光是有這兩個工具，實際開發一些 Web Application 偶爾還是會覺得有不夠的地方。 先舉一個簡單的例子，要做一個登入頁面，然後要支援 one time password(OTP)，就是像 battle.net 或是 google 的兩步認證那樣，如果簡單寫的話，用 callback，第一階段的程式碼： $.post('/api/login', idpw, function...</b:summary>
				<b:mainContent><p>這次的 COSCUP 有<a href="http://blog.othree.net/log/2012/08/20/coscup-2012-slides/">介紹</a>到 <a href="http://jquery.com/">jQuery</a> 的 <a href="http://api.jquery.com/category/deferred-object/">deferred</a>，當時沒講到的 <a href="http://api.jquery.com/deferred.pipe/">pipe</a>，其實是非常強大的，當我開始會使用 pipe 時，那種衝擊不遜於當初看到 deferred 和 <a href="http://api.jquery.com/jQuery.when/">when</a> 的時候。deferred 是用來監聽非同步變數的狀態，簡單說就是拿到變數的時候，程式還不知道它的值是什麼，deferred 常使用於像是 ajax call，使用者回應等等地方，而配合 deferred 的 when 則是用來監聽複數個 deferred 物件，利用 when 還可以處理比較複雜的非同步相依性問題，不過其實光是有這兩個工具，實際開發一些 Web Application 偶爾還是會覺得有不夠的地方。</p>

<p>先舉一個簡單的例子，要做一個登入頁面，然後要支援 <a href="http://en.wikipedia.org/wiki/One-time_password">one time password</a>(OTP)，就是像 battle.net 或是 google 的兩步認證那樣，如果簡單寫的話，用 callback，第一階段的程式碼：</p>

<pre><code>$.post('/api/login', idpw, function (res) {
    if (res.requireOTP) {
        showOTPUI();
    } else {
        loginSuccess();
    }
}, loginFail);
</code></pre>

<p>然後接著使用者輸入認證碼後的部份：</p>

<pre><code>$.post('/api/', otp, loginSuccess, loginFai);
</code></pre>

<p>這兩段程式碼的流程其實很簡單，就是如果帳號密碼錯，執行 loginFail，如果對的話，看有沒有需要 OTP 驗證，沒需要的話執行 loginSuccess，需要的話再跟使用者要 OTP，然後送去 server 做驗證，結果正確的話執行 loginSuccess，不正確的話執行 loginFail，可以畫成流程圖如下：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7786699632/" title="Flickr 上 othree 的 no pipe"><img src="//farm9.staticflickr.com/8289/7786699632_be23a7d0fa_o.png" width="761" height="172" alt="no pipe"/></a></p>

<p>這個流程基本上沒問題，可是身為一個程式設計師，看到重複的東西出現，就會想要把它拿掉，在這張流程圖中什麼東西重複出現了呢，就是最後的終點，Success 和 Fail 分別出現兩次，看到這種終點出現兩次就會很想修改掉，這時候 pipe 就派上用場了。</p>

<p>Pipe 顧名思義就是管路，和 linux 作業系統命令列介面的 <a href="http://en.wikipedia.org/wiki/Pipeline_(Unix)">pipeline</a> 很像，一樣是一個程式處理完，結果丟到下一個程式繼續處理，一個接一個這樣，只不過 deferred 的 pipe 處理的是非同步的流程，如果使用 jQuery 的 pipe 來處理這個問題，程式碼大概會變成：</p>

<pre><code>$.post('/api/login', idpw).pipe(function (res) {
    _dfd = $.Deferred();
    if (res.requireOTP) {
        showOTPUI(_dfd);
    } else {
        _dfd.resolve();
    }
    return _dfd;
}).then(loginSuccess, loginFail);
</code></pre>

<p>showOTPUI 那邊則要處理使用者輸入認證碼後的行為：</p>

<pre><code>$.post('/api/', otp, _dfd.resolve, _dfd.reject);
</code></pre>

<p>這樣的程式碼就可以看到重複的 loginSuccess 和 loginFail 消失了，流程圖則變成像是下面這樣：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7793084172/" title="Flickr 上 othree 的 pipe"><img src="//farm8.staticflickr.com/7261/7793084172_6b3bcbf282_o.png" width="761" height="212" alt="pipe"/></a></p>

<p>再舉一個例子，假設某個網路服務的使用者資料更新，要同時在前端處理上傳頭像、加密資料等，流程可能會是：</p>

<ol>
<li>檢查欄位</li>
<li>上傳頭像</li>
<li>跟 server 要求加密用的 key</li>
<li>加密資料</li>
<li>把資料上傳</li>
</ol>

<p>這樣的流程中，有三個動作是跟 server 作溝通的非同步工作，分別是上傳頭像、跟 server 要 key 和最後的把資料上傳，但是這五個動作又要照順序作，這種情形就非常適合使用 pipe，下面是一個大概的範例，先定義三個後面 pipe 裡面會用到函數：</p>

<pre><code>var validator = function ($form) {
    return $.Deferred()[_validate($form)? 'resolve' : 'reject']();
};

var upload = function ($file) {
    var prepared = prepare($file);
    return $.post(prepared);
};

var encrypt = function (data, key) {
    var crypt_data = _encrypt(data, key);
    return $.Deferred().resolve(crypt_data);
};
</code></pre>

<p>這些函數在寫的時候要注意到，他們回傳的最好都是 deferred 物件，根據情況可以直接決定它的狀態，接著是重點的，表單的送出事件：</p>

<pre><code>$('#profile-form').on('submit', function () {
    var $form = $(this),
        data = $form.serialize();

    validate($form).pipe(function () {
        return upload($form.find('[name=avatar]'));
    }).pipe(function (avatar_id) {
        data.avatar_id = avatar_id;
    }).pipe(function () {
        return $.get('/api/key');
    }).pipe(function (key) {
        return encrypt(data, key);
    }).pipe(function (crypt_data) {
        return $.post('/api/profile', crypt_data);
    }).done(function () {
        //Do some response to user
    });
});
</code></pre>

<p>而除了這類的應用外，還有一個用途，就是處理複雜的動畫效果，在 COSCUP 的 queue 的那部分，最後的例子，要把 #A, #B, #C 照順序 fade out，其實也是可以用 pipe 來處理，而這要多虧 jQuery 的 <a href="http://api.jquery.com/promise/">.promise</a> 讓 <a href="http://api.jquery.com/queue/">queue</a> 和 deferred 可以接在一起，程式碼如下：</p>

<pre><code>$('#A').fadeOut().promise().pipe(function () {
    return $('#B').fadeOut().promise();
}).pipe(function () {
    return $('#C').fadeOut().promise();
});
</code></pre>

<p>如果單純只是作動畫，那這樣寫並沒有比較好，不過要是你的動畫會和一些其他的 deferred 物件整合、串接，那這功能就很好用了。</p>

<p>最後下個小結論，deferred 是用來代表非同步的變數，when 是平行處理非同步變數，也可以說是並聯的狀態，pipe 則是處理序列的非同步變數，也可以說是串聯的狀態，並聯和串聯當然可以在自己任意連接，所以就可以兼顧到各種狀況了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000707" baseName="coscup-2012-slides">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-08-20</b:date>
				<b:time>00:51:42</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>COSCUP 2012 slides</b:title>
			<b:content>
				<b:summary> /* A_A */ /* A_A */ 說好的 deferred.pipe 文章應該明天就可以貼出了～...</b:summary>
				<b:mainContent><p>
<script async="async" class="speakerdeck-embed" data-id="502fb1b39a533c000203951d" data-ratio="1.3333333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</p>

<p>
<script async="async" class="speakerdeck-embed" data-id="503108129c9652000203d80a" data-ratio="1.3333333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</p>

<p>說好的 deferred.pipe 文章應該明天就可以貼出了～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

		<b:entry entryID="000705" baseName="top-keyboard">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-08-13</b:date>
				<b:time>23:54:05</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>鍵盤攻頂這檔事</b:title>
			<b:content>
				<b:summary>認識我的大概多少都會知道我用的鍵盤不太便宜，基本款是 Cherry 的機械軸，通常要價三千左右，想我玩機械式鍵盤其實已經也好幾年了，最初是從鳥窩的團購消息聽聞到 Cherry 鍵盤，之後託親戚朋友從日本買回我第一隻 Cherry G80-3000 青軸，之後又陸陸續續買了好幾隻，整個算是發散期，什麼鍵盤都想弄一隻玩玩看，中間也見證了 PTT 鍵鼠版版的興起，到後來，卻反而收斂了起來，大概是找到最適合自己的鍵盤了，開始出清很多沒在用的鍵盤，最初買的那隻 G80-3000 也送給一位特別的朋友，最後我自己只留了兩隻 Cherry G80-3484 和一隻 Realforce 103。 不過即使收斂至此，我心中卻一直有一隻想要的夢幻規格鍵盤，沒有上市過，我想要的是 Realforce 全 30g 版的標準英文配置，一般的 Realforce 鍵盤其實是有看指位來決定按鍵配重的，分別有 30g、45g、55g，只有非常少的部份是用 30g 配重，我非常想要全 30g 配重的鍵盤，不過卻只有一隻 108 鍵日本語配置的是所有按鍵都是 30g，我因為嘗試過日語配置鍵盤，了解到我用不來，所以一直不敢貿然出手。因為已經有點淡出鍵盤市場，所以直到前陣子我才注意到我想要的夢幻規格竟然有了，是只有在大陸上市的 Realforce Pro。 看到這東西後，幾乎是沒什麼考慮就決定要買一隻了，花了一些時間總算是從淘寶買到，買的時候發現，全 30g 版本的數量比較少，價錢也比較貴，果然是稀少價值～ 拿到這隻鍵盤的感想，不考慮到花了多少錢的話，我覺得實在是很棒，放在公司用一陣子後，回家用普通的 Realforce 都開始覺得按鍵有些重了，而且黑灰配色還蠻耐看的，小缺點是...</b:summary>
				<b:mainContent><p>認識我的大概多少都會知道我用的鍵盤不太便宜，基本款是 Cherry 的機械軸，通常要價三千左右，想我玩機械式鍵盤其實已經也好幾年了，最初是從鳥窩的團購消息聽聞到 Cherry 鍵盤，之後託親戚朋友從日本買回我第一隻 Cherry G80-3000 青軸，之後又陸陸續續買了好幾隻，整個算是發散期，什麼鍵盤都想弄一隻玩玩看，中間也見證了 PTT 鍵鼠版版的興起，到後來，卻反而收斂了起來，大概是找到最適合自己的鍵盤了，開始出清很多沒在用的鍵盤，最初買的那隻 G80-3000 也送給一位特別的朋友，最後我自己只留了兩隻 Cherry G80-3484 和一隻 Realforce 103。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/3375491732/" title="Flickr 上 othree 的 五百多"><img src="//farm4.staticflickr.com/3615/3375491732_3708ea06a6.jpg" width="500" height="375" alt="五百多" /></a></p>

<p>不過即使收斂至此，我心中卻一直有一隻想要的夢幻規格鍵盤，沒有上市過，我想要的是 Realforce 全 30g 版的標準英文配置，一般的 Realforce 鍵盤其實是有看指位來決定按鍵配重的，分別有 30g、45g、55g，只有非常少的部份是用 30g 配重，我非常想要全 30g 配重的鍵盤，不過卻只有一隻 108 鍵日本語配置的是所有按鍵都是 30g，我因為嘗試過日語配置鍵盤，了解到我用不來，所以一直不敢貿然出手。因為已經有點淡出鍵盤市場，所以直到前陣子我才注意到我想要的夢幻規格竟然有了，是只有在大陸上市的 Realforce Pro。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7241722138/" title="Flickr 上 othree 的 Realforce Pro"><img src="//farm9.staticflickr.com/8021/7241722138_72a37a2d48.jpg" width="500" height="333" alt="Realforce Pro"/></a></p>

<p>看到這東西後，幾乎是沒什麼考慮就決定要買一隻了，花了一些時間總算是從淘寶買到，買的時候發現，全 30g 版本的數量比較少，價錢也比較貴，果然是稀少價值～</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7241724670/" title="Flickr 上 othree 的 Realforce Pro"><img src="//farm9.staticflickr.com/8147/7241724670_dd93456bd4.jpg" width="500" height="333" alt="Realforce Pro"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7774379948/" title="Flickr 上 othree 的 Realforce Pro"><img src="//farm9.staticflickr.com/8301/7774379948_6639499646.jpg" width="500" height="281" alt="Realforce Pro"/></a></p>

<p>拿到這隻鍵盤的感想，不考慮到花了多少錢的話，我覺得實在是很棒，放在公司用一陣子後，回家用普通的 Realforce 都開始覺得按鍵有些重了，而且黑灰配色還蠻耐看的，小缺點是 Pro 鍵對我來說沒什麼用了。</p>

<p>Realforce Pro 對我來說，應該就是最後的一把鍵盤了吧。</p>

<p>btw. 這把鍵盤也是我所知道有量產的鍵盤中第二貴的，第一貴的是 <a href="http://www.artlebedev.com/everything/optimus/">Optimus Keyboard</a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="3"></b:comments>


		</b:entry>

		<b:entry entryID="000704" baseName="side-effect-free-function">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-08-06</b:date>
				<b:time>01:26:10</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Side Effect Free Function</b:title>
			<b:content>
				<b:summary> 在 Functional Programming 裡面，有個名詞叫做 pure function，要稱為 pure function 要滿足兩個條件： 不管在什麼情況下，用什麼方法執行，相同的輸入參數一定會產生相同的輸出。 執行這個 function 不會產生任何副作用，副作用指的是像變數的污染等。 哪些 function 是 pure function 呢，簡單來說，大部分你所見過的數學函數都是 pure function，像是三角函數，sin、cos ，不管你什麼時候執行，用什麼方法執行，只要給同樣的輸入，輸出的結果就一定是一樣的，而且這些函數本身也不會對外部有任何的影響。 再來，function 執行會有什麼副作用呢？其實就是去存取其他外部的變數或函式時，改變了外部變數的數值，如果該變數有其他地方會使用，那可能會因為這些改變，造成程式的執行結果和預期的有出入，也就是產生了 bug，這其實也是為什麼會說要避免使用全域變數的原因。 要避免改變到外部變數其實還算簡單，除了做這事情本來就是目標之一的情形外（也就是你的 function 或是物件和其他東西會有相依性），程式在設計的時候有注意到應該都可以避免，那還有什麼情形可能造成意外的副作用呢？事實上，function 的執行方法的不同會有機會產生副作用： var neko = { meow: function () { console.log(this); }...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/shereen84/2511071028/" title="俄羅斯娃娃"><img src="//farm3.staticflickr.com/2087/2511071028_98ed598b90.jpg" width="500" height="333" alt="" /></a></p>

<p>在 Functional Programming 裡面，有個名詞叫做 <strong>pure function</strong>，要稱為 pure function 要滿足兩個條件：</p>

<ol>
<li>不管在什麼情況下，用什麼方法執行，相同的輸入參數一定會產生相同的輸出。</li>
<li>執行這個 function 不會產生任何副作用，副作用指的是像變數的污染等。</li>
</ol>

<p>哪些 function 是 pure function 呢，簡單來說，大部分你所見過的數學函數都是 pure function，像是三角函數，sin、cos ，不管你什麼時候執行，用什麼方法執行，只要給同樣的輸入，輸出的結果就一定是一樣的，而且這些函數本身也不會對外部有任何的影響。</p>

<p>再來，function 執行會有什麼副作用呢？其實就是去存取其他外部的變數或函式時，改變了外部變數的數值，如果該變數有其他地方會使用，那可能會因為這些改變，造成程式的執行結果和預期的有出入，也就是產生了 bug，這其實也是為什麼會說要避免使用全域變數的原因。</p>

<p>要避免改變到外部變數其實還算簡單，除了做這事情本來就是目標之一的情形外（也就是你的 function 或是物件和其他東西會有相依性），程式在設計的時候有注意到應該都可以避免，那還有什麼情形可能造成意外的副作用呢？事實上，function 的執行方法的不同會有機會產生副作用：</p>

<pre><code>var neko = {
    meow: function () {
        console.log(this);
    }
};

neko.meow(); // neko

var func = neko.meow;
func(); // window
</code></pre>

<p>上面的範例中，我定義了一個物件，並且給了它一個 function 作為 method，接著用兩種不同的方法來執行這個 method，然後會發現兩種執行方式會讓 function 內的 <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/this">this</a> 是不一樣的，而且很不巧的，this 在物件導向程式設計上，其實還蠻常會需要它的，因為你會需要存取該物件的屬性，最簡單的方法就是用 this 來代表該物件，設計上合理，語意上也合理，可是物件的 method 的執行方法的不同卻會讓它存取到不同的 this，結果就是會有意外的副作用，JavaScript 的這種特性其實也不全然是壞處，有種稱為 "borrowing method" （或是 <a href="https://github.com/shichuan/javascript-patterns/blob/master/code-reuse-patterns/borrowing-methods.html">code reuse</a>）的 pattern 就可以利用這個特性，現在最可靠的判斷某變數是否是陣列的 <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/isArray#See_also">方法</a>，也是一種 "borrowing method" 的應用。</p>

<p>要確保 this 不變，有不少方法，像是多包一層用 <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply">apply</a>、<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/call">call</a> 來執行，或是用新的 <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind">bind</a> 來指定好 this 的值，一些 JavaScript Library 也有對應的功能可以利用，像是 jQuery 的 <a href="http://api.jquery.com/jQuery.proxy/">proxy</a>，不過用 apply 或是 call 來執行其實效率上會比較差，所以我想介紹的是另一種方法，利用 JavaScript 的另外一種特性：<strong>closure</strong>，closure 指的是，在多層的 variable scope 環境下，內層的 scope 可以去存取外層 scope 的變數，一個簡單例子：</p>

<pre><code>var Dog = function () {
    var gender = 'male';

    this.getGender = function () {
        return gender;
    };
};

dog = new Dog();
dog.getGender(); // male
</code></pre>

<p>dog 這個物件會得到一個 method 叫做 getGender，而它會回傳在這個 method 外一層，也就是 dog 物件的建構函式裡面定義的 gender 變數，這個 method 並不會因為他的 scope 內沒有 gender 變數就噴出錯誤訊息，取而代之的，它會往上一層的 variable scope 找同樣名稱的變數，一直找到最外層，也就是 root 物件那層，以網頁應用的話，root 物件就是 window 了，如果還是找不到才有機會出現錯誤訊息，利用這個特性，就可以完全的避免使用到 this 這個關鍵字來建立物件，不使用 this 的話自然就沒有我上面說的副作用了，這樣該物件的 method 不管是怎樣執行的，都不會影響到內部去存取的變數。</p>

<p>jQuery 裡面也有使用到這種技巧， jQuery 的 <a href="http://api.jquery.com/category/callbacks-object/">Callbacks</a> 就是這樣子設計的物件，所以你可以在使用 Callbacks 的 <a href="http://api.jquery.com/category/deferred-object/">Deferred</a> 裡面看到這樣的<a href="https://github.com/jquery/jquery/blob/master/src/deferred.js#L74">程式碼</a>：</p>

<pre><code>deferred[ tuple[0] ] = list.fire;
deferred[ tuple[0] + "With" ] = list.fireWith;
</code></pre>

<p>前面的 tuple[0] 是 'resolve', 'reject' 或 'notify'，而 list 就是相對應的 Callbacks 物件，這段程式碼實際上就是在定義 Deferred 物件的 resolve, resolveWith, reject, rejectWith... 等屬性，可以看到他的指派方法就是直接把 Callbacks 物件的 fire 和 fireWith method 借給 Deferred 物件，所以執行 Deferred.resolve 其實就等同於執行對應 Callbacks 物件的 fire 方法，而由於 Callback 內部沒有使用到 this ，所以這樣的使用完全是沒有問題的。</p>

<p>這樣子的用法有什麼好處呢？我們可以先反過來看看要確保 this 正確的話，程式碼要改成怎樣：</p>

<pre><code>deferred[ tuple[0] ] = function () {
    list.fire();
};
deferred[ tuple[0] + "With" ] =  function () {
    list.fireWith();
};
</code></pre>

<p>這樣子寫可以確保 list 裡面方法的 this 就是 Callbacks 物件本身，不過其實這樣改會造成 jQuery 的 Chain Ability 爛掉，請不要真的去改。這樣的寫法有兩個缺點：</p>

<ol>
<li>多了一層 scope，雖然現在瀏覽器的 JavaScript 引擎讓 scope 層數和 performance 之間的影響比以前小很多了，不過還是能少就少。</li>
<li>程式碼變得比較不漂亮，程式碼漂不漂亮和好不好讀、好不好維護息息相關。</li>
</ol>

<p>Side effect free 的 function 還有哪些地方可以用呢，除了像 jQuery 這樣供物件之間呼叫執行，最多的還是作為 callback function 了吧，不管是事件的 callback function 還是 XHR 的 callback function，都可以利用到這些好處，讓程式碼更好看，也減少 scope chain 的層數。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000703" baseName="whatwg-and-w3c-html5">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-08-05</b:date>
				<b:time>10:23:09</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>WHATWG and W3C 版 HTML5 分家</b:title>
			<b:content>
				<b:summary>WHATWG Blog 兩週前發出的 文章 正式宣告 WHATWG 和 W3C 的 HTML5 分家了，主編 Ian Hickson 有在 mainling list 發出一篇比較完整的 說明 ，主要還是兩邊方向不一樣，不過這篇文章也把一些過去的事情說的比較清楚，像是 WHATWG 的標準以前正式名稱是 Web Application，HTML5 只是別名，而現在的本版正式名稱則改成 HTML Living Standard ，還有把裡面一些標準拆分成子標準則是 W3C 那邊這樣做，WHATWG 則是一直維持全部東西塞在一起的作法，而最重要的差異，當然還是 WHATWG 不會讓 HTML 標準穩定下來，未來會有一個確定版本的 HTML5 會是 W3C 的， WHATWG...</b:summary>
				<b:mainContent><p>WHATWG Blog 兩週前發出的 <a href="http://blog.whatwg.org/html-and-html5">文章</a> 正式宣告 WHATWG 和 W3C 的 HTML5 分家了，主編 Ian Hickson 有在 mainling list 發出一篇比較完整的 <a href="http://lists.w3.org/Archives/Public/public-whatwg-archive/2012Jul/0119.html">說明</a> ，主要還是兩邊方向不一樣，不過這篇文章也把一些過去的事情說的比較清楚，像是 WHATWG 的標準以前正式名稱是 Web Application，HTML5 只是別名，而現在的本版正式名稱則改成 <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/">HTML Living Standard</a> ，還有把裡面一些標準拆分成子標準則是 W3C 那邊這樣做，WHATWG 則是一直維持全部東西塞在一起的作法，而最重要的差異，當然還是 WHATWG 不會讓 HTML 標準穩定下來，未來會有一個確定版本的 HTML5 會是 W3C 的， WHATWG 版的會隨時更新，只要有新需求，有錯誤。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000702" baseName="new-theme">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-08-02</b:date>
				<b:time>23:59:29</b:time>
			</b:datetime>
			<b:category>about</b:category>
			<b:title>改版</b:title>
			<b:content>
				<b:summary> 改版算是一個段落了吧，這次主要是套用 Twitter Bootstrap ，然後直接用它來排版，同時也支援 responsive design ，所以用手機、平板電腦看這邊的效果也比以前好很多，同時拿掉很多畫面上的元件，一些 JavaScript 不是那麼必要的也都拿掉了，搜尋也改成用 Google 搜尋，越來越單純化了吧～...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/7698344300/" title="Responsive by othree, on Flickr"><img src="//farm9.staticflickr.com/8285/7698344300_c5d4593157_b.jpg" width="530" height="1024" alt="Responsive" src-1="(max-width: 768px)  //farm9.staticflickr.com/8285/7698344300_c5d4593157.jpg 1x, //farm9.staticflickr.com/8285/7698344300_c5d4593157_b.jpg 2x"  /></a></p>

<p>改版算是一個段落了吧，這次主要是套用 <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> ，然後直接用它來排版，同時也支援 responsive design ，所以用手機、平板電腦看這邊的效果也比以前好很多，同時拿掉很多畫面上的元件，一些 JavaScript 不是那麼必要的也都拿掉了，搜尋也改成用 Google 搜尋，越來越單純化了吧～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="1"></b:comments>


		</b:entry>

		<b:entry entryID="000701" baseName="module-amd-requirejs">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-05-21</b:date>
				<b:time>11:00:54</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Module, AMD, RequireJS</b:title>
			<b:content>
				<b:summary>今年第一屆 JSDC 的分享投影片上線哩～ /* A_A */...</b:summary>
				<b:mainContent><p>今年第一屆 JSDC  的分享投影片上線哩～</p>

<p>
<script async="async" class="speakerdeck-embed" data-id="4fb7c12dd1170e0022022a54" data-ratio="1.3333333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000700" baseName="build-v8">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-05-14</b:date>
				<b:time>23:51:22</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>Build v8</b:title>
			<b:content>
				<b:summary>平常是使用 Google V8 引擎的 command line 來做自己工作機的 js console，最主要的用途是跑 jslint，不過這需要自己來編譯，以前是用 scons 來編譯，剛剛想要編譯新版發現 Google 又換了自動化工具，從 scons 換成 gyp，安裝流程其實比較簡單，先安裝好 svn，然後執行： make dependencies make console=readline native 產生的 d8 執行檔會在 out/native/ 下面，官方說明有提到可以用 clang 編譯，不過我嘗試後會有錯誤，還在看要怎樣處理。...</b:summary>
				<b:mainContent><p>平常是使用 Google V8 引擎的 command line 來做自己工作機的 js console，最主要的用途是跑 jslint，不過這需要自己來編譯，<a href="http://blog.othree.net/log/2011/01/28/osx-v8-js-command/">以前</a>是用 scons 來編譯，剛剛想要編譯新版發現 Google 又換了自動化工具，從 <a href="http://www.scons.org/">scons</a> 換成 <a href="http://code.google.com/p/gyp/">gyp</a>，安裝流程其實比較簡單，先安裝好 svn，然後執行：</p>

<pre><code>make dependencies
make console=readline native
</code></pre>

<p>產生的 d8 執行檔會在 out/native/ 下面，官方說明有提到可以用 clang 編譯，不過我嘗試後會有錯誤，還在看要怎樣處理。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000699" baseName="javascript-essential-patt">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-04-16</b:date>
				<b:time>21:58:43</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>JavaScript Essential Patterns</b:title>
			<b:content>
				<b:summary> /* A_A */...</b:summary>
				<b:mainContent><p>
<script async="async" class="speakerdeck-embed" data-id="4f8b8e20b204f6002200912f" data-ratio="1.3333333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000698" baseName="wuling-sakura">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-02-28</b:date>
				<b:time>20:19:18</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>武陵櫻花季</b:title>
			<b:content>
				<b:summary>由於今年花況似乎很棒，所以很臨時的被耿長輩約去看，考量種種情形之後，決定週六晚上十二點就出發，一路上還算順暢，不過快到的時候就塞起來了，慢慢前進了快要一小時才知道原因，是買票入場的關口，等輪到我們時往後看是這樣的光景。 山路上全部都是車，進去以後首先就是找停車位了，想當然正常的停車格早就沒了，不過以往都會開放停草地，所以基本上就是找不太會影響交通的路邊停下去，結果沒停在太前面入口處，不過倒是找到一個位子意外還不錯的點，停好車後大約已經四點半了吧，由於有段櫻花道有打光的夜櫻可以看，所以先過去那邊看看，沒想到才看一下子就下起雨，所以也沒拍到什麼好照片，就回去車上等天亮了，沒想到這雨一下下整晚，我們就只好邊睡邊等雨停，大約等到九點雨好像停了才醒來開始移動，這時運氣不錯，太陽公公還出來露臉幾下。 看了一下地圖後，我們決定先過橋到離我們最近的茶園看看，我說的停車位子不錯的原因之一就是離茶園很近，那邊由於要走路過橋，所以完全不會有車子礙眼，個人覺的是武陵農場前半段最漂亮的地方了。 在茶園那邊就逛了一個多小時，接著去到入口那附近，那邊基本上就是人人人，車車車，櫻花的狀況也沒有茶園好，不過還是拍到一張不錯的照片，剛好有陽光出來一下子，所以櫻花看起來都在發光一樣，邊邊都有一圈白框。 當然人多的話，就會看到一些有趣的場景，像是有人來拍婚紗： 還有人用 iPad 拍照： 不過總之前半段其實沒中後段漂亮，所以也沒待很久，就往最後一個目標，雪山登山口移動了，不過沒想到路上還有兩處櫻花狀況不錯，而且花況比前面看到的還好，當然也有不少情侶～～ 最後開車到了雪山登山口，路上的景色蠻漂亮的，不過最後那段路的路況超差的，車子開起來真是心驚： 這次行程可惜處之一當然是天氣，不過有些畫面也是要下完雨，放晴那時才看的到，一直都是藍天白雲的天氣也不一定就是好，第二當然是花況已經比較差了，要找到完整的櫻花其實不太容易，不過也托福可以看到櫻吹雪，還有一些滿地花瓣的畫面可以看，明年可能會開始總量管制，變成自己的小汽車不能開上去，這樣要上雪山登山口就會很困難，也很慶幸這次有上去看看，雖然天氣不好沒有去看日出就是（半夜開車上去應該超恐怖）。...</b:summary>
				<b:mainContent><p>由於今年花況似乎很棒，所以很臨時的被耿長輩約去看，考量種種情形之後，決定週六晚上十二點就出發，一路上還算順暢，不過快到的時候就塞起來了，慢慢前進了快要一小時才知道原因，是買票入場的關口，等輪到我們時往後看是這樣的光景。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6930509979/" title="Flickr 上 othree 的 武陵農場"><img src="//farm8.staticflickr.com/7041/6930509979_2a500757f3.jpg" width="500" height="333" alt="武陵農場" /></a></p>

<p>山路上全部都是車，進去以後首先就是找停車位了，想當然正常的停車格早就沒了，不過以往都會開放停草地，所以基本上就是找不太會影響交通的路邊停下去，結果沒停在太前面入口處，不過倒是找到一個位子意外還不錯的點，停好車後大約已經四點半了吧，由於有段櫻花道有打光的夜櫻可以看，所以先過去那邊看看，沒想到才看一下子就下起雨，所以也沒拍到什麼好照片，就回去車上等天亮了，沒想到這雨一下下整晚，我們就只好邊睡邊等雨停，大約等到九點雨好像停了才醒來開始移動，這時運氣不錯，太陽公公還出來露臉幾下。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6785072786/" title="Flickr 上 othree 的 武陵櫻花"><img src="//farm8.staticflickr.com/7205/6785072786_6ae751f779.jpg" width="500" height="333" alt="武陵櫻花"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6931195831/" title="Flickr 上 othree 的 武陵櫻花"><img src="//farm8.staticflickr.com/7206/6931195831_e92318e211.jpg" width="500" height="333" alt="武陵櫻花"/></a></p>

<p>看了一下地圖後，我們決定先過橋到離我們最近的茶園看看，我說的停車位子不錯的原因之一就是離茶園很近，那邊由於要走路過橋，所以完全不會有車子礙眼，個人覺的是武陵農場前半段最漂亮的地方了。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6931954831/" title="Flickr 上 othree 的 武陵櫻花"><img src="//farm8.staticflickr.com/7184/6931954831_362ba1e264.jpg" width="500" height="333" alt="武陵櫻花"/></a>
<a class="thumbnail" href="http://www.flickr.com/photos/othree/6931966335/" title="Flickr 上 othree 的 武陵櫻花"><img src="//farm8.staticflickr.com/7204/6931966335_93f1868428.jpg" width="333" height="500" alt="武陵櫻花"/></a>
<a class="thumbnail" href="http://www.flickr.com/photos/othree/6931969109/" title="Flickr 上 othree 的 武陵櫻花"><img src="//farm8.staticflickr.com/7048/6931969109_cb3afd26ae.jpg" width="500" height="333" alt="武陵櫻花"/></a>
<a class="thumbnail" href="http://www.flickr.com/photos/othree/6931976139/" title="Flickr 上 othree 的 武陵櫻花"><img src="//farm8.staticflickr.com/7200/6931976139_0af8d0d08b.jpg" width="500" height="333" alt="武陵櫻花"/></a></p>

<p>在茶園那邊就逛了一個多小時，接著去到入口那附近，那邊基本上就是人人人，車車車，櫻花的狀況也沒有茶園好，不過還是拍到一張不錯的照片，剛好有陽光出來一下子，所以櫻花看起來都在發光一樣，邊邊都有一圈白框。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6934844627/" title="Flickr 上 othree 的 武陵"><img src="//farm8.staticflickr.com/7048/6934844627_ba2c5c2c69.jpg" width="500" height="333" alt="武陵"/></a></p>

<p>當然人多的話，就會看到一些有趣的場景，像是有人來拍婚紗：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6788733038/" title="Flickr 上 othree 的 武陵"><img src="//farm8.staticflickr.com/7069/6788733038_6080c1a0b9.jpg" width="291" height="500" alt="武陵"/></a></p>

<p>還有人用 iPad 拍照：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6788731414/" title="Flickr 上 othree 的 武陵櫻花"><img src="//farm8.staticflickr.com/7053/6788731414_5bdd0484b9.jpg" width="500" height="333" alt="武陵櫻花"/></a></p>

<p>不過總之前半段其實沒中後段漂亮，所以也沒待很久，就往最後一個目標，雪山登山口移動了，不過沒想到路上還有兩處櫻花狀況不錯，而且花況比前面看到的還好，當然也有不少情侶～～</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6788770320/" title="Flickr 上 othree 的 武陵櫻花"><img src="//farm8.staticflickr.com/7176/6788770320_c15f6e54d8.jpg" width="500" height="333" alt="武陵櫻花"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6934882459/" title="Flickr 上 othree 的 武陵櫻花"><img src="//farm8.staticflickr.com/7059/6934882459_a271dd4981.jpg" width="500" height="333" alt="武陵櫻花"/></a></p>

<p>最後開車到了雪山登山口，路上的景色蠻漂亮的，不過最後那段路的路況超差的，車子開起來真是心驚：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6934887425/" title="Flickr 上 othree 的 雪山登山口"><img src="//farm8.staticflickr.com/7183/6934887425_3cb8482af0.jpg" width="500" height="333" alt="雪山登山口"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6788777644/" title="Flickr 上 othree 的 雪山登山口"><img src="//farm8.staticflickr.com/7068/6788777644_0fe27e7e3c.jpg" width="500" height="333" alt="雪山登山口"/></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6788775298/" title="Flickr 上 othree 的 雪山登山口"><img src="//farm8.staticflickr.com/7176/6788775298_a5a1f3ffc3.jpg" width="500" height="333" alt="雪山登山口"/></a></p>

<p>這次行程可惜處之一當然是天氣，不過有些畫面也是要下完雨，放晴那時才看的到，一直都是藍天白雲的天氣也不一定就是好，第二當然是花況已經比較差了，要找到完整的櫻花其實不太容易，不過也托福可以看到櫻吹雪，還有一些滿地花瓣的畫面可以看，明年可能會開始總量管制，變成自己的小汽車不能開上去，這樣要上雪山登山口就會很困難，也很慶幸這次有上去看看，雖然天氣不好沒有去看日出就是（半夜開車上去應該超恐怖）。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000697" baseName="jqueryqueue">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-02-23</b:date>
				<b:time>00:45:23</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>jQuery.queue</b:title>
			<b:content>
				<b:summary>jQuery 的 queue 是存在很久的東西了，不過我到最近才去了解它到底是用來作什麼的，其實，基本上就和一般的 queue 一樣，只是 jQuery 預設使用它來處理所有的動畫效果的順序，像是 fadeIn、fadeOut 還有最重要的 animate ，這些特效的動作都會丟到一個叫 fx 的 queue 裡面，然後照順序執行，所以下面的程式碼會讓一個元素先 fade in 再 fade out，而不會發生兩個動畫效果打架的情形： $('#id').fadeIn().fadeOut(); 也不用寫成 callback function 的方式： $('#id').fadeIn(function () { $(this).fadeOut(); }); 如果你是要把元素 fade out，然後改裡面文字後再讓它 fade in，以前用 callback 的寫法會寫成： $('#id').fadeOut(function ()...</b:summary>
				<b:mainContent><p><a href="http://jquery.com/">jQuery</a> 的 <a href="http://api.jquery.com/queue/">queue</a> 是存在很久的東西了，不過我到最近才去了解它到底是用來作什麼的，其實，基本上就和一般的 queue 一樣，只是 jQuery 預設使用它來處理所有的動畫效果的順序，像是 fadeIn、fadeOut 還有最重要的 <a href="http://api.jquery.com/animate/">animate</a> ，這些特效的動作都會丟到一個叫 <em>fx</em> 的 queue 裡面，然後照順序執行，所以下面的程式碼會讓一個元素先 fade in 再 fade out，而不會發生兩個動畫效果打架的情形：</p>

<pre><code>$('#id').fadeIn().fadeOut();
</code></pre>

<p>也不用寫成 callback function 的方式：</p>

<pre><code>$('#id').fadeIn(function () {
    $(this).fadeOut();
});
</code></pre>

<p>如果你是要把元素 fade out，然後改裡面文字後再讓它 fade in，以前用 callback 的寫法會寫成：</p>

<pre><code>$('#id').fadeOut(function () {
    $(this).html('new content');
    $(this).fadeIn();
});
</code></pre>

<p>但是好一點的作法應該善用 queue：</p>

<pre><code>$('#id')
    .fadeOut()
    .queue(function () {
        $(this).html('new content');
        $(this).dequeue();
    })
    .fadeIn();
</code></pre>

<p>這樣不知道看不看的出好在哪？讓我來把要做的動作複雜一點好了，我要淡出，改內容，淡入，然後接著右移 500px、加上 active 的 class，再移動回來，然後再把內容改變一次，用 callback 的寫法：</p>

<pre><code>$('#id').fadeOut(function () {
    $(this).html('new content');
    $(this).fadeIn(function () {
        $(this).animate({left: '+=500'}, function () {
            $(this).addClass('active');
            $(this).animate({left: '-=500'}, function () {
                $(this).html('even new content');
            });
        });
    });
});
</code></pre>

<p>如果用 queue：</p>

<pre><code>$('#id')
    .fadeOut()
    .queue(function () {
        $(this).html('new content');
        $(this).dequeue();
    })
    .fadeIn()
    .animate({left: '+=500'})
    .queue(function () {
        $(this).addClass('active');
        $(this).dequeue();
    })
    .animate({left: '-=500'})
    .queue(function () {
        $(this).html('even new content');
        $(this).dequeue();
    });
</code></pre>

<p>眼尖的人大概馬上就可以發現，用 queue 程式碼變多了！不過這其實不是重點，重點其實是縮排的階層減少了，而且使用 queue 的程式碼，看起來就是一個步驟接著一個步驟，和使用 callback 的階層的關係不一樣，而且除了看起來比較好之外其實還有不少優點，首先是如果要修改連續動作的順序或是內容，使用 queue 的顯然比較簡單，二是還可以配合 <a href="http://api.jquery.com/delay/">delay</a> 來讓動作之間有個暫停，三是可以用 clearQueue 來把整串動作清掉，用 callback 的話，因為執行到各個 animate 的時間不是同步的，所以用 <a href="http://api.jquery.com/clearQueue/">clearQueue</a> 可能會清不乾淨。所以在使用 jQuery 動畫效果時，正確的配合 queue 來做，會讓程式碼的可維護度提昇許多，大家都應該來用一下～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="3"></b:comments>


		</b:entry>

		<b:entry entryID="000696" baseName="coffee-check-vim">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-01-23</b:date>
				<b:time>00:00:13</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>coffee-check.vim</b:title>
			<b:content>
				<b:summary>上一篇文章提到使用 RequireJS 的 CoffeeScript plugin 時，如果寫的 CoffeeScript 語法不正確，瀏覽器即時 compile 就會有錯誤，而且在瀏覽器那邊看到的錯誤訊息根本看不出來是錯誤是在哪個檔案、哪一行，如果專案內檔案很多，那除錯會變得很難，所以我想到的解法就是在寫 coffee 檔的時候就檢查 compile error，就像 jslint.vim 的行為一樣，上網搜尋了一下 Vim 的 CoffeeScript 相關外掛，發現都沒人做這功能，於是花了一些時間從 jslint.vim 那邊移植過來，使用的檢查方式是直接 coffee -c 來編譯，看會不會有錯誤訊息，現在已經發佈到 github 上了，叫 coffee-check.vim。 安裝還算簡單，先確定系統已經有安裝 node，然後只要用 pathogen 或是 Vundle 把套件裝起來，接著在 vimrc 內加上一行： au BufRead,BufNewFile *.coffee set...</b:summary>
				<b:mainContent><p>上一篇文章提到使用 <a href="http://requirejs.org/">RequireJS</a> 的 <a href="http://coffeescript.org/">CoffeeScript</a> <a href="https://github.com/jrburke/require-cs">plugin</a> 時，如果寫的 CoffeeScript 語法不正確，瀏覽器即時 compile 就會有錯誤，而且在瀏覽器那邊看到的錯誤訊息根本看不出來是錯誤是在哪個檔案、哪一行，如果專案內檔案很多，那除錯會變得很難，所以我想到的解法就是在寫 coffee 檔的時候就檢查 compile error，就像 <a href="https://github.com/hallettj/jslint.vim">jslint.vim</a> 的行為一樣，上網搜尋了一下 <a href="http://www.vim.org/">Vim</a> 的 CoffeeScript 相關外掛，發現都沒人做這功能，於是花了一些時間從 jslint.vim 那邊移植過來，使用的檢查方式是直接 <code>coffee -c</code> 來編譯，看會不會有錯誤訊息，現在已經發佈到 github 上了，叫 <a href="https://github.com/othree/coffee-check.vim">coffee-check.vim</a>。</p>

<p>安裝還算簡單，先確定系統已經有安裝 node，然後只要用 <a href="http://www.vim.org/scripts/script.php?script_id=2332">pathogen</a> 或是 <a href="http://blog.othree.net/log/2011/06/05/vundle/">Vundle</a> 把套件裝起來，接著在 vimrc 內加上一行：</p>

<pre><code>au BufRead,BufNewFile *.coffee set ft=coffee
</code></pre>

<p>之後每次儲存 *.coffee 檔就會自動跑 CoffeeCompile compile，然後把錯誤訊息丟到 Quickfix Window 裡面，目前有一些已知問題：</p>

<ol>
<li>CoffeeScript compile 一次只會有一個錯誤，而不是從頭到尾的完整檢查，所以如果檔案內有兩個以上的錯誤，那就要重複幾次才能把錯誤都修正。</li>
<li>有一些錯誤訊息是沒有行號的，但是不給行號的話 Quickfix 那邊會有些行為不一樣，所以這種錯誤訊息我都統一說錯誤是在第一行。</li>
<li>第三是現在是用 node require 的方式來跑 compile，和系統自己用 npm 裝的 coffee 沒有關係，我還在考慮要不要用 npm 裝的 coffee 指令，一開始不用是因為用 coffee 指令是因為它 compile 出錯的話不只會有錯誤訊息，還會有錯誤的 trace 的資訊，不過這是我不需要的資訊。</li>
</ol>

<p>第一和第二個問題基本上是目前無解，除非以後有什麼其它的 syntax error checker 來做這件事，現在的我也還寫不出這種東西，第三點則是近期可能會有更新，如果其它還有什麼建議或問題回報都歡迎，可以直接到 github 開 <a href="https://github.com/othree/coffee-check.vim/issues">issue</a>。</p>

<p>補充，有人提了我才發現，<a href="https://github.com/kchmck/vim-coffee-script">vim-coffee-script</a> 也可以做到幾乎一樣的事情，只要在 vimrc 加入這行：</p>

<pre><code>au BufWritePost *.coffee silent CoffeeMake! -b | cwindow | redraw!
</code></pre>

<p>使用 vim-coffee-script 的話，因為 <code>CoffeeMake</code> 是把 coffee 轉成 js 的指令，所以如果沒有錯誤，就會產生 js 檔案，不過我自己的使用情境是不需要那個 js 檔案的，這也是我當初決定自己做一個的原因，單純只有做語法檢查。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000695" baseName="module-amd-requirejs">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-01-22</b:date>
				<b:time>00:48:52</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Module, AMD, RequireJS</b:title>
			<b:content>
				<b:summary>JavaScript 的物件並沒有封裝的概念，所有綁在該物件上的屬性都是外部可見的，不過還是有辦法做到物件封裝的效果，那就是 Module Pattern，作法很簡單，想要保持 private 的私有屬性就宣告成建構函式的區域變數，在建構函式的最後回傳一組你要保持 public 的屬性或是 method，範例如下： function Person(age, gender) { var _age = age || 16, _gender = gender || 1; return { getAge: function () { return _age; } }; } 這個範例中，age 和 gender 就是私有屬性，在 Person...</b:summary>
				<b:mainContent><p>JavaScript 的物件並沒有封裝的概念，所有綁在該物件上的屬性都是外部可見的，不過還是有辦法做到物件封裝的效果，那就是 <a href="http://www.yuiblog.com/blog/2007/06/12/module-pattern/">Module Pattern</a>，作法很簡單，想要保持 private 的私有屬性就宣告成建構函式的區域變數，在建構函式的最後回傳一組你要保持 public 的屬性或是 method，範例如下：</p>

<pre><code>function Person(age, gender) {
    var _age = age || 16,
        _gender = gender || 1;

    return {
        getAge: function () {
            return _age;
        }
    };
}
</code></pre>

<p>這個範例中，age 和 gender 就是私有屬性，在 Person 物件外的操作無法碰到它們，唯一可以做的事情就是用 getAge 來讀取 age 的值，就這樣，我們有了有封裝特性的模組，不過在實際的應用的時候，還有一些問題需要處理，首當其衝的，便是模組之間的相依問題，不管你的程式架構多好，使用了各種設計模式來減少相依性問題，一定還是會有相依性的問題存在，在 server side 的 JavaScript 應用中，模組的相依問題還不明顯，因為你需要的模組都應該在本機系統存在，你的程式才能執行，以現在最熱門的 <a href="http://nodejs.org/">nodejs</a> 來說，用的是 <a href="http://www.commonjs.org/">CommonJS</a> 定的 <a href="http://www.commonjs.org/specs/modules/1.0/">Module/1.0</a>，只要把要匯出給其它人用的介面指派給 exports 這個變數，其它程式就可以很簡單的用 require 來取得，程式運作的流程就是很線性的從第一行跑到最後一行下來。</p>

<p>在網頁上的應用多了一個可能的變化，就是為了效能考量，讓一些資源像是 CSS、JavaScript 等檔案用非同步的方法讀取，這時候如果程式需要的模組檔案還沒讀下來，就還會有非同步執行的問題要處理，雖然 XMLHttpRequest 可以使用同步執行的方式，但是這樣會把整個瀏覽器定住，使用者用起來會覺得瀏覽器死當完全沒反應，所以這種作法完全不列入選擇之中，也因此有了 <a href="http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition">AMD</a> 這個非同步模組的規範，它的寫法也很簡單：</p>

<pre><code>define('moduleA', [dep1, dep2], function (export1, export2) {
    //do something..
    return {
        method1: function () {},
        method2: function () {},
    };
});
</code></pre>

<p>define 是一個全域的函式，專門用來宣告和註冊模組，它吃三個參數，前兩個都是非必要的，第一個參數是模組的名稱，其它模組如果有需要用到這個模組的話，就會用這麼名字來相認，第二個參數是一個字串的陣列，內容是需要的其它的模組名稱，第三個參數則是模組的建構函式，建構函數的參數則是根據前面第二個參數設定的相依模組來決定，會照定義順序傳入相依模組輸出的介面，而模型的建構函式最後面還需要回傳一個給其它人使用的介面，和 Module Pattern 一樣，其實背後的設計就是把建構函式當成相依模組建置完成的 callback function，所以就可以確保相依模組可以非同步的動態讀入，都準備好了才進入下一步。</p>

<p>AMD 最有名的實作就是 <a href="http://requirejs.org/">RequireJS</a> 了，它完整實作了規範沒有講到的，瀏覽器動態且平行的讀取遠端主機上的檔案，用正確的順序執行，然後還把每個模組輸出的介面都管的好好的，不過其實 RequireJS 還提供了更多功能，像是作為 reousrce loader 來讀取 JavaScript 以外的資源，配合 <a href="https://github.com/jrburke/require-cs">plugin</a> 可以直接寫 <a href="http://coffeescript.org/">CoffeeScript</a> 不需要先 compile 好，還有 <a href="http://requirejs.org/docs/optimization.html">optimize</a> 和 <a href="https://github.com/mishoo/UglifyJS">uglify</a> 等 deploy 相關的機制，讓開發環境和正式環境的接軌變得容易許多，不過上面講的都是優點，其實 RequireJS 還是有些缺點的，其中最大的問題就是文件條理不好，會讓把環境和設定搞起來這件事難度增加許多，再來是除錯變得困難許多，像是用 CoffeeScript plugin 即時編譯的話，剛好其中一隻 coffee 檔有語法錯誤，那會變的很難除錯等等，至於是利多還是弊多我覺得是利多，大部分的問題都是搞清楚就好了，CoffeeScript 的錯誤也可以用編輯器外掛來找。所以最後結論，我是蠻推薦可以導入 AMD 到中大型的 Web Application 專案的。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

		<b:entry entryID="000694" baseName="2011">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-01-11</b:date>
				<b:time>00:00:08</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>2011</b:title>
			<b:content>
				<b:summary> 每個月挑了一張照片...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5365746768/" title="20110117 morning by othree, on Flickr"><img src="//farm6.staticflickr.com/5126/5365746768_c2d0b20015_b.jpg" width="768" height="1024" alt="20110117 morning" src-1="(max-width: 768px)  //farm6.staticflickr.com/5126/5365746768_c2d0b20015.jpg 1x, //farm6.staticflickr.com/5126/5365746768_c2d0b20015_b.jpg 2x"  /></a></p>

<p>每個月挑了一張照片</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5433630228/" title="P2086946 by othree, on Flickr"><img src="//farm6.staticflickr.com/5175/5433630228_c7d67ca9ce_b.jpg" width="1024" height="768" alt="P2086946" src-1="(max-width: 768px)  //farm6.staticflickr.com/5175/5433630228_c7d67ca9ce.jpg 1x, //farm6.staticflickr.com/5175/5433630228_c7d67ca9ce_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5502324004/" title="E61 咖啡 by othree, on Flickr"><img src="//farm6.staticflickr.com/5211/5502324004_c6f3139d40_b.jpg" width="1024" height="768" alt="E61 咖啡" src-1="(max-width: 768px)  //farm6.staticflickr.com/5211/5502324004_c6f3139d40.jpg 1x, //farm6.staticflickr.com/5211/5502324004_c6f3139d40_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5648432817/" title="大大～ by othree, on Flickr"><img src="//farm6.staticflickr.com/5301/5648432817_c4bb9340e3_b.jpg" width="768" height="1024" alt="大大～" src-1="(max-width: 768px)  //farm6.staticflickr.com/5301/5648432817_c4bb9340e3.jpg 1x, //farm6.staticflickr.com/5301/5648432817_c4bb9340e3_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5777914827/" title="San Luis Obispo by othree, on Flickr"><img src="//farm3.staticflickr.com/2156/5777914827_5b7925e938_b.jpg" width="1024" height="768" alt="San Luis Obispo" src-1="(max-width: 768px)  //farm3.staticflickr.com/2156/5777914827_5b7925e938.jpg 1x, //farm3.staticflickr.com/2156/5777914827_5b7925e938_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5868396835/" title="日星鑄字行 by othree, on Flickr"><img src="//farm4.staticflickr.com/3158/5868396835_c6ae8a67bc_b.jpg" width="1024" height="768" alt="日星鑄字行" src-1="(max-width: 768px)  //farm4.staticflickr.com/3158/5868396835_c6ae8a67bc.jpg 1x, //farm4.staticflickr.com/3158/5868396835_c6ae8a67bc_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5924220024/" title="華盛頓大學 by othree, on Flickr"><img src="//farm7.staticflickr.com/6021/5924220024_2a6e15a4a2_b.jpg" width="1024" height="768" alt="華盛頓大學" src-1="(max-width: 768px)  //farm7.staticflickr.com/6021/5924220024_2a6e15a4a2.jpg 1x, //farm7.staticflickr.com/6021/5924220024_2a6e15a4a2_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6097360188/" title="工作人員們 by othree, on Flickr"><img src="//farm7.staticflickr.com/6148/6097360188_f20d97e8e7_b.jpg" width="683" height="1024" alt="工作人員們" src-1="(max-width: 768px)  //farm7.staticflickr.com/6148/6097360188_f20d97e8e7.jpg 1x, //farm7.staticflickr.com/6148/6097360188_f20d97e8e7_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6155207113/" title="Foxmosa by othree, on Flickr"><img src="//farm7.staticflickr.com/6189/6155207113_cb5c64b4df_b.jpg" width="683" height="1024" alt="Foxmosa" src-1="(max-width: 768px)  //farm7.staticflickr.com/6189/6155207113_cb5c64b4df.jpg 1x, //farm7.staticflickr.com/6189/6155207113_cb5c64b4df_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6270922439/" title="九族文化村 海賊王 by othree, on Flickr"><img src="//farm7.staticflickr.com/6226/6270922439_62df09918d_b.jpg" width="1024" height="683" alt="九族文化村 海賊王" src-1="(max-width: 768px)  //farm7.staticflickr.com/6226/6270922439_62df09918d.jpg 1x, //farm7.staticflickr.com/6226/6270922439_62df09918d_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6316696955/" title="貓村 by othree, on Flickr"><img src="//farm7.staticflickr.com/6053/6316696955_fbcca71ba4_b.jpg" width="1024" height="683" alt="貓村" src-1="(max-width: 768px)  //farm7.staticflickr.com/6053/6316696955_fbcca71ba4.jpg 1x, //farm7.staticflickr.com/6053/6316696955_fbcca71ba4_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/6610157129/" title="二年坂 by othree, on Flickr"><img src="//farm8.staticflickr.com/7153/6610157129_0365b94329_b.jpg" width="683" height="1024" alt="二年坂" src-1="(max-width: 768px)  //farm8.staticflickr.com/7153/6610157129_0365b94329.jpg 1x, //farm8.staticflickr.com/7153/6610157129_0365b94329_b.jpg 2x"  /></a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>

			<b:comments commentCount="0"></b:comments>


		</b:entry>

	</b:entries>
</b:blog>
