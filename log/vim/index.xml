<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>c</b:listType>
			<b:listData listID="vim">vim</b:listData>
		</b:entriesMeta>

		<b:entry entryID="000836" baseName="vim-syntax-regexp-note">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-03-18</b:date>
				<b:time>18:45:07</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Vim Syntax and Regexp Note</b:title>
			<b:content>
				<b:summary>前陣子為了寫更好的 Vim syntax 還去學了 compiler 的課程，雖然沒上完不過也對怎麼解析語法理解不少，不過其實 Vim syntax highlight 系統為了效能問題，有不少限制，沒辦法真的和 compiler 的 parse 原理完全互通，其中兩個限制影響比較大，第一個是沒辦法有完整的 AST 並解析其語意，因此除非寫得非常繁複，一定會有無法正確 highlight 的地方，例如 comment，不是說 comment 不能正確標示，問題是 comment 可以插入在很多地方，像是參數序列的中間，function 關鍵字和後面 () 的中間等等，幾乎是可以放空白字元的地方就可以放 comment，然後不會影響程式語意，本來，不考慮註解時，我可以用 skipwhite、skipempty 然後加上 nextgroup 就可以指定下一個 token 是什麼，以 JavaScript function declaration 來說： function fn (a)...</b:summary>
				<b:mainContent><p>前陣子為了寫更好的 Vim syntax 還去學了 compiler 的課程，雖然沒上完不過也對怎麼解析語法理解不少，不過其實 Vim syntax highlight 系統為了效能問題，有不少限制，沒辦法真的和 compiler 的 parse 原理完全互通，其中兩個限制影響比較大，第一個是沒辦法有完整的 AST 並解析其語意，因此除非寫得非常繁複，一定會有無法正確 highlight 的地方，例如 comment，不是說 comment 不能正確標示，問題是 comment 可以插入在很多地方，像是參數序列的中間，<code>function</code> 關鍵字和後面 <code>()</code> 的中間等等，幾乎是可以放空白字元的地方就可以放 comment，然後不會影響程式語意，本來，不考慮註解時，我可以用 <code>skipwhite</code>、<code>skipempty</code> 然後加上 <code>nextgroup</code> 就可以指定下一個 token 是什麼，以 JavaScript function declaration 來說：</p>

<pre><code>function fn (a) {}
</code></pre>

<p>這樣的程式碼我把他拆成四個部分，function keyword、function name、function parameter、function body，然後用 Vim syntax 語法設定：</p>

<pre><code>syntax keyword javascriptFuncKeyword function nextgroup=javascriptFuncName skipwhite
syntax match   javascriptFuncName    contained /\k\+/ nextgroup=javascriptFuncParam skipwhite
syntax match   javascriptFuncParam   contained /([^()]*)/ nextgroup=javascriptFuncBody skipwhite
syntax region  javascriptFuncBody    contained start=/{/ end=/}/
</code></pre>

<p>除了 function keyword 外都有 <code>contained</code>，用途是讓該 rule 不會在 TOP region 下生效，一個好處是減少 TOP region 下要檢查的 rule 數量，另一個好處是有些相同的 token pattern，但是其實語意上是不一樣的，可以盡量用這種機制拆分開來，到這裡都還很美好，但是加上 comment 後問題就變複雜了，先簡單寫一下 comment 的 syntax rule：</p>

<pre><code>syntax region  javascriptComment     start=/\/\*/ end=/\*\//
</code></pre>

<p>然後 comment 可以放在哪些地方呢：</p>

<pre><code>function /*cc*/ fn (a) {}
function fn /*cc*/ (a) {}
function fn (a) /*cc*/ {}
</code></pre>

<p>也就是本來 nextgroup 連接的地方都可以插入個 comment，可是只要插入了 comment，後面的 token 就不會被正確 highlight，因為 comment 的 rule 沒有 nextgroup，所以他的部分結束後就會回到用 TOP region 的情境，而後面應該符合的 rule 都有設上 <code>contained</code>，所以就沒機會對到。當然現在要解決這個問題也不是沒方法可以避開，但是非常不好看，就是如下的設計：</p>

<pre><code>syntax keyword javascriptFuncKeyword function nextgroup=javascriptFuncName,comment1 skipwhite
syntax match   javascriptFuncName    contained /\k\+/ nextgroup=javascriptFuncParam,comment2 skipwhite
syntax match   javascriptFuncParam   contained /([^()]*)/ nextgroup=javascriptFuncBody,comment3 skipwhite
syntax region  javascriptFuncBody    contained start=/{/ end=/}/

syntax region  comment1     start=/\/\*/ end=/\*\// nextgroup=javascriptFuncName,comment1 skipwhite
syntax region  comment2     start=/\/\*/ end=/\*\// nextgroup=javascriptFuncParam,comment2 skipwhite
syntax region  comment3     start=/\/\*/ end=/\*\// nextgroup=javascriptFuncBody,comment3 skipwhite
</code></pre>

<p>如此可以確保 comment 插入也不會讓後面的 token 沒 highlight，但是這樣的設計，實際寫起來會非常繁瑣，完全不想去研究 JavaScript 中會有多少類似的狀況。其實我是覺得 Vim syntax 應該是希望盡量都用前後獨立的 rule 來 highlight，盡量不要有前後相依的關係存在，就不會有上面的問題，也可以讓 highlight 過程比較單純，理想上是從頭開始，一個 token 一個 token 各自獨立的 highlight，不過是事情當然沒這麼簡單，第二個想記錄下來的事情也和這個有關係。</p>

<p>假設目前 highlight 處理中，parse 到一個 <code>=</code>，然後看到一組小括號 <code>(a)</code>，連起來如下：</p>

<pre><code>= (a)
</code></pre>

<p>這時你會覺得 <code>(a)</code> 是什麼呢？是小括號，裡面是一個 expression 然後回傳變數 <code>a</code> 嗎？相信很多人會這樣認為，如果他後面是接分號的話：</p>

<pre><code>= (a);
</code></pre>

<p>但是其實也可能是這樣子的：</p>

<pre><code>= (a) =&gt; {}
</code></pre>

<p>ES6 的 arrow function，也就是說，如果一個 token 一個 token 解析，一定無法直接知道目前 token 代表的正確意義，所以 compiler 把程式碼轉成 AST 的時候，有時候會先往後面看一下來判斷現在的 token 到底是什麼意義。然而 Vim syntax 系統並沒有這種能力，嚴格來說，是可以用 match 來達成，不過還是很受限制。再來則是往前看的問題，我在設定運算子的 match rule 的時候，會希望嚴謹一點，本來想在兩邊加上 word boundary 的 pattern，在 Vim 裡面是 <code>\&lt;</code> 和 <code>\&gt;</code>，不過測試幾回發現，我的字元本身不是文字字元的話，這個 pattern 是沒有用的：</p>

<pre><code>/\&lt;word
</code></pre>

<p>這樣是有效的，但是下面想要 match <code>==</code> 的會沒用：</p>

<pre><code>/\&lt;==
</code></pre>

<p>所以變成要自己寫往前看的 regexp，在 Vim 裡面有兩種類似的東西可以用，分別是 <code>\zs</code> 和 <code>\@&lt;=</code>，通常，<code>\zs</code> 效能比較好，會推薦使用，他的用途是標註你的 regexp 的 match 的起點，當然同時也有一個 <code>\ze</code> 是終點：</p>

<pre><code>/abcd\zsefgh\zeijkl
</code></pre>

<p>上面這串 regexp 的目標是 <code>efgh</code>，但是他的前後分別是 <code>abcd</code> 和 <code>ijkl</code>，實際執行時會去找 <code>abcdefghijkl</code> 這串字串，完整比對到之後，只會回中間的 <code>efgh</code> 作為 match 的範圍，這設計要做一些操作的時候就會有差，像是文字取代。本來我就想要用這個來做 syntax，可是就發現還是不生效，所以改成用 <code>\@&lt;=</code> 試試看：</p>

<pre><code>/\(abcd\)\@&lt;=efgh\@=\(ijkl\)
</code></pre>

<p>就發現成功了，想了許久才理解其原因，然後才瞭解，真的往前看的是 <code>\@&lt;=</code>，<code>\zs</code> 並沒有往前看，兩者最大的差異在於 pattern match 操作的起點，一般的使用大概感覺不太到差異，不過像是 syntax highlight 這種一個 token 一個 token 逐步處理的就會有差，當目標是 <code>efgh</code> 時，通常處理進度到 <code>e</code> 這個位置時，前面的 <code>abcd</code> 已經被處理過了，所以這時候會和 regexp 比對的字串就變成 <code>efghijkl</code>，使用 <code>\zs</code> 的話，因為它還是要完整比對到 <code>abcdefghijkl</code>，起點是 <code>a</code>，就不會和 <code>efghijkl</code> 相符，但是用 <code>\@&lt;=</code> 的話，pattern 的起點是 <code>efgh</code> 的 <code>e</code>，這樣就可以 match 到目前剩餘的字串了。</p>

<p>前面說的個 token 一個 token 逐步處理的問題還有一個情形也讓我困擾很久，不過這次不是東西被用掉，問題是沒被用掉。這個狀況發生在巢狀結構的 region，像是 JavaScript 的 block：</p>

<pre><code>syntax region  javascriptBlock start=/{/ end=/}/
</code></pre>

<p>然號要讓 block 裡面可已有 block 就要用 <code>contains</code>：</p>

<pre><code>syntax region  javascriptBlock start=/{/ end=/}/ contains=javascriptBlock
</code></pre>

<p>這時候就會發生奇怪的現象了，因為外面的 region 包括了頭尾的括號，然後進入 block 內要做 syntax match 的時候，一開始的 <code>{</code> 又 match 到 block，結果 Vim 就直接覺得這已經是第二層的 block 了，雖然好像有其它機制讓他不會一直循環下去變成無限多層，不過這樣還是會造成後面的 code 有被判斷錯誤的機會，因為 block 的開關不 match，這裡的關鍵也是要讓 <code>{</code> 和 <code>}</code> 被處理掉，進入 region 內部就不會跑到上一層的起點，而這裡要用的就是 <code>matchgroup</code>：</p>

<pre><code>syntax region  javascriptBlock matchgroup=bracks start=/{/ end=/}/ contains=javascriptBlock
</code></pre>

<p>如此就都會正常了，因為這樣的設定會讓 <code>{</code> 和 <code>}</code> 直接被當成 <code>bracks</code> 這個 group，然後就被當成已經被解析過的 token，從它的下一個 token 繼續 highlight 分析，但是千萬不要另外加上 <code>bracks</code> 的 syntax rule，剛好又 match 到 region 的起點和終點：</p>

<pre><code>syntax match   bracks  /[{}]/
</code></pre>

<p>這樣的話也會發生其它的怪異現象，總之 nested region 的重點在於，要用 matchgroup，然後不要用和 matchgrouop 同樣名稱，同樣 pattern 另外又設定一組 rule。</p>

<p>最後一個要紀錄的則是 Vim syntax 裡面的優先度，基本上是 keyoword 優先度最高，也就是有 match 到 keyword 的話，你的 match pattern 就都無效了，所以像是 JavaScript 裡面，label 雖然不可以用關鍵字，像是 <code>continue:</code> 就不合法，但是因為會先 match 到 <code>continue</code> 關鍵字，所以就很難用 syntax highlight 來標出這種錯誤，而在 keyword 比對完之後，才輪的到 region 和 match，兩者是同樣權重，但是後定義的優先，而且不受 <code>contains</code> 和 <code>nextgroup</code> 裡面的順序影響，搞清楚優先順序在做細部的 syntax highlight 的時候還蠻重要的。另外要順便說說 region contains 和 nextgroup 的差異，nextgroup 其實還蠻不錯的，他不是限制下一個 token 一定是哪些東西，而是改變優先順序，先檢查完 nextgroup 裡面的東西，再檢查該 region 下的其它可能性，region contains 就不一樣了，該 region 裡面只有在 contains 裡面的東西會出現，另外還要特別注意一點，region 的處理並不管該 region 能不能正確的關閉，只要 match 到起點，就會把 region 打開，然後剛剛有提到，region 和 match 是同樣權重的所以就要非常注意：</p>

<pre><code>syntax match  javascriptLabel       /\k\+:/
syntax region javascriptLabelblock  start=/\k\+: {/ end=/}/
</code></pre>

<p>這樣兩條 syntax highlight rule 然後配上下面的程式碼：</p>

<pre><code>abcd: {
  var ii = 1 + 1;

var jj = 2 + 2;
</code></pre>

<p>要注意我的 block 其實沒有結束，但是結果 Vim 只會 match 到 label block 那條規則，而且由於一直找不到 region 的結束點，所以下面的 <code>var jj</code> 那行也是被認為在 block 內。</p>

<p>最後的最後要推薦一下 <a href="https://github.com/gerw/vim-HiLinkTrace">gerw/vim-HiLinkTrace</a> 這個 Vim plugin，可以很完整的 trace syntax highlight 的狀況。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000825" baseName="latest-true-color-vim">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-12-10</b:date>
				<b:time>01:46:05</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Latest True Color Vim</b:title>
			<b:content>
				<b:summary>上次文章的安裝方法已經過時了，更新一下： hg clone https://bitbucket.org/ZyX_I/vim cd vim cd src &amp;&amp; make autoconf &amp;&amp; cd .. ./configure \ --enable-gui=no \ --without-x \ --enable-multibyte \ --with-tlib=ncurses \ --enable-cscope \ --with-features=huge \ --disable-nls \ --enable-perlinterp \ --enable-pythoninterp \ --enable-rubyinterp \ --enable-termtruecolor make make install...</b:summary>
				<b:mainContent><p>上次<a href="https://blog.othree.net/log/2013/07/27/true-color-terminal-vim-osx/">文章</a>的安裝方法已經過時了，更新一下：</p>

<pre><code>hg clone https://bitbucket.org/ZyX_I/vim
cd vim
cd src &amp;&amp; make autoconf &amp;&amp; cd ..

./configure \
  --enable-gui=no \
  --without-x \
  --enable-multibyte \
  --with-tlib=ncurses \
  --enable-cscope \
  --with-features=huge \
  --disable-nls \
  --enable-perlinterp \
  --enable-pythoninterp \
  --enable-rubyinterp \
  --enable-termtruecolor

make
make install
</code></pre>

<p>其實就是現在 ZyX 自己維護的 git repo 已經是有把 True Color 支援的 code merge 進來的版本，只是現在的最新版設定上有些修改，差異在不一定會直接輸出 true color 的色碼 sequence 了，要 Terminal Type 是 <code>xterm</code> 的時候才有。如果不是 <code>xterm</code> 的時候則需要加上設定檔，告訴 Vim 要怎樣輸出色碼的 sequence：</p>

<pre><code>let &amp;t_8f="^[[38;2;%lu;%lu;%lum"
let &amp;t_8b="^[[48;2;%lu;%lu;%lum"
</code></pre>

<p>其中的 <code>^[</code> 是控制碼，就像是 BBS 著色一樣，不能直接打，Vim 的話要用 Ctrl + v + [ 三個按鍵同時按來輸入。這兩個設定項目因為是 ZyX 版才有，所以如果是跑普通的 Vim 的話，啟動時會跑出警告，可以用 <code>:help xterm-true-color</code> 看看比較詳細的說明。</p>

<p>最後 iTerm2 雖然已經出 2.0 了，不過 True Color 的正式支援是放在 3.0，所以目前要在 Mac 上用 True Color Terminal 還是需要抓 nightly 版的 iTerm2。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000822" baseName="jspcvim">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-11-30</b:date>
				<b:time>18:37:08</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>JavaScript Parameter Complete</b:title>
			<b:content>
				<b:summary>前陣子在 FB 上說過突然有想做的 Vim Plugin 已經開發的差不多，所以把 1.0 放上了，這個又是自動補完的 plugin，架構設計上是沒針對 JavaScript，不過目前我只有針對 JavaScript 做好補完選項，這個 Plugin 一開始是為了處理 Web Crypto API，這組 API 在做加解密的時候是需要指定演算法，不過演算法的名稱裡面，有一些有 - 在裡面，像是 SHA-256 之類的，以前這種字串的關鍵字，還可以加到 syntax 裡面，然後用 syntax complete 來處理，不過 - 不是 JavaScript 的關鍵字，會被忽略掉，為了處理這個問題，就開發了這個 complete function，簡稱 jspc.vim。 這個 complete function 的功能自動補完各種函數內的字串參數，像是剛剛提到的 crypto...</b:summary>
				<b:mainContent><p>前陣子在 FB 上說過突然有想做的 Vim Plugin 已經開發的差不多，所以把 1.0 放上了，這個又是自動補完的 plugin，架構設計上是沒針對 JavaScript，不過目前我只有針對 JavaScript 做好補完選項，這個 Plugin 一開始是為了處理 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.crypto">Web Crypto API</a>，這組 API 在做加解密的時候是需要指定演算法，不過演算法的名稱裡面，有一些有 <code>-</code> 在裡面，像是 <code>SHA-256</code> 之類的，以前這種字串的關鍵字，還可以加到 syntax 裡面，然後用 syntax complete 來處理，不過 <code>-</code> 不是 JavaScript 的關鍵字，會被忽略掉，為了處理這個問題，就開發了這個 complete function，簡稱 <a href="https://github.com/othree/jspc.vim">jspc.vim</a>。</p>

<p>這個 complete function 的功能自動補完各種函數內的字串參數，像是剛剛提到的 crypto algorithm，還有各種事件名稱，Media Type 等，其實越做發現越多這類的選項，目前支援的東西包括：</p>

<ul>
<li>Web Crypto Algorithm Name</li>
<li>Event Name for DOM, jQuery, Backbone</li>
<li>HTTP Methods for XHR, fetch</li>
<li>HTTP Headers, some values</li>
<li>Locales for Intl</li>
<li>HTML Tag Name for DOM API</li>
<li>Image Type for canvas.toBlob, canvas.toDataURL</li>
</ul>

<p>這個 function 的原理還蠻簡單的，如果抓到游標位置看起來在字串內（以下用底線代表游標位置）：</p>

<pre><code>n.addEventListener('cl_
</code></pre>

<p>然後就會往前找看看這是不是一個 function call 的內部，是的話去看看 function name，像是上面的範例就會找 <code>addEventListener</code>，然後就去內部先定義好的表單找看有沒有候選的項目，有的話就會根據字串內容去做過濾後然後給回來。</p>

<p>如果前面有其他參數是不會受影響的，不過 function name 和字串要在同一行，然後除了 JavaScript 的語法用 <code>(</code> 做為判斷是不是 function call 之外，其實還有支援 CoffeeScript 那種只用空白接餐處的寫法：</p>

<pre><code>n.addEventListener 'cl_
</code></pre>

<p>其實判斷方法很簡單，就是找空白前面不是 <code>,</code> 的話就是了，一時還想不到是不是有其他種語言的 function call 的語法跳脫這兩種寫法的，我想應該可以支援大部分的程式語言了，不過裡面的候選資料還需要人來做苦工，所以我只弄了 JavaScript 的 Web 相關的東西，然後同時給 CoffeeScript、LiveScript、TypeScript 用，安裝方法就照用 Pathogen 那套裝法就可以了裝起來直接用，因為實做上是把原本的 omni complete function 包起來，所以不用特別做什麼設定，就可以和其它自動補完的輔助工具合作，像是 <a href="https://github.com/othree/vim-autocomplpop">vim-autocomplpop</a> 和 <a href="https://github.com/Shougo/neocomplcache.vim">neocomplcache.vim</a>，其實本來是獨立一個 function 的，但是這樣要和 Neo Complete Cache 整合太難了，乾脆就走 Vim 的 omnicomplete 路線，結果意外的方便，最後就是有什麼問題歡迎提出摟～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000760" baseName="vroom">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-08-12</b:date>
				<b:time>22:25:04</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Vroom</b:title>
			<b:content>
				<b:summary>這次 COSCUP 因為講的是 Vim 的主題，就想說要用 Vim 來做投影片，第一個想到的是 OSDC 常客 Ingy 做的 Vroom，這個套件也是他幾年前在 OSDC 用的，因為當年有聽他的 Talk 所以有印象，還算蠻簡單學的，安裝可以用 cpan 或是 cpanminus，然後看他的文件格式就可以開始寫投影片了，我還做了一個 Vroom syntax，因為看著單色的文件看久了還蠻煩躁的，我想未來也有人會想要用 Vim 來做簡報，所以就花了些時間把它弄的比較完美，以後應該就會有其他人用的上了吧。...</b:summary>
				<b:mainContent><p>這次 COSCUP 因為講的是 Vim 的主題，就想說要用 Vim 來做投影片，第一個想到的是 OSDC 常客 Ingy 做的 <a href="https://github.com/ingydotnet/vroom-pm">Vroom</a>，這個套件也是他幾年前在 OSDC 用的，因為當年有聽他的 Talk 所以有印象，還算蠻簡單學的，安裝可以用 cpan 或是 cpanminus，然後看他的文件格式就可以開始寫投影片了，我還做了一個 <a href="https://github.com/othree/vroom-syntax.vim">Vroom syntax</a>，因為看著單色的文件看久了還蠻煩躁的，我想未來也有人會想要用 Vim 來做簡報，所以就花了些時間把它弄的比較完美，以後應該就會有其他人用的上了吧。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000758" baseName="javascript-on-vim">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-08-03</b:date>
				<b:time>23:49:14</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>JavaScript on Vim</b:title>
			<b:content>
				<b:summary>今天在 COSCUP 講的 JavaScript on Vim 投影片因為是用 Vroom 做的，所以沒有 PDF 可以上傳到 SlideShare 和 Speaker Deck，不過他有內建生成 html 版，所以我開了個 gh-pages 來放著讓大家看，按鍵盤空白鍵是下一頁，Backspace 是上一頁。 這次有超過時間，事前練習也超過一點，不過這次正式上場講的還比較慢，結果總時間就不夠了，算是意外，所以只好補充一下最後面我想要說的。如果你要學 Vim Script，除了看教學外，有個很重要的東西就是 Vim Document，一定要學著如何閱讀，包括怎麼搜尋、怎樣在文件連結中穿梭等等，Vim 的文件是我看過的程式文件中數一數二詳細的，幾乎是把 Vim 的所有細節都寫在內了，有些時候你的問題可能用 google 搜尋不到，但是其實文件內都已經有記載了，所以學習讀他真的很重要。 會後有聽眾跑來跟我說 Vim 可以輸入 :help ctrl 然後還不要按 enter，改按 CTRL + D，會變成用...</b:summary>
				<b:mainContent><p>今天在 COSCUP 講的 JavaScript on Vim 投影片因為是用 <a href="https://github.com/ingydotnet/vroom-pm">Vroom</a> 做的，所以沒有 PDF 可以上傳到 SlideShare 和 Speaker Deck，不過他有內建生成 html 版，所以我開了個 <a href="http://othree.github.io/javascript-on-vim-slide/">gh-pages</a> 來放著讓大家看，按鍵盤空白鍵是下一頁，Backspace 是上一頁。</p>

<p>這次有超過時間，事前練習也超過一點，不過這次正式上場講的還比較慢，結果總時間就不夠了，算是意外，所以只好補充一下最後面我想要說的。如果你要學 Vim Script，除了看教學外，有個很重要的東西就是 Vim Document，一定要學著如何閱讀，包括怎麼搜尋、怎樣在文件連結中穿梭等等，Vim 的文件是我看過的程式文件中數一數二詳細的，幾乎是把 Vim 的所有細節都寫在內了，有些時候你的問題可能用 google 搜尋不到，但是其實文件內都已經有記載了，所以學習讀他真的很重要。</p>

<p>會後有聽眾跑來跟我說 Vim 可以輸入 <code>:help ctrl</code> 然後還不要按 enter，改按 CTRL + D，會變成用 ctrl 當關鍵字搜尋所有的 help document 連結關鍵字，我覺得這功能應該是蠻有幫助的，所以在這邊補充一下。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000757" baseName="true-color-terminal-vim-osx">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-07-27</b:date>
				<b:time>01:10:07</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>True Color Terminal Vim on OSX</b:title>
			<b:content>
				<b:summary>True Color 指的是紅綠藍三原色每個顏色都用 8bit 來記錄色階，總共有 2 的 24 次方種顏色，一般台灣是稱為 1677 萬色，也就是現在主流的電腦螢幕顏色數，不過終端機介面，一直以來都是活在 16 色和 256 色的世界，所以我一直都是只能用 256 色的 Vim，雖然 GVim 有支援 True Color，不過我用 GVim 實在很不習慣。 前陣子在 usevim 上看到 24-bit Vim 這篇文章，讓我對 True Color 的 Vim 環境燃起了一線希望，大概的狀況是據說有個 ISO-8613-3 有設計了 TrueColor 的 notation，就長的很像...</b:summary>
				<b:mainContent><p>True Color 指的是紅綠藍三原色每個顏色都用 8bit 來記錄色階，總共有 2 的 24 次方種顏色，一般台灣是稱為 1677 萬色，也就是現在主流的電腦螢幕顏色數，不過終端機介面，一直以來都是活在 16 色和 256 色的世界，所以我一直都是只能用 256 色的 Vim，雖然 GVim 有支援 True Color，不過我用 GVim 實在很不習慣。</p>

<p>前陣子在 <a href="http://usevim.com/">usevim</a> 上看到 <a href="http://usevim.com/2013/05/31/24bit/">24-bit Vim</a> 這篇文章，讓我對 True Color 的 Vim 環境燃起了一線希望，大概的狀況是據說有個 ISO-8613-3 有設計了 TrueColor 的 notation，就長的很像 BBS 上色語法，但是有三個數值。所以只要大家都有支援，就可以看到 1677 萬色的終端機了，而所謂的大家都有支援，指的是：</p>

<ol>
<li>命令列軟體輸出有支援，這邊需要的就是 Vim 能支援輸出 ISO-8613-3 所定義的語法</li>
<li>Terminal 軟體有支援，看到 ISO 語法能呈現對應的顏色，以 OSX 上來說，我用的是 <a href="http://www.iterm2.com/">iTerm 2</a></li>
</ol>

<p>24-bit Vim 這篇文章說的是 Vim 有位 ZyX 有實做了 True Color 支援，而當時有個叫 <a href="http://konsole.kde.org/">Konsole</a> 的 KDE Terminal 支援 True Color，所以要是你是用 KDE，就可以有 True Color 的 Vim 環境了，只是我用的環境幾乎都還是 OSX 為主。最近 iTerm 2 的作者在 Twitter 上說<a href="https://twitter.com/gnachman/status/356902333424226304">他們的 24-bit color 支援 merge 到 master</a> 了，本來我一直在等 beta 版的更新，不過今天突然想到，可以去找 <a href="https://code.google.com/p/iterm2/">nightly build</a>，然後去抓了<a href="https://github.com/adaptee/konsole/blob/master/tests/color-spaces.pl">測試用的 perl 檔</a>來測試，發現真的可以用，下面兩張圖，上面那張是不支援的版本，下面的是支援的。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9367473947/" title="256 color terminal by othree, on Flickr"><img src="//farm4.staticflickr.com/3689/9367473947_69798edde0_b.jpg" width="810" height="998" alt="256 color terminal" srcset="//farm4.staticflickr.com/3689/9367473947_69798edde0.jpg 768w, //farm4.staticflickr.com/3689/9367473947_69798edde0_b.jpg 768w 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9367473883/" title="true color terminal by othree, on Flickr"><img src="//farm8.staticflickr.com/7289/9367473883_1b2ee32d17_b.jpg" width="810" height="998" alt="true color terminal" srcset="//farm8.staticflickr.com/7289/9367473883_1b2ee32d17.jpg 768w, //farm8.staticflickr.com/7289/9367473883_1b2ee32d17_b.jpg 768w 2x" /></a></p>

<p>接下來，就是 Vim 了，這部分我花了不少時間才弄出來，簡單說就是抓 <a href="https://bitbucket.org/ZyX_I/vim">ZyX 的 Vim</a> 來自己 compile，不過也不是 clone 下來直接編譯就好，要換 branch 加上 config 等等：</p>

<pre><code>hg clone https://bitbucket.org/ZyX_I/vim
cd vim
hg update 8abaeea8b2e5
cd src &amp;&amp; make autoconf &amp;&amp; cd ..

./configure \
  --enable-gui=no \
  --without-x \
  --enable-multibyte \
  --with-tlib=ncurses \
  --enable-cscope \
  --with-features=huge \
  --disable-nls \
  --enable-perlinterp \
  --enable-pythoninterp \
  --enable-rubyinterp \
  --enable-termtruecolor

make
make install
</code></pre>

<p>照理說上面這段複製貼上執行就可以了，然後，編譯安裝完，進入 Vim 可以執行 <code>version</code> 看看 <strong>termtruecolor</strong> 這個選項有沒有打開，有的話，那還差一步，就是在 <strong>.vimrc</strong> 裡面加上一行把設定打開：</p>

<pre><code>set guicolors
</code></pre>

<p>然後你的 Terminal Vim 就會去使用 GVim 用的顏色設定了，以 <a href="http://ethanschoonover.com/solarized">solarized</a> 為例，上面是 256 色的，下面是 True Color：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9367473873/" title="256 solarized by othree, on Flickr"><img src="//farm6.staticflickr.com/5548/9367473873_222b86f6ec_b.jpg" width="810" height="998" alt="256 solarized" srcset="//farm6.staticflickr.com/5548/9367473873_222b86f6ec.jpg 768w, //farm6.staticflickr.com/5548/9367473873_222b86f6ec_b.jpg 768w 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9370253776/" title="true color solarized by othree, on Flickr"><img src="//farm8.staticflickr.com/7368/9370253776_54c4dafe85_b.jpg" width="810" height="998" alt="true color solarized" srcset="//farm8.staticflickr.com/7368/9370253776_54c4dafe85.jpg 768w, //farm8.staticflickr.com/7368/9370253776_54c4dafe85_b.jpg 768w 2x" /></a></p>

<p>其實，差異蠻大的，讓我蠻意外，最後我找了一些以前沒辦法看到真相的 Vim color 來用，目前暫時是用 <a href="https://github.com/nanotech/jellybeans.vim">jellybeans</a>：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9367473855/" title="true color jellybeans by othree, on Flickr"><img src="//farm8.staticflickr.com/7282/9367473855_d576b3a7d8_b.jpg" width="810" height="998" alt="true color jellybeans" srcset="//farm8.staticflickr.com/7282/9367473855_d576b3a7d8.jpg 768w, //farm8.staticflickr.com/7282/9367473855_d576b3a7d8_b.jpg 768w 2x" /></a></p>

<p>至於 iTerm 2 和 Vim 官方何時會支援呢，前者比較樂觀，下次 release 就有了，後者的話，大約半年前 Bram 有說會加到 TODO，不過到目前的 7.4 看來都還沒有認真要面對它的樣子...</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000754" baseName="vim-airline">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-07-04</b:date>
				<b:time>18:15:37</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>vim-airline</b:title>
			<b:content>
				<b:summary> 最近發現 vim-airline 這個 plugin，其實就是 powerline 的 copy，vim powerline 也出來蠻久了，大部分人其實都不會去深入研究要怎樣設定 statusline，所以像這種可以很快速套用，又好看功能又好的 plugin 都很受歡迎。 我以前都是用自己寫的設定，還接了 hahhah.vim，長得比較簡單： 一直沒換到 powerline 其實主要原因是它要有裝 patch 過，加了幾個新符號的字型才好看，然後這有些麻煩所以一直沒嘗試。不過前兩天看到的 airline ，README 列出的一些差異讓我對它蠻感興趣的，讓我感興趣的點是： airline 是 pure vim script，powerline 則有一些 python 簡單, 速度也比 powerline 快 而且它也支援 powerline patch 過的字形來做類似的效果，只是一開始設定時發現右邊的三角形位置怎麼一直不太正確，研究了一下發現是全形半形的問題： 在 iTerm...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9203696971/" title="Flickr 上 othree 的 vim-airline"><img src="//farm6.staticflickr.com/5472/9203696971_8ffe6c5afd_b.jpg" width="810" height="566" alt="vim-airline" srcset="//farm6.staticflickr.com/5472/9203696971_8ffe6c5afd.jpg 768w, //farm6.staticflickr.com/5472/9203696971_8ffe6c5afd_b.jpg 768w 2x" /></a></p>

<p>最近發現 <a href="https://github.com/bling/vim-airline">vim-airline</a> 這個 plugin，其實就是 <a href="https://github.com/Lokaltog/powerline">powerline</a> 的 copy，vim powerline 也出來蠻久了，大部分人其實都不會去深入研究要怎樣設定 <a href="http://vimdoc.sourceforge.net/htmldoc/options.html#'statusline'">statusline</a>，所以像這種可以很快速套用，又好看功能又好的 plugin 都很受歡迎。</p>

<p>我以前都是用自己寫的設定，還接了 <a href="https://github.com/mattn/hahhah-vim">hahhah.vim</a>，長得比較簡單：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9205236137/" title="Flickr 上 othree 的 My Vim statusline"><img src="//farm4.staticflickr.com/3686/9205236137_d614de6369_b.jpg" width="810" height="458" alt="My Vim statusline" srcset="//farm4.staticflickr.com/3686/9205236137_d614de6369.jpg 768w, //farm4.staticflickr.com/3686/9205236137_d614de6369_b.jpg 768w 2x" /></a></p>

<p>一直沒換到 powerline 其實主要原因是它要有裝 patch 過，加了幾個新符號的字型才好看，然後這有些麻煩所以一直沒嘗試。不過前兩天看到的 airline ，README 列出的一些差異讓我對它蠻感興趣的，讓我感興趣的點是：</p>

<ul>
<li>airline 是 pure vim script，powerline 則有一些 python</li>
<li>簡單, 速度也比 powerline 快</li>
</ul>

<p>而且它也支援 powerline patch 過的<a href="https://github.com/Lokaltog/powerline-fonts">字形</a>來做類似的效果，只是一開始設定時發現右邊的三角形位置怎麼一直不太正確，研究了一下發現是全形半形的問題：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9204959479/" title="Flickr 上 othree 的 ambiguous"><img src="//farm8.staticflickr.com/7350/9204959479_6e20770b75.jpg" width="320" height="220" alt="ambiguous" srcset="//farm8.staticflickr.com/7350/9204959479_6e20770b75.jpg 768w" /></a></p>

<p>在 iTerm 裡面有個設定是 <code>Treat ambiguous-width characters as double width</code>，開啟這個選項，iTerm 就會把沒有定義字寬的一些字元當成是兩倍寬，也就是全形字，會有這個選項是因為一些符號、標點，在 Unicode 裡面不論是中文英文都是共用的，但是在中文的世界會習慣是用全形，如果設定錯，會出現的問題其實也沒很大，通常是全行字的符號塞進半形的空間，或是反過來，不過如果有排版需求的話就很重要了，像是 BBS，所以要用 iTerm 上 BBS 這個選項就很重要了。</p>

<p>powerline 自訂的這幾個 <a href="https://powerline.readthedocs.org/en/latest/fontpatching.html#glyph-table">新符號</a>，也是歸類在這些字元，剛好我以前都會用 iTerm 上工作站連 BBS，所以那個選項有開，結果就是如上圖下半部那樣，符號的右邊多了一個空白的寬度。這張圖上下的差異只有該選項有沒有打開而已，不過雖然搞清楚問題在哪，我最後還是決定不要用三角形，只用了 branch 的符號而已，結果就是本文的第一張圖那樣。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000749" baseName="autocomplpop-and-snipmate">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-06-25</b:date>
				<b:time>00:46:07</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>autocomplpop + snipmate</b:title>
			<b:content>
				<b:summary> 我用 vim-snipmate 和 vim-autocomplpop 已經蠻久了，不過運氣不好的是兩個 plugin 的原作者都已經不維護了，過了許久，有幾個人接手了 snipmate，不過大改一陣子之後，原本兩者間可以合作的hack 就失效了，考慮一陣子之後我開始在 github 上 fork 了一版 autocomplpop 來維護，一來是我用 vundle 安裝方便，二來是希望有一天能重新把 autocomplpop 支援 snipmate 的功能再弄起來。 其實幾個月前我有研究過一次，不過那時候幾乎看不懂新版 snipmate 的程式碼，沒想到今天又看一次竟然看懂了，不知道是不是之前那版本來就很難讀就是，總之研究了一下可行性，發現似乎可以不用像以前那樣用 hack 的方法就可以讓功能復活，花了大約兩三個小時下去弄，真的成功了，感動。 這次不用改檔案，設定有設對： let g:acp_behaviorSnipmateLength = 1 輸入的時候輸入大寫就應該要看到 snippets 的候選項目了。 最後要補充一下，我 fork 的 autocomplpop 是原作者...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9125887997/" title="Flickr 上 othree 的 autocomplpop + snipmate"><img src="//farm6.staticflickr.com/5533/9125887997_27c6e863a0_b.jpg" width="1001" height="484" alt="autocomplpop + snipmate" srcset="//farm6.staticflickr.com/5533/9125887997_27c6e863a0.jpg 768w, //farm6.staticflickr.com/5533/9125887997_27c6e863a0_b.jpg 768w 2x" /></a></p>

<p>我用 vim-snipmate 和 vim-autocomplpop 已經蠻久了，不過運氣不好的是兩個 plugin 的原作者都已經不維護了，過了許久，有幾個人接手了 <a href="https://github.com/garbas/vim-snipmate">snipmate</a>，不過大改一陣子之後，原本兩者間可以合作的<a href="http://www.ptt.cc/bbs/Editor/M.1264437741.A.4ED.html">hack</a> 就失效了，考慮一陣子之後我開始在 github 上 fork 了一版 <a href="https://github.com/othree/vim-autocomplpop">autocomplpop</a> 來維護，一來是我用 vundle 安裝方便，二來是希望有一天能重新把 autocomplpop 支援 snipmate 的功能再弄起來。</p>

<p>其實幾個月前我有研究過一次，不過那時候幾乎看不懂新版 snipmate 的程式碼，沒想到今天又看一次竟然看懂了，不知道是不是之前那版本來就很難讀就是，總之研究了一下可行性，發現似乎可以不用像以前那樣用 hack 的方法就可以讓功能復活，花了大約兩三個小時下去弄，真的成功了，感動。</p>

<p>這次不用改檔案，設定有<a href="https://github.com/othree/vim-autocomplpop/blob/master/doc/acp.txt#L82">設對</a>：</p>

<pre><code>let g:acp_behaviorSnipmateLength = 1
</code></pre>

<p>輸入的時候輸入大寫就應該要看到 snippets 的候選項目了。</p>

<p>最後要補充一下，我 fork 的 autocomplpop 是原作者 ns9tks 拆出一些 component 的版本，所以會需要安裝 <a href="http://www.vim.org/scripts/script.php?script_id=3252">L9</a>，新的 snipmate 也有相依的 plugin：<a href="https://github.com/marcweber/vim-addon-mw-utils">vim-addon-mw-utils</a> 和 <a href="https://github.com/tomtom/tlib_vim">tlib</a>，而且它也不含 snippets，東西在另外一個 <a href="https://github.com/honza/vim-snippets">vim-snippets</a>，其實有點多，蠻混亂的，所以整理一下總共要裝哪些 plugin：</p>

<ul>
<li><a href="http://www.vim.org/scripts/script.php?script_id=3252">L9</a></li>
<li><a href="https://github.com/othree/vim-autocomplpop">vim-autocomplpop</a></li>
<li><a href="https://github.com/marcweber/vim-addon-mw-utils">vim-addon-mw-utils</a></li>
<li><a href="https://github.com/tomtom/tlib_vim">tlib</a></li>
<li><a href="https://github.com/garbas/vim-snipmate">vim-snipmate</a></li>
<li><a href="https://github.com/honza/vim-snippets">vim-snippets</a></li>
</ul>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000748" baseName="vim-variable-variables">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-06-21</b:date>
				<b:time>17:32:28</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Vim Variable Variables</b:title>
			<b:content>
				<b:summary>上一篇文章介紹 Syntastic 的最後面，其實本來想順便介紹一個 Vim Plugin 設定的 pattern，後來想一想還是獨立一篇文章好了，剛好今年 COSCUP 要介紹一些 Vim 的東西，這篇文章也可以作些 Vim 的介紹，就先從上一篇文章最後面的那行 Vim 設定開始看起： let g:syntastic_coffee_coffeelint_args = "--csv -f ~/coffeelint-config.json" 在這行設定中，作的事情其實只是宣告並給一個變數值，而我想說的重點是這個變數的變數名稱：g:syntastic_coffee_coffeelint_args，這個變數其實是根據 Syntastic 的文件 5.2 節設定的，其實這個變數名稱裡面有 coffee、coffeelint、args 三個變數，在文件中是這樣描述這個變數的組成的： syntastic_[filetype]_[subchecker]_[option-name] 表示的是 coffee 這種檔案格式下面，用 coffeelint 時的 args 參數，這種階層式的設定，在其他程式語言通常會用 dictionary 這種資料型態比較多，可是在 Vim 的圈子卻不是這樣，而是比較多用上面這種...</b:summary>
				<b:mainContent><p>上一篇文章介紹 Syntastic 的最後面，其實本來想順便介紹一個 Vim Plugin 設定的 pattern，後來想一想還是獨立一篇文章好了，剛好今年 COSCUP 要介紹一些 Vim 的東西，這篇文章也可以作些 Vim 的介紹，就先從上一篇文章最後面的那行 Vim 設定開始看起：</p>

<pre><code>let g:syntastic_coffee_coffeelint_args = "--csv -f ~/coffeelint-config.json"
</code></pre>

<p>在這行設定中，作的事情其實只是宣告並給一個變數值，而我想說的重點是這個變數的變數名稱：<code>g:syntastic_coffee_coffeelint_args</code>，這個變數其實是根據 Syntastic 的<a href="https://github.com/scrooloose/syntastic/blob/master/doc/syntastic.txt#L386">文件 5.2 節</a>設定的，其實這個變數名稱裡面有 <em>coffee</em>、<em>coffeelint</em>、<em>args</em> 三個變數，在文件中是這樣描述這個變數的組成的：</p>

<pre><code>syntastic_[filetype]_[subchecker]_[option-name]
</code></pre>

<p>表示的是 coffee 這種檔案格式下面，用 coffeelint 時的 args 參數，這種階層式的設定，在其他程式語言通常會用 dictionary 這種資料型態比較多，可是在 Vim 的圈子卻不是這樣，而是比較多用上面這種 Variable Variables 的形式，我想可能原因是： Vim Script 要建立多階層的空 dictionary 不是很方便，要一層一層的建立，而這個問題不管是開發者自己不方便，使用者在 vimrc 裡面作設定也會變得很麻煩。</p>

<p>那在 Vim Script 裡面，要怎樣實作這樣 variable variables 形式的程式呢？很簡單，和 <a href="http://php.net/manual/en/language.variables.variable.php">PHP 很像</a>，都是用<a href="http://vimdoc.sourceforge.net/htmldoc/eval.html#curly-braces-names">大括號</a>，所以要讀取最上面那個使用者設定的值很簡單：</p>

<pre><code>g:syntastic_{filetype}_{subchecker}_{optionName}
</code></pre>

<p>這樣就好了，真的那麼簡單就好了...</p>

<p>Vim Script 和現在主流的 Scripting 語言差異蠻大的，有很多不太方便的設計，像是設定 list, dictionary 時如果要在不同行寫不同項目的內容，每行間都要加一個反斜線 <code>\</code>，資料的型別是強型別，字串和數字都要自己手動作轉換，宣告和改變數的值都要用 <code>let</code> 等等，而這邊會遇到的限制是，無法存取任何一個不存在的變數，要是有存取到的話都會出現錯誤，即使只有讀取值也是，並不會直接給你 false value 或是像 JavaScript 那樣有 <code>undefined</code>，所以要是使用者沒設定過這個變數 <code>g:syntastic_coffee_coffeelint_args</code>，我在 Plugin 裡面就不能直接讀取他，不然只會看到紅色的錯誤訊息。</p>

<p>要處理這個問題，要用的是 <a href="http://vimdoc.sourceforge.net/htmldoc/eval.html#exists()">exists</a> 這個內建的 function，這個 function 是專門用來檢查變數是否存在用的，如果變數存在才做事情，寫起來就像是：</p>

<pre><code>if exists('g:syntastic_' . filetype . '_' . subchecker . '_' . optionName)
    let args = g:syntastic_{filetype}_{subchecker}_{optionName}
</code></pre>

<p>實在是不太好看，不過寫 Vim Script 基本上就是常常要寫這樣難看的程式碼，做的都是一些土法煉鋼的事情，其實還蠻辛苦的，而且你現在應該可以想像，如果要用多階層的 dictionary 在 vimrc 裡面作設定會長什麼樣子了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000747" baseName="syntastic-coffeelint">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-06-21</b:date>
				<b:time>00:29:08</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>使用 Syntastic 執行 CoffeeLint 檢驗 CoffeeScript</b:title>
			<b:content>
				<b:summary>我之前有 fork jslint.vim 出來做了一個 coffee-check.vim，不過前陣子開始改用 Syntastic，作者 Martin Grenfell 也是個蠻有名的 Vim plugin 作者，最有名的應該 nerdtree 了吧，Syntastic 則是一個通用的 syntax checker plugin，使用的是外部的 syntax checker，設計成可以任意擴充支援不同檔案類型，而且支援一個檔案類型多種 checker，並且沒有限制 syntax 檢查，只要外部程式會跟你說哪裡有問題就可以。 Syntastic 預設就已經有 CoffeeScript 用的設定，支援 CoffeeScript Compiler 和 CoffeeLint，前者可以用來作 syntax checker，後者則是 lint，實際上安裝起來蠻簡單的，系統的 coffee 和 coffeelint 指令都可以透過 npm 安裝：...</b:summary>
				<b:mainContent><p>我之前有 fork jslint.vim 出來做了一個 <a href="https://github.com/othree/coffee-check.vim">coffee-check.vim</a>，不過前陣子開始改用 <a href="https://github.com/scrooloose/syntastic">Syntastic</a>，作者 Martin Grenfell 也是個蠻有名的 Vim plugin 作者，最有名的應該 <a href="https://github.com/scrooloose/nerdtree">nerdtree</a> 了吧，Syntastic 則是一個通用的 syntax checker plugin，使用的是外部的 syntax checker，設計成可以任意擴充支援不同檔案類型，而且支援一個檔案類型多種 checker，並且沒有限制 syntax 檢查，只要外部程式會跟你說哪裡有問題就可以。</p>

<p>Syntastic 預設就已經有 CoffeeScript 用的設定，支援 CoffeeScript Compiler 和 <a href="http://www.coffeelint.org/">CoffeeLint</a>，前者可以用來作 syntax checker，後者則是 <a href="http://zh.wikipedia.org/wiki/Lint">lint</a>，實際上安裝起來蠻簡單的，系統的 coffee 和 coffeelint 指令都可以透過 npm 安裝：</p>

<pre><code>npm install -g coffee-script
npm install -g coffeelint
</code></pre>

<p>Synatastic 用 Vundle 或 pathogen 安裝，然後你編輯完 CoffeeScript 檔案存檔時，就會出現檢查的結果了。</p>

<p>不過雖然安裝簡單，但是我還是遇到一個問題，就是 CoffeeLint 的其中一項檢查項目是每行的程式碼不要太長，預設是 80 個字元，不過這個數值對我來說太小了，所以我就必須要想辦法修改這個限制，CoffeeLint 有提供設定這些規定的選項，有點複雜，首先你必須要先有一個設定檔，而這個設定檔要 CoffeeLint 0.5.5 以後才有辦法用指令產生，運氣很不好的，npm 現在的 stable 版卻是 0.5.4，還不支援產生設定檔，我又不想要自己 compile 一份，所以只好上網搜尋，結果還真的給我找到範例，趕緊丟 <a href="https://gist.github.com/othree/5820021">gist 備份</a>。</p>

<p>設定檔內容就是個 JSON：</p>

<pre><code>{
    "max_line_length": {
      "value": 80,
      "level": "ignore",
      "message": "Line exceeds maximum allowed length"
    }
}
</code></pre>

<p>還蠻好理解的（可是沒範例我怎麼知道格式是怎樣啊！怒！），改好我要的設定後，執行 coffeelint 指令時還要加上參數來指定設定檔：</p>

<pre><code>coffeelint -f ~/coffeelint-configuration.json route.coffee
</code></pre>

<p>之前做到這步後我就卡住了，因為不知道怎樣設定成讓 Syntastic 執行時也接一樣的參數，直到今天早上跟 joseph 推薦 Syntastic 之後，才又花時間研究一次，終於發現其實可以在 vimrc 裡面<a href="https://github.com/scrooloose/syntastic/blob/master/doc/syntastic.txt#L386">設定</a>特定檔案、特定 checker、特定設定的值：</p>

<pre><code>let g:syntastic_coffee_coffeelint_args = "--csv -f ~/coffeelint-config.json"
</code></pre>

<p>前面的 <code>--csv</code> 是一定要的，這樣設好，我終於可以不用一直看到 CoffeeLint 跟我說我的程式碼太長了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
