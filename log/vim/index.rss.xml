<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>O3noBLOG - vim</title>
<link>https://blog.othree.net//log/ vim/</link>
<description></description>
<copyright>Copyright 2013</copyright>
<lastBuildDate>2013-08-12 22:25</lastBuildDate>
<generator>http://www.movabletype.org/?v=4.38</generator>
<docs>http://blogs.law.harvard.edu/tech/rss</docs> 


<item>
<title>Vroom</title>
<description><![CDATA[<p>這次 COSCUP 因為講的是 Vim 的主題，就想說要用 Vim 來做投影片，第一個想到的是 OSDC 常客 Ingy 做的 <a href="https://github.com/ingydotnet/vroom-pm">Vroom</a>，這個套件也是他幾年前在 OSDC 用的，因為當年有聽他的 Talk 所以有印象，還算蠻簡單學的，安裝可以用 cpan 或是 cpanminus，然後看他的文件格式就可以開始寫投影片了，我還做了一個 <a href="https://github.com/othree/vroom-syntax.vim">Vroom syntax</a>，因為看著單色的文件看久了還蠻煩躁的，我想未來也有人會想要用 Vim 來做簡報，所以就花了些時間把它弄的比較完美，以後應該就會有其他人用的上了吧。</p>
]]>
</description>
<link>https://blog.othree.net/log/2013/08/12/vroom/</link>
<guid>https://blog.othree.net/log/2013/08/12/vroom/</guid>
<category>vim</category>
<pubDate>2013-08-12 22:25</pubDate>
</item>

<item>
<title>JavaScript on Vim</title>
<description><![CDATA[<p>今天在 COSCUP 講的 JavaScript on Vim 投影片因為是用 <a href="https://github.com/ingydotnet/vroom-pm">Vroom</a> 做的，所以沒有 PDF 可以上傳到 SlideShare 和 Speaker Deck，不過他有內建生成 html 版，所以我開了個 <a href="http://othree.github.io/javascript-on-vim-slide/">gh-pages</a> 來放著讓大家看，按鍵盤空白鍵是下一頁，Backspace 是上一頁。</p>

<p>這次有超過時間，事前練習也超過一點，不過這次正式上場講的還比較慢，結果總時間就不夠了，算是意外，所以只好補充一下最後面我想要說的。如果你要學 Vim Script，除了看教學外，有個很重要的東西就是 Vim Document，一定要學著如何閱讀，包括怎麼搜尋、怎樣在文件連結中穿梭等等，Vim 的文件是我看過的程式文件中數一數二詳細的，幾乎是把 Vim 的所有細節都寫在內了，有些時候你的問題可能用 google 搜尋不到，但是其實文件內都已經有記載了，所以學習讀他真的很重要。</p>

<p>會後有聽眾跑來跟我說 Vim 可以輸入 <code>:help ctrl</code> 然後還不要按 enter，改按 CTRL + D，會變成用 ctrl 當關鍵字搜尋所有的 help document 連結關鍵字，我覺得這功能應該是蠻有幫助的，所以在這邊補充一下。</p>
]]>
</description>
<link>https://blog.othree.net/log/2013/08/03/javascript-on-vim/</link>
<guid>https://blog.othree.net/log/2013/08/03/javascript-on-vim/</guid>
<category>vim</category>
<pubDate>2013-08-03 23:49</pubDate>
</item>

<item>
<title>True Color Terminal Vim on OSX</title>
<description><![CDATA[<p>True Color 指的是紅綠藍三原色每個顏色都用 8bit 來記錄色階，總共有 2 的 24 次方種顏色，一般台灣是稱為 1677 萬色，也就是現在主流的電腦螢幕顏色數，不過終端機介面，一直以來都是活在 16 色和 256 色的世界，所以我一直都是只能用 256 色的 Vim，雖然 GVim 有支援 True Color，不過我用 GVim 實在很不習慣。</p>

<p>前陣子在 <a href="http://usevim.com/">usevim</a> 上看到 <a href="http://usevim.com/2013/05/31/24bit/">24-bit Vim</a> 這篇文章，讓我對 True Color 的 Vim 環境燃起了一線希望，大概的狀況是據說有個 ISO-8613-3 有設計了 TrueColor 的 notation，就長的很像 BBS 上色語法，但是有三個數值。所以只要大家都有支援，就可以看到 1677 萬色的終端機了，而所謂的大家都有支援，指的是：</p>

<ol>
<li>命令列軟體輸出有支援，這邊需要的就是 Vim 能支援輸出 ISO-8613-3 所定義的語法</li>
<li>Terminal 軟體有支援，看到 ISO 語法能呈現對應的顏色，以 OSX 上來說，我用的是 <a href="http://www.iterm2.com/">iTerm 2</a></li>
</ol>

<p>24-bit Vim 這篇文章說的是 Vim 有位 ZyX 有實做了 True Color 支援，而當時有個叫 <a href="http://konsole.kde.org/">Konsole</a> 的 KDE Terminal 支援 True Color，所以要是你是用 KDE，就可以有 True Color 的 Vim 環境了，只是我用的環境幾乎都還是 OSX 為主。最近 iTerm 2 的作者在 Twitter 上說<a href="https://twitter.com/gnachman/status/356902333424226304">他們的 24-bit color 支援 merge 到 master</a> 了，本來我一直在等 beta 版的更新，不過今天突然想到，可以去找 <a href="https://code.google.com/p/iterm2/">nightly build</a>，然後去抓了<a href="https://github.com/adaptee/konsole/blob/master/tests/color-spaces.pl">測試用的 perl 檔</a>來測試，發現真的可以用，下面兩張圖，上面那張是不支援的版本，下面的是支援的。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9367473947/" title="256 color terminal by othree, on Flickr"><img src="//farm4.staticflickr.com/3689/9367473947_69798edde0_b.jpg" width="810" height="998" alt="256 color terminal" srcset="//farm4.staticflickr.com/3689/9367473947_69798edde0.jpg 768w, //farm4.staticflickr.com/3689/9367473947_69798edde0_b.jpg 768w 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9367473883/" title="true color terminal by othree, on Flickr"><img src="//farm8.staticflickr.com/7289/9367473883_1b2ee32d17_b.jpg" width="810" height="998" alt="true color terminal" srcset="//farm8.staticflickr.com/7289/9367473883_1b2ee32d17.jpg 768w, //farm8.staticflickr.com/7289/9367473883_1b2ee32d17_b.jpg 768w 2x" /></a></p>

<p>接下來，就是 Vim 了，這部分我花了不少時間才弄出來，簡單說就是抓 <a href="https://bitbucket.org/ZyX_I/vim">ZyX 的 Vim</a> 來自己 compile，不過也不是 clone 下來直接編譯就好，要換 branch 加上 config 等等：</p>

<pre><code>hg clone https://bitbucket.org/ZyX_I/vim
cd vim
hg update 24-bit-xterm
cd src &amp;&amp; make autoconf &amp;&amp; cd ..

./configure \
  --enable-gui=no \
  --without-x \
  --enable-multibyte \
  --with-tlib=ncurses \
  --enable-cscope \
  --with-features=huge \
  --disable-nls \
  --enable-perlinterp \
  --enable-pythoninterp \
  --enable-rubyinterp \
  --enable-termtruecolor

make
make install
</code></pre>

<p>照理說上面這段複製貼上執行就可以了，然後，編譯安裝完，進入 Vim 可以執行 <code>version</code> 看看 <strong>termtruecolor</strong> 這個選項有沒有打開，有的話，那還差一步，就是在 <strong>.vimrc</strong> 裡面加上一行把設定打開：</p>

<pre><code>set guicolors
</code></pre>

<p>然後你的 Terminal Vim 就會去使用 GVim 用的顏色設定了，以 <a href="http://ethanschoonover.com/solarized">solarized</a> 為例，上面是 256 色的，下面是 True Color：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9367473873/" title="256 solarized by othree, on Flickr"><img src="//farm6.staticflickr.com/5548/9367473873_222b86f6ec_b.jpg" width="810" height="998" alt="256 solarized" srcset="//farm6.staticflickr.com/5548/9367473873_222b86f6ec.jpg 768w, //farm6.staticflickr.com/5548/9367473873_222b86f6ec_b.jpg 768w 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9370253776/" title="true color solarized by othree, on Flickr"><img src="//farm8.staticflickr.com/7368/9370253776_54c4dafe85_b.jpg" width="810" height="998" alt="true color solarized" srcset="//farm8.staticflickr.com/7368/9370253776_54c4dafe85.jpg 768w, //farm8.staticflickr.com/7368/9370253776_54c4dafe85_b.jpg 768w 2x" /></a></p>

<p>其實，差異蠻大的，讓我蠻意外，最後我找了一些以前沒辦法看到真相的 Vim color 來用，目前暫時是用 <a href="https://github.com/nanotech/jellybeans.vim">jellybeans</a>：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9367473855/" title="true color jellybeans by othree, on Flickr"><img src="//farm8.staticflickr.com/7282/9367473855_d576b3a7d8_b.jpg" width="810" height="998" alt="true color jellybeans" srcset="//farm8.staticflickr.com/7282/9367473855_d576b3a7d8.jpg 768w, //farm8.staticflickr.com/7282/9367473855_d576b3a7d8_b.jpg 768w 2x" /></a></p>

<p>至於 iTerm 2 和 Vim 官方何時會支援呢，前者比較樂觀，下次 release 就有了，後者的話，大約半年前 Bram 有說會加到 TODO，不過到目前的 7.4 看來都還沒有認真要面對它的樣子...</p>
]]>
</description>
<link>https://blog.othree.net/log/2013/07/27/true-color-terminal-vim-osx/</link>
<guid>https://blog.othree.net/log/2013/07/27/true-color-terminal-vim-osx/</guid>
<category>vim</category>
<pubDate>2013-07-27 01:10</pubDate>
</item>

<item>
<title>vim-airline</title>
<description><![CDATA[<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9203696971/" title="Flickr 上 othree 的 vim-airline"><img src="//farm6.staticflickr.com/5472/9203696971_8ffe6c5afd_b.jpg" width="810" height="566" alt="vim-airline" srcset="//farm6.staticflickr.com/5472/9203696971_8ffe6c5afd.jpg 768w, //farm6.staticflickr.com/5472/9203696971_8ffe6c5afd_b.jpg 768w 2x" /></a></p>

<p>最近發現 <a href="https://github.com/bling/vim-airline">vim-airline</a> 這個 plugin，其實就是 <a href="https://github.com/Lokaltog/powerline">powerline</a> 的 copy，vim powerline 也出來蠻久了，大部分人其實都不會去深入研究要怎樣設定 <a href="http://vimdoc.sourceforge.net/htmldoc/options.html#'statusline'">statusline</a>，所以像這種可以很快速套用，又好看功能又好的 plugin 都很受歡迎。</p>

<p>我以前都是用自己寫的設定，還接了 <a href="https://github.com/mattn/hahhah-vim">hahhah.vim</a>，長得比較簡單：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9205236137/" title="Flickr 上 othree 的 My Vim statusline"><img src="//farm4.staticflickr.com/3686/9205236137_d614de6369_b.jpg" width="810" height="458" alt="My Vim statusline" srcset="//farm4.staticflickr.com/3686/9205236137_d614de6369.jpg 768w, //farm4.staticflickr.com/3686/9205236137_d614de6369_b.jpg 768w 2x" /></a></p>

<p>一直沒換到 powerline 其實主要原因是它要有裝 patch 過，加了幾個新符號的字型才好看，然後這有些麻煩所以一直沒嘗試。不過前兩天看到的 airline ，README 列出的一些差異讓我對它蠻感興趣的，讓我感興趣的點是：</p>

<ul>
<li>airline 是 pure vim script，powerline 則有一些 python</li>
<li>簡單, 速度也比 powerline 快</li>
</ul>

<p>而且它也支援 powerline patch 過的<a href="https://github.com/Lokaltog/powerline-fonts">字形</a>來做類似的效果，只是一開始設定時發現右邊的三角形位置怎麼一直不太正確，研究了一下發現是全形半形的問題：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9204959479/" title="Flickr 上 othree 的 ambiguous"><img src="//farm8.staticflickr.com/7350/9204959479_6e20770b75.jpg" width="320" height="220" alt="ambiguous" srcset="//farm8.staticflickr.com/7350/9204959479_6e20770b75.jpg 768w,  768w 2x" /></a></p>

<p>在 iTerm 裡面有個設定是 <code>Treat ambiguous-width characters as double width</code>，開啟這個選項，iTerm 就會把沒有定義字寬的一些字元當成是兩倍寬，也就是全形字，會有這個選項是因為一些符號、標點，在 Unicode 裡面不論是中文英文都是共用的，但是在中文的世界會習慣是用全形，如果設定錯，會出現的問題其實也沒很大，通常是全行字的符號塞進半形的空間，或是反過來，不過如果有排版需求的話就很重要了，像是 BBS，所以要用 iTerm 上 BBS 這個選項就很重要了。</p>

<p>powerline 自訂的這幾個 <a href="https://powerline.readthedocs.org/en/latest/fontpatching.html#glyph-table">新符號</a>，也是歸類在這些字元，剛好我以前都會用 iTerm 上工作站連 BBS，所以那個選項有開，結果就是如上圖下半部那樣，符號的右邊多了一個空白的寬度。這張圖上下的差異只有該選項有沒有打開而已，不過雖然搞清楚問題在哪，我最後還是決定不要用三角形，只用了 branch 的符號而已，結果就是本文的第一張圖那樣。</p>
]]>
</description>
<link>https://blog.othree.net/log/2013/07/04/vim-airline/</link>
<guid>https://blog.othree.net/log/2013/07/04/vim-airline/</guid>
<category>vim</category>
<pubDate>2013-07-04 18:15</pubDate>
</item>

<item>
<title>autocomplpop + snipmate</title>
<description><![CDATA[<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9125887997/" title="Flickr 上 othree 的 autocomplpop + snipmate"><img src="//farm6.staticflickr.com/5533/9125887997_27c6e863a0_b.jpg" width="1001" height="484" alt="autocomplpop + snipmate" srcset="//farm6.staticflickr.com/5533/9125887997_27c6e863a0.jpg 768w, //farm6.staticflickr.com/5533/9125887997_27c6e863a0_b.jpg 768w 2x" /></a></p>

<p>我用 vim-snipmate 和 vim-autocomplpop 已經蠻久了，不過運氣不好的是兩個 plugin 的原作者都已經不維護了，過了許久，有幾個人接手了 <a href="https://github.com/garbas/vim-snipmate">snipmate</a>，不過大改一陣子之後，原本兩者間可以合作的<a href="http://www.ptt.cc/bbs/Editor/M.1264437741.A.4ED.html">hack</a> 就失效了，考慮一陣子之後我開始在 github 上 fork 了一版 <a href="https://github.com/othree/vim-autocomplpop">autocomplpop</a> 來維護，一來是我用 vundle 安裝方便，二來是希望有一天能重新把 autocomplpop 支援 snipmate 的功能再弄起來。</p>

<p>其實幾個月前我有研究過一次，不過那時候幾乎看不懂新版 snipmate 的程式碼，沒想到今天又看一次竟然看懂了，不知道是不是之前那版本來就很難讀就是，總之研究了一下可行性，發現似乎可以不用像以前那樣用 hack 的方法就可以讓功能復活，花了大約兩三個小時下去弄，真的成功了，感動。</p>

<p>這次不用改檔案，設定有<a href="https://github.com/othree/vim-autocomplpop/blob/master/doc/acp.txt#L82">設對</a>：</p>

<pre><code>let g:acp_behaviorSnipmateLength = 1
</code></pre>

<p>輸入的時候輸入大寫就應該要看到 snippets 的候選項目了。</p>

<p>最後要補充一下，我 fork 的 autocomplpop 是原作者 ns9tks 拆出一些 component 的版本，所以會需要安裝 <a href="http://www.vim.org/scripts/script.php?script_id=3252">L9</a>，新的 snipmate 也有相依的 plugin：<a href="https://github.com/marcweber/vim-addon-mw-utils">vim-addon-mw-utils</a> 和 <a href="https://github.com/tomtom/tlib_vim">tlib</a>，而且它也不含 snippets，東西在另外一個 <a href="https://github.com/honza/vim-snippets">vim-snippets</a>，其實有點多，蠻混亂的，所以整理一下總共要裝哪些 plugin：</p>

<ul>
<li><a href="http://www.vim.org/scripts/script.php?script_id=3252">L9</a></li>
<li><a href="https://github.com/othree/vim-autocomplpop">vim-autocomplpop</a></li>
<li><a href="https://github.com/marcweber/vim-addon-mw-utils">vim-addon-mw-utils</a></li>
<li><a href="https://github.com/tomtom/tlib_vim">tlib</a></li>
<li><a href="https://github.com/garbas/vim-snipmate">vim-snipmate</a></li>
<li><a href="https://github.com/honza/vim-snippets">vim-snippets</a></li>
</ul>
]]>
</description>
<link>https://blog.othree.net/log/2013/06/25/autocomplpop-and-snipmate/</link>
<guid>https://blog.othree.net/log/2013/06/25/autocomplpop-and-snipmate/</guid>
<category>vim</category>
<pubDate>2013-06-25 00:46</pubDate>
</item>

<item>
<title>Vim Variable Variables</title>
<description><![CDATA[<p>上一篇文章介紹 Syntastic 的最後面，其實本來想順便介紹一個 Vim Plugin 設定的 pattern，後來想一想還是獨立一篇文章好了，剛好今年 COSCUP 要介紹一些 Vim 的東西，這篇文章也可以作些 Vim 的介紹，就先從上一篇文章最後面的那行 Vim 設定開始看起：</p>

<pre><code>let g:syntastic_coffee_coffeelint_args = "--csv -f ~/coffeelint-config.json"
</code></pre>

<p>在這行設定中，作的事情其實只是宣告並給一個變數值，而我想說的重點是這個變數的變數名稱：<code>g:syntastic_coffee_coffeelint_args</code>，這個變數其實是根據 Syntastic 的<a href="https://github.com/scrooloose/syntastic/blob/master/doc/syntastic.txt#L386">文件 5.2 節</a>設定的，其實這個變數名稱裡面有 <em>coffee</em>、<em>coffeelint</em>、<em>args</em> 三個變數，在文件中是這樣描述這個變數的組成的：</p>

<pre><code>syntastic_[filetype]_[subchecker]_[option-name]
</code></pre>

<p>表示的是 coffee 這種檔案格式下面，用 coffeelint 時的 args 參數，這種階層式的設定，在其他程式語言通常會用 dictionary 這種資料型態比較多，可是在 Vim 的圈子卻不是這樣，而是比較多用上面這種 Variable Variables 的形式，我想可能原因是： Vim Script 要建立多階層的空 dictionary 不是很方便，要一層一層的建立，而這個問題不管是開發者自己不方便，使用者在 vimrc 裡面作設定也會變得很麻煩。</p>

<p>那在 Vim Script 裡面，要怎樣實作這樣 variable variables 形式的程式呢？很簡單，和 <a href="http://php.net/manual/en/language.variables.variable.php">PHP 很像</a>，都是用<a href="http://vimdoc.sourceforge.net/htmldoc/eval.html#curly-braces-names">大括號</a>，所以要讀取最上面那個使用者設定的值很簡單：</p>

<pre><code>g:syntastic_{filetype}_{subchecker}_{optionName}
</code></pre>

<p>這樣就好了，真的那麼簡單就好了...</p>

<p>Vim Script 和現在主流的 Scripting 語言差異蠻大的，有很多不太方便的設計，像是設定 list, dictionary 時如果要在不同行寫不同項目的內容，每行間都要加一個反斜線 <code>\</code>，資料的型別是強型別，字串和數字都要自己手動作轉換，宣告和改變數的值都要用 <code>let</code> 等等，而這邊會遇到的限制是，無法存取任何一個不存在的變數，要是有存取到的話都會出現錯誤，即使只有讀取值也是，並不會直接給你 false value 或是像 JavaScript 那樣有 <code>undefined</code>，所以要是使用者沒設定過這個變數 <code>g:syntastic_coffee_coffeelint_args</code>，我在 Plugin 裡面就不能直接讀取他，不然只會看到紅色的錯誤訊息。</p>

<p>要處理這個問題，要用的是 <a href="http://vimdoc.sourceforge.net/htmldoc/eval.html#exists()">exists</a> 這個內建的 function，這個 function 是專門用來檢查變數是否存在用的，如果變數存在才做事情，寫起來就像是：</p>

<pre><code>if exists('gsyntastic_' . filetype . '_' . subchecker . '_' . optionName)
    let args = g:syntastic_{filetype}_{subchecker}_{optionName}
</code></pre>

<p>實在是不太好看，不過寫 Vim Script 基本上就是常常要寫這樣難看的程式碼，做的都是一些土法煉鋼的事情，其實還蠻辛苦的，而且你現在應該可以想像，如果要用多階層的 dictionary 在 vimrc 裡面作設定會長什麼樣子了。</p>
]]>
</description>
<link>https://blog.othree.net/log/2013/06/21/vim-variable-variables/</link>
<guid>https://blog.othree.net/log/2013/06/21/vim-variable-variables/</guid>
<category>vim</category>
<pubDate>2013-06-21 17:32</pubDate>
</item>

<item>
<title>使用 Syntastic 執行 CoffeeLint 檢驗 CoffeeScript</title>
<description><![CDATA[<p>我之前有 fork jslint.vim 出來做了一個 <a href="https://github.com/othree/coffee-check.vim">coffee-check.vim</a>，不過前陣子開始改用 <a href="https://github.com/scrooloose/syntastic">Syntastic</a>，作者 Martin Grenfell 也是個蠻有名的 Vim plugin 作者，最有名的應該 <a href="https://github.com/scrooloose/nerdtree">nerdtree</a> 了吧，Syntastic 則是一個通用的 syntax checker plugin，使用的是外部的 syntax checker，設計成可以任意擴充支援不同檔案類型，而且支援一個檔案類型多種 checker，並且沒有限制 syntax 檢查，只要外部程式會跟你說哪裡有問題就可以。</p>

<p>Syntastic 預設就已經有 CoffeeScript 用的設定，支援 CoffeeScript Compiler 和 <a href="http://www.coffeelint.org/">CoffeeLint</a>，前者可以用來作 syntax checker，後者則是 <a href="http://zh.wikipedia.org/wiki/Lint">lint</a>，實際上安裝起來蠻簡單的，系統的 coffee 和 coffeelint 指令都可以透過 npm 安裝：</p>

<pre><code>npm install -g coffee-script
npm install -g coffeelint
</code></pre>

<p>Synatastic 用 Vundle 或 pathogen 安裝，然後你編輯完 CoffeeScript 檔案存檔時，就會出現檢查的結果了。</p>

<p>不過雖然安裝簡單，但是我還是遇到一個問題，就是 CoffeeLint 的其中一項檢查項目是每行的程式碼不要太長，預設是 80 個字元，不過這個數值對我來說太小了，所以我就必須要想辦法修改這個限制，CoffeeLint 有提供設定這些規定的選項，有點複雜，首先你必須要先有一個設定檔，而這個設定檔要 CoffeeLint 0.5.5 以後才有辦法用指令產生，運氣很不好的，npm 現在的 stable 版卻是 0.5.4，還不支援產生設定檔，我又不想要自己 compile 一份，所以只好上網搜尋，結果還真的給我找到範例，趕緊丟 <a href="https://gist.github.com/othree/5820021">gist 備份</a>。</p>

<p>設定檔內容就是個 JSON：</p>

<pre><code>{
    "max_line_length": {
      "value": 80,
      "level": "ignore",
      "message": "Line exceeds maximum allowed length"
    }
}
</code></pre>

<p>還蠻好理解的（可是沒範例我怎麼知道格式是怎樣啊！怒！），改好我要的設定後，執行 coffeelint 指令時還要加上參數來指定設定檔：</p>

<pre><code>coffeelint -f ~/coffeelint-configuration.json route.coffee
</code></pre>

<p>之前做到這步後我就卡住了，因為不知道怎樣設定成讓 Syntastic 執行時也接一樣的參數，直到今天早上跟 joseph 推薦 Syntastic 之後，才又花時間研究一次，終於發現其實可以在 vimrc 裡面<a href="https://github.com/scrooloose/syntastic/blob/master/doc/syntastic.txt#L386">設定</a>特定檔案、特定 checker、特定設定的值：</p>

<pre><code>let g:syntastic_coffee_coffeelint_args = "--csv -f ~/coffeelint-config.json"
</code></pre>

<p>前面的 <code>--csv</code> 是一定要的，這樣設好，我終於可以不用一直看到 CoffeeLint 跟我說我的程式碼太長了。</p>
]]>
</description>
<link>https://blog.othree.net/log/2013/06/21/syntastic-coffeelint/</link>
<guid>https://blog.othree.net/log/2013/06/21/syntastic-coffeelint/</guid>
<category>vim</category>
<pubDate>2013-06-21 00:29</pubDate>
</item>

<item>
<title>eregex.vim 2.60</title>
<description><![CDATA[<p>我這幾天釋出了 <a href="https://github.com/othree/eregex.vim">eregex.vim</a> 2.6，因為離上次更新有點久了，所以重新來介紹一下這個 Vim plugin。</p>

<p>Vim 裡面搜尋和取代的 Regular Expression 有自己的一套<a href="http://vimdoc.sourceforge.net/htmldoc/pattern.html">語法</a>，不過對於平常習慣使用 Perl style 語法的人來說實在是很不方便，大部分人解決這個問題使用的是 <a href="https://github.com/mileszs/ack.vim">ack.vim</a>，不過 ack.vim 使用的是系統安裝好的 ack，而且命令比較麻煩，所以我一直用另外一套日本人寫的 eregex.vim，它的作法是把你輸入的 Perl style 語法用對照表轉成 Vim style 的語法，然後用 Vim 的搜尋指令來搜尋，原來的開發者 安久津 幾乎是失聯，於是我大概一年半前就自己開維護起來，不過當時就有兩個 issue 處理不了，沒想到最近終於成功解掉了。</p>

<p>原來的 eregex.vim 只能單向搜尋，也就是只有支援 <code>/</code> 而不支援 <code>?</code>，之前我加上了 <code>?</code> 反向搜尋的支援，不過問題是反向搜尋後，按 <code>n</code> 找下一個的方向還是正向的，當時就是找半天不知道問題在哪，最近才發現問題在搜尋的相關參數，包括搜尋方向以及是不是要 highlight 的設定，都會在離開 function call 之後被重設，於是我的作法就是讓我的自動指令變的複雜一點，相對的，本來很簡單的 keymapping 也複雜了許多，所以我一不做二不休，改成自動 mapping 的機制，使用者可以自己切換，設定 mapping key，終於可以讓搜尋指令的行為和原生的完全一樣，詳細可以上 github 看 README 的使用說明。</p>

<p>拖了將近兩年才解開的 issue，其實感覺還蠻特別的。</p>
]]>
</description>
<link>https://blog.othree.net/log/2013/02/26/eregexvim-260/</link>
<guid>https://blog.othree.net/log/2013/02/26/eregexvim-260/</guid>
<category>vim</category>
<pubDate>2013-02-26 00:59</pubDate>
</item>

<item>
<title>Vim JavaScript Libraries Syntax</title>
<description><![CDATA[<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8462979359/" title="Flickr 上 othree 的 JavaScript Libraries Syntax"><img src="//farm9.staticflickr.com/8373/8462979359_27480834ea_b.jpg" width="1018" height="840" alt="JavaScript Libraries Syntax" srcset="//farm9.staticflickr.com/8373/8462979359_27480834ea.jpg 768w, //farm9.staticflickr.com/8373/8462979359_27480834ea_b.jpg 768w 2x" /></a></p>

<p>我的新 Vim Plugin，前幾天整理 Vim 設定和修 plugin 時順手弄的，<a href="http://www.vim.org/scripts/script.php?script_id=4428">JavaScript Libraries Syntax</a>，說順手其實也不太順，為了支援 <a href="https://blog.othree.net/log/2013/02/08/vim-syntax-complete/">SyntaxComplete</a> 以及不要和現有 JavaScript syntax 衝突，還是花很多時間查資料和測試，目前支援的 library 有 <a href="http://jquery.com/">jQuery</a>、<a href="http://underscorejs.org/">underscore.js</a>、<a href="http://backbonejs.org/">Backbone.js</a> 和 <a href="http://gkz.github.com/prelude-ls/">prelude.ls</a>，其中 jQuery 是拿之前就 <a href="http://www.vim.org/scripts/script.php?script_id=2416">有的</a> 為基礎修改，其他都是新寫的。支援 SyntaxComplete 的語言有 JavaScript、<a href="http://coffeescript.org/">CoffeeScript</a> 和 <a href="http://livescript.net/">LiveScript</a>，安裝建議用 <a href="http://www.vim.org/scripts/script.php?script_id=2332">pathogen</a> 或是 <a href="https://github.com/gmarik/vundle">vundle</a>，專案放在 Github 上，patch welcome。</p>

<ul>
<li><a href="https://github.com/othree/javascript-libraries-syntax.vim">Github othree/javascript-libraries-syntax.vim</a></li>
</ul>
]]>
</description>
<link>https://blog.othree.net/log/2013/02/11/vim-javascript-libraries/</link>
<guid>https://blog.othree.net/log/2013/02/11/vim-javascript-libraries/</guid>
<category>vim</category>
<pubDate>2013-02-11 10:58</pubDate>
</item>

<item>
<title>Vim Syntax Complete</title>
<description><![CDATA[<p>Vim 的 <a href="http://vimdoc.sourceforge.net/htmldoc/insert.html#compl-omni">Omni completion</a> 功能推出之時，同時有提供一個 <a href="http://vimdoc.sourceforge.net/htmldoc/insert.html#ft-syntax-omni">syntaxcomplete</a> 的 function 可以拿 syntax highlight 裡面的關鍵字來做自動完成，設定方法很簡單：</p>

<pre><code>setlocal omnifunc=syntaxcomplete#Complete
</code></pre>

<p>這樣只要觸發 omnicomplete 的動作就會觸發這個 function ，列出 syntax 裡面有定義的關鍵字，不過他有一點小限制，就是該 syntax 設定檔裡面的 syntax group 名稱要是該檔案類型的 filetype 開頭的，例如 javascript 檔案就要 javascriptMethods, javascriptObjects 才會列入，如果是 jsPrototype, styles 為名稱的 group 就不會列出來，這其實也是 vim syntax file 寫作的習慣之一。</p>

<p>而除了這個限制之外，因為設定是直接用上 omnifunc，結果就是其他有自己專屬的 omnifunc 的語言就無法同時使用到 syntaxcomplete 的功能，不然就是要把觸發的指令切開，設定成不同的快速鍵。不過使用上就沒這麼方便，還好我用的 <a href="http://www.vim.org/scripts/script.php?script_id=1879">autocomplpop</a> 有支援使用者自定義的函數，定義的函數介面和 omni complete functilon 一樣，所以我就加上兩行設定：</p>

<pre><code>let g:acp_behaviorUserDefinedMeets = 'acp#meetsForKeyword'
let g:acp_behaviorUserDefinedFunction = 'syntaxcomplete#Complete'
</code></pre>

<p>結果就可以用 autocomplpop 內建的的 keyword 觸發條件來觸發 syntax complete，還算蠻符合需求的。</p>

<p>最後回來看一下 syntaxcomplete，這個 function 雖然是 Vim 內建的，不過其實也有放在 <a href="http://www.vim.org/scripts/script.php?script_id=3172">vimscript</a> 上，而且上面還有比較新的版本，最近我有跟作者聯絡，或許還會再有新功能吧。另外就是 autocomplpop 很久沒更新了，所以我有 <a href="https://github.com/othree/vim-autocomplpop">fork 一版</a>出來自己加了些給 js, coffee, css 檔的預設行為，好像還修了一個 bug，本來有想接上新版的 <a href="https://github.com/garbas/vim-snipmate">snipMate</a>，不過比想像的複雜不少，所以暫時放棄了。</p>
]]>
</description>
<link>https://blog.othree.net/log/2013/02/08/vim-syntax-complete/</link>
<guid>https://blog.othree.net/log/2013/02/08/vim-syntax-complete/</guid>
<category>vim</category>
<pubDate>2013-02-08 21:25</pubDate>
</item>

<item>
<title>ctrlp.vim </title>
<description><![CDATA[<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8157305010/" title="Flickr 上 othree 的 Ctrl + P on Vim with ctrlp.vim"><img src="//farm9.staticflickr.com/8339/8157305010_8f603b1e30_b.jpg" width="1003" height="775" alt="Ctrl + P on Vim with ctrlp.vim" srcset="//farm9.staticflickr.com/8339/8157305010_8f603b1e30.jpg 768w, //farm9.staticflickr.com/8339/8157305010_8f603b1e30_b.jpg 768w 2x" /></a></p>

<p>Mac 上很有名的編輯軟體 <a href="http://macromates.com/">TextMate</a> 在推出時，有很多厲害的功能是以前從未見過的，雖然現在 TextMate 幾乎是處於停滯狀態，新版本遲遲生不出來，最後甚至整個 <a href="https://github.com/textmate/textmate">open source</a> 出來了，不過當年 TextMate 的出現可以說是掀起一波風潮，各家編輯器都開始出現類似的功能，甚至還有些更厲害的變化出現，可以說是文字編輯軟體的革命時期了吧，其中 <a href="http://www.vim.org/">Vim</a> 這個本來就有廣大的開發者使用的編輯器，當然也出現不少 TextMate 功能的 plugin，像是 <a href="https://github.com/garbas/vim-snipmate">snipmate.vim</a>，就是其中之一，至於今天要介紹的，則是另一個很實用的功能，在 TextMate 開啟專案後，可以用 CMD + T 的快速鍵叫出一個快速尋找專案內檔案的小視窗，然後使用者就可以輸入關鍵字來搜尋檔案以便開啟，特別的地方是，這裡它收的關鍵字不是比對檔案內容，而是路徑和檔名，這個功能對於程式設計師這種命令列工具用的很多的人來說，實在是非常的方便，對程式設計師來說，自己想要開啟的檔案路徑、檔名基本上都會有些印象，加上鍵盤打字打的很習慣了，這種操作模式簡直是如魚得水。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8166619003/" title="Flickr 上 othree 的 CMD + T on Textmate"><img src="//farm8.staticflickr.com/7262/8166619003_a615549145_b.jpg" width="1000" height="673" alt="CMD + T on Textmate" srcset="//farm8.staticflickr.com/7262/8166619003_a615549145.jpg 768w, //farm8.staticflickr.com/7262/8166619003_a615549145_b.jpg 768w 2x" /></a></p>

<p>Vim 也很快的就有人做出了相似的功能，第一套叫做 <a href="https://wincent.com/products/command-t">command-t</a>，我在初期有嘗試使用過，不過發現一些問題，一是它是使用 Ruby 寫的，不是原生的 Vim Script，所以使用的 Vim 可能還需要自己重新編譯過，第二個問題是它想要把 CMD + T 這個快速鍵也帶過來，不過我記得設定上有些麻煩。因為這兩個原因我後來就沒使用下去。而後來出現的，就是今天的主角： <a href="http://kien.github.com/ctrlp.vim/">ctrlp.vim</a>，ctrlp.vim 剛好就把我在 command-t 上面遇到的兩個問題都解決了，一是它是純 Vim Script ，有使用 cache 機制做好索引，所以效能也不差，再來，它直接拋棄 CMD + T 這組快速鍵，而挑選了另外一組： Ctrl + P，用 Ctrl 的優點在於跨平台，設定簡單，用了一陣子感覺都很順暢，至於 command-t 我則就沒再使用過了，不過它還有在開發，有興趣的人還是可以試試看，或許我說的那些問題已經小很多了吧。</p>
]]>
</description>
<link>https://blog.othree.net/log/2012/11/10/ctrlpvim/</link>
<guid>https://blog.othree.net/log/2012/11/10/ctrlpvim/</guid>
<category>vim</category>
<pubDate>2012-11-10 00:11</pubDate>
</item>

<item>
<title>coffee-check.vim</title>
<description><![CDATA[<p>上一篇文章提到使用 <a href="http://requirejs.org/">RequireJS</a> 的 <a href="http://coffeescript.org/">CoffeeScript</a> <a href="https://github.com/jrburke/require-cs">plugin</a> 時，如果寫的 CoffeeScript 語法不正確，瀏覽器即時 compile 就會有錯誤，而且在瀏覽器那邊看到的錯誤訊息根本看不出來是錯誤是在哪個檔案、哪一行，如果專案內檔案很多，那除錯會變得很難，所以我想到的解法就是在寫 coffee 檔的時候就檢查 compile error，就像 <a href="https://github.com/hallettj/jslint.vim">jslint.vim</a> 的行為一樣，上網搜尋了一下 <a href="http://www.vim.org/">Vim</a> 的 CoffeeScript 相關外掛，發現都沒人做這功能，於是花了一些時間從 jslint.vim 那邊移植過來，使用的檢查方式是直接 <code>coffee -c</code> 來編譯，看會不會有錯誤訊息，現在已經發佈到 github 上了，叫 <a href="https://github.com/othree/coffee-check.vim">coffee-check.vim</a>。</p>

<p>安裝還算簡單，先確定系統已經有安裝 node，然後只要用 <a href="http://www.vim.org/scripts/script.php?script_id=2332">pathogen</a> 或是 <a href="http://blog.othree.net/log/2011/06/05/vundle/">Vundle</a> 把套件裝起來，接著在 vimrc 內加上一行：</p>

<pre><code>au BufRead,BufNewFile *.coffee set ft=coffee
</code></pre>

<p>之後每次儲存 *.coffee 檔就會自動跑 CoffeeCompile compile，然後把錯誤訊息丟到 Quickfix Window 裡面，目前有一些已知問題：</p>

<ol>
<li>CoffeeScript compile 一次只會有一個錯誤，而不是從頭到尾的完整檢查，所以如果檔案內有兩個以上的錯誤，那就要重複幾次才能把錯誤都修正。</li>
<li>有一些錯誤訊息是沒有行號的，但是不給行號的話 Quickfix 那邊會有些行為不一樣，所以這種錯誤訊息我都統一說錯誤是在第一行。</li>
<li>第三是現在是用 node require 的方式來跑 compile，和系統自己用 npm 裝的 coffee 沒有關係，我還在考慮要不要用 npm 裝的 coffee 指令，一開始不用是因為用 coffee 指令是因為它 compile 出錯的話不只會有錯誤訊息，還會有錯誤的 trace 的資訊，不過這是我不需要的資訊。</li>
</ol>

<p>第一和第二個問題基本上是目前無解，除非以後有什麼其它的 syntax error checker 來做這件事，現在的我也還寫不出這種東西，第三點則是近期可能會有更新，如果其它還有什麼建議或問題回報都歡迎，可以直接到 github 開 <a href="https://github.com/othree/coffee-check.vim/issues">issue</a>。</p>

<p>補充，有人提了我才發現，<a href="https://github.com/kchmck/vim-coffee-script">vim-coffee-script</a> 也可以做到幾乎一樣的事情，只要在 vimrc 加入這行：</p>

<pre><code>au BufWritePost *.coffee silent CoffeeMake! -b | cwindow | redraw!
</code></pre>

<p>使用 vim-coffee-script 的話，因為 <code>CoffeeMake</code> 是把 coffee 轉成 js 的指令，所以如果沒有錯誤，就會產生 js 檔案，不過我自己的使用情境是不需要那個 js 檔案的，這也是我當初決定自己做一個的原因，單純只有做語法檢查。</p>
]]>
</description>
<link>https://blog.othree.net/log/2012/01/23/coffee-check-vim/</link>
<guid>https://blog.othree.net/log/2012/01/23/coffee-check-vim/</guid>
<category>vim</category>
<pubDate>2012-01-23 00:00</pubDate>
</item>

<item>
<title>Vim Plugin Deployment</title>
<description><![CDATA[<p>
<script async="async" class="speakerdeck-embed" data-id="4e9480b51c29c60051017171" data-ratio="1.3333333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</p>

<p><a href="https://groups.google.com/forum/?hl=zh-TW_US#!forum/vim-taiwan">Vim-Taiwan</a> 第一次聚會我的分享題目：「Vim Plugin Deployment」，內容是在介紹怎樣發佈自己寫的 Vim Plugin，不是 Plugin Developer 才需要知道的東西，不論是偶爾會修改別人的 plugin，抑或是會在 vimrc 裡面寫 function 的人都可以了解一下的。</p>
]]>
</description>
<link>https://blog.othree.net/log/2011/10/12/vim-plugin-deployment/</link>
<guid>https://blog.othree.net/log/2011/10/12/vim-plugin-deployment/</guid>
<category>vim</category>
<pubDate>2011-10-12 02:16</pubDate>
</item>

<item>
<title>Vundle, Bundler for Vim</title>
<description><![CDATA[<p><a href="http://www.vim.org/">Vim</a> 雖然本身功能就很強大，但是要讓它好用，支援更多的功能，那不可缺少的就是安裝外掛 (plugin) 了，不過 Vim 的外掛安裝和尋找本身對新手來說就是一道不小的門檻，Vim 自己的網站雖然有 <a href="http://www.vim.org/scripts/index.php">scripts</a> 這塊讓人上傳外掛的地方，不過基本上不太好用，所以有些開發者不會把東西丟到這，取而代之的，這幾年最主流的方式反而是用 <a href="https://github.com">github</a> 來放 Vim 外掛，然後配上 <a href="http://www.vim.org/scripts/script.php?script_id=2332">pathogen</a> 來安裝和管理，不但讓外掛安裝時互相不干擾，用 git 管理的外掛也可以直接更新，要反安裝也不用怕不乾淨，和以前壓縮檔、<a href="http://www.vim.org/scripts/script.php?script_id=1502">Vimball</a> 時期比起來真的是好太多了。</p>

<p><a href="http://gmarik.info">gmarik</a> 受到 pathogen 和 Ruby 的 <a href="http://gembundler.com/">bundler</a> 的啟發，開發了 <a href="https://github.com/gmarik/vundle">Vundle</a> 這個 Vim 外掛，除了可以像 pathogen 那樣把外掛分到不同目錄管理，更厲害的是你可以很簡單的新增要安裝的外掛，然後透過指令簡單的安裝和更新。</p>

<pre><code>set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'

Bundle 'YankRing.vim'
Bundle 'VisIncr'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-surround'
Bundle 'Align'
Bundle 'othree/eregex.vim'
Bundle 'mru.vim'
Bundle 'sjl/gundo.vim'

filetype plugin indent on
</code></pre>

<p>節錄一段我現在的 <a href="https://github.com/othree/rc/blob/master/home/.vimrc">.vimrc</a> 設定，要新增外掛，就只要加上一行，然後進入 Vim 執行 <code>:BundleInstall</code> ，如果要更新就是 <code>:BundleInstall!</code> ，非常簡單，Bundle 支援的參數有三種，第一種是直接一個普通字串，會去找 Vim Script 裡面的外掛，第二種是中間有個 <code>/</code> 的，前面是 github 帳號，後面則是他的 Vim 外掛專案路徑，其實也就是 github 專案頁面路徑的後面那段，第三種就是 git repository 的位置了，基本上這樣就很夠用了，如果有遇到外掛沒有上述三種地方可以裝，或是想要自己修改的話怎麼辦？</p>

<p>舉例來說， <a href="https://github.com/hallettj/jslint.vim">jslint.vim</a> 我就自己改成用 Douglas Crockford 的 <a href="https://github.com/douglascrockford/JSLint">JSLint repo</a> 下的最新版 jslint.js ，這種情形，我會自己 <a href="https://github.com/othree/jslint.vim">fork 一份 jslint.vim</a> 下來修改，然後安裝就裝自己的那份。使用 Vundle 之後，把 plugin 裝回來的過程比以前要簡單上數百倍，所以只要備份 .vimrc 就可以了，整個 <a href="https://github.com/othree/rc/tree/master/home">目錄</a> 看起來清爽太多了。</p>
]]>
</description>
<link>https://blog.othree.net/log/2011/06/05/vundle/</link>
<guid>https://blog.othree.net/log/2011/06/05/vundle/</guid>
<category>vim</category>
<pubDate>2011-06-05 08:14</pubDate>
</item>

<item>
<title>Gundo.vim</title>
<description><![CDATA[<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5478866289/" title="Gundo 的 undo branch 圖"><img src="//farm6.static.flickr.com/5260/5478866289_5f64b4da86.jpg" width="500" height="490" alt="Gundo 的 undo branch 圖" /></a></p>

<p>詳細可以看 Vimcast 最新的一期：<a href="http://vimcasts.org/episodes/undo-branching-and-gundo-vim/">Undo branching and Gundo.vim</a>，簡單說就是 Vim 有個 undo branch 讓你 undo 後又做了修改後，還可以回到原來 undo 前的版本，不過標準的操作方式並不好用，甚至很多人都不知道有這個功能，因此  <a href="http://stevelosh.com/">Steve Losh</a> 做了個 <a href="http://sjl.bitbucket.org/gundo.vim/">Gundo</a> ，讓 undo branch 圖形化，並且可以直接移動到特定的版本，實在是非常強大，還在開發的時候我就一直很注意了，沒想到忘了一陣子，它就已經發展到 2.0 了，總之看到後馬上就變成必備的 vim plugin 了:P。</p>
]]>
</description>
<link>https://blog.othree.net/log/2011/02/27/gundovim/</link>
<guid>https://blog.othree.net/log/2011/02/27/gundovim/</guid>
<category>vim</category>
<pubDate>2011-02-27 00:01</pubDate>
</item>


</channel>
</rss>