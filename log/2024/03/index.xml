<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>m</b:listType>
			<b:listData listID="2024-03">March 2024</b:listData>

			<b:previous>
				<b:mTitle>January 2024</b:mTitle>
				<b:mDate>2024/01</b:mDate>
			</b:previous>


		</b:entriesMeta>

		<b:entry entryID="001004" baseName="ui-event-order">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2024-03-24</b:date>
				<b:time>18:07:13</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>UI Event Order</b:title>
			<b:content>
				<b:summary>我一直以來都對於 DOM 事件的順序抱有一種不確定的感覺，舉例來說，當使用者點滑鼠時，你可以預期到會有 mousedown、mouseup、click 事件，但是它們的順序是什麼呢？可以確定的是 down 一定是第一個，up 一定在 down 之後，那 click 是在中間還是最後呢？更進一步，點在可以有 focus 的元件上，那 focus 事件的順序呢？如果已經有其他元件有 focus，那它的 blur 事件又是在 focus 的前面還後面呢？除了滑鼠事件外，鍵盤事件又更複雜，除了 keydown、keyup 之外還有 input、change 和 IME 的 composition 事件等，總之最近實在是太在意了，就認真的弄了個測試網頁自己測試，之後又查找了相關的標準規範，這篇就來記錄一下這些事件的順序。 首先就來說滑鼠（指標裝置）相關的事件順序吧，第一個是滑鼠點擊，就是 mousedown、mouseup、click，是在 mouseup 後才接著有 click 事件，其實仔細想了一下也是蠻合理的，要有 up 事件才代表完成了 click 事件。然後這順序其實是有定義在 UI...</b:summary>
				<b:mainContent><p>我一直以來都對於 DOM 事件的順序抱有一種不確定的感覺，舉例來說，當使用者點滑鼠時，你可以預期到會有 <code>mousedown</code>、<code>mouseup</code>、<code>click</code> 事件，但是它們的順序是什麼呢？可以確定的是 down 一定是第一個，up 一定在 down 之後，那 <code>click</code> 是在中間還是最後呢？更進一步，點在可以有 focus 的元件上，那 <code>focus</code> 事件的順序呢？如果已經有其他元件有 focus，那它的 <code>blur</code> 事件又是在 <code>focus</code> 的前面還後面呢？除了滑鼠事件外，鍵盤事件又更複雜，除了 keydown、keyup 之外還有 <code>input</code>、<code>change</code> 和 IME 的 composition 事件等，總之最近實在是太在意了，就認真的弄了個測試網頁自己測試，之後又查找了相關的標準規範，這篇就來記錄一下這些事件的順序。</p>
<p>首先就來說滑鼠（指標裝置）相關的事件順序吧，第一個是滑鼠點擊，就是 <code>mousedown</code>、<code>mouseup</code>、<code>click</code>，是在 <code>mouseup</code> 後才接著有 <code>click</code> 事件，其實仔細想了一下也是蠻合理的，要有 up 事件才代表完成了 <code>click</code> 事件。然後這順序其實是有定義在 <a href="https://www.w3.org/TR/uievents/#events-mouseevent-event-order">UI Events 5.3.3</a> 之中的，其中的最後一個表格就是一個標準的點擊時事件的順序，而且這個表格還包括了 <code>mousemove</code> 和 <code>dblclick</code> 事件，這個章節中的其他部分則是滑鼠移動經過不同、多層的 DOM node 時，不同 node 上的 <code>mouseover</code>、<code>mouseout</code> 事件的順序。</p>
</b:mainContent>
				<b:extendContent><p>除了 Mouse Events 之外，其實現在瀏覽器的實作應該是都實作 <a href="https://w3c.github.io/pointerevents/">Pointer Events</a> 了，Pointer Events 涵蓋了各種指標式的控制方式，包括了滑鼠、觸控、觸控筆等，所以可以說 Mouse Events 只能算是子集，相對應的事件名稱基本上就是把 <code>mouse</code> 換成 <code>pointer</code>，例如：<code>pointerdown</code>、<code>pointerup</code>，現在主流的瀏覽器也都已經有支援 Pointer Events 了，然後這時候問題就來了，Pointer Event 和 Mouse Events 誰先誰後？根據測試的結果，是 Pointer 先然後才 Mouse，所以更完整的順序是：</p>
<pre><code>pointerdown
mousedown
focus
focusin
pointerup
mouseup
click
</code></pre>
<p>至於這個順序是怎麼決定的呢？根據 Pointer Events 的 <a href="https://w3c.github.io/pointerevents/#compatibility-mapping-with-mouse-events">11 章「Compatibility mapping with mouse events」</a> 所述，瀏覽器開發時可以考慮同時發佈古時候的 Mouse Events，其中 11.2、11.3 就有提到先發佈 Pointer Events 接著再發佈對應的 Mouse Event。</p>
<p>然後還有一個細節是，根據 Pointer Event <a href="https://w3c.github.io/pointerevents/#the-pointerdown-event">4.2.3 The pointerdown event</a>，如果在 <code>pointerdown</code> 事件裡面呼叫 <code>event.preventDefault()</code> 取消事件的話，後面的 <code>mousedown</code> 和 <code>mouseup</code> 就都不會觸發。</p>
<p>我上面的那段事件順序，其實還多列了一個 <code>focusin</code>，這其實是一系列的新(相較於 DOM2)事件，包括了：</p>
<ul>
<li><code>focusin</code> 對應 <code>focus</code></li>
<li><code>focusout</code> 對應 <code>blur</code></li>
<li><code>mouseenter</code> 對應 <code>mouseover</code></li>
<li><code>mouseleave</code> 對應 <code>mouseout</code></li>
</ul>
<p>其實 <code>mouseenter</code>/<code>mouseleave</code> 是 IE5.5 時微軟先提出的，ppk 也有<a href="https://www.quirksmode.org/js/events_mouse.html#mouseenter">文章</a>介紹過它解決了什麼問題，jQuery 當年也有支援，後來進入了 W3C 標準，現在是放到 <a href="https://w3c.github.io/uievents/#event-type-mouseenter">UI Events</a> 裡面，這些事件最大的差異就是它們不會 bubble 到外層，減少了很多問題；<code>focusin</code>/<code>focusout</code> 則是剛好相反，它們會 bubble 而 <code>focus</code>/<code>blur</code> 不會，一樣 ppk 也有<a href="https://www.quirksmode.org/blog/archives/2008/04/delegating_the.html">文章</a>介紹到，簡單說就是 <code>focus</code>/<code>blur</code> 不會 bubble 只有 capture（外往內到 event target 的過程），但是 IE 不是用 addEventListener 所以沒有 capture 階段，所以會無法實作出 event delegation，然後只能用當年微軟 IE 特有的 <code>focusin</code>/<code>focusout</code> 事件，現在也是標準化，收到 <a href="https://www.w3.org/TR/DOM-Level-3-Events/#event-type-focusin">DOM 3 Events</a> 裡面；而除了這四組之外，其實 Pointer Events 也有 enter 和 leave，一樣順序是在 over 和 out 的後面，然後這些成對的事件，都是比較早定義的那些先發生，才接後來定義的，和有沒有 bubble 無關。</p>
<p>接著來說 Keyboard Events，這邊就針對 input 節點上的，一個鍵盤按鍵按壓的動作，會產生 <code>keydown</code>、<code>keypress</code>、<code>keyup</code> 三個基本的事件，通常按鍵盤按鍵就是為了輸入東西，所以會有個也是比較新的 <code>input</code> 事件，會在 <code>keypress</code> 之後，<code>input</code> 則還有一個成對的 <code>beforeinput</code>，如果在 <code>beforeinput</code> 內叫 <code>preventDefault()</code> 的話則可以阻止文字的輸入，總之順序如下：</p>
<pre><code>keydown
keypress
beforeinput
input
keyup
</code></pre>
<p><code>change</code> 事件則是要在 <code>blur</code> 時才會有，順序是先 <code>change</code> 才 <code>blur</code>：</p>
<pre><code>change
blur
focusout
</code></pre>
<p>這個順序是定義在 HTML 的 User Interaction 一章的 <a href="https://html.spec.whatwg.org/multipage/interaction.html#unfocus-causes-change-event">6.6.4 Processing model</a> 裡面，明確的寫下要先 commit change 後才 <code>blur</code>。</p>
<p>如果有用 IME 的話，事情就很不單純了，還會有 Composition Events，順序是在 <code>beforeinput</code> 前面，剛開始組字會同時有 <code>compositionstart</code> 和 <code>compositionupdate</code> 兩個事件，然後沒有 <code>keypress</code>，之後的輸入組字則就是只有 <code>update</code>：</p>
<pre><code>keydown
compositionstart
compositionupdate
beforeinput
input
keyup
</code></pre>
<p>Composition Events 現在標準的文件是放在 <a href="https://w3c.github.io/uievents/#events-compositionevents">UI Events 裡面</a>，不過文件中範例的順序和實際測試的結果並不一致，目前的文件草稿中 <code>compositionupdate</code> 是在 <code>beforeinput</code> 之後，不過其實現在瀏覽器的順序是在 UI Events 的 <a href="https://github.com/w3c/uievents/issues/354">Issue 354</a> 提出的變動，只是目前文件還沒有發布更新的內容。</p>
<p>結束組字的時候，不同瀏覽器的行為就有差異了，首先是按下 <kbd>Enter</kbd> 完成組字時，Firefox 的話不會有多一個 <code>update</code>，直接就是 <code>compositionend</code>，然後是在 <code>beforeinput</code> 和 <code>input</code> 之間：</p>
<pre><code>keydown
beforeinput
compositionend
input
keyup
</code></pre>
<p>Chrome(v123) 的話就會有多一個 <code>compositionupdate</code> 然後 <code>compositionend</code> 順序也不一樣，會在 <code>input</code> 的後面：</p>
<pre><code>keydown
compositionupdate
beforeinput
input
compositionend
keyup
</code></pre>
<p>其實 <a href="https://w3c.github.io/uievents/#events-composition-key-events">UI Events 文件 5.7.5</a> 內的範例是 Firefox 那種沒有多 <code>compositionupdate</code> 的順序，這個 5.7 章節內其實還有不少其他情境下的事件順序，像是手寫輸入，取消輸入等等。</p>
<p>如果是還沒完成組字，直接切換輸入法強迫結束組字，事件順序都和按下 <kbd>Enter</kbd> 都一樣，如果是組字到一半直接切換視窗，就是標準沒定義到的狀況了，Firefox 的行為比較接近上面的樣子，先完成 <code>input</code> 才 <code>blur</code>：</p>
<pre><code>beforeinput
compositionend
input
blur
focusout
</code></pre>
<p>Chrome 則是會先產生 <code>blur</code> 然後接 <code>compositionend</code>：</p>
<pre><code>change
blur
focusout
compositionend

</code></pre>
<p>以上，大概紀錄了我一直以來都有疑惑的使用者行為所產生的事件們的順序，最後附上我用的程式碼（超單純）：</p>
<pre><code class="language-javascript">const events = [
  &quot;keydown&quot;,
  &quot;keypress&quot;,
  &quot;keyup&quot;,
  &quot;change&quot;,
  &quot;compositionstart&quot;,
  &quot;compositionupdate&quot;,
  &quot;compositionend&quot;,
  &quot;beforeinput&quot;,
  &quot;input&quot;,
  &quot;click&quot;,
  &quot;auxclick&quot;,
  &quot;contextmenu&quot;,
  &quot;mousedown&quot;,
  &quot;mouseup&quot;,
  &quot;focus&quot;,
  &quot;focusin&quot;,
  &quot;focusout&quot;,
  &quot;blur&quot;,
  &quot;pointerdown&quot;,
  &quot;pointerup&quot;,
  &quot;paste&quot;,
];

const elem1 = document.getElementById(&quot;target-1&quot;);
const elem2 = document.getElementById(&quot;target-2&quot;);

events.forEach((event) =&gt; {
  elem1.addEventListener(
    `${event}`,
    () =&gt; {
      console.log(event.target.id, event);
    },
    false
  );
  elem2.addEventListener(
    `${event}`,
    () =&gt; {
      console.log(event.target.id, event);
    },
    false
  );
});
</code></pre>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="001003" baseName="akira-toriyama">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2024-03-08</b:date>
				<b:time>23:15:52</b:time>
			</b:datetime>
			<b:category>acg</b:category>
			<b:title>鳥山明過世</b:title>
			<b:content>
				<b:summary> 今天（2024-03-08）官方發布的消息，七龍珠的作者鳥山明在三月一日時因病過世了，JUMP 也有訃報，而且還有堀井雄二、桂正和、尾田栄一郎和岸本斉史的緬懷文（巴哈姆特 GNN 有譯文），在緬懷鳥山明之餘，想來紀錄一下我對七龍珠系列的一些小心得。 首先是作者名字，其實我小時候一直搞錯，而且搞錯很久，把「鳥」當成「島」，即使到現在我都還需要在腦中確認一下，然後直到今天我才知道名字的念法（Akira Toriyama）；然後就是雖然現在大家對於 Z 那段的印象是很拖，但是其實拖的是電視動畫而已，後來我回去重看漫畫時，其實節奏還蠻明快的，當然有不少轉折拉長連載的時間，但不會在同一段劇情上拖拖拉拉；然後另外一個印象就是角色強度的通膨，以前總有個是不是一直吃書改設定的印象，像是佛力札已經號稱是宇宙最強了，怎麼後面還可以一直有更強的角色，後來重看漫畫才發現其實沒有，宇宙帝王佛力札就是在那個時間點的該宇宙中戰鬥力最高的人，接在後面的人造人是紅緞帶軍團製造出來的，魔人普烏則是古早時候就被大界王神封印的，所以佛力札作威作福時人造人還不存在，普烏則是被封印的狀態。 然後動畫故事到魔人普烏之後的續作，有「GT」和「神 vs 神」、「超」那一個系列的兩個線，其實我兩部都蠻喜歡的，比較早的 GT 是鳥山明沒有參與的，這邊就先略過，後來好不容易鳥山明回來參與的「神 vs 神」劇場版開始的世界設定，擴展了整個世界/宇宙的設定，從和界王神成對的破壞神開始到後來的多重宇宙、超級賽亞人 Blue、全王等等，我覺得都很非常的精巧，有趣而且最厲害的是沒有破壞到既有的設定，只能說真不愧是鳥山明，不知道這些設定有多詳細，和未來的企劃也不知道有多少關聯（像是那個還沒開始的大魔），不管如何，都是無限讓人惋惜啊。 最後想放一個 YouTube 的影片連結： https://www.youtube.com/watch?v=aOXs5hg0a5Y 這是龍珠超最後悟空和吉連對決最高潮的片段，也就是悟空進入「身勝手の極意」狀態的片段，似乎是在墨西哥的非官方?公開放映的景象（一開始有非授權的放映，但是後來有各種地方政府取得授權的放映活動），當初看到這影片的時候就覺得很驚訝，沒想到會在離日本這麼遙遠的地方，有個國家這麼多人都對七龍珠有這麼大的熱情，真的是個空前的成就。 追記：在發文的時間點，推特（現在的 X）的日本的 Trends 上沒有鳥山明，不過其實有三個相關的：「かめはめ波」、「スーパーサイヤ人」和「国民栄誉賞」。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53575001401/" title="鳥山明訃報 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53575001401_24c238fbc5_b.jpg" width="600" height="800" alt="鳥山明訃報" /></a></p>
<p>今天（2024-03-08）官方發布的<a href="https://dragon-ball-official.com/news/01_2499.html">消息</a>，七龍珠的作者鳥山明在三月一日時因病過世了，JUMP 也有<a href="https://www.shonenjump.com/j/2024/03/08/240308_oshirase.html">訃報</a>，而且還有堀井雄二、桂正和、尾田栄一郎和岸本斉史的緬懷文（巴哈姆特 GNN 有<a href="https://gnn.gamer.com.tw/detail.php?sn=264681">譯文</a>），在緬懷鳥山明之餘，想來紀錄一下我對七龍珠系列的一些小心得。</p>
<p>首先是作者名字，其實我小時候一直搞錯，而且搞錯很久，把「鳥」當成「島」，即使到現在我都還需要在腦中確認一下，然後直到今天我才知道名字的念法（Akira Toriyama）；然後就是雖然現在大家對於 Z 那段的印象是很拖，但是其實拖的是電視動畫而已，後來我回去重看漫畫時，其實節奏還蠻明快的，當然有不少轉折拉長連載的時間，但不會在同一段劇情上拖拖拉拉；然後另外一個印象就是角色強度的通膨，以前總有個是不是一直吃書改設定的印象，像是佛力札已經號稱是宇宙最強了，怎麼後面還可以一直有更強的角色，後來重看漫畫才發現其實沒有，宇宙帝王佛力札就是在那個時間點的該宇宙中戰鬥力最高的人，接在後面的人造人是紅緞帶軍團製造出來的，魔人普烏則是古早時候就被大界王神封印的，所以佛力札作威作福時人造人還不存在，普烏則是被封印的狀態。</p>
<p>然後動畫故事到魔人普烏之後的續作，有「GT」和「神 vs 神」、「超」那一個系列的兩個線，其實我兩部都蠻喜歡的，比較早的 GT 是鳥山明沒有參與的，這邊就先略過，後來好不容易鳥山明回來參與的「神 vs 神」劇場版開始的世界設定，擴展了整個世界/宇宙的設定，從和界王神成對的破壞神開始到後來的多重宇宙、超級賽亞人 Blue、全王等等，我覺得都很非常的精巧，有趣而且最厲害的是沒有破壞到既有的設定，只能說真不愧是鳥山明，不知道這些設定有多詳細，和未來的企劃也不知道有多少關聯（像是那個還沒開始的大魔），不管如何，都是無限讓人惋惜啊。</p>
<p>最後想放一個 YouTube 的影片連結：</p>
<p><a href="https://www.youtube.com/watch?v=aOXs5hg0a5Y">https://www.youtube.com/watch?v=aOXs5hg0a5Y</a></p>
<p>這是龍珠超最後悟空和吉連對決最高潮的片段，也就是悟空進入「身勝手の極意」狀態的片段，似乎是在墨西哥的非官方?公開放映的景象（一開始有非授權的放映，但是後來有各種地方政府取得授權的放映活動），當初看到這影片的時候就覺得很驚訝，沒想到會在離日本這麼遙遠的地方，有個國家這麼多人都對七龍珠有這麼大的熱情，真的是個空前的成就。</p>
<p>追記：在發文的時間點，推特（現在的 X）的日本的 Trends 上沒有鳥山明，不過其實有三個相關的：「かめはめ波」、「スーパーサイヤ人」和「国民栄誉賞」。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53575020381/" title="Japan Trends 2024-03-08 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53575020381_d36fbe330e_b.jpg" width="387" height="1024" alt="Japan Trends 2024-03-08" srcset="https://live.staticflickr.com/65535/53575020381_37c354f542_k.jpg 2x" /></a></p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
