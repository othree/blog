<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>y</b:listType>
			<b:listData listID="2022">2022</b:listData>

			<b:previous>
				<b:mTitle>2021</b:mTitle>
				<b:mDate>2021</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>2023</b:mTitle>
				<b:mDate>2023</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000985" baseName="japan-postal-code">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2022-12-23</b:date>
				<b:time>09:59:16</b:time>
			</b:datetime>
			<b:category>others</b:category>
			<b:title>日本郵便番号</b:title>
			<b:content>
				<b:summary> 因為工作的關係，要做日本郵遞區號和地址間的自動補完，還因此開始維護 japan-postal-code-oasis 這個套件，它的前身其實是另外一套叫 japan-postal-code 的，但是它很久沒更新了，所以我就簡單修改一些設計，在研究套件設計的同時就有機會比較深入了解日本的郵遞區號（郵便番号）系統，發現不少有趣的細節，這篇文章特別來紀錄一下。 首先，第一點就是，日本郵遞區號的資料是有整理好並開放下載的，而且下載路徑、檔案格式都是固定的沒什麼變動過，也因此可以找到不少使用這些資料的程式語言套件（包含下載腳本），japan-postal-code 就是透過這份資料來實作從郵遞區號抓地址資訊的功能，雖然不是很想和台灣比，但是這點台灣真的是輸很多，台灣其實到 3+2 郵遞區號都還可以在郵局網站下載的到，但是那個下載連結不是固定的，然後也看不出來是不是固定更新，所以你不會知道你下載的資料是不是最新的，至於最新的 3+3 郵遞區號，就沒有開放大眾下載，取而代之的是提供 Web Service、Windows 應用程式，如果真的要下載資料檔，要特別申請（參照：本公司3+3郵遞區號系統使用規範說明事項），另外就是台灣是一季更新一次，日本則是一個月更新一次。 其實我會注意到日本每個月都更新郵遞區號，是從另外一件事情發現的，在繼續之前，先來介紹一下日本郵遞區號內不同數字的意義，這在日本郵局網站有很詳細的說明，前三碼稱為郵便區番号，後四碼是町域番号，其中的前兩碼是大 block 番号，第三碼則是小 block 番号，基本上都是這樣規劃，理論上不會需要到每個月更新，直到有一天我發現到六本木森大樓，每一層樓都有自己的郵遞區號，例如用 Google Map 搜尋 Google Japan (Roppongi Hills) ，然後查看地址就會發現他的郵遞區號是 106-6126，其中的後兩碼就是 26 樓的意思，然後搜尋 Apple Japan合同会社，就會發現郵遞區號是 106-6140，就是 40 樓的意思。後來我才知道，這是屬於 個別番号 之中的超高層大樓番号，除了大樓之外，還有其他種個別番号，像是大型機構（醫院、電視台、公家單位等）也可以申請，而這種個別番号也就是資料內最常會變動的地方，所以他們才有這麼頻繁的資料更新。 其實我還有在一些第三方資料，看到說前三碼的郵便區番号，還可以再更細分成兩組：前兩碼是地域番号，第三碼則是地域調整番号，町域番号的最後一碼則是町域調整番号，另外就是第一版的日本郵遞區號是三碼為主，然後有部分地區有 3+2...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/7979542259/" title="北海道 by othree, on Flickr"><img src="https://live.staticflickr.com/8042/7979542259_86954d3eb8_b.jpg" width="1024" height="683" alt="北海道" srcset="https://live.staticflickr.com/8042/7979542259_9ff2dab54b_k.jpg 2x" /></a></p>
<p>因為工作的關係，要做日本郵遞區號和地址間的自動補完，還因此開始維護 <a href="https://www.npmjs.com/package/japan-postal-code-oasis">japan-postal-code-oasis</a> 這個套件，它的前身其實是另外一套叫 <a href="https://www.npmjs.com/package/japan-postal-code">japan-postal-code</a> 的，但是它很久沒更新了，所以我就簡單修改一些設計，在研究套件設計的同時就有機會比較深入了解日本的郵遞區號（郵便番号）系統，發現不少有趣的細節，這篇文章特別來紀錄一下。</p>
<p>首先，第一點就是，日本郵遞區號的資料是有整理好並<a href="https://www.post.japanpost.jp/zipcode/dl/readme.html">開放下載</a>的，而且下載路徑、檔案格式都是固定的沒什麼變動過，也因此可以找到不少使用這些資料的程式語言套件（包含下載腳本），<a href="https://www.npmjs.com/package/japan-postal-code">japan-postal-code</a> 就是透過這份資料來實作從郵遞區號抓地址資訊的功能，雖然不是很想和台灣比，但是這點台灣真的是輸很多，台灣其實到 3+2 郵遞區號都還可以在郵局網站下載的到，但是那個下載連結不是固定的，然後也看不出來是不是固定更新，所以你不會知道你下載的資料是不是最新的，至於最新的 3+3 郵遞區號，就沒有開放大眾下載，取而代之的是提供 Web Service、Windows 應用程式，如果真的要下載資料檔，要特別申請（參照：<a href="https://www.post.gov.tw/post/download/%E6%9C%AC%E5%85%AC%E5%8F%B83%2B3%E9%83%B5%E9%81%9E%E5%8D%80%E8%99%9F%E7%B3%BB%E7%B5%B1%E4%BD%BF%E7%94%A8%E8%A6%8F%E7%AF%84%E8%AA%AA%E6%98%8E%E4%BA%8B%E9%A0%85.odt">本公司3+3郵遞區號系統使用規範說明事項</a>），另外就是台灣是一季更新一次，日本則是一個月更新一次。</p>
<p>其實我會注意到日本每個月都更新郵遞區號，是從另外一件事情發現的，在繼續之前，先來介紹一下日本郵遞區號內不同數字的意義，這在日本郵局網站有很詳細的<a href="https://www.post.japanpost.jp/zipcode/zipmanual/p04.html">說明</a>，前三碼稱為郵便區番号，後四碼是町域番号，其中的前兩碼是大 block 番号，第三碼則是小 block 番号，基本上都是這樣規劃，理論上不會需要到每個月更新，直到有一天我發現到六本木森大樓，每一層樓都有自己的郵遞區號，例如用 Google Map 搜尋 <code>Google Japan (Roppongi Hills)</code> ，然後查看地址就會發現他的郵遞區號是 106-6126，其中的後兩碼就是 26 樓的意思，然後搜尋 <code>Apple Japan合同会社</code>，就會發現郵遞區號是 106-6140，就是 40 樓的意思。後來我才知道，這是屬於 <strong>個別番号</strong> 之中的超高層大樓番号，除了大樓之外，還有其他種個別番号，像是大型機構（醫院、電視台、公家單位等）也可以申請，而這種個別番号也就是資料內最常會變動的地方，所以他們才有這麼頻繁的資料更新。</p>
<p>其實我還有在一些<a href="https://www.msr.co.jp/mapinfo/dl/pdf/PEPOS-201411_1015.pdf">第三方資料</a>，看到說前三碼的郵便區番号，還可以再更細分成兩組：前兩碼是地域番号，第三碼則是地域調整番号，町域番号的最後一碼則是町域調整番号，另外就是第一版的日本郵遞區號是三碼為主，然後有部分地區有 3+2 碼的設計，網路上還找的到當時（1968、昭和43年）<a href="http://sasukekyon.web.fc2.com/postal/postal_code.txt">第一版的郵遞區號的清單</a>。</p>
<p>再來印在信封上的，手寫郵遞區號的格子，其實在日本郵局網站上也有仔細的定義它的尺寸，甚至連手寫的字體也有提供範例（基本上就是要你不要寫的太潦草），台灣郵局網站我找到的最接近的就是只有<a href="https://www.post.gov.tw/post/internet/Postal/index.jsp?ID=21001">信封書寫範例</a>了，其實日本的規範這麼仔細，有一個原因是為了自動化作業。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52579607481/" title="郵便番号枠 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52579607481_fa8277f6c9_b.jpg" width="1024" height="534" alt="郵便番号枠" srcset="" /></a></p>
<p>這個自動化作業，其實遠超我的預期，不只是根據郵遞區號分類而已，日本郵局其實定義了一套地址的數位化編碼系統，轉換邏輯也不困難，也就是說，日本國內的任意地址，都可以用一串數字（看情況加上英文字母）來表示，日本地址可以簡單的轉為英數編碼，有一個很大的原因是他們的地址是從大範圍（ex: X丁目X番X号）到小範圍這樣，而不像是其他地方用路加上號碼（ex: XX路X號）的方式，所以其實編碼機制也很簡單，大部分的地址，就是郵遞區號加上後面的三碼，然後再加上可能樓層、房號就可以組成，例如東京鳩居堂 銀座本店，地址是：</p>
<blockquote>
<p>〒104-0061 東京都中央区銀座５丁目７−4</p>
</blockquote>
<p>轉成編碼就是：</p>
<blockquote>
<p>10400615-7-4</p>
</blockquote>
<p>前七碼固定式郵便番号，所以不用處理分隔符號的問題。</p>
<p>另外日本地址有個天字第一號（我取名的），大家可以猜猜看是哪個地方的地址，沒錯，就是皇居，郵遞區號是 100-0001，地址是 1 丁目 1 番（沒有号），編碼就是：</p>
<blockquote>
<p>10000011-1</p>
</blockquote>
<p>而且這套編碼系統還有一組專用的 <a href="https://www.post.japanpost.jp/zipcode/zipmanual/p11.html">barcode 系統</a>，可以用掃描的方式輸入，非常方便，barcode 的<a href="https://www.post.japanpost.jp/zipcode/zipmanual/p11.html">定義</a>也蠻有趣的，不是用粗細，而是用長短和位置來表達不同意義，一條 bar 有四種（4-state）可能的變化（1-4），所以是 2bit，然後一個字元是三條 bar，所以是 6bit，可以有單一字元或是雙字元，理論上單字元有 64 種組合，雙字元是 12bit 共 4096 種組合，不過其實雙字元的第一個字元固定是控制碼，所以實際上變化沒這麼多，目前也只有定義英數、hyphen 和一些控制字元而已，日本郵局內部似乎還有其他用途，而不是只有標記收件人地址而已，不過細節沒有網站上沒有公開，這部份有分為局內 barcode 和 ID barcode，而自己用這組 barcode 系統標注地址的部分，則是稱為 custom barcode。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52580048500/" title="郵便番号 カスタマバーコード by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52580048500_587f5ae388_b.jpg" width="605" height="1024" alt="郵便番号 カスタマバーコード" srcset="" /></a></p>
<p>至於要如何產生住址的 custom barcode 呢，日本郵局網站是有蠻詳細的說明，包括怎樣拆解地址、怎樣編碼、檢查碼怎樣算等等都有說明。而也還有提供一個 custom barcode 產生程式可以下載，抓下來解開後可以發現是網頁應用程式，上一個世代的，編碼也不是 UTF-8 的，現在還可以正常運作，其實還蠻厲害。</p>
<p>PS. 後來<a href="https://ja.wikipedia.org/wiki/%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%83%90%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89">發現</a>其實有蠻多國家的郵務系統是使用類似的 4-state barcode 的。</p>
<p>接下來算是不相關的資訊了，其實我在查資料時，有想研究看看郵便番號有沒有和其他標準相似或是共通的地方，首先是有注意到 ISO 3166-2 這個標準，是每個國家自己有一個子集，定義了各自國家的行政區，例如日本的是 ISO 3166-2:JP，裡面就是用 01-47 從北到南把日本的都道府縣編碼了一遍，而且直接對應到 JIS X 0401，最初是在好奇 JIS 的編碼和郵便番号前兩碼的地域番号有沒有相通，結果當然是沒有。其實我還蠻羨慕日本有 JIS 標準統整各種規範的單位，台灣也是有相關的編碼，只是就是像是 <a href="https://zh.wikipedia.org/wiki/ISO_3166-2:TW">ISO 3166-2:TW Wikipedia 條目</a>裡面列出的，就是各單位各自為政這樣。</p>
<p>另外一套標準(?)則是日本導航系統幾乎都會有支援的 <a href="https://www.denso-solution.com/mapcode/whats.html">MAPCODE</a>，這個編碼系統就不是官方標準了，而是民間企業 <a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%B3%E3%82%BD%E3%83%BC" title="デンソー">日本電装</a> （前身是 Toyota 自動車的一個部門）開發的定位系統，是針對日本境內的，用類似 quadtree 的方式，把地圖分割成一小塊一小塊，然後每一塊下去編碼，不過和 quadtree 不一樣的是，不是統一分成四塊，而是分成三個層級，第一級是 Zone 全日本被分為 1203 個 Zone，然後每個 Zone 再細分成 30x30 個 Block，每個 Block 一樣再細分成 30x30 個 Unit，如果還要更細，還可以再細分成 Core 和 S Core，大約可以到 3 公尺的精細度，最後就是當然，這套系統的大分區也和郵遞區號完全不相通。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000984" baseName="fix-my-archlinux">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2022-12-03</b:date>
				<b:time>00:38:10</b:time>
			</b:datetime>
			<b:category>unix</b:category>
			<b:title>Archlinux 修復紀錄</b:title>
			<b:content>
				<b:summary> 之前我在推特上有說過我不小心把我放 blog 的主機搞壞，當時就是用 pacman 更新過後，出現一些錯誤，我快速的重跑 pacman -Syu 然後就開始一直出現錯誤了，當時想說是因為我太久沒更新，然後有相依性錯誤造成系統幾乎爛掉，一度要放棄，不過因為網站相關的 instance 都還跑著，所以我就想說暫時放著，等有空把資料弄出來再重建系統，然後十一月中去了一趟新加坡，這趟行程要邊顧小孩其實很累，然後就在回來當天晚上就收到 Linode 的緊急維護，已經把我的 Linode 主機重開了，網站當然也死了，真的是晴天霹靂，不過實在太累了我也只能先放著不管。 過了幾天終於比較有力氣來看看看問題，我當時的狀況是，無法使用 pacman，然後更進一步發現是 curl 就死掉，curl 死掉會造成很多東西一起掛掉，像是 git、wget 也都掛了，結果我能使用的工具和手段就變的很少，總之先來看看錯誤訊息吧： /usr/lib/libcurl.so.4: undefined symbol: BrotliDecoderCreateInstance 由此可知基本上問題就是動態連結 Brotli 的 library 時出錯，我還記得我當初裝機器時，Archlinux 還沒有正式 Brotli 的套件，所以我還自己編譯了一版給 nginx 用，而我的 nginx 也是自己編譯的，沒想到不知不覺 Archlinux 已經有正式的...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52538205764/" title="Universal Studio Singapore by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52538205764_932f161e34_b.jpg" width="1024" height="768" alt="Universal Studio Singapore" srcset="https://live.staticflickr.com/65535/52538205764_0282fbb78d_k.jpg 2x" /></a></p>
<p>之前我在推特上有說過我不小心把我放 blog 的主機搞壞，當時就是用 pacman 更新過後，出現一些錯誤，我快速的重跑 <code>pacman -Syu</code> 然後就開始一直出現錯誤了，當時想說是因為我太久沒更新，然後有相依性錯誤造成系統幾乎爛掉，一度要放棄，不過因為網站相關的 instance 都還跑著，所以我就想說暫時放著，等有空把資料弄出來再重建系統，然後十一月中去了一趟新加坡，這趟行程要邊顧小孩其實很累，然後就在回來當天晚上就收到 Linode 的緊急維護，已經把我的 Linode 主機重開了，網站當然也死了，真的是晴天霹靂，不過實在太累了我也只能先放著不管。</p>
<p>過了幾天終於比較有力氣來看看看問題，我當時的狀況是，無法使用 pacman，然後更進一步發現是 curl 就死掉，curl 死掉會造成很多東西一起掛掉，像是 git、wget 也都掛了，結果我能使用的工具和手段就變的很少，總之先來看看錯誤訊息吧：</p>
<pre><code>/usr/lib/libcurl.so.4: undefined symbol: BrotliDecoderCreateInstance
</code></pre>
<p>由此可知基本上問題就是動態連結 Brotli 的 library 時出錯，我還記得我當初裝機器時，Archlinux 還沒有正式 Brotli 的套件，所以我還自己編譯了一版給 nginx 用，而我的 nginx 也是自己編譯的，沒想到不知不覺 Archlinux 已經有正式的 Brotli 套件，而且 curl 還相依於它。</p>
<p>接著我就開始各種嘗試，想辦法重新裝 Brotli 套件，curl 雖然不能動，但是我還可以用 scp 傳檔案上去，不過就算傳上去 pacman 也還是完全無法跑起來，即使我只是想要他安裝本地的檔案，而不是要連網路，然後我也去看了 <code>/use/local/</code> 裡面 brotli 套件的 header 檔案，查看內容，發現真的沒有 <code>BrotliDecoderCreateInstance</code>，不過這個 symbol 在 Brotli 的 repo 內是有的，而且已經存在了有四年之久，所以顯然，我系統內安裝的版本很有問題，雖然確定問題在哪，但是還是一直沒有解決方法，重裝套件需要 pacman，但是 pacman 需要修好 brotli 才能動，陷入死結當中，更糟的是，我在網路上搜尋就是找不到有一樣問題的人。</p>
<p>然後我就開始研究 pacman 掛掉要怎麼辦，找了許久終於找到有一個 <a href="https://github.com/chaitanyarahalkar/Pacman-Static">pacman-static</a> 的工具，是預先編譯好，並且是靜態連結的 pacman 執行檔，抓下來後發現真的可以用，真的是感動的痛哭流涕，然後我立馬執行 <code>pacman -Syu</code>，一切執行順利，感動QQ，然後我執行了 <code>curl</code> 想確認有沒有修好，結果我再次看到了那個一樣的，熟悉的錯誤訊息...</p>
<p>這時我百思不得其解，我用 pacman 看安裝的套件版本確實是新的，我去解開套件來看也是新的，但是我去系統的 <code>/usr/local/</code> 下看裡面的檔案卻是舊的，重新裝了很多次也都是一樣狀況，就這樣鬼打牆很久之後，我突然察覺，<code>/usr/local/</code> 下的東西，其實是我們手動編譯安裝的，也是路徑中優先權較高的，然後我在前面有提過，我很久以前有手動編譯安裝 Brotli 套件，終於，一切真相大白，我手動裝的時間點是五年前，所以該版本沒有 <code>BrotliDecoderCreateInstance</code>，然後 Archlinux 用的是四年前版本，所以系統中其他需要 Brotli 的東西都會因此而掛掉，解決方法就是把手動裝的全部砍光光就好了。</p>
<p>不過砍掉我手動編譯的 Brotli，也同時造成我的 nginx 再起不能，因為在設定檔內它是需要我手動編譯安裝的那那個套件，解決方法是很簡單，就把需要的 module 路徑改到 pacman 安裝的套件那邊，然後我的 nginx 就可以起來了，不過我的 blog 還是死的，非 blog 的部分倒是活著，我一開始想說是 php-fpm 的問題，看錯誤訊息發現有 permission 問題，就去改 socket file permisson 成 666，然後網站還是起不來，我研究了很久，想要看看 PHP 的錯誤訊息，但是一直看不到東西，也去看 nginx error log，journalctl 也是看沒錯誤，還以為 php-fpm 是死的，還用了</p>
<pre><code>&lt;? echo phpinfo(); ?&gt;
</code></pre>
<p>然後開瀏覽器看到原始碼直接回回來，搞了一陣子想起要改用 <code>&lt;?php</code>，改下去結果又發現一切正常，最後才發現，問題是因為我在用 pacman 更新整個系統時，把 PHP 7 升級到 8，然後我的程式碼裡面有個地方寫死大版號不對的話會回錯誤訊息，但是我沒有把錯誤訊息寫到 log 中，結果就造成我一直找不到問題點。</p>
<p>PHP 的問題解決後，我的 blog 就回到線上了，不過其實，這時候我的 mariadb 還是死的，透過 journalctl 看 log</p>
<pre><code>sudo journalctl -xeu mariadb.service
</code></pre>
<p>有一行寫著：</p>
<pre><code>Plugin 'InnoDB' registration as a STORAGE ENGINE failed.
</code></pre>
<p>一開始想說是安裝失敗，後來往上找發現還有另外一行：</p>
<pre><code>InnoDB: Upgrade after a crash is not supported. The redo log was created with MariaDB 10.4.8
</code></pre>
<p>意思就是如果你的 DB crash 後，沒有正常關閉的狀態下，去更新 mariadb，就會有這個錯誤，不過一開始我不以為意，因為我認為我只有 upgrade，但是不知道是何時 crash 過，後來回想，應該是 brotli 爛掉時，mariadb 就跟著起不來了，總之，這個問題的解決方法，就是退回舊的 10.4.8 然後重新啟動 DB，所以就研究了一下 Archlinux 怎樣安裝舊版的套件，基本上 pacman 是不能指定版本的，有兩個方法可以裝舊版，一個是透過系統內的 pacman cache，不過我之前在修理的時候已經清掉了，所以就只能從 <a href="https://archive.archlinux.org/packages/">Arch Linux Package Archive</a> 那邊下載特定版本的 package tar 檔案，下來用 <code>pacman -U</code> 安裝，然後因為有相依性問題，所以要把幾個需要的套件都抓下來，一起安裝：</p>
<pre><code>pacman -U mariadb-10.4.8-2-x86_64.pkg.tar.xz \
  mariadb-clients-10.4.8-2-x86_64.pkg.tar.xz \
  mariadb-libs-10.4.8-2-x86_64.pkg.tar.xz
</code></pre>
<p>反正如果啟動失敗，也會有訊息提示你要看 log，結果把 mariadb 三個都裝下去後還真的有問題，說找不到 openssl 1.1 的檔案，所以也去抓下來手動安裝：</p>
<pre><code>pacman -S openssl-1.1
</code></pre>
<p>至此，總算是修好了，接下來就是有時間要把我的 blog 系統容器化吧，有太多不是很好安裝的東西了。</p>
<p>PS. 這篇發的出去表示真的修好了。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000983" baseName="http-103-early-hints">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2022-08-23</b:date>
				<b:time>22:27:35</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>HTTP 103 Early Hints</b:title>
			<b:content>
				<b:summary>前幾天晚上前同事陶百貼了個 Tweet，說到 Chrome 要移除 HTTP/2 Server Push 了： HTTP/2 PUSH is finally going away in Chrome 106: https://t.co/FFL8hmkRyfHTTP 103 is the best way to early-hint out-of-band.Thanks to the community and teams that made this possible (standards teams for 103, CDNs...</b:summary>
				<b:mainContent><p>前幾天晚上前同事陶百貼了個 Tweet，說到 Chrome 要移除 HTTP/2 Server Push 了：</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">HTTP/2 PUSH is finally going away in Chrome 106: <a href="https://t.co/FFL8hmkRyf">https://t.co/FFL8hmkRyf</a><br /><br />HTTP 103 is the best way to early-hint out-of-band.<br /><br />Thanks to the community and teams that made this possible (standards teams for 103, CDNs for implementing, Net team, huge effort)</p>-- Patrick Meenan (@patmeenan) <a href="https://twitter.com/patmeenan/status/1559943970481913856?ref_src=twsrc%5Etfw">August 17, 2022</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>仔細看一下，發現原來大家用 Server Push 都還是為了提升網頁第一屏的速度，但是 Server Push 一直有<a href="https://www.fastly.com/blog/faster-websites-early-priority-hints#but-what-about-http/2-server-push">一些難解的問題</a>，像是不知道 client 端有沒有 cache，實作和支援比較麻煩，而 Chrome 要移除 Server Push 前，其實先實作了 <a href="https://datatracker.ietf.org/doc/html/rfc8297">RFC-8279 的
HTTP 103: Early Hints</a>，為的就要讓 Server Push 現在作的事情先有替代方案。</p>
<p>Early Hints 應該算是 Fastly 提出的，RFC 文件作者是 <a href="https://twitter.com/kazuho/">Kazuho Oku</a>，實際上應該也有其他 Fastly 的人參與構思和試驗，支援 Early Hints 的環境下，一個 HTTP request 看起來就像是下面這樣：</p>
<pre><code>Client request:

  GET / HTTP/1.1
  Host: example.com


Server response:

  HTTP/1.1 103 Early Hints
  Link: &lt;/style.css&gt;; rel=preload; as=style
  Link: &lt;/script.js&gt;; rel=preload; as=script

  HTTP/1.1 200 OK
  Date: Fri, 26 May 2017 10:02:11 GMT
  Content-Length: 1234
  Content-Type: text/html; charset=utf-8
  Link: &lt;/style.css&gt;; rel=preload; as=style
  Link: &lt;/script.js&gt;; rel=preload; as=script

  &lt;!doctype html&gt;
  [... rest of the response body is omitted from the example ...]
</code></pre>
<p>很特別的，就是在於有兩段 response，第一段就是 103 的 status code，然後內容就是 Link headers 了，接著才是常見的 200 回應，看到這邊，自然的出現第一個問題：現有的瀏覽器能相容嗎？</p>
<p>這個問題在 <a href="https://stackoverflow.com/questions/73320707/http-103-responses-what-happens-if-a-server-sends-a-103-early-hints-response-to/73320831#73320831">Stack Overflow 也有人問</a>，結果回答在 RFC 文件內其實就有，只不過是放在第三章的安全性那邊，我一開始也因為先跳過這章而沒發現，總之關於這個問題，就是如果是 HTTP/2 的話，就比較沒問題，HTTP/1.1 的話，理論上應該要可以相容（沒功能但是也不出錯），但是無法保證現在有在用的 HTTP/1.1 client 都有正確的處理 1xx response，所以比較建議是 HTTP/2 才回 103。</p>
<p>過了兩天後，我更仔細的研究一下，發現其實早在 HTTP/1.1 時，就有把 <a href="https://www.rfc-editor.org/rfc/rfc9110#section-15.2-3">1xx 的處理需求定義</a>好了：</p>
<blockquote>
<p>A client MUST be able to parse one or more 1xx responses received prior to a final response, even if the client does not expect one. A user agent MAY ignore unexpected 1xx responses.</p>
</blockquote>
<p>就是說早在 HTTP/1.1 時的設計，就允許 1xx 接 200 的回應，而且還應該要支援多個 1xx 回應，而最後的那個 200（其實是 2xx 到 5xx 都可以），則是稱為 final response，至於這處理的方式，在 WHATWG 的 fetch 的 4.7 章則有清楚的寫下流程，在該章節的第九項裡面的第五子項目，寫成程式碼大概長成：</p>
<pre><code class="language-js">while (true) {
  const response = await networkTransmit();
  const status = response.statusCode;
    
  if (status &gt;= 100 &amp;&amp; status &lt;= 199) {
    // handle 1xx response
    continue;
  } else {
    break;
  }
}

// handle final response
</code></pre>
<p>所以理論上，Early Hints 的設計在正確支援 HTTP/1.1 但是還沒有支援 Early Hints 的瀏覽器就應該要可以正常的略過，而不會把它當成是 final response。</p>
<p>解決完第一個問題後，接著來仔細的看看剛剛範例的 server response：</p>
<pre><code>HTTP/1.1 103 Early Hints
Link: &lt;/style.css&gt;; rel=preload; as=style
Link: &lt;/script.js&gt;; rel=preload; as=script

HTTP/1.1 200 OK
Date: Fri, 26 May 2017 10:02:11 GMT
Content-Length: 1234
Content-Type: text/html; charset=utf-8
Link: &lt;/style.css&gt;; rel=preload; as=style
Link: &lt;/script.js&gt;; rel=preload; as=script

&lt;!doctype html&gt;
[... rest of the response body is omitted from the example ...]
</code></pre>
<p>不知道會不會有人疑惑，為什麼不直接用 200 response 裡面回應的 Link header 就好了？其實我一開始也是這樣想，不過這完全是因為這個問題落入身為前端工程師的我的盲點之中，因為現在前端開發主流是 SPA，通常 HTTP server 回的就是一個靜態的 HTML 檔案，所以回應速度超快。不過，如果回應的 HTML 文件，是由程式語言動態生成的，或許還需要查詢一下資料庫之類的，那這個回應時間就會變慢了，而 HTTP 103 Early Hints 就是在這種狀態下用的，在你的 server 端程式開始處理 request 之前，就先丟 103 的 status code 和 Early Hints 的內容回給瀏覽器，然後才接著處理資料和生成 HTML 文件，這種情境下，Early Hints 就顯得比較有差異了。Nitropack 的<a href="https://nitropack.io/blog/post/early-hints">文章</a>就解釋的很清楚，還有附上詳細的說明圖。</p>
<p>相較於 Server Push，其實 Early Hints 的設計簡單很多，所有的傳輸還是從 client 端看有沒有 cache ，決定要不要發 request，而這種操作已經非常成熟（相較於 server push），相信很多地方可以直接使用現有的程式碼來實作，最大的隱憂，就只是不相容 HTTP/1.0，然後會擔心有 HTTP/1.1 的 client 端沒正確實作吧，畢竟 1xx 的處理機制雖然早早就設計好，但是實際上 1xx 有被廣泛使用也是這幾年的事。</p>
<p>目前 Chrome 是從 103 <a href="https://developer.chrome.com/blog/new-in-chrome-103/">開始支援 Early Hints</a> 的，並且預計在 106 <a href="https://developer.chrome.com/blog/removing-push/">正式移除 Server Push</a>，至於其他瀏覽器則是都還沒有支援， Firefox 是有計畫要支援，<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1407355">進度</a>有點緩慢就是。</p>
<p>最後，Fastly 其實有提供一個測試用的網站：<a href="https://early-hints.fastlylabs.com/">https://early-hints.fastlylabs.com/</a>，不過這個網站不是用來測試你的瀏覽器支不支援 Early Hints 的，而是用來測試先 103 然後接 200 的 response 會不會有非預期的問題（也就是相容性的測試），如果想要直接看看來回的內容，也可以直接用 curl：</p>
<pre><code class="language-sh">curl -v https://early-hints.fastlylabs.com
</code></pre>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000982" baseName="shopify-app">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2022-08-18</b:date>
				<b:time>20:48:14</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Shopify App</b:title>
			<b:content>
				<b:summary>之前開發 Shopify App 時，為了搞定他的安裝搞了蠻久，所以決定來紀錄一下踩到的坑，這篇文章適合已經開始在開發 Shopify App 的人閱讀，有些 Shopify App 的基本知識就不會提到，以下內文幾個名詞先定義清楚一下： App 指的是我們開發的 Shopify 第三方 app Merchant 指的是在 Shopify 上開店的商家 安裝 app 指的是 merchant 在他們的 Shopify 商店上安裝我們開發的第三方 app 首先就是，我踩的很多坑有一部分原因是因為我用 NodeJS 作為 server 端的語言，選的是 Express，但是官方的 Express 架構的 app 範例已經停止維護了，取而代之的，是 Koa 版本的 @shopify/koa-shopify-auth，只有負責驗證相關的...</b:summary>
				<b:mainContent><p>之前開發 Shopify App 時，為了搞定他的安裝搞了蠻久，所以決定來紀錄一下踩到的坑，這篇文章適合已經開始在開發 Shopify App 的人閱讀，有些 Shopify App 的基本知識就不會提到，以下內文幾個名詞先定義清楚一下：</p>
<ul>
<li>App 指的是我們開發的 Shopify 第三方 app</li>
<li>Merchant 指的是在 Shopify 上開店的商家</li>
<li>安裝 app 指的是 merchant 在他們的 Shopify 商店上安裝我們開發的第三方 app</li>
</ul>
<p>首先就是，我踩的很多坑有一部分原因是因為我用 NodeJS 作為 server 端的語言，選的是 Express，但是官方的 Express 架構的 app 範例已經停止維護了，取而代之的，是 Koa 版本的 <a href="https://github.com/Shopify/koa-shopify-auth">@shopify/koa-shopify-auth</a>，只有負責驗證相關的 middleware，不過其實我也就剛好是需要 auth 相關的部分，只是差在不是 Express 版，我也還可以研究看看要怎樣自己實作了。</p>
<p>大概看一下，發現其實還有另外一個 <a href="https://github.com/Shopify/shopify-api-node">@shopify/shopify-api</a> 是底層負責處理跟 Shopify 相關的邏輯，所以理論上我也可以使用它來搭配 Express，不過這裡首先就有一個坑了，初始化的範例是長這樣：</p>
<pre><code class="language-js">Shopify.Context.initialize({
  API_KEY: process.env.SHOPIFY_API_KEY,
  API_SECRET_KEY: process.env.SHOPIFY_API_SECRET,
  SCOPES: process.env.SHOPIFY_APP_SCOPES,
  HOST_NAME: process.env.SHOPIFY_APP_URL.replace(/^https:\/\//, ''),
  API_VERSION: ApiVersion.October20,
  IS_EMBEDDED_APP: true,
  // More information at https://github.com/Shopify/shopify-node-api/blob/main/docs/issues.md#notes-on-session-handling
  SESSION_STORAGE: new Shopify.Session.MemorySessionStorage(),
});
</code></pre>
<p>可以看到，最後有一個 <code>SESSION_STORAGE</code>，這是個處理 merchant 在安裝 app 時，我們的 app 拿到的 access token 的儲存方式的 adapter，不過官方的範例是用 Memory Storage，這個 adpater 是只有存在記憶體內，其實只適用於開發用，只要你的 server 一重開，所有的 merchant 就都要重新安裝你的 app，不然你的 app 會沒有 access token 跟 Shopify 溝通，實際上你應該要參考 <a href="https://github.com/Shopify/shopify-api-node/blob/main/docs/usage/customsessions.md">Custom Session Storage</a> 這份文件，挑選適用的 adapter，我則是參考範例寫了一個 GCP FireStore 的版本，當然另外沒特別提到的就是，因為是儲存 access token，最好要考慮一下 DB 的加密。</p>
<p>第二個坑，就是要怎樣做 Shopify 的 authentication 以及 identification，先來說如何驗證 request 是可信的，在 Shopify API 的設計，就是要靠 query string parameter 裡面的 hmac，他是根據你的 App 的 secret 來計算出來的，然後，這裡的坑就是官方套件 <code>@shopify/shopify-api</code> 內有個 <code>validateHmac</code> 可以用，但是它的計算其實是不正確的，它是用白名單只有取部分的 query string parameter 來計算，結果和 Shopify 給的就會有出入，所以我是參考 GitHub issue 討論串內 Muhammad Kamal 給的<a href="https://github.com/Shopify/shopify-node-api/issues/275#issuecomment-1059968699">範例</a>來使用。</p>
<p>第三個坑，則是安裝 App 用的 route 了，Shopify 的設計有點特別，所有的初始 request （不論是第一次安裝、還是從 Shopify 後台進入 App 的設定畫面），都長的很接近，所以你就要根據各種狀況來決定該做什麼事情，以下是所有可能的狀況：</p>
<ul>
<li>第一次來安裝</li>
<li>安裝後進到設定畫面</li>
<li>曾經安裝過，但是需要重新授權，可能的原因：
<ul>
<li>App 需要的權限有變動</li>
<li>App 端的 access token 失效了</li>
</ul>
</li>
<li>Shopify 認為已經安裝了，但是 app 端沒資料</li>
</ul>
<p>扣除需要的權限有變動之外，其實就是排列組合，Shopify 端認為有沒有安裝過，和 App 端認為有沒有安裝過，二乘二共四種可能性，不過實際上只有三種處理方式：初次安裝、重新授權、安裝沒問題的快樂路線（happy path）整理成程式流程大概是：</p>
<ol>
<li>驗證 hmac，沒過可以直接回 400</li>
<li>判斷 shop 是否有在資料庫中</li>
<li>2 有的話驗證資料庫中的 access token</li>
<li>3 驗證通過的話，狀態就是 happy path，Shopify 認為 app 有裝，app 端檢查也沒問題，我把這狀態命名為 <code>valid</code></li>
<li>3 驗證沒通過的話，判斷有沒有 <code>session</code> 這個 query string 參數</li>
<li>5 有的話，狀態就是 app 端的 access token 不能用了，需要走重新授權的流程，我把這狀態命名為 <code>invalid</code></li>
<li>5 沒有的話，就是第一次安裝的流程，我把這狀態命名為 <code>not_found</code></li>
<li>最後就是 2 沒有的話也是走初次安裝的授權流程，同樣也可以叫 <code>not_found</code></li>
</ol>
<p>然後 app 需要的權限變動的話，理論上是每次進來，驗證 access token 的時候，可以去打 API 問目前 <a href="https://shopify.dev/api/usage/access-scopes#checking-granted-access-scopes">token 的 access scope</a>，不過這部份我沒實做，因為目前我還沒有相關需求。</p>
<p>網路上可能可以找到 <code>X-Shopify-API-Request-Failure-Reauthorize</code> 這個 header，不過這個其實不是 Shopify API 的回應，而是 Shopify 的 <a href="https://github.com/Shopify/shopify-app-template-node/blob/main/server/middleware/verify-request.js">app-template</a> 裡面設計的機制，它們的 app template 裡面，server 端在轉發 Ajax API request 時，如果收到 Shopify 端的錯誤後，就加上這個 header 回給 app 前端，app 前端收到這個 header 後就可以透過 Shopify app-bridge 進入重新授權的流程。</p>
<p>講到這邊，或許有人會好奇，為什麼需要把安裝 app 和重新授權兩個流程的處理方式分開？其實這可以算是第四個坑，也是和使用者體驗有關係，狀況就是，Shopify 認為是初次安裝時，是直接進入 OAuth 的流程，所以是瀏覽器的最上層視窗直接轉址到 auth 頁面，但是如果是需要重新授權的情形，則是 Shopify 端認為已經安裝好，但是 app 這邊認為需要重新跑一次 OAuth，而這時候，連到 app server 的瀏覽器視窗是在 Shopify 商店後台的 iframe 內，在 iframe 內也無法正確的完成 OAuth 授權，所以需要用 Shopify 現在一套叫 app-bridge 的工具幫忙，讓 OAuth 流程從最上層視窗開始，所以需要回一個 HTML 頁面，<a href="https://shopify.dev/apps/tools/app-bridge/getting-started/app-setup#set-up-shopify-app-bridge-in-your-app">引入 app-bridge 的 script</a>，然後執行以下的的 JS：</p>
<pre><code class="language-js">const AppBridge = window['app-bridge'];
const createApp = AppBridge.default;
const Redirect = AppBridge.actions.Redirect;
const app = createApp({
	apiKey: '{{API_KEY}}',
	host: '{{HOST}}',
});
const redirect = Redirect.create(app);

redirect.dispatch(
	Redirect.Action.REMOTE,
	'/url/to/your/auth?shop={{SHOP}}'
);

</code></pre>
<p>當然記得要把該替換的東西替換上去，然後就可以看到正確的從最上層視窗開始進入 OAuth 授權的流程了。</p>
<p>最後一個坑，其實就是 merchant 反安裝 app 後，Shopify 和 app 端的狀態就會不一致的問題，Shopify 端認為沒安裝，但是 app 端認為有安裝，雖然我上面設計的程式流程已經可以處理這種狀況（驗證 access token 會失敗，然後沒有 <code>session</code> 參數，所以會進入初次安裝），但是這種情形還是應該要能避免就避免，而解法就是要支援 webhook，要作的事情就是：</p>
<ol>
<li>安裝完成的 callback 去訂閱 <code>APP_UNINSTALLED</code> 這個 webhook event</li>
<li>然後在收到這個事件後，把資料庫中的對應資料刪除</li>
</ol>
<p>這邊我是用 <code>@shopify/shopify-api</code> 提供的工具像是
<code>Shopify.Webhooks.Registry.register</code> 和 <code>Shopify.Utils.deleteOfflineSession</code>，真的想要自己作也不是辦不到，不過我記得 Shopify 的 webhook 處理起來有點麻煩。</p>
<p>這些細節就是官方文件沒有好好寫清楚，雖然官方文件內容已經很多，有努力整理了，但是實際上要自己接就還是遇到了不少問題，所以特別寫一篇文章紀錄，雖然不知道會不會有其他中文圈的人需要自己來做 Shopify app 就是了，可以直接用他們的 app template 還是比較簡單啦。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000981" baseName="coscup-2022">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2022-07-31</b:date>
				<b:time>22:24:42</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>COSCUP 2022</b:title>
			<b:content>
				<b:summary> (照片是今年的新玩意，紀錄組的形象照) 今年 COSCUP 恢復實體活動，而我和我的稿件間的緣份也終於來了（有來聽的就知道我等緣份到等了兩年有），所以今年是小孩出生後難得有稿可以投，也幸運的投上了，於是就參加了第一天的活動，今年活動的人潮我目測和往年差不多，後來晚上官方也很快速的公布了明調的數字，也有一千三四百筆數據。 我的分享時間是下午的兩點，我大概早上十點半才到會場，先去摩斯買杯紅茶，然後在門口報到區遇到昨天晚上在前夜 party 淋雨全濕的菜骨，接著我先去攤位區亂晃，在 MozTW 的攤位跟 Irvin 閒聊一下，還有遇到 Ett 和 RJ，之後又在形象照（今年紀錄組的新玩意）區遇到丞相還有幾位紀錄組的新朋友（Ada 和另外一位沒記起名字），拍了些 COSCUP 形象照，還遇到 Bob 和哈維、日落，這邊要先岔題澄清一下，就是我常被誤認我有當過 COSCUP 紀錄組長，不過其實沒有，某一年 Bob 有詢問過我意願，那一年我想要拼研究所畢業所以思考過後還是放棄，結果同一年我後來還是接了其他場活動的紀錄組長，因為我後來還是放棄該年度畢業了... 之後去買了一批 COSCUP 紀念品，然後攤位區拿了一點小點心要回家給小孩，接著亂晃一下發現時間已經接近十二點了，而且肚子有點餓就趕快去覓食，不意外的摩斯爆炸，所以轉戰到一餐點了個可以快速吃完的東西，快速的解決後回到會場，然後和一位台大社團的學弟閒聊一陣子，中間還有遇到大助、Trista、Singing 等人，差不多到一點的時候我決定先去教室內休息等待，途中剛好經過 OCF 攤位有跟 Rock、Max 打招呼，然後也看了一下開源星手村桌遊，OCF 攤位還有位朋友（應該是 OCF 實習生）說之前有到我的動森島上參觀過，之後我就到教室坐著休息一下，接著就是 Max 的分享場次了，他分享的題目是開源軟體與社群 - 參與國際社群經驗談，是我的前一個場次。 其實即使到現在，我還是有點難恢復純會眾的角色，到了會場就是會想到處走來走去，有點難靜下心來聽別人分享，連排想聽的主題都有點難，實在是當太多次志工的後遺症，今年聽...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52253486310/" title=" by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52253486310_6b0fb625bc_b.jpg" width="1024" height="768" alt="" srcset="https://live.staticflickr.com/65535/52253486310_52f4492e44_k.jpg 2x" /></a></p>
<p>(照片是今年的新玩意，紀錄組的形象照)</p>
<p>今年 COSCUP 恢復實體活動，而我和我的稿件間的緣份也終於來了（有來聽的就知道我等緣份到等了兩年有），所以今年是小孩出生後難得有稿可以投，也幸運的投上了，於是就參加了第一天的活動，今年活動的人潮我目測和往年差不多，後來晚上官方也很快速的公布了明調的數字，也有一千三四百筆數據。</p>
<p>我的分享時間是下午的兩點，我大概早上十點半才到會場，先去摩斯買杯紅茶，然後在門口報到區遇到昨天晚上在前夜 party 淋雨全濕的菜骨，接著我先去攤位區亂晃，在 MozTW 的攤位跟 Irvin 閒聊一下，還有遇到 Ett 和 RJ，之後又在形象照（今年紀錄組的新玩意）區遇到丞相還有幾位紀錄組的新朋友（Ada 和另外一位沒記起名字），拍了些 COSCUP 形象照，還遇到 Bob 和哈維、日落，這邊要先岔題澄清一下，就是我常被誤認我有當過 COSCUP 紀錄組長，不過其實沒有，某一年 Bob 有詢問過我意願，那一年我想要拼研究所畢業所以思考過後還是放棄，結果同一年我後來還是接了其他場活動的紀錄組長，因為我後來還是放棄該年度畢業了...</p>
<p>之後去買了一批 COSCUP 紀念品，然後攤位區拿了一點小點心要回家給小孩，接著亂晃一下發現時間已經接近十二點了，而且肚子有點餓就趕快去覓食，不意外的摩斯爆炸，所以轉戰到一餐點了個可以快速吃完的東西，快速的解決後回到會場，然後和一位台大社團的學弟閒聊一陣子，中間還有遇到大助、Trista、Singing 等人，差不多到一點的時候我決定先去教室內休息等待，途中剛好經過 OCF 攤位有跟 Rock、Max 打招呼，然後也看了一下開源星手村桌遊，OCF 攤位還有位朋友（應該是 OCF 實習生）說之前有到我的動森島上參觀過，之後我就到教室坐著休息一下，接著就是 Max 的分享場次了，他分享的題目是<a href="https://coscup.org/2022/zh-TW/session/99GBZC">開源軟體與社群 - 參與國際社群經驗談</a>，是我的前一個場次。</p>
<p>其實即使到現在，我還是有點難恢復純會眾的角色，到了會場就是會想到處走來走去，有點難靜下心來聽別人分享，連排想聽的主題都有點難，實在是當太多次志工的後遺症，今年聽 <a href="https://sakanamax.github.io/">Max</a> 的分享是我近年難得有真的能夠靜下心來認真作聽眾的經驗，必須說這真的是緣份，要不是剛好排在我的前一個場次，我也不會能夠靜下來聽，而且不聽還好，一聽下去發現內容有很多地方和我的講題部分想說的地方有呼應到，甚至是我想表達但是我沒有很明確寫出來的。</p>
<p>總之接著就換我分享了，今年有認真練習了幾次，有發現時間有點緊，所以實際分享時有一些細節漏了，這邊剛好列一下：</p>
<ul>
<li>如何開始貢獻那邊，原本有想提到 <a href="https://opensource.guide/zh-hant/">opensource.guide</a>，第二天小飛機的分享：<a href="https://coscup.org/2022/zh-TW/session/GKDWQF">如何跟隨開源技術保持你的職涯發展</a>似乎也有提到，期待之後的錄影</li>
<li><a href="https://github.com/mlinksva">Mike Linksvayer</a> 和 <a href="https://github.com/benbalter">Ben Balter</a> 的介紹，兩位都是 GitHub 員工，不過看職位似乎也不是專門處理 open source license 相關的，倒是會後 Bob 在 FB 有提到他也認識(?) Mike</li>
<li>如何跟 Mike Linksvayer 和 Ben Balter 溝通關於使用 Vim License 的那超過一千個的 public repositories</li>
<li>開 issue 跟 PR 時應該怎樣說明</li>
<li>更進一步介紹怎樣比對 Licensee 的比對原理</li>
<li>選擇你最舒服的方式參與，這句是從 Max 的投影片借來的，我自己的分享是說了兩三次佛系貢獻、等待緣份，其實和 Max 說的「選擇你最舒服的方式參與」是很接近的，我想表達的比較是不給自己和對方壓力</li>
<li>本來還想畫張 timeline 的，還有投稿之後準備內容時於到的外部誘惑等等（那個什麼法環的）</li>
<li>然後就有點離題的商業和開源難分難解的關係</li>
</ul>
<p>其實我在分享講話的時候，大腦沒什麼在思考的感覺，很像是直覺反射那樣，所以不太能臨時性的控制和調整，這些缺漏就只能等等看之後寫成文字紀錄的時候能不能補上了，附上分享的<a href="https://speakerdeck.com/othree/how-github-supports-vim-license-detection-the-five-years-journey">投影片</a>：</p>
<iframe class="speakerdeck-iframe" style="border: 0px none; background: rgba(0, 0, 0, 0.1) none repeat scroll 0% 0% padding-box; margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" src="https://speakerdeck.com/player/0256360bb6ec4a79b562fcdcb63d49f3" title="How GitHub Supports Vim License Detection, The Five Years Journey" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" data-dashlane-frameid="1533303324720" data-ratio="1.78343949044586" frameborder="0"></iframe>
<p>除了缺漏之外，其實這次分享還有點可惜是投影解析度不太夠，因為我其中一張投影片的動畫的關係（SPDX 那邊的討論串），我選擇用自己的電腦，不過為了配合大會的錄影，現場的投影解析度就有點低，對現場的聽眾是不太好意思，希望錄影的部分能夠正常可以觀看，其實事後回想，或許我還可以選擇輸出的解析度測試看看，只是不知道那個擷取裝置有沒有支援，當時有點慌忙都忽略了。</p>
<p>分享結束之後我去買了杯氮氣咖啡就快速收工回家了，後來在柏強的 FB 提到了「看到問題的能力」，我就想到我確實之前就有意識到這一點，不過我意識到的是，相較於平常沒主動分享（寫文章或是演講）的人，我確實很容易知道，哪些我的經驗（工作上的、生活上的、興趣上的）可以匯集成一個主題，可能可以寫成文章，也可能可以投稿分享，不過這個<strong>能力</strong>本身似乎不是這麼容易能分享給新手的。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
