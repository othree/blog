<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>c</b:listType>
			<b:listData listID="server">server</b:listData>
		</b:entriesMeta>

		<b:entry entryID="000853" baseName="apache2-http2">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-10-19</b:date>
				<b:time>23:04:03</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>Apache2 and HTTP/2</b:title>
			<b:content>
				<b:summary> 最近 Apache HTTPD 2.4.17 出了，內建 HTTP/2 的支援，不免俗的要來測試一下，在 Ubuntu 14.04 LTS 下安裝其實也是蠻辛苦的，最主要的問題是 OpenSSL 內建的是 1.0.1，但是要完整支援 HTTP/2 ，還需要 TLS 的 ALPN ，然後就會需要 OpenSSL 1.0.2，因此第一件事情就是下載編譯安裝 OpenSSL，目前最新的是 1.0.2d，如果是 15.10 就是內建 1.0.2 的，問題會少很多，總之先自己下載解壓縮然後編譯： ./config make sudo make install 會把檔案裝到 /usr/local/ssl 這個位置，大概是因為 OpenSSL 影響比較大所以預設沒有裝到平常的 /usr/local...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22116841470/" title="Apache HTTP/2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/660/22116841470_28857c25b9_o_d.png" width="520" height="427" alt="Apache HTTP/2" /></a></p>

<p>最近 Apache HTTPD 2.4.17 出了，內建 HTTP/2 的支援，不免俗的要來測試一下，在 Ubuntu 14.04 LTS 下安裝其實也是蠻辛苦的，最主要的問題是 <a href="https://www.openssl.org/">OpenSSL</a> 內建的是 1.0.1，但是要完整支援 HTTP/2 ，還需要 TLS 的 <a href="https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation">ALPN</a> ，然後就會需要 OpenSSL 1.0.2，因此第一件事情就是下載編譯安裝 OpenSSL，目前最新的是 1.0.2d，如果是 15.10 就是內建 1.0.2 的，問題會少很多，總之先自己下載解壓縮然後編譯：</p>

<pre><code>./config
make
sudo make install
</code></pre>

<p>會把檔案裝到 <code>/usr/local/ssl</code> 這個位置，大概是因為 OpenSSL 影響比較大所以預設沒有裝到平常的 <code>/usr/local</code> 下面，不過也因此造就後續比較麻煩的地方。</p>

<p>Apache 的部分比較麻煩，要分兩個部分，第一個部分是先把 APR 部分的程式碼和 HTTPD 的部分拉下來放一起，這邊參考 <a href="http://d.hatena.ne.jp/ASnoKaze/20151016/1445011720">あすのかぜ</a> 上的指令：</p>

<pre><code>wget http://ftp.jaist.ac.jp/pub/apache//httpd/httpd-2.4.17.tar.gz
tar zxvf ./httpd-2.4.17.tar.gz

wget http://ftp.yz.yamagata-u.ac.jp/pub/network/apache//apr/apr-1.5.2.tar.gz
tar zxvf ./apr-util-1.5.4.tar.gz
mv ./apr-1.5.2 ./httpd-2.4.17/srclib/apr

wget http://ftp.yz.yamagata-u.ac.jp/pub/network/apache//apr/apr-util-1.5.4.tar.gz
ar zxvf ./apr-util-1.5.4.tar.gz 
mv ./apr-util-1.5.4 ./httpd-2.4.17/srclib/apr-util
</code></pre>

<p>然後進去 <code>httpd-2.4.17</code> 目錄下指令編譯安裝：</p>

<pre><code>env PKG_CONFIG_PATH=/usr/local/ssl/lib/pkgconfig ./configure --enable-http2
make
sudo make install
</code></pre>

<p>執行的時候也需要注意，需要帶個環境變數，不然他找不到 <code>/usr/local/ssl/</code> 下的 Library：</p>

<pre><code>env LD_LIBRARY_PATH=/usr/local/ssl/lib /usr/local/apache2/bin/httpd
</code></pre>

<p>或是：</p>

<pre><code>env LD_LIBRARY_PATH=/usr/local/ssl/lib /usr/local/apache2/bin/apachectl start
</code></pre>

<p>不過其實執行前還需要先修改一下設定，我是加在 VirtualHost 裡面：</p>

<pre><code>&lt;VirtualHost *:80&gt;
    Protocols h2c http/1.1
    ServerName blog.othree.net
    ServerAdmin othree@gmail.com
</code></pre>

<p>還有</p>

<pre><code>&lt;VirtualHost *:443&gt;
    Protocols h2 http/1.1
    ServerName blog.othree.net
    ServerAdmin othree@gmail.com
</code></pre>

<p>重點是 <code>Protocols</code> 那行，<code>h2</code> 指的是 HTTPS(TLS) 下的 HTTP/2 連線，<code>h2c</code> 則是 HTTP 下的，在其他地方還會看到 <code>h-15</code>、<code>h-17</code> 之類的，那些其實是之前草稿的版本，無視就好，另外還有一個地方需要設定的是加密用的 CipherSuite 和溝通協定，可以參考 <a href="https://icing.github.io/mod_h2/howto.html#https">How to h2 in apache</a> 提供的設定：</p>

<pre><code>SSLCipherSuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK
SSLProtocol All -SSLv2 -SSLv3
</code></pre>

<p>不確定 CipherSuite 的選擇影響多大，不過我猜主要是要把 SSL 全部關掉吧，然後其實這組設定就是 Mozilla 推薦的 SSL 設定的 <a href="https://wiki.mozilla.org/Security/Server_Side_TLS">Modern</a> 那組，等於是要放棄很多舊瀏覽器了，支援的瀏覽器最低版本如下：</p>

<ul>
<li>Firefox 27</li>
<li>Chrome 22</li>
<li>IE 11</li>
<li>Opera 14</li>
<li>Safari 7</li>
<li>Android 4.4</li>
<li>Java 8 </li>
</ul>

<p>都弄好開啟 Apache 就可以了，不過記得如果之前是用 apt 裝的 Apache 的話，設定要自己搬過來。</p>

<p>驗證工具可以用 Curl 或是 nghttp，我是在 OSX 上用 brew 裝的，Curl 比較麻煩，不過可以看到一開始溝通的部分：</p>

<pre><code>brew install curl --with-nghttp2
brew link curl

/usr/local/bin/curl -v --http2 https://othree.net
</code></pre>

<p>然後就會出現最上面那張圖那樣的資訊，可以看到有 ALPN 的選項出現，另外一個工具是 nghttp，其實 Curl 的 http2 支援就是用這套 library：</p>

<pre><code>brew install nghttp2

nghttp -uv https://othree.net
</code></pre>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22118020729/" title="Apache HTTP/2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/565/22118020729_9f6d1b9a08_o_d.png" width="520" height="427" alt="Apache HTTP/2" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22278832416/" title="Apache HTTP/2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/771/22278832416_5553a17fb8_o_d.png" width="520" height="427" alt="Apache HTTP/2" /></a></p>

<p>可以看到上色整理得很漂亮的資訊，另外用瀏覽器也可以判斷，Firefox 的話會寫上 HTTP 版本號，Chrome 我測試是要 Canary 才支援，然後我網站連線的 SSL 握手那段花的時間反而更多，不過還是比較快全部下載完，只是 render 畫面影響的還有其他檔案，雖然大部分檔案都提早開始下載，不過也同時開始下載重要度比較低的圖形檔案，結果反而 DOM ready 的時間點更晚~~~，下圖是 HTTP/1.1 的時候：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22305448445/" title="http1.1-1 by othree, on Flickr"><img src="https://farm1.staticflickr.com/707/22305448445_7da40d9f50_h_d.jpg" width="1022" height="53" alt="http1.1-1" /></a></p>

<p>然後是 2.0：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21684413063/" title="http2-1 by othree, on Flickr"><img src="https://farm1.staticflickr.com/756/21684413063_dbab9bbafb_h_d.jpg" width="1022" height="530" alt="http2-1" /></a></p>

<p>最後就是還不支援 Server Push，這個東西其實技術上不難，可是和 Cache 搞在一起就變很複雜了，目前好像還沒有比較好的解法出現，也只有一些非開源的系統支援的樣子。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000823" baseName="hide-apache-version">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-12-03</b:date>
				<b:time>12:09:41</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>隱藏 Apache 版本號</b:title>
			<b:content>
				<b:summary>之前有想過是不是能隱藏 HTTP Server 的資訊，不過 Server 這個 Header 不可省略的樣子，所以最少也是要給個 Server Name，當然也可以改程式碼給假的，不想改的話最多就是把版本號隱藏起來了： ServerSignature Off ServerTokens Prod...</b:summary>
				<b:mainContent><p>之前有想過是不是能隱藏 HTTP Server 的資訊，不過 <strong>Server</strong> 這個 Header 不可省略的樣子，所以最少也是要給個 Server Name，當然也可以改程式碼給假的，不想改的話最多就是把版本號隱藏起來了：</p>

<pre><code>ServerSignature Off
ServerTokens Prod
</code></pre>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000817" baseName="ssl-config">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-11-01</b:date>
				<b:time>16:45:02</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>SSL 設定更新</b:title>
			<b:content>
				<b:summary> 因為剛好我的 StartSSL 免費憑證要過期了，所以趁這次更新憑證的同時順便把一些過時的設定都改掉，不然之前我的評等已經新漏洞的關係掉到 F 了，做的事情也不複雜，第一個是把 SSLv3 也關掉： SSLProtocol all -SSLv2 -SSLv3 然後限制 Cipher Suite： SSLCipherSuite AES256+EECDH:AES256+EDH 這組 Cipher Suite 也是網路上找的，不過忘了留下連結，Cipher Suite 的建議組合網路上還蠻好找的，我用的這組基本上就是限制比較多，所以不少舊環境會無法建立連線，像是 Android 2、IE 6、Java 環境等，不過是很可以接受的程度。 光這樣的設定評等已經不錯了，不過會有個橘色字樣說不支援 TLS_FALLBACK_SCSV，會有被攻擊的危險，研究過後發現要升級 OpenSSL，然後我的系統是 Ubuntu 12.04 LTS，沒有新版的 OpenSSL，雖然也可以自己編譯，不過我還是決定升上 14.04 LTS。 另外有個特別被 highlight 的項目是我的憑證的 trust...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15059214463/" title="SSL Lab test by othree, on Flickr"><img src="https://farm8.staticflickr.com/7553/15059214463_004dcbfbfd_b.jpg" width="1024" height="670" alt="SSL Lab test" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7553/15059214463_004dcbfbfd.jpg 1x, https://farm8.staticflickr.com/7553/15059214463_004dcbfbfd_b.jpg 2x" src-2="https://farm8.staticflickr.com/7553/15059214463_0196757226_k.jpg 2x" /></a></p>

<p>因為剛好我的 StartSSL 免費憑證要過期了，所以趁這次更新憑證的同時順便把一些過時的設定都改掉，不然之前我的評等已經新漏洞的關係掉到 F 了，做的事情也不複雜，第一個是把 SSLv3 也關掉：</p>

<pre><code>SSLProtocol all -SSLv2 -SSLv3
</code></pre>

<p>然後限制 Cipher Suite：</p>

<pre><code>SSLCipherSuite AES256+EECDH:AES256+EDH
</code></pre>

<p>這組 Cipher Suite 也是網路上找的，不過忘了留下連結，Cipher Suite 的建議組合網路上還蠻好找的，我用的這組基本上就是限制比較多，所以不少舊環境會無法建立連線，像是 Android 2、IE 6、Java 環境等，不過是很可以接受的程度。</p>

<p>光這樣的設定評等已經不錯了，不過會有個橘色字樣說不支援 TLS_FALLBACK_SCSV，會有被攻擊的危險，研究過後發現要升級 OpenSSL，然後我的系統是 Ubuntu 12.04 LTS，沒有新版的 OpenSSL，雖然也可以自己編譯，不過我還是決定升上 14.04 LTS。</p>

<p>另外有個特別被 highlight 的項目是我的憑證的 trust chain 中有一個是用 SHA1 簽章的，然後那個其實是 CA 的，就是從 Start SSL 抓的：</p>

<pre><code>http://www.startssl.com/certs/sub.class1.server.ca.pem
</code></pre>

<p>在他的 cert 目錄下找了一下看到疑似是 SHA256 簽的：</p>

<pre><code>http://www.startssl.com/certs/class1/sha2/pem/sub.class1.server.sha2.ca.pem
</code></pre>

<p>改成這個後看來就沒警告了，我想應該沒搞錯才是 :P</p>

<p>到這樣我發現總評等已經到 A 了，但是分數卻很難更高，所以先研究了一陣子怎樣到 A+，後來發現是我曾經開過的 <a href="https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security">Strict Transport Security(HSTS)</a>，暫時拿掉後忘了放回來，加上 HSTS Header 後總評等就可以上到 A+ 了。</p>

<p>設定到這樣其實已經很足夠了，不過我還是對於其中的 Protocol Support 這項沒有滿分感到很好奇，搜尋一陣子發現到要把 Protocol 關到只剩下 TLS 1.2 才會滿分，可是這樣支援度會很慘烈，因為還很多客戶端是只有到 TLS 1.0 的，所以就只抓個圖紀念一下。最後還花了點時間設定 <a href="http://blog.gslin.org/archives/2014/06/21/4786/ocsp-stapling/">OCSP Stapling</a>，可以提昇效能，因為把 <a href="http://gca.nat.gov.tw/ocsp/index.html">OCSP</a> 上的資訊都抓下來放在本主機給客戶端用，不過目前感覺不到差異就是，設定也不難：</p>

<pre><code>SSLUseStapling on
SSLStaplingCache shmcb:/tmp/stapling_cache(128000)
</code></pre>

<p>好像放這兩行就可以了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000792" baseName="cve-2014-0160">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2014-04-08</b:date>
				<b:time>23:00:03</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>OpenSSL 安全性問題 CVE-2014-0160</b:title>
			<b:content>
				<b:summary>今天資安的大新聞就是這個了，OpenSSL 的 新弱點，嚴重程度高到還有一個專站 heartbleed.com （心在流血）。也有人幫忙做了檢測工具可以看看你的網站有沒有在影響範圍內，不過因為弱點是在 OpenSSL 上，所以其實不是只有網站會受影響，總之有問題的看到會像是這樣： 沒問題的話會是： 第一時間有很多大站都中鏢了，像是 github 之類的，不過我剛剛看已經修好了，我的 server 用的是 Ubuntu 12 LTS 就是 apt 更新過後重開就好了，建議是連 key 也重新生就是，更詳細的資訊可以看看 Server Fault 的問答...</b:summary>
				<b:mainContent><p>今天資安的大新聞就是這個了，OpenSSL 的 <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160">新弱點</a>，嚴重程度高到還有一個專站 <a href="http://heartbleed.com/">heartbleed.com</a> （心在流血）。也有人幫忙做了<a href="http://filippo.io/Heartbleed/">檢測工具</a>可以看看你的網站有沒有在影響範圍內，不過因為弱點是在 OpenSSL 上，所以其實不是只有網站會受影響，總之有問題的看到會像是這樣：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/13717637293/" title="CVE-2014-016 Vulnerable by othree, on Flickr"><img src="//farm8.staticflickr.com/7453/13717637293_10e2cde873_b.jpg" width="1024" height="853" alt="CVE-2014-016 Vulnerable" src-1="(max-width: 768px)  //farm8.staticflickr.com/7453/13717637293_10e2cde873.jpg 1x, //farm8.staticflickr.com/7453/13717637293_10e2cde873_b.jpg 2x"  /></a></p>

<p>沒問題的話會是：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/13717637123/" title="CVE-2014-0160 pass by othree, on Flickr"><img src="//farm8.staticflickr.com/7377/13717637123_3703d23ca2_b.jpg" width="1024" height="555" alt="CVE-2014-0160 pass" src-1="(max-width: 768px)  //farm8.staticflickr.com/7377/13717637123_3703d23ca2.jpg 1x, //farm8.staticflickr.com/7377/13717637123_3703d23ca2_b.jpg 2x"  /></a></p>

<p>第一時間有很多大站都中鏢了，像是 github 之類的，不過我剛剛看已經修好了，我的 server 用的是 Ubuntu 12 LTS 就是 apt 更新過後重開就好了，建議是連 key 也重新生就是，更詳細的資訊可以看看 Server Fault 的<a href="http://serverfault.com/questions/587329/heartbleed-what-is-it-and-what-are-options-to-mitigate-it">問答</a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000769" baseName="start-ssl-ocsp">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-11-13</b:date>
				<b:time>20:27:47</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>Start SSL 的 OCSP 錯誤</b:title>
			<b:content>
				<b:summary>今天收到 Start SSL 的信件通知說我的憑證快過期了，所以花時間處理了一下，結果遇到 Firefox 說 OSCP 伺服器沒有憑證。 在 StartSSL 上有看到相關 討論，基本上就是放著幾小時候就會好，不過不知道為什麼只有 Firefox 受影響，理論上應該是 OCSP 上都找不到太新的 StartSSL 憑證，不過其他瀏覽器似乎都沒這問題，有差的好像只有 Firefox 剛開始支援 OCSP stapling 而已。...</b:summary>
				<b:mainContent><p>今天收到 Start SSL 的信件通知說我的憑證快過期了，所以花時間處理了一下，結果遇到 Firefox 說 OSCP 伺服器沒有憑證。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/10831576274/" title="Error code: sec_error_ocsp_unknown_cert by othree, on Flickr"><img src="//farm3.staticflickr.com/2856/10831576274_97fe62e951_b.jpg" width="1024" height="794" alt="Error code: sec_error_ocsp_unknown_cert" srcset="//farm3.staticflickr.com/2856/10831576274_97fe62e951.jpg 768w, //farm3.staticflickr.com/2856/10831576274_97fe62e951_b.jpg 768w 2x" /></a></p>

<p>在 StartSSL 上有看到相關 <a href="https://forum.startcom.org/viewtopic.php?f=15&amp;t=2654">討論</a>，基本上就是放著幾小時候就會好，不過不知道為什麼只有 Firefox 受影響，理論上應該是 OCSP 上都找不到太新的 StartSSL 憑證，不過其他瀏覽器似乎都沒這問題，有差的好像只有 Firefox 剛開始支援 OCSP stapling 而已。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000736" baseName="dnssec">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2013-05-02</b:date>
				<b:time>11:46:40</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>DNSSEC</b:title>
			<b:content>
				<b:summary>前幾天我的網域名稱 othree.net 突然無法從 Google 的 Public DNS 8.8.8.8 查到，經過一些交叉比對後，發現 Google Public DNS 和 Linode 內部用的 DNS 查不到，其他大部分的 DNS 都查的到，一時也不知道到底是什麼問題，就和 namecheap 聯絡，結果對方客服還蠻鬼打牆的，聯繫兩次都說設定沒問題，他們連的到，有問題也是 Google 的，還好 DK 有跟我說可能和 DNSSEC 有關係，讓我比較好找問題，其實我也有跟 namecheap 的人說到 DNSSEC，但是他們好像沒聽到一樣，讓我有些訝異的是， namecheap 的人對於 Google Public DNS 查不到他們客戶的 domain 覺得好像沒什麼，沒有很積極找問題。 還好 Google...</b:summary>
				<b:mainContent><p>前幾天我的網域名稱 <strong>othree.net</strong> 突然無法從 Google 的 Public DNS 8.8.8.8 查到，經過一些交叉比對後，發現 Google Public DNS 和 Linode 內部用的 DNS 查不到，其他大部分的 DNS 都查的到，一時也不知道到底是什麼問題，就和 namecheap 聯絡，結果對方客服還蠻鬼打牆的，聯繫兩次都說設定沒問題，他們連的到，有問題也是 Google 的，還好 DK 有跟我說可能和 DNSSEC 有關係，讓我比較好找問題，其實我也有跟 namecheap 的人說到 DNSSEC，但是他們好像沒聽到一樣，讓我有些訝異的是， namecheap 的人對於 Google Public DNS 查不到他們客戶的 domain 覺得好像沒什麼，沒有很積極找問題。</p>

<p>還好 Google Public DNS 有 mailing-list，可以上去問這種問題，結果對方說我的 DNSSEC 驗證不過，附上 <a href="http://dnsviz.net/">DNSViz</a> 結果給我。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8699979829/" title="Flickr 上 othree 的 Bogus"><img src="//farm9.staticflickr.com/8119/8699979829_2005069587_b.jpg" width="552" height="947" alt="Bogus" srcset="//farm9.staticflickr.com/8119/8699979829_2005069587.jpg 768w, //farm9.staticflickr.com/8119/8699979829_2005069587_b.jpg 768w 2x" /></a></p>

<p>其實一開始光看這張圖還不知道問題在哪，接著又去看 DNSSEC 運作的原理才了解，DNSSEC 其中對於 domain name record 要不要信任基本上是靠 chain of trust，也就是一層一層確定沒問題才保證最後的目標沒問題，所以他會先驗證 net 的 resolve 結果是可信任的，然後才往下問 othree.net 的 DNSKEY，然後用 net 那邊的 DS record 來驗證目標的 DNSKEY，而我的狀況是，去問上層的 DNS 有沒有 othree.net 的 DS record ，結果是有的：</p>

<pre><code>[/root] -root- &gt;&gt;&gt; dig @192.55.83.30 othree.net. DS

; &lt;&lt;&gt;&gt; DiG 9.7.0-P1 &lt;&lt;&gt;&gt; @192.55.83.30 othree.net. DS
; (1 server found)
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 14284
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 13, ADDITIONAL: 12
;; WARNING: recursion requested but not available

;; QUESTION SECTION:
;othree.net. IN DS

;; ANSWER SECTION:
othree.net. 86400 IN DS 1 1 1 1234567890123456789012345678901234657890
</code></pre>

<p>其實看到這邊有點傻眼，因為用來驗證我的 DNSKEY 的 hash 竟然是 '1234567890123456789012345678901234657890' ，怎麼想都是有人亂打的，不過我也不想追究了，總之上層有 DS record，但是去問下層 DNSKEY 時確沒有：</p>

<pre><code>[/root] -root- &gt;&gt;&gt; dig @208.64.122.242 +multiline othree.net. DNSKEY

; &lt;&lt;&gt;&gt; DiG 9.7.0-P1 &lt;&lt;&gt;&gt; @208.64.122.242 +multiline othree.net. DNSKEY
; (1 server found)
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 16844
;; flags: qr aa rd; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0
;; WARNING: recursion requested but not available

;; QUESTION SECTION:
;othree.net. IN DNSKEY
</code></pre>

<p>這樣當然無法通過 DNSSEC validation，本來以為把這件事跟 namecheap 講他們就知道該怎麼處理了，結果還是不行，於是我又更直接的請他們跟上層說把那筆 DS record 刪掉，到今天早上終於正常了。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8699979931/" title="Flickr 上 othree 的 Insecure"><img src="//farm9.staticflickr.com/8131/8699979931_575f791a25_b.jpg" width="555" height="910" alt="Insecure" srcset="//farm9.staticflickr.com/8131/8699979931_575f791a25.jpg 768w, //farm9.staticflickr.com/8131/8699979931_575f791a25_b.jpg 768w 2x" /></a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000727" baseName="cache-control-and-etag">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-12-22</b:date>
				<b:time>01:24:54</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>Cache Control 與 ETag</b:title>
			<b:content>
				<b:summary>俗話說的好，最快的連線就是不要連線，最快的下載就是不要下載，訪客連到網站的網路狀況其實是不容易由網站這邊來控制的，所以要提升網頁的速度，除了提升網路的可達性外，還有一個方法就是 cache，瀏覽器在需要某個檔案的時候，首先它會檢查是否有 cache，有的話會看有沒有過期，過期的話就根據現有資訊去問 server 有沒有新版，如果 server 比對之後發現有新版的，才會把要求的檔案傳給瀏覽器。這一個流程一共有三個判斷點，分別是： 是否需要無視 cache，前面沒講到，可能是 cache 設定或是瀏覽器設定 有沒有 cache、有沒有過期 Server 端檔案有沒有更新 Cache 的機制早在 HTTP 1.0 時就有制訂了，不過當時只有 Expires 和 Pragma 這兩個 header，其中一個可以指定 cache 過期的時間，另外一個就只能指定叫瀏覽器 no-cache，到了 HTTP 1.1 之後，改成用 Cache-Control 提供更多功能來控制，支援 HTTP 1.1 的瀏覽器，只要看到 Cache-Control 就會忽略 Expires，除了因為 Cache-Control...</b:summary>
				<b:mainContent><p>俗話說的好，最快的連線就是不要連線，最快的下載就是不要下載，訪客連到網站的網路狀況其實是不容易由網站這邊來控制的，所以要提升網頁的速度，除了提升網路的可達性外，還有一個方法就是 cache，瀏覽器在需要某個檔案的時候，首先它會檢查是否有 cache，有的話會看有沒有過期，過期的話就根據現有資訊去問 server 有沒有新版，如果 server 比對之後發現有新版的，才會把要求的檔案傳給瀏覽器。這一個流程一共有三個判斷點，分別是：</p>

<ol>
<li>是否需要無視 cache，前面沒講到，可能是 cache 設定或是瀏覽器設定</li>
<li>有沒有 cache、有沒有過期</li>
<li>Server 端檔案有沒有更新</li>
</ol>

<p>Cache 的機制早在 HTTP 1.0 時就有制訂了，不過當時只有 Expires 和 Pragma 這兩個 header，其中一個可以指定 cache 過期的時間，另外一個就只能指定叫瀏覽器 no-cache，到了 HTTP 1.1 之後，改成用 Cache-Control 提供更多功能來控制，支援 HTTP 1.1 的瀏覽器，只要看到 Cache-Control 就會忽略 Expires，除了因為 Cache-Control 的功能比較強大外，單純就過期時間的這點來看，Expires 看的是 ISO Time，會有 server 和 client 之間的時差問題，而 Cache-Control 則是用 max-age 直接說這個 Cache 可以活多久，就沒了時差問題。</p>

<p>Cache-Control 除了 max-age 外還有很多參數可以用，簡單介紹幾個常用的：</p>

<ul>
<li>no-store, 完全不存下來，所以完全沒有 cache</li>
<li>no-cache, 雖然會 cache，但還是會每次都問有沒有新內容，就是三個判斷點的第一個</li>
<li>private, 限制在只有現在這個使用者可以用，通常用於敏感資料</li>
<li>public, cache 公開讓不同使用者用，如果是有 HTTP Auth 的網頁，預設會是 private cache</li>
<li>must-revalidate, 在一些情形下會去檢查內容是否有更新，像是使用者自己重新造訪頁面時，也是第一個判斷點</li>
</ul>

<p>根據 Cache-Control 的規則，瀏覽器在有需要時會去問 Server 是否有新版本，而這裡根據的資訊就是 Date 和 ETag 兩個資訊。Date 很簡單，就是回 request 的時間，ETag 全名是 Entity Tag，可以想成是該檔案的版本 hash，理想上確實是用 hash 來當 ETag 最合適，不過不可能每次 request 都算 hash，所以 Apache 內建的 ETag 機制是用 inode、檔案大小和最後修改時間來產生的，不過這種方法有個缺點，在 YSlow 的 guide 有提到其中的 inode 在有負載平衡的架構下，不同機器會產生出不一樣的 ETag，結果反而可能會造成不需要重新抓的檔案又下載一次，雖然說 Apache 也是可以指定說不要用 inode 來生 ETag 啦。</p>

<p>個人建議是如果是 CMS 之類的系統，每個節點都可以在變動時重算 hash，然後在 response 的時候加上 ETag header，其他靜態檔案就用 Apache 的 ETag，有負載平衡機制的話就把 inode 的部分拿掉就好了。當然也是可以照 YSlow 的建議就是完全不用 ETag，只看修改時間，當然有個小缺點是，時間單位的最小精度是秒，如果是一秒內內容就會一直變動的話，就不適合使用了，似乎也很少這種需求就是（又要 cache 又要在一秒內數次變動還要能反應）。</p>

<p>瀏覽器如果要問 Server 有沒有新東西的話，就會帶著這兩個資訊一起去問，Date 會變成 If-Modified-Since，字面意思就是從那個時間點以後有更新的話。Etag 則會變成 If-None-Match，字面上意思就是如果和這個不一樣的話。Server 端除非是 Apache 直接 host 的靜態檔案，都要 Server Side 的程式自己來處理，有些 Framework 就有內建支援，像是 Rails。如果要自己實做的話，其實檢查是否有新東西這個動作有分嚴謹 (strong) 和寬鬆 (weak) 兩種驗證方式，其中用更新時間判斷的話，是屬於寬鬆驗證的，因為它的時間精度只有一秒。而 ETag 也不是完全就是嚴謹的驗證方式，其實 ETag 的格式有兩種：</p>

<pre><code>ETag: "1234abcd"
ETag: W/"1234abcd"
</code></pre>

<p>第一種是嚴謹的 ETag，第二種就是寬鬆的格式，W 代表的是 weak，如果宣告是寬鬆的話，那代表的意思是檔案內容不完全相同，但是可以互相通用，像是有沒有最小化過的 JS/CSS，更新解析度的圖片或是小修正排版的文章等等都是，不過如果用寬鬆判斷，由於檔案內容可能不相同，所以就無法用區段下載的功能，也就是所謂的續傳功能，通常這會搭配的是 If-Match，確定要抓的檔案是同一份。理想上支援寬鬆驗證的話可以減少更多的實際傳輸，因為一些小修改可以不用更新訪客端的 cache，不過實際上好像沒看到有人實做，而且實做起來也不是很簡單，所以一般看到有用 ETag 的話都是用嚴謹版的。</p>

<p>總之，如果 server 端判斷說沒有新內容的話，那就回個 304 Not Modified 的 header 就可以了，同時還可以趁機更新 cache 的 expire time，這樣就不會內容依然沒更新，但是 cache 過期讓瀏覽器還是一直問你更新了沒。</p>

<p>最前面提到三個判斷點當中的第一二兩個判斷點是用來決定要不要跟 Server 發 request，而不管這邊判斷的依據為何，只要結果是有發 request 的話，都還是會照著標準的流程來看 Server 端檔案是否有更新，不過一些情形下，像是瀏覽器關閉 cache 支援的時候，發出去的 request 不會有 If-Modified-Since 和 If-None-Match，所以這時候一定會把檔案抓一份回來。</p>

<p>最後設定完後，以本 blog 為例，還沒有 cache 時：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8293989580/" title="Flickr 上 othree 的 chrome nocache"><img src="//farm9.staticflickr.com/8216/8293989580_ec78ce5c8e_b.jpg" width="885" height="931" alt="chrome nocache" srcset="//farm9.staticflickr.com/8216/8293989580_ec78ce5c8e.jpg 768w, //farm9.staticflickr.com/8216/8293989580_ec78ce5c8e_b.jpg 768w 2x" /></a></p>

<p>有 cache 還沒過期，request 不會發出，速度最快：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8292934577/" title="Flickr 上 othree 的 chrome norequest"><img src="//farm9.staticflickr.com/8080/8292934577_d28fd98f9b_b.jpg" width="885" height="931" alt="chrome norequest" srcset="//farm9.staticflickr.com/8080/8292934577_d28fd98f9b.jpg 768w, //farm9.staticflickr.com/8080/8292934577_d28fd98f9b_b.jpg 768w 2x" /></a></p>

<p>Cache 過期去問 server 有沒有更新版時，檔案沒更新所以都是 304 沒抓內容下來：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8293989462/" title="Flickr 上 othree 的 chrome cache"><img src="//farm9.staticflickr.com/8353/8293989462_1dbe5fec22_b.jpg" width="885" height="931" alt="chrome cache" srcset="//farm9.staticflickr.com/8353/8293989462_1dbe5fec22.jpg 768w, //farm9.staticflickr.com/8353/8293989462_1dbe5fec22_b.jpg 768w 2x" /></a></p>

<p>參考資料：</p>

<ul>
<li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">HTTP 1.1 Cache Control</a></li>
<li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.3.3">Weak and Strong Validator</a></li>
<li><a href="http://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation">ETag</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/HTTP_Caching_FAQ">HTTP Caching FAQ</a></li>
<li><a href="http://wp.xdite.net/?p=1045">Rails ETag</a></li>
<li><a href="http://developer.yahoo.com/performance/rules.html#etags">YSlow ETag</a></li>
</ul>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000726" baseName="mod-proxy">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-12-16</b:date>
				<b:time>22:59:23</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>mod_proxy 的注意事項</b:title>
			<b:content>
				<b:summary> 最近調整 HTTPS 支援的時候，啟用了 Apache 的 mod_proxy，結果我沒注意到預設的 config 檔案會把 open proxy 開起來，沒兩天就被人 scan 到然後狂打，結果就是上圖那個慘狀，我大概第二天有覺得怪怪的，到第三天才發現問題在哪，可以看到關掉之後流量馬上掉下來，又過了好幾天才比較看不出來，不過看 CPU 和 Disk IO： 到現在都還沒回覆到之前的狀況，尤其是 Disk IO，因為會一直寫 log，到現在還是和當初的 loading 有一段差距，後遺症持續很久，到現在還是一直會被打，整個就是長尾理論(?)的活例子。 在這邊奉勸大家要用 Apache 的 mod_proxy 的時候記得要把 ProxyRequests 設成 Off 啊，預設是 On 什麼的根本是蓄意謀殺啊！...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8277973312/" title="Flickr 上 othree 的 Network"><img src="//farm9.staticflickr.com/8217/8277973312_82f5c92af6_b.jpg" width="829" height="384" alt="Network" srcset="//farm9.staticflickr.com/8217/8277973312_82f5c92af6.jpg 768w, //farm9.staticflickr.com/8217/8277973312_82f5c92af6_b.jpg 768w 2x" /></a></p>

<p>最近調整 HTTPS 支援的時候，啟用了 <a href="http://httpd.apache.org/">Apache</a> 的 <a href="http://httpd.apache.org/docs/2.2/mod/mod_proxy.html">mod_proxy</a>，結果我沒注意到預設的 config 檔案會把 open proxy 開起來，沒兩天就被人 scan 到然後狂打，結果就是上圖那個慘狀，我大概第二天有覺得怪怪的，到第三天才發現問題在哪，可以看到關掉之後流量馬上掉下來，又過了好幾天才比較看不出來，不過看 CPU 和 Disk IO：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8276915051/" title="Flickr 上 othree 的 CPU"><img src="//farm9.staticflickr.com/8082/8276915051_90d24d435c_b.jpg" width="829" height="342" alt="CPU" srcset="//farm9.staticflickr.com/8082/8276915051_90d24d435c.jpg 768w, //farm9.staticflickr.com/8082/8276915051_90d24d435c_b.jpg 768w 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8277973240/" title="Flickr 上 othree 的 Disk IO"><img src="//farm9.staticflickr.com/8079/8277973240_8d262d60d7_b.jpg" width="829" height="356" alt="Disk IO" srcset="//farm9.staticflickr.com/8079/8277973240_8d262d60d7.jpg 768w, //farm9.staticflickr.com/8079/8277973240_8d262d60d7_b.jpg 768w 2x" /></a></p>

<p>到現在都還沒回覆到之前的狀況，尤其是 Disk IO，因為會一直寫 log，到現在還是和當初的 loading 有一段差距，後遺症持續很久，到現在還是一直會被打，整個就是長尾理論(?)的活例子。</p>

<p>在這邊奉勸大家要用 Apache 的 mod_proxy 的時候記得要把 <a href="http://httpd.apache.org/docs/2.2/mod/mod_proxy.html#proxyrequests">ProxyRequests</a> 設成 Off 啊，預設是 On 什麼的根本是蓄意謀殺啊！</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000721" baseName="php-xslt-2">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2012-12-01</b:date>
				<b:time>23:03:58</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>PHP and XSLT 2.0</b:title>
			<b:content>
				<b:summary>最近弄 srcset 支援的時候，一度需要 XSLT 2.0 的 xsl:function，所以研究一下要怎樣在 php 下可以使用 XSLT 2.0，PHP 自己的 extension 用的是 libxslt，只支援到 1.0，而且沒有支援 2.0 的計畫，所以就需要找其他的引擎，後來是看上 SAXON 這套 Java 寫的 XSLT Processor，有支援 XSLT 2.0，而且近期還有在更新，主要是由 Saxonica 這間公司維護的，有 open source 的 home edition。 找好引擎後第二步就是要怎樣用 PHP load Java 的程式來用了，本來是想看 PHP/Java Bridge，不過我覺得還要弄...</b:summary>
				<b:mainContent><p>最近弄 <a href="http://dev.w3.org/html5/srcset/">srcset</a> 支援的時候，一度需要 XSLT 2.0 的 <a href="http://www.w3.org/TR/xslt20/#element-function">xsl:function</a>，所以研究一下要怎樣在 php 下可以使用 XSLT 2.0，PHP 自己的 <a href="http://php.net/manual/en/book.xsl.php">extension</a> 用的是 <a href="http://xmlsoft.org/XSLT/">libxslt</a>，只支援到 1.0，而且沒有支援 2.0 的計畫，所以就需要找其他的引擎，後來是看上 <a href="http://saxon.sourceforge.net/">SAXON</a> 這套 Java 寫的 XSLT Processor，有支援 XSLT 2.0，而且近期還有在更新，主要是由 <a href="http://www.saxonica.com/welcome/welcome.xml">Saxonica</a> 這間公司維護的，有 open source 的 home edition。</p>

<p>找好引擎後第二步就是要怎樣用 PHP load Java 的程式來用了，本來是想看 <a href="http://php-java-bridge.sourceforge.net/pjb/">PHP/Java Bridge</a>，不過我覺得還要弄 proxy 有些麻煩，幸好有找到 <a href="http://sourceforge.net/projects/xslt2processor/">XML_XSLT2Processor</a> 這個專門來把第三方 XSLT 引擎包起來給 PHP 用的專案，用起來很簡單，API 開的和 PHP 自己的版本都一樣，只是產生物件時要跟他說是要用那個引擎，檔案位置在哪而已：</p>

<pre><code>$proc = new XML_XSLT2Processor('SAXON9', './saxon/saxon9he.jar', 'JAVA-CLI');
</code></pre>

<p>像這樣，後面的用法就和以前都一樣了，設計的很不錯，等於可以只動兩行就換過去，不過實際上用了之後覺得，速度差太多 >_&lt; ，而且我後來發現本來讓我想要使用 XSLT 2.0 的那個錯誤並不是因為需要 xsl:function，而是我沒把 namespace 搞好就去用 <a href="http://www.exslt.org/">EXSLT</a> 的 <a href="http://www.exslt.org/str/functions/tokenize/index.html">tokenize</a> 這個 function，後來根據 stackoverflow 上的 <a href="http://stackoverflow.com/questions/10447292/how-to-implement-xslt-tokenize-function">回答</a> 改動之後，發現可以動我就換去 PHP extension 了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000554" baseName="nginx-on-windows">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2008-11-04</b:date>
				<b:time>15:45:24</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>nginx on windows</b:title>
			<b:content>
				<b:summary>這兩天想說在windows上裝個 nginx 來玩玩看，翻了一下官網才發現官方沒有提供 windows 版，不過有人用 cygwin 編譯出 windows 版來，所以我還是順利的裝起來玩了，接著馬上就遇到問題了，我 server 裝在 C 碟，不過我想把網頁文件放在 D 碟，然後還要自動產生檔案索引，這兩個問題結果我找了一下午才解決，先說第二個，要自動產生檔案所以只要用 AutoIndex module 就好了，因為apache這是內建的，我想說 nginx 也會內建吧，就一直在 nginx core module 裡面找設定。第一個問題就比較棘手了，我找來找去都找不到相關文章，而且官方也沒提供windows環境的說明，最後再快要回家前終於注意到關鍵字 cygwin 了，由於目前的 nginx windows 版是用 cygwin 環境編譯的，關於磁碟存取應該也是會用一樣的規則，結果果然成功了，想要存取 D 碟，就把路徑寫成 /cygdrive/d/ 就可以了。...</b:summary>
				<b:mainContent><p>這兩天想說在windows上裝個 <a href="http://nginx.net/">nginx</a> 來玩玩看，翻了一下官網才發現官方沒有提供 windows 版，不過有人用 <a href="http://www.cygwin.com/">cygwin</a> 編譯出 <a href="http://www.kevinworthington.com/category/computers/nginx/">windows 版</a>來，所以我還是順利的裝起來玩了，接著馬上就遇到問題了，我 server 裝在 C 碟，不過我想把網頁文件放在 D 碟，然後還要自動產生檔案索引，這兩個問題結果我找了一下午才解決，先說第二個，要自動產生檔案所以只要用 <a href="http://wiki.codemongers.com/NginxHttpAutoindexModule">AutoIndex module</a> 就好了，因為apache這是內建的，我想說 nginx 也會內建吧，就一直在 nginx core module 裡面找設定。第一個問題就比較棘手了，我找來找去都找不到相關文章，而且官方也沒提供windows環境的說明，最後再快要回家前終於注意到關鍵字 <strong>cygwin</strong> 了，由於目前的 nginx windows 版是用 cygwin 環境編譯的，關於磁碟存取應該也是會用一樣的規則，結果果然成功了，想要存取 D 碟，就把路徑寫成 <strong>/cygdrive/d/</strong> 就可以了。</p></b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
