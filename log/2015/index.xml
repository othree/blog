<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>y</b:listType>
			<b:listData listID="2015">2015</b:listData>

			<b:previous>
				<b:mTitle>2014</b:mTitle>
				<b:mDate>2014</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>2016</b:mTitle>
				<b:mDate>2016</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000855" baseName="jsx-e4x">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-12-25</b:date>
				<b:time>09:36:53</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>JSX 的前世</b:title>
			<b:content>
				<b:summary> React 的主要創新在於 Virtual DOM，而伴隨著 Virtual DOM 而來的，就是 Virtual DOM 的操作，由於 JavaScript 語言限制的關係，要產生一個簡單的 &lt;div&gt; 標籤就要寫成： var divNode = React.DOM.div({attr1:"value"}); 如果還要加上子元素，像是一個 list： &lt;ol&gt; &lt;li&gt;Item A&lt;/li&gt; &lt;li&gt;Item B&lt;/li&gt; &lt;li&gt;Item C&lt;/li&gt; &lt;li&gt;Item D&lt;/li&gt; &lt;/ol&gt; 就要寫成： var listNode = React.DOM.div({}, React.DOM.li({}, "Item A"), React.DOM.li({},...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23319631253/" title="ECMA-357 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5679/23319631253_52dfbeb5c0_b.jpg" width="362" height="512" alt="ECMA-357" srcset="https://farm6.staticflickr.com/5679/23319631253_52dfbeb5c0.jpg 768w" /></a></p>

<p>React 的主要創新在於 Virtual DOM，而伴隨著 Virtual DOM 而來的，就是 Virtual DOM 的操作，由於 JavaScript 語言限制的關係，要產生一個簡單的 <code>&lt;div&gt;</code> 標籤就要寫成：</p>

<pre><code>var divNode = React.DOM.div({attr1:"value"});
</code></pre>

<p>如果還要加上子元素，像是一個 list：</p>

<pre><code>&lt;ol&gt;
  &lt;li&gt;Item A&lt;/li&gt;
  &lt;li&gt;Item B&lt;/li&gt;
  &lt;li&gt;Item C&lt;/li&gt;
  &lt;li&gt;Item D&lt;/li&gt;
&lt;/ol&gt;
</code></pre>

<p>就要寫成：</p>

<pre><code>var listNode = React.DOM.div({},
  React.DOM.li({}, "Item A"),
  React.DOM.li({}, "Item B"),
  React.DOM.li({}, "Item C"),
  React.DOM.li({}, "Item D")
);
</code></pre>

<p>雖然比起純 DOM 的語法要簡單很多了，不過其實類似這種寫法來快速產生文件樹節點的 library 已經早就有了，像是 <a href="https://github.com/eneko/mooml">Mooml</a>、<a href="https://github.com/dominictarr/hyperscript">hyperscript</a>（thanks WM），如果 React 當初就直接這樣子推出，大家會想嘗試的意願應該會低很多，Facebook 的工程師應該也知道這樣和直接寫 DOM 或是其他 library 的感覺差異不大，所以他們解決的方法就是建立了一個新的 syntax，看起來就像是讓 DOM 變成像是原生的資料型態一樣，也就是現在的 JSX syntax，然後當然要讓這種語法可以在瀏覽器執行，所以官方有提供了 transpiler，不過其實這個把 XML DOM 當成 JS 語言中的原生資料型態的想法不是第一次出現了，早在好幾年前，就有一個 ECMA-357，又稱為 <a href="https://developer.mozilla.org/zh-TW/docs/E4X/%E4%BD%BF%E7%94%A8_E4X_%E8%99%95%E7%90%86_XML">E4X</a> 的標準是在做這件事的，全名則是 ECMAScript for XML，早期的 Mozilla SpiderMonkey 是有支援的，約是在 2006 年的 JavaScript 1.6 中推出，不過到 Firefox 21 的時候已經完全移除了，所以現在基本上是已經無法體會到這套 JS 擴充的語法，不過其實這套語法還蠻不錯的，有類似 template string 的寫法：</p>

<pre><code>var doc = &lt;{h}&gt;&lt;body&gt;{text}&lt;/body&gt;&lt;/{h}&gt;;
</code></pre>

<p>React 則因為同時導入了 immutable 的概念，所以其 Virtual DOM 設計上只有產生文件樹結構的部分，沒有刪除修改，相較於 JSX 只有建置（create）的語法，E4X 則是有更完整的 CRUD 操作（就像是操作 JS 資料一樣），另外還多了用來尋找目標節點的 selector syntax：</p>

<pre><code>languages.lang[1]
person..*
people.person.(name == "Joe").age
</code></pre>

<p>而且目標對像是 XML，所以對於 namespace 的處理也都有，整體而言算是很完整的 XML 操作方案，使用起來也比 DOM 簡潔很多，可惜後來被放棄，我推測大概幾個原因：</p>

<ol>
<li>使用 XML 的應用越來越少</li>
<li>實做 E4X 會增加 JS 引擎的複雜度</li>
<li>相較於 DOM 不依存於單一程式語言，E4X 則是 JS extension</li>
<li>用 E4X 產生的節點不是 DOM 物件，不直接相容</li>
</ol>

<p>沒想到後來會在 Facebook 的手上，把這個概念單存的套用在 HTML 文件樹之上而重生。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000854" baseName="ula-umbrella">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-11-19</b:date>
				<b:time>22:14:02</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>ULA 雨傘</b:title>
			<b:content>
				<b:summary> 前陣子因緣際會有朋友去香港，就請他幫忙買了隻香港有名（？）的 ULA 雨傘，收到之後覺得驚為天人，幾乎是我用折傘以來的遇到的各種小問題在 ULA 雨傘上都有處理，這篇文章就來介紹一下他們做了什麼處理，解決了什麼問題。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22276626569/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/698/22276626569_c47da2bce3_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/698/22276626569_c47da2bce3.jpg 768w, https://farm1.staticflickr.com/698/22276626569_36ed7cdcc5_k.jpg 2x" /></a></p>

<p>前陣子因緣際會有朋友去香港，就請他幫忙買了隻香港有名（？）的 <a href="http://www.ula-umbrella.com/">ULA</a> 雨傘，收到之後覺得驚為天人，幾乎是我用折傘以來的遇到的各種小問題在 ULA 雨傘上都有處理，這篇文章就來介紹一下他們做了什麼處理，解決了什麼問題。</p>
</b:mainContent>
				<b:extendContent><p>首先第一印像是，雨傘綁起來時很緊，幾乎所有其它的雨傘都是，在我辛苦的把傘面整理好之後，要綁起來時，卻發現因為魔鬼沾或鈕釦的位置，綁起來會鬆鬆的，沒辦法綁緊，結果本來弄得很緊實的傘布就變的鬆鬆垮垮的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22275767928/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/571/22275767928_6ee17966fd_b.jpg" width="683" height="1024" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/571/22275767928_6ee17966fd.jpg 768w, https://farm1.staticflickr.com/571/22275767928_98a4d504ca_k.jpg 2x" /></a></p>

<p>第二個是則是雨傘套的部分，其它雨傘幾乎都沒有考慮要撐傘時，隨附的雨傘套要放在哪的問題，以前我最常做的方法就是把他綁在手把的繩圈上，不過這個方法久了傘套的布就會變的很皺，ULA 則是設計了一個鈕釦在手把繩圈那邊，可以固定拿下來的傘套。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21842288193/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/724/21842288193_3484a9d9c9_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/724/21842288193_3484a9d9c9.jpg 768w, https://farm1.staticflickr.com/724/21842288193_522bcc5b31_k.jpg 2x" /></a></p>

<p>第三個則是雨傘開關的地方，有一整塊軟橡膠墊讓手指不會因為要用力壓金屬片卡吮而不舒服，而且很顯眼，有畫龍點睛的效果，雖然都是素色的雨傘，不過整體設計是蠻好看的。另外一點和開關相關的特色，就是開關很好操作，不太會有力量出不去卡卡的狀況。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21842283173/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/771/21842283173_7e44d94c85_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/771/21842283173_7e44d94c85.jpg 768w, https://farm1.staticflickr.com/771/21842283173_8bce12b29f_k.jpg 2x" /></a></p>

<p>第四個則是收傘容易，雨傘支架末端都有設計過，配合頭蠻大的握把，很容易就把所有支架末端收好固定到握把內，再也不用一直橋來橋去的收傘了。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22275764628/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/716/22275764628_1c69194dd2_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/716/22275764628_1c69194dd2.jpg 768w, https://farm1.staticflickr.com/716/22275764628_3b30e190a1_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21840724334/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/773/21840724334_cd305357d7_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/773/21840724334_cd305357d7.jpg 768w, https://farm1.staticflickr.com/773/21840724334_97ebfd3d10_k.jpg 2x" /></a></p>

<p>另外雨傘握把雖然不長，但是形狀也是設計過的，握起來感覺不會太差，</p>

<p>而除了以上的特色之外，還有一個設計很不錯的是手把的繩圈其實是可以拆開套到其它東西上的，用的雖然是鈕釦不過可靠度蠻高的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22474404621/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5702/22474404621_b7e797e13f_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm6.staticflickr.com/5702/22474404621_b7e797e13f.jpg 768w, https://farm6.staticflickr.com/5702/22474404621_0ddb29dbf5_k.jpg 2x" /></a></p>

<p>最後要講的是耐用度，相信一定有人會有疑問，總之我覺得耐用度也不差，我現在手上這隻有經歷過一次颱風的攻擊，整個被吹翻，傘沒散掉，唯一的受損是有兩根拉桿有一點彎曲，不過我試著要彎回來才發現這拉桿其實很堅固，和一般折傘的拉桿比起來差蠻多，另外就是固定拉桿的方式好很多，我上一隻國產某算是名牌的雨傘後來固定拉桿的地方就常常脫落，要一直回去修理（不過最後是忘在電影院不見了）。傘布本身的防水性目前也都表現很不錯。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22450098812/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5633/22450098812_01311ee804_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm6.staticflickr.com/5633/22450098812_01311ee804.jpg 768w, https://farm6.staticflickr.com/5633/22450098812_0961e69d48_k.jpg 2x" /></a></p>

<p>ULA 雨傘的包裝如下，在香港地鐵有販賣機在賣，要用八達通卡購買，而且不同站點還有各自的限定色，是蠻有趣的銷售方式，當然也有實體店面，價錢大約台幣三四百，如果有去香港的推薦可以買一隻回來試試，要送人的話，就要三思了～～</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22525750458/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/710/22525750458_8719d1e5e0_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/710/22525750458_8719d1e5e0.jpg 768w, https://farm1.staticflickr.com/710/22525750458_84b7929ec2_k.jpg 2x" /></a></p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000853" baseName="apache2-http2">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-10-19</b:date>
				<b:time>23:04:03</b:time>
			</b:datetime>
			<b:category>server</b:category>
			<b:title>Apache2 and HTTP/2</b:title>
			<b:content>
				<b:summary> 最近 Apache HTTPD 2.4.17 出了，內建 HTTP/2 的支援，不免俗的要來測試一下，在 Ubuntu 14.04 LTS 下安裝其實也是蠻辛苦的，最主要的問題是 OpenSSL 內建的是 1.0.1，但是要完整支援 HTTP/2 ，還需要 TLS 的 ALPN ，然後就會需要 OpenSSL 1.0.2，因此第一件事情就是下載編譯安裝 OpenSSL，目前最新的是 1.0.2d，如果是 15.10 就是內建 1.0.2 的，問題會少很多，總之先自己下載解壓縮然後編譯： ./config make sudo make install 會把檔案裝到 /usr/local/ssl 這個位置，大概是因為 OpenSSL 影響比較大所以預設沒有裝到平常的 /usr/local...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22116841470/" title="Apache HTTP/2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/660/22116841470_28857c25b9_o_d.png" width="520" height="427" alt="Apache HTTP/2" /></a></p>

<p>最近 Apache HTTPD 2.4.17 出了，內建 HTTP/2 的支援，不免俗的要來測試一下，在 Ubuntu 14.04 LTS 下安裝其實也是蠻辛苦的，最主要的問題是 <a href="https://www.openssl.org/">OpenSSL</a> 內建的是 1.0.1，但是要完整支援 HTTP/2 ，還需要 TLS 的 <a href="https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation">ALPN</a> ，然後就會需要 OpenSSL 1.0.2，因此第一件事情就是下載編譯安裝 OpenSSL，目前最新的是 1.0.2d，如果是 15.10 就是內建 1.0.2 的，問題會少很多，總之先自己下載解壓縮然後編譯：</p>

<pre><code>./config
make
sudo make install
</code></pre>

<p>會把檔案裝到 <code>/usr/local/ssl</code> 這個位置，大概是因為 OpenSSL 影響比較大所以預設沒有裝到平常的 <code>/usr/local</code> 下面，不過也因此造就後續比較麻煩的地方。</p>

<p>Apache 的部分比較麻煩，要分兩個部分，第一個部分是先把 APR 部分的程式碼和 HTTPD 的部分拉下來放一起，這邊參考 <a href="http://d.hatena.ne.jp/ASnoKaze/20151016/1445011720">あすのかぜ</a> 上的指令：</p>

<pre><code>wget http://ftp.jaist.ac.jp/pub/apache//httpd/httpd-2.4.17.tar.gz
tar zxvf ./httpd-2.4.17.tar.gz

wget http://ftp.yz.yamagata-u.ac.jp/pub/network/apache//apr/apr-1.5.2.tar.gz
tar zxvf ./apr-util-1.5.4.tar.gz
mv ./apr-1.5.2 ./httpd-2.4.17/srclib/apr

wget http://ftp.yz.yamagata-u.ac.jp/pub/network/apache//apr/apr-util-1.5.4.tar.gz
ar zxvf ./apr-util-1.5.4.tar.gz 
mv ./apr-util-1.5.4 ./httpd-2.4.17/srclib/apr-util
</code></pre>

<p>然後進去 <code>httpd-2.4.17</code> 目錄下指令編譯安裝：</p>

<pre><code>env PKG_CONFIG_PATH=/usr/local/ssl/lib/pkgconfig ./configure --enable-http2
make
sudo make install
</code></pre>

<p>執行的時候也需要注意，需要帶個環境變數，不然他找不到 <code>/usr/local/ssl/</code> 下的 Library：</p>

<pre><code>env LD_LIBRARY_PATH=/usr/local/ssl/lib /usr/local/apache2/bin/httpd
</code></pre>

<p>或是：</p>

<pre><code>env LD_LIBRARY_PATH=/usr/local/ssl/lib /usr/local/apache2/bin/apachectl start
</code></pre>

<p>不過其實執行前還需要先修改一下設定，我是加在 VirtualHost 裡面：</p>

<pre><code>&lt;VirtualHost *:80&gt;
    Protocols h2c http/1.1
    ServerName blog.othree.net
    ServerAdmin othree@gmail.com
</code></pre>

<p>還有</p>

<pre><code>&lt;VirtualHost *:443&gt;
    Protocols h2 http/1.1
    ServerName blog.othree.net
    ServerAdmin othree@gmail.com
</code></pre>

<p>重點是 <code>Protocols</code> 那行，<code>h2</code> 指的是 HTTPS(TLS) 下的 HTTP/2 連線，<code>h2c</code> 則是 HTTP 下的，在其他地方還會看到 <code>h-15</code>、<code>h-17</code> 之類的，那些其實是之前草稿的版本，無視就好，另外還有一個地方需要設定的是加密用的 CipherSuite 和溝通協定，可以參考 <a href="https://icing.github.io/mod_h2/howto.html#https">How to h2 in apache</a> 提供的設定：</p>

<pre><code>SSLCipherSuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK
SSLProtocol All -SSLv2 -SSLv3
</code></pre>

<p>不確定 CipherSuite 的選擇影響多大，不過我猜主要是要把 SSL 全部關掉吧，然後其實這組設定就是 Mozilla 推薦的 SSL 設定的 <a href="https://wiki.mozilla.org/Security/Server_Side_TLS">Modern</a> 那組，等於是要放棄很多舊瀏覽器了，支援的瀏覽器最低版本如下：</p>

<ul>
<li>Firefox 27</li>
<li>Chrome 22</li>
<li>IE 11</li>
<li>Opera 14</li>
<li>Safari 7</li>
<li>Android 4.4</li>
<li>Java 8 </li>
</ul>

<p>都弄好開啟 Apache 就可以了，不過記得如果之前是用 apt 裝的 Apache 的話，設定要自己搬過來。</p>

<p>驗證工具可以用 Curl 或是 nghttp，我是在 OSX 上用 brew 裝的，Curl 比較麻煩，不過可以看到一開始溝通的部分：</p>

<pre><code>brew install curl --with-nghttp2
brew link curl

/usr/local/bin/curl -v --http2 https://othree.net
</code></pre>

<p>然後就會出現最上面那張圖那樣的資訊，可以看到有 ALPN 的選項出現，另外一個工具是 nghttp，其實 Curl 的 http2 支援就是用這套 library：</p>

<pre><code>brew install nghttp2

nghttp -uv https://othree.net
</code></pre>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22118020729/" title="Apache HTTP/2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/565/22118020729_9f6d1b9a08_o_d.png" width="520" height="427" alt="Apache HTTP/2" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22278832416/" title="Apache HTTP/2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/771/22278832416_5553a17fb8_o_d.png" width="520" height="427" alt="Apache HTTP/2" /></a></p>

<p>可以看到上色整理得很漂亮的資訊，另外用瀏覽器也可以判斷，Firefox 的話會寫上 HTTP 版本號，Chrome 我測試是要 Canary 才支援，然後我網站連線的 SSL 握手那段花的時間反而更多，不過還是比較快全部下載完，只是 render 畫面影響的還有其他檔案，雖然大部分檔案都提早開始下載，不過也同時開始下載重要度比較低的圖形檔案，結果反而 DOM ready 的時間點更晚~~~，下圖是 HTTP/1.1 的時候：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22305448445/" title="http1.1-1 by othree, on Flickr"><img src="https://farm1.staticflickr.com/707/22305448445_7da40d9f50_h_d.jpg" width="1022" height="53" alt="http1.1-1" /></a></p>

<p>然後是 2.0：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21684413063/" title="http2-1 by othree, on Flickr"><img src="https://farm1.staticflickr.com/756/21684413063_dbab9bbafb_h_d.jpg" width="1022" height="530" alt="http2-1" /></a></p>

<p>最後就是還不支援 Server Push，這個東西其實技術上不難，可是和 Cache 搞在一起就變很複雜了，目前好像還沒有比較好的解法出現，也只有一些非開源的系統支援的樣子。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000852" baseName="f2e-test">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-10-17</b:date>
				<b:time>20:06:44</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>前端測試入門</b:title>
			<b:content>
				<b:summary> 這篇也是之前花一些時間搞清楚的觀念，想著要記錄下來一陣子了，不過最近很忙碌，一直到這幾個連假才有時間寫下來。 其實身為工程師，我一直沒什麼寫測試，只有在少數幾個工具的 library 中有加上 unit test，大概的原因是因為前端的測試沒這麼好做起來，如果是單一 JavaScript 模組的單元測試還好，不過要做整合測試，或是在瀏覽器上真的測試就麻煩很多了，總之前陣子一方面為了工作需要，一方面幫 Moztw 做了下載檔案的自動檢查，就順便把相關的名詞和觀念弄清楚。 之前最搞不清楚的其實就是 Mocha（摩卡咖啡） 和 Chai（印度拉茶） 到底分別是什麼定位，後來終於弄清楚了，Chai 只是提供 BDD 語法的測試用的 斷言 函數庫（assert library），什麼是斷言呢，英文是 assert，例如明確知道某個函數的結果是什麼，把他說出來，就是斷言，如果結果和說的不一樣，就是測試到錯誤，一般的情形，這些 assert library 就會 throw error，至於 Mocha 則是 Test Framework，用來組織和管理你的測試的程式碼，Mocha 本身的設計是不含 assert library，所以可以自己挑選喜歡的 assert library，只要它在出錯誤時會 throw error 就好，Mocha...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/dopey/123646856/" title="Test Well by ~db~, on Flickr"><img src="https://farm1.staticflickr.com/35/123646856_89367fecab_b.jpg" width="1024" height="1024" alt="Test Well" srcset="https://farm1.staticflickr.com/35/123646856_89367fecab.jpg 768w" /></a></p>

<p>這篇也是之前花一些時間搞清楚的觀念，想著要記錄下來一陣子了，不過最近很忙碌，一直到這幾個連假才有時間寫下來。</p>

<p>其實身為工程師，我一直沒什麼寫測試，只有在少數幾個工具的 library 中有加上 unit test，大概的原因是因為前端的測試沒這麼好做起來，如果是單一 JavaScript 模組的單元測試還好，不過要做整合測試，或是在瀏覽器上真的測試就麻煩很多了，總之前陣子一方面為了工作需要，一方面幫 Moztw 做了<a href="https://github.com/othree/moztw-download-validation">下載檔案的自動檢查</a>，就順便把相關的名詞和觀念弄清楚。</p>

<p>之前最搞不清楚的其實就是 <a href="https://mochajs.org/">Mocha</a>（摩卡咖啡） 和 <a href="http://chaijs.com/">Chai</a>（印度拉茶） 到底分別是什麼定位，後來終於弄清楚了，Chai 只是提供 BDD 語法的測試用的 <strong>斷言</strong> 函數庫（assert library），什麼是斷言呢，英文是 assert，例如明確知道某個函數的結果是什麼，把他說出來，就是斷言，如果結果和說的不一樣，就是測試到錯誤，一般的情形，這些 assert library 就會 throw error，至於 Mocha 則是 Test Framework，用來組織和管理你的測試的程式碼，Mocha 本身的設計是不含 assert library，所以可以自己挑選喜歡的 assert library，只要它在出錯誤時會 throw error 就好，Mocha 網站上就列出了四套 assert library 供大家選擇，除此之外，像我之前在介紹 TypeScript 時提過的 <a href="http://angular.github.io/assert/">assert.js</a> 也可以使用，不過 assert.js 只能檢查型別就是。至於要挑選哪套 assert library 就看各人喜好了，主要是看要怎麼寫斷言，像我挑選 Chai 的原因是他的語法，支援 BDD ，可以寫的看起來很像一句英語：</p>

<pre><code>foo.should.be.a('string');
foo.should.equal('bar');
foo.should.have.length(3);
tea.should.have.property('flavors').with.length(3);
</code></pre>

<p>很容易就知道是什麼意思，而且自由度還蠻大的。另外一個原因則是他有支援 Promise，就是所謂的 <a href="https://github.com/domenic/chai-as-promised/">chai-as-promised</a>，為什麼這個很重要呢，因為 JS 很常遇到需要非同步的操作流程，如果沒有支援，Test Framework 當下把他的 function 跑完，沒有 catch 到 error 就認為沒有錯誤了，當然像 mocha 是有支援非同步的，內建有個等待的機制，<code>done</code>：</p>

<pre><code>describe('User', function() {
  describe('#save()', function() {
    it('should save without error', function(done) {
      var user = new User('Luna');
      user.save(function(err) {
        if (err) throw err;
        done();
      });
    });
  });
});
</code></pre>

<p>就是每個 <code>it</code> 區塊裡面，其實都會收到一個函數 <code>done</code>，如果有要測試非同步的程式，可以在非同步的部分測試完後，才執行 <code>done()</code>，這樣 Mocha 才有機會知道你的測試是不是有非同步的部分，還有什麼時候才是測試完成，不過 Chai 是 BDD，不會容許這樣不直觀的寫法的，所以 Domenic Denicola 開發了 <a href="https://github.com/domenic/chai-as-promised/">chai-as-promised</a>：</p>

<pre><code>promise.should.be.fulfilled;
promise.should.eventually.deep.equal("foo");
promise.should.become("foo"); // same as `.eventually.deep.equal`
promise.should.be.rejected;
</code></pre>

<p>只是要這樣簡潔的寫法，還需要先設定一下：</p>

<pre><code>var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");

chai.use(chaiAsPromised);
</code></pre>

<p>其實 chai-as-promised 是 chai 的 plugin，然後用 <code>chai.use</code> 來使用它，底層怎樣運作我還沒深入研究，覺得還有點 magic，不過還算是想的到怎樣實做出來的程度，猜測可能有用到 function 的 <code>toString</code> 來判斷有沒有引用 <code>next</code> 參數。</p>

<p>再來，測試蠻常會用到的假物件，mock 和 stub，兩者的差異其實蠻多文章有說明了，我個人覺得簡單分法就是 stub 沒有副作用，mock 則是有副作用的假物件，至於要說要用哪種物件來完成測試的話，基本上就是 stub 可以達成你的測試需求的話就用 stub，在 JavaScript 的測試環境下，好像只有看到 <a href="http://sinonjs.org/">Sinon.js</a> 這套比較多人用，去查了一下名稱典故，覺得一個比較可能的來源是特洛伊木馬故事中，騙特洛伊人把木馬搬進去城裡的那位（Mocha 和 Chai 的名稱應該是互相影響的，不過不確定誰先出來的）。另外還有個角色和 mock、stub 很常一起提到的叫 spy（常見用複數形 spies），最常用來當 callback 之類的，在非同步測試案例中，可以用來確保 callback 有被執行到，甚至可以偷看（spy）被執行了幾次，收到什麼參數等等，總之就是個可以測試函數被執行的次數和方式的物件。</p>

<p>最後要說的則是 e2e test，因為 JS 很多時候都是用來在瀏覽器端實做 UI 和使用者行為的 handler，其實要做完整整合的測試不太容易，e2e 指的是 End to End，端點到端點，通常是說一個流程的起點到終點的意思，例如上網站註冊帳號，這樣算是一個流程，或是上網登入購買東西到結帳完成，這樣也是一個流程，由於 Web App 的環境下，跑 JS 的是瀏覽器，沒辦法簡單的介入，所以以往真的要做 e2e 測試幾乎都是要靠人工，後來有了 <a href="http://www.seleniumhq.org/">Selenium</a> 和 WebDriver，才開始可以讓這些測試自動化。</p>

<p>以前的 Selenium 要控制瀏覽器靠的是 <a href="http://www.seleniumhq.org/projects/remote-control/">Selenium RC</a>，用比較暴力的方式介入瀏覽器，不過現在的 Selenium 2 則是透過 <a href="http://www.w3.org/TR/webdriver/">WebDriver</a> 這個 API 來操作，WebDriver 能進 W3C 標準化其實也是 Selenium 貢獻者的努力，背後也是有些大公司的影子在，目前主流的瀏覽器包括微軟最新的 Edge 也都支援，不過其實 Selenium 因為是 Java 寫的，雖然控制瀏覽器的 script 沒有限制要用 Java，我還是一直不太習慣，所以都沒深入，直到前陣子開始看到 Paul 在 Facebook 上<a href="https://www.facebook.com/notes/paul-li/protractor-%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A%E7%AF%87/10152948608982211">連載</a>介紹 <a href="https://angular.github.io/protractor/#/">Protractor</a>，才又開始有想嘗試的動力，Protractor 的名稱由來也還蠻有趣的，意思是量角器，而 AngularJS 則有諧音 angle 的感覺在，當初出來也是為了要測試 AngularJS 的，Github 上 Protractor 是 AngularJS 下的一個專案，Protractor 和 Selenium 的差別就在於，Protractor 是一個 test framework，然後建好了 WebDriver binding，可以直接透過 WebDriver 來跟瀏覽器溝通，不再需要 Selenium 介面那塊了。</p>

<p>後來 Carl 跟我說到有 <a href="http://webdriver.io/">WebdriverIO</a> 這個專案，是只有 WebDriver 介面的部分，可以寫 node script 來叫瀏覽器做事，當然也可以做測試，可以挑自己喜歡的 test framework 和 assert library 來搭配使用，於是我就做了一個可以去 moztw.org 下載安裝檔回來驗證正確性的<a href="https://github.com/othree/moztw-download-validation">專案</a>，在這個專案中，還用了一個特殊的寫法：</p>

<pre><code>it('Download OSX Installer', function* () {
  var data = yield hashes;
  ...
</code></pre>

<p>其實就是 async function 加上 <code>yield</code> 來代替 ES2016 的 <code>await</code>，要達成這樣的效果其實會需要一個 async function runner，不是 node 可以直接跑起來的，實際測試過也是跑不起來，所以就只能 WebdriverIO 提供的 <code>wdio</code> 執行檔來執行。</p>

<p>這篇還差一點東西沒講到，就是 test coverage，JS 這邊比較常看到的是 <a href="https://gotwarlost.github.io/istanbul/">istanbul.js</a>，名稱的來源是 carpet coverage，然後 Istanbul 是個生產優質地毯的地方～</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000851" baseName="transducer">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-10-03</b:date>
				<b:time>15:47:29</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Transducer</b:title>
			<b:content>
				<b:summary>今天在 JSDC 講的題目是 Transducer ， 是目前講過數學和程式碼最多的題目了，不過還是希望能用盡量簡單的範例來說明什麼是 Transducer。 /* A_A */...</b:summary>
				<b:mainContent><p>今天在 JSDC 講的題目是 Transducer ， 是目前講過數學和程式碼最多的題目了，不過還是希望能用盡量簡單的範例來說明什麼是 Transducer。</p>

<script async="async" class="speakerdeck-embed" data-id="5a7ac6a8f7ae4e07999d407f675f65d9" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000850" baseName="react-intro">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-08-21</b:date>
				<b:time>00:38:04</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>React 入門</b:title>
			<b:content>
				<b:summary> 其實這篇想寫一陣子了，不過拖太久本來想放掉，是後來又看到 TonyQ 在說他的經驗，就覺得還是寫一下，搞不好可以幫到人(?)，然後其實我對 React 沒深入研究，目前也只寫過一次，也沒做到複雜的　App，所以這篇純粹是我的觀察啦。 先講結論，寫過目前一般 Web App 的人，要來寫 React 大概都要一些撞牆期吧，我的狀況是要寫 React + Flux 架構的 Web App，但是一開始對 Flux 的介紹沒認真看，在一知半解的狀態下就開始做了，結果就一直出現些靈異現象，大部分是覺得應該要更新畫面了但是沒有，追到後來大概就兩個原因： 亂用 props 和 state，總之就是 React 只會在 state 變化的時候更新畫面，props 變化的時候不會（其實設計上是 immutable 的），而用 props 的時機基本上是父層 component 要設定資料給子 component 的時候才會用，至於父層收到不同的資料給子 component 時，同樣是改 props，為什麼畫面就會更新了，事實上是因為父層...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/13990963771/" title="京都嵐山 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5237/13990963771_028f39af66_b.jpg" width="1024" height="683" alt="京都嵐山" srcset="https://farm6.staticflickr.com/5237/13990963771_028f39af66.jpg 768w, https://farm6.staticflickr.com/5237/13990963771_221cae9d50_k.jpg 2x" /></a></p>

<p>其實這篇想寫一陣子了，不過拖太久本來想放掉，是後來又看到 TonyQ 在說他的經驗，就覺得還是寫一下，搞不好可以幫到人(?)，然後其實我對 React 沒深入研究，目前也只寫過一次，也沒做到複雜的　App，所以這篇純粹是我的觀察啦。</p>

<p>先講結論，寫過目前一般 Web App 的人，要來寫 <a href="http://facebook.github.io/react/">React</a> 大概都要一些撞牆期吧，我的狀況是要寫 React + <a href="http://facebook.github.io/flux/">Flux</a> 架構的 Web App，但是一開始對 Flux 的介紹沒認真看，在一知半解的狀態下就開始做了，結果就一直出現些靈異現象，大部分是覺得應該要更新畫面了但是沒有，追到後來大概就兩個原因：</p>

<ul>
<li><p>亂用 props 和 state，總之就是 React 只會在 state 變化的時候更新畫面，props 變化的時候不會（其實設計上是 immutable 的），而用 props 的時機基本上是父層 component 要設定資料給子 component 的時候才會用，至於父層收到不同的資料給子 component 時，同樣是改 props，為什麼畫面就會更新了，事實上是因為父層 component 更新的時候，才有機會改動到子 component 的 prop，而因為有重新 render，子 component 的內容也會一起更新，也才更新了畫面。</p></li>
<li><p>想要只更新子 component，這個問題就是沒把 flux 的設計弄清楚，Flux 的 store 其實有點代表所有的資料的意思，而不管是什麼動作，都要把整包的 store 資料更新回去，根 component 會綁事件在 store 的更新事件上，發現 store 資料有更新就開始重新 render component，然後跟著它的子 component 就會因為 prop 更新而跟著更新。</p></li>
</ul>

<p>當然 store 是可以有多個的，重點在於每次更新都要整個 store 的資料重新給根 component，不能從 store 裡面某一層開始送，然後想要只更新某個子 component，這樣結果就很容易發生靈異事件，當然 React 可以不用 Flux 架構，不過我覺得那條路走起來更困難，所以還是乖乖使用 Flux 架構，其實我後來做的結構很簡單，action 就只是一個事件，store 就是 POJSO 而已，沒用到一些市面上的 Flux framework。</p>

<p>最後一點要提的就是每次都整包 store 更新，可能就會有人想到效能問題，當然 React 本身效能不錯，不過資料量要是超大，可能還是會有出現狀況，我想這也是為什麼 Facebook 要發展 <a href="https://facebook.github.io/immutable-js/">Immutable.js</a> 的原因，其實我仔細瞭解後，發現 Immutable 配合 Flux 架構真的是超適合的，而且他在大量資料更新的時候，可以保持蠻不錯的效能，因為只有 reference 的變化，而不是真的重新產生整包資料，沒變化的資料都是本來就已經在記憶體裡面的，整體的資源消耗少很多。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000849" baseName="fetch-is-the-new-xhr">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-08-17</b:date>
				<b:time>18:28:00</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>fetch is the new XHR</b:title>
			<b:content>
				<b:summary>這次 COSCUP 講的是新的 Web API: fetch，其實這個東西要用只要看 HTML5 Rocks 那篇文章就好了，只是我在使用和做 fetch-er 的時候發覺很多的細節和問題（投影片裡面的 facts），有一些不跟最新進度也不知道狀況是怎樣，連 Stack Overflow 上也沒有，可能有人遇到但是不知道，所以就和我的 fetch-er 專案一起投稿。 和 fetch-er 專案一起投稿的另一個考量是，在 COSCUP 和 OSDC 分享這麼多次，年初我突然才發現我的講題和 Open Source 的關連度實在太低（嚴格說來我在那時才認真意識到 open source 和社群的差異），只有 2013 的 COSCUP 是講我在 Vim Plugin 開發上的歷程，其他有一場有介紹到 underscore，之外就大部分是在介紹 Web 的新東西，所以認真的覺得今年要投和...</b:summary>
				<b:mainContent><p>這次 COSCUP 講的是新的 Web API: fetch，其實這個東西要用只要看 HTML5 Rocks 那篇文章就好了，只是我在使用和做 fetch-er 的時候發覺很多的細節和問題（投影片裡面的 facts），有一些不跟最新進度也不知道狀況是怎樣，連 Stack Overflow 上也沒有，可能有人遇到但是不知道，所以就和我的 fetch-er 專案一起投稿。</p>

<p>和 fetch-er 專案一起投稿的另一個考量是，在 COSCUP 和 OSDC 分享這麼多次，年初我突然才發現我的講題和 Open Source 的關連度實在太低（嚴格說來我在那時才認真意識到 open source 和社群的差異），只有 2013 的 COSCUP 是講我在 Vim Plugin 開發上的歷程，其他有一場有介紹到 underscore，之外就大部分是在介紹 Web 的新東西，所以認真的覺得今年要投和 Open Source 相關的東西，而不是只是 Web 相關的而已。</p>

<script async="async" class="speakerdeck-embed" data-id="8f42a7c5ffad4c9cab284637e0bddbc2" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000848" baseName="first-patch-to-firefox">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-08-07</b:date>
				<b:time>09:06:43</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>My First Patch to Firefox</b:title>
			<b:content>
				<b:summary> OSX 自從升級到 10.10 之後，繁體中文版 Firefox 就冒出了一個 bug，一堆使用到作業系統原生的視窗，像是下載圖片，開啟檔案等等的，都會變成簡體中文介面，這個問題在 Bugzilla 上的編號是 1089363，畫面看起來就像上面的圖一樣，這個問題的狀況，推測是 OSX 本來在這種系統對話框，會使用使用者現在設定的系統 locale，但是 10.10 改成應用程式正在運作的 locale，然後 Firefox 本來會用 locale AB_CD 中的 AB 段而已，所以 zh_TW 和 zh_CN 就都會變成 zh，然後 OSX 的 zh 又會變成簡體中文，結果就變成這樣了。 其實這個 bug 的解法， Steven Michaud 很早就提出了，就是把本來 locale...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/20310084805/" title="zh download dialog by othree, on Flickr"><img src="https://farm1.staticflickr.com/261/20310084805_2c8ed51b8e_b.jpg" width="424" height="223" alt="zh download dialog" srcset="https://farm1.staticflickr.com/261/20310084805_2c8ed51b8e.jpg 768w" /></a></p>

<p>OSX 自從升級到 10.10 之後，繁體中文版 Firefox 就冒出了一個 bug，一堆使用到作業系統原生的視窗，像是下載圖片，開啟檔案等等的，都會變成簡體中文介面，這個問題在 Bugzilla 上的編號是 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1089363">1089363</a>，畫面看起來就像上面的圖一樣，這個問題的狀況，推測是 OSX 本來在這種系統對話框，會使用使用者現在設定的系統 locale，但是 10.10 改成應用程式正在運作的 locale，然後 Firefox 本來會用 locale <code>AB_CD</code> 中的 <code>AB</code> 段而已，所以 <code>zh_TW</code> 和 <code>zh_CN</code> 就都會變成 <code>zh</code>，然後 OSX 的 <code>zh</code> 又會變成簡體中文，結果就變成這樣了。</p>

<p>其實這個 bug 的解法， Steven Michaud 很早就提出了，就是把本來 locale 的 resource 目錄的名稱改成 <code>zh_TW</code>，大概 diff 如下：</p>

<pre><code> AB_CD = $(MOZ_UI_LOCALE)

-AB := $(firstword $(subst -, ,$(AB_CD)))
+ifeq (zh-TW,$(AB_CD))
+LPROJ_ROOT := $(subst -,_,$(AB_CD))
+else
+LPROJ_ROOT := $(firstword $(subst -, ,$(AB_CD)))
+endif
+LPROJ := Contents/Resources/$(LPROJ_ROOT).lproj</code></pre>

<p>其實不會很難，不過因為 Firefox 的程式碼變動很快，連 build script 也常常變動，那個 patch 檔出來的時候已經不能用了，然後又沒人處理就這樣一直拖下去，前陣子 Moztw 那邊又被提出來一次，剛好我為了弄 WebIDL 相關應用的時候有 build 過 Firefox，想說應該可以處理看看，就接下來嘗試了，build 本身蠻簡單的，就照著網路上的<a href="https://developer.mozilla.org/en-US/docs/Simple_Firefox_build">文件</a>就好，比較難的是要 build 成特定語系的，找很久才在 Moztw 討論區找到<a href="https://forum.moztw.org/viewtopic.php?f=18&amp;t=34806">答案</a>，要在 <code>.mozconfig</code> 裡面加上：</p>

<pre><code>ac_add_options --with-l10n-base=/d/lang
ac_add_options --enable-ui-locale=zh-TW
</code></pre>

<p>其中第一行設定的路徑要指定到你指定的位置，而且要絕對路徑，然後在該目錄 clone 翻譯的 repository 下來，可以在 <a href="http://hg.mozilla.org/l10n-central/">l10n-central</a> 那邊找自己的語系，以 <code>zh-TW</code> 來說：</p>

<pre><code>cd /d/lang
git clone http://hg.mozilla.org/l10n-central/zh-TW/
</code></pre>

<p>然後這樣就可以 build 中文版了，build 完執行就看到精美的黃底紅字 XML 解析錯誤視窗。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/19687462694/" title="Firefox Missing String by othree, on Flickr"><img src="https://farm1.staticflickr.com/382/19687462694_626110d91c_b.jpg" width="375" height="190" alt="Firefox Missing String" src-1="(max-width: 768px)  https://farm1.staticflickr.com/382/19687462694_626110d91c.jpg 1x, https://farm1.staticflickr.com/382/19687462694_626110d91c_b.jpg 2x"  /></a></p>

<p>還好我有點經驗，知道 Firefox 的介面是 XUL 寫的，然後字串是用 XML entity 方式存在，所以很快就想到是翻譯問題，於是上去找了 l10n dashboard 看看<a href="https://l10n.mozilla.org/teams/zh-TW">繁體中文</a>的狀況，看的是 <strong>fx_central</strong> 這棵樹下的字串：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/20301676302/" title="Firefox l10n stat by othree, on Flickr"><img src="https://farm4.staticflickr.com/3682/20301676302_3c488073c1_b.jpg" width="991" height="738" alt="Firefox l10n stat" src-1="(max-width: 768px)  https://farm4.staticflickr.com/3682/20301676302_3c488073c1.jpg 1x, https://farm4.staticflickr.com/3682/20301676302_3c488073c1_b.jpg 2x"  /></a></p>

<p>可以看到目前有缺哪些字串，因為字串還沒穩定所以也還不會有翻譯，所以就需要手動進去把這些 entity 的定義補上，內容隨便填，然後重新 build 一次，結果就修好了！</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/19689109663/" title="nightly zh_TW download dialog by othree, on Flickr"><img src="https://farm1.staticflickr.com/517/19689109663_81ff6a8f9a_b.jpg" width="973" height="777" alt="nightly zh_TW download dialog" src-1="(max-width: 768px)  https://farm1.staticflickr.com/517/19689109663_81ff6a8f9a.jpg 1x, https://farm1.staticflickr.com/517/19689109663_81ff6a8f9a_b.jpg 2x"  /></a></p>

<p>然後就開始想辦法生 patch 檔案了，中間也有用過 <code>hg mq</code>，最後都固定改好，commit 後用 <code>hg export . &gt; fix.patch</code>，總之改好我就丟上 bugzilla 了，結果第一個 patch 只改到一個檔案，實際上應該有五個檔案要改，而且才隔一天，Makefile 就被別人改過了，只好重新找位置修改，重新生 patch，到最後一個 review 過，build 也過的 patch 中間還發生了不少事情，包括 Makefile 被別人又改動一次，用 <code>AB</code> or <code>LPROJ</code> 的命名問題，字串的變化造成假翻譯又要增加，還有 build 工具 mach 被人改壞，和推上去之後有 build 失敗的狀況等等，非常的一波三折。</p>

<p>其中 build 失敗是 b2g 的 build 失敗，原因是我有地方改錯，不過要測試也是要重新設定，參考的是 <a href="https://developer.mozilla.org/en-US/Firefox_OS/Building_the_Firefox_OS_simulator">Building the Firefox OS Simulator</a> 這份文件，把 <code>.mozconfig</code> 改成：</p>

<pre><code>. "$topsrcdir/b2g/config/mozconfigs/common"

mk_add_options MOZ_OBJDIR=../build
mk_add_options MOZ_MAKE_FLAGS="-j9 -s"

ac_add_options --enable-application=b2g
ac_add_options --disable-libjpeg-turbo
</code></pre>

<p>重新 build 看能不能過。</p>

<p>改完產生的 patch 檔上傳到 bugzilla 時，要勾選 Content Type 是 patch，然後 review flag 設定成 <code>?</code>，選一個 reviewer，通常會有 mentor 來跟你說選誰好，我的情形是 <a href="http://blog.timc.idv.tw/">timdream</a> 在幫忙，接著就等 reviewer review，他 review 過的話， review flag 就會變成 <code>+</code>，然後就會收到一封「Congratulations on having your first patch approved」的信件，說了一些後續可以做的事情，接著要做的就是讓 patch 真的進去 repository，可以在票的 keyword 加上 <code>checkin-needed</code>，就會有機器人自己來把你的 patch check in 進 mozilla-inbound 這個 repository，然後丟上機器人自動編譯和測試，例如這個我 B2G build 失敗的<a href="https://treeherder.mozilla.org/#/jobs?repo=mozilla-inbound&amp;revision=b1b8616162b4">例子</a>，都過了就會進 mozilla-central，之後才<a href="https://wiki.mozilla.org/Tree_Rules">照順序</a>進 mozilla-aurora、mozilla-beta、mozilla-release，現在進去 mozilla-central 的大概要等 Firefox 42 才會上線了，應該是和 OSX 10.11 同時吧。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000847" baseName="electron-intro">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-08-03</b:date>
				<b:time>21:27:43</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Electron 入門</b:title>
			<b:content>
				<b:summary> 前陣子花了些時間用 Electron 寫了個桌面應用程式，覺得有些資訊應該記錄一下，其實我覺得 Electron 的文件弄得超爛的，非常沒有 Github 的水準，Github 當初能夠起來，我認為一個很大的原因就是文件做的很好，而且在頁面上都會提供相對應操作的說明文件，不只讓網站的易用性提昇很多，連帶的也推廣了 Git 的使用，算是相輔相成起來的，不過 Electron 剛推出的時候，我就覺得，這是有文件嗎？甚至讓我有個印像是，我們雖然推出 Electron 但是沒很想讓你們用，所以文件隨便寫寫。 為什麼這樣說，拿現在最新版 0.3.0 來說，其實這應該只是自動產生的文件，整頁的第一篇文章是 Application distribution，這真的沒有哪裡搞錯嗎？而且這份文件還很爛，有關鍵的地方沒說，之後會講。總之，要開始寫 Electron App 應該要看的是 Quick Start 才對，這份文件用了一個很簡單的範例讓你開始可以跑 Electron App，只要會寫網頁，從這邊就可以開始做 Electron App，但是一個應用程式哪有這麼單純，只靠 Web 端的技術一定是有不足的，例如我要做的程式就需要讀取 key 去登入 SSH 然後做事情，這登入 SSH 然後做事的部分用的是 node 的...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/20249299982/" title="electron by othree, on Flickr"><img src="https://farm1.staticflickr.com/312/20249299982_763c6a25a6_b.jpg" width="1024" height="683" alt="electron" srcset="https://farm1.staticflickr.com/312/20249299982_763c6a25a6.jpg 768w" /></a></p>

<p>前陣子花了些時間用 <a href="http://electron.atom.io/docs/v0.30.0/tutorial/quick-start/">Electron</a> 寫了個桌面應用程式，覺得有些資訊應該記錄一下，其實我覺得 Electron 的文件弄得超爛的，非常沒有 Github 的水準，Github 當初能夠起來，我認為一個很大的原因就是文件做的很好，而且在頁面上都會提供相對應操作的說明文件，不只讓網站的易用性提昇很多，連帶的也推廣了 Git 的使用，算是相輔相成起來的，不過 Electron 剛推出的時候，我就覺得，這是有文件嗎？甚至讓我有個印像是，我們雖然推出 Electron 但是沒很想讓你們用，所以文件隨便寫寫。</p>

<p>為什麼這樣說，拿現在最新版 0.3.0 來說，其實這應該只是自動產生的<a href="http://electron.atom.io/docs/v0.30.0/">文件</a>，整頁的第一篇文章是 <a href="http://electron.atom.io/docs/v0.30.0/tutorial/application-distribution/">Application distribution</a>，這真的沒有哪裡搞錯嗎？而且這份文件還很爛，有關鍵的地方沒說，之後會講。總之，要開始寫 Electron App 應該要看的是 <a href="http://electron.atom.io/docs/v0.30.0/tutorial/quick-start/">Quick Start</a> 才對，這份文件用了一個很簡單的範例讓你開始可以跑 Electron App，只要會寫網頁，從這邊就可以開始做 Electron App，但是一個應用程式哪有這麼單純，只靠 Web 端的技術一定是有不足的，例如我要做的程式就需要讀取 key 去登入 SSH 然後做事情，這登入 SSH 然後做事的部分用的是 node 的 code，不能跑在瀏覽器環境，在 Electron 的架構下，瀏覽器環境稱為 renderer，而另外一邊用來起始 renderer process 的則稱為 main process，要登入 SSH 的 code 就要寫在 main process 這邊，那兩邊要怎麼溝通呢？Electron 提供了 IPC 模組來用。</p>

<p>IPC 模組應該是稱為 Inter Process Communication 吧，我覺得這在 Electron App 開發當中應該是超重要的一部份，結果在 Quick Start 那篇文章中竟然沒有範例介紹，只有簡單的一句話說如果兩邊要溝通要用這個（或是另外一個 remote 模組），而且點過去也只有 <a href="http://electron.atom.io/docs/v0.30.0/api/ipc-renderer/">API 文件</a>，沒有範例，後來出的 remote 模組的<a href="http://electron.atom.io/docs/v0.30.0/api/ipc-renderer/">文件</a>才有範例說明，總之這樣弄來弄去還是有解決兩邊的溝通問題，所以下一個遇到的，就是我要怎麼讓使用者選檔案了。</p>

<p>因為 Electron 是跨平台的，我的程式設計是用 private key 去登入遠端的機器做事情，Linux 或 OSX 都可以假設 key 的位置，但是 Windows 不行，所以我就要提供可以讓使用者選檔案的功能，這部分文件也是沒有好好的連結，你看完 Quick Start，看一遍文件目錄，其實都看不出來到底要怎麼做到這件事，事實上它被稱為 <a href="http://electron.atom.io/docs/v0.30.0/api/dialog/">dialog</a>，這不把整份 API 文件翻完真的不知道是放在這名字下面。</p>

<p>然後，Electron 的 renderer process 端雖然和瀏覽器環境幾乎一樣，不過還是有些差異，一部份是 Chrome 引擎的問題，例如最近的 <code>fetch</code>，在 renderer process 會受到 CORS 限制，但是 XHR 不會，這是因為 fetch 還沒有檢查 Chrome 的 safety flag，所以如果要用 fetch API 接 ES6 Promise 的話，就要用 Github 的 polyfill，自己把檢查的程式碼拿掉，另外一個類似的問題是，如果要在 renderer process 中，引入第三方的 library，有兩種用法，一個是用新出現的 <code>require</code> 來引入 npm module，或是像一般網頁一樣，直接用 <code>&lt;script&gt;</code> 標籤引入 js 檔案，但是就會發生一個問題，因為 jQuery 會判斷現在的環境，然後來決定要不要 expose <code>$</code> 變數到 global scope 下，剛好，Electron 的環境下，雖然是要當成瀏覽器環境，但是又多了 <code>require</code> 可以用，結果就是被誤判成在 Node 環境，想當成一般網頁環境用 jQuery 就會找不到 <code>$</code>，結果也是要自己去修改檢查部分的程式碼。</p>

<p>最後，把程式功能弄得差不多了，要打包給其他人時，發現竟然無從下手，本文開頭提到的 Application distribution 這份文件說的很簡單，就是把某個目錄換掉就好了，可是真的到了這一步才意識到，是換掉哪裡的目錄？結果只好上網找別人弄好的打包工具，這邊我用的是 <a href="https://www.npmjs.com/package/electron-packager">electron-packager</a>，研究一下才發現，原來是要抓 Github 上 <a href="https://github.com/atom/electron/releases">release</a> 那的檔案下來處理，整個過程其實還蠻不愉快的，因為根本不是難懂，而是文件作不好造成一堆時間浪費啊。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000846" baseName="webappsec">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-07-03</b:date>
				<b:time>23:13:21</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>webappsec</b:title>
			<b:content>
				<b:summary> 這幾天才注意到 W3C 的 Web Application Security Working Group，簡稱為 webappsec，專門負責安全相關的規範制訂，是 2011 年就成立的，算是很後知後覺吧，其實現在很多已經很廣為人知的 Web 安全機制都是出自他們之手，像是 CORS 和 CSP，然後他們現在也很跟的上潮流，把標準的制訂也移到 Github 上了，其實會發現這個 Github repo 是因為最近在看 fetch 的 spec，裡面多了蠻多內容，而且有不少引用到其它新標準的地方，然後看這看著就看到 webappsec 這邊，順便就看了一下，有幾個新草稿好像還蠻有趣的，想說可以介紹一下，不過這些東西大部分都還不能用就是了。 第一個是 Secure Contexts，這個新東西目的很簡單，就是判斷現在的連線狀況是否安全，以前的話，前端只能看是不是使用 https protocol 連線，不過 Secure Context 有比較多的判斷流程，例如用 SSL 就不會被當成是安全的，要 TLS 才會被認為是安全，如果不是...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/mujitra/15191563939/" title="Safety first. by MIKI Yoshihito (´･ω･), on Flickr"><img src="https://farm3.staticflickr.com/2948/15191563939_80db3b1c3c_b.jpg" width="1024" height="576" alt="Safety first." srcset="https://farm3.staticflickr.com/2948/15191563939_80db3b1c3c.jpg 768w, https://farm3.staticflickr.com/2948/15191563939_771f265d3a_k.jpg 2x" /></a></p>

<p>這幾天才注意到 W3C 的 Web Application Security Working Group，簡稱為 webappsec，專門負責安全相關的規範制訂，是 <a href="http://www.w3.org/2011/webappsec/">2011</a> 年就成立的，算是很後知後覺吧，其實現在很多已經很廣為人知的 Web 安全機制都是出自他們之手，像是 <a href="https://developer.mozilla.org/zh-TW/docs/HTTP/Access_control_CORS">CORS</a> 和 <a href="http://devco.re/blog/2014/04/08/security-issues-of-http-headers-2-content-security-policy/">CSP</a>，然後他們現在也很跟的上潮流，把標準的制訂也移到 <a href="https://github.com/w3c/WebAppSec">Github</a> 上了，其實會發現這個 Github repo 是因為最近在看 fetch 的 spec，裡面多了蠻多內容，而且有不少引用到其它新標準的地方，然後看這看著就看到 webappsec 這邊，順便就看了一下，有幾個新草稿好像還蠻有趣的，想說可以介紹一下，不過這些東西大部分都還不能用就是了。</p>

<p>第一個是 <a href="https://w3c.github.io/webappsec/specs/powerfulfeatures/">Secure Contexts</a>，這個新東西目的很簡單，就是判斷現在的連線狀況是否安全，以前的話，前端只能看是不是使用 https protocol 連線，不過 Secure Context 有比較多的判斷流程，例如用 SSL 就不會被當成是安全的，要 TLS 才會被認為是安全，如果不是 TLS 連線則還會判斷連到哪裡，看看白名單黑名單之類的機制。</p>

<p>第二個是 <a href="https://w3c.github.io/webappsec/specs/credentialmanagement/">Credential Management</a>，主要是為了因應現在瀏覽器很多都有記下使用者填的表單資料，包括登入的表單，而這等於是把使用者某個網站的帳號密碼都記錄下來，不過其實瀏覽器要做這些功能也是會遇到很多問題，像是他要怎麼判斷現在的表單是登入表單，哪些欄位是帳號密碼，或是網站用不一樣的機制，例如 XHR 來登入，這樣瀏覽器如果無法知道是什麼機制，就無法替這些特殊機制的網站的使用者提供方便的功能，所以 webappsec 就提出 Credential Management 這個功能讓網站開發者可以透過設計好的介面來告訴瀏覽器他們的網站是怎樣登入的，然後可以儲存帳號密碼在瀏覽器端，之後提供 API 給 JavaScript 呼叫出來送到 Server 端驗證，不過說是呼叫出來，其實 JavaScript 也看不到密碼明碼，而只能直接送出 login 的 request：</p>

<pre><code>navigator.credentials.get({ "password": true }).then(
  function(credential) {
    if (!credential) {
      // The user either doesn't have credentials for this site, or
      // refused to share them. Insert some code here to show a basic
      // login form (or, ideally, do nothing, since this API should
      // really be progressive enhancement on top of an existing form).
      return;
    }
    if (credential.type == "password") {
      credential.send("https://example.com/loginEndpoint")
        .then(function (response) {
          // Notify the user that signin succeeded! Do amazing, signed-in things!
        });
    } else {
      // See the Federated Sign-in example
    }
  }
);
</code></pre>

<p>這是從 spec 內複製出來的 sample code，一個重點是，JavaScript 程式碼其實碰不到你的密碼，只能直接把 credential send 出去，其它也還支援像是 Facebook 那種第三方登入的設計，以及把 credential 存進 store 等等機制。</p>

<p>第三個是 <a href="https://w3c.github.io/webappsec/specs/subresourceintegrity/">Subresource Integrity</a>：</p>

<pre><code>&lt;script src="https://analytics-r-us.example.com/v1.0/include.js"
        integrity="sha256-Rj/9XDU7F6pNSX8yBddiCIIS+XKDTtdq0//No0MH0AE="
        crossorigin="anonymous"&gt;&lt;/script&gt;
</code></pre>

<p>這是個看範例馬上就能理解幹什麼用的，就是對網頁要用到的其它 resource 檔案包括：js、css 等加上驗證檔案正確性的 hash，為的是避免有第三方的檔案內容被惡意攻擊者修改過。</p>

<p>第四個是 <a href="https://w3c.github.io/webappsec/specs/upgrade/">Upgrade Insecure Requests</a>，這是唯一目前已經可以用的，為的是解決 mixed content 的問題，也就是有的網站可能最近才改為 HTTPS 連線，但是網站內部用到的一些內容還是寫死 URL 用 HTTP，這時候瀏覽器就會跳出說網頁內容可能不安全，然而，這些使用 HTTP 的檔案其實可能用 HTTPS 連線也找的到，像是 Flickr、TED 等都有支援 HTTPS 連線，而 Upgrade 就是跟瀏覽器說如果這些內容找得到 HTTPS 的就用 HTTPS 的，而不是只看寫死的 URL，目前 Chrome 43 已經開始支援了，有個線上 <a href="https://googlechrome.github.io/samples/csp-upgrade-insecure-requests/">demo</a> 可以看，設定方法可以透過 CSP header 加上 <code>upgrade-insecure-requests</code> 或是寫到 meta 標籤裡面（demo 用的）</p>

<pre><code>&lt;meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests"&gt;
</code></pre>

<p>其實這個標準我一開始以為是類似 HSTS，是對現在開的網址本身做判斷是不是有 HTTPS 可供選擇，有的話就改用 HTTPS 連線，仔細看之後才發現是用來處理 mixed content ，可是又看一看發現也有一部份比較新的草稿有講到這個功能，目前討論的版本是用 header：</p>

<pre><code>HTTPS: 1
</code></pre>

<p>很簡潔不過還沒瀏覽器支援就是了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000845" baseName="ghcjs">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-06-18</b:date>
				<b:time>00:08:03</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>GHCJS</b:title>
			<b:content>
				<b:summary>最近幾天把 GHCJS 研究了一遍，一開始的需求是因為開始用 pandoc，然後想要用 JS 提供即時的預覽，因為 Pandoc 是 Haskell 寫的，所以看下來自然是看到 GHCJS 了，其實網路上以經有人成功的把 Pandoc 轉成 JS 了，叫做 markup.rocks，我後來也是基於他在 github 上公開的這些程式碼來研究。 要安裝 GHCJS 有點麻煩，以 OSX 為例，要先去下載 GHC 的 binary distribution 壓縮檔（ghc-7.8.3-x86_64-apple-darwin.tar.xz），解壓縮後，進目錄執行： ./cofigure make install 安裝完 GHC 後要更新 cabal 這個套件管理工具： cabal install cabal-install...</b:summary>
				<b:mainContent><p>最近幾天把 GHCJS 研究了一遍，一開始的需求是因為開始用 <a href="http://pandoc.org/">pandoc</a>，然後想要用 JS 提供即時的預覽，因為 Pandoc 是 Haskell 寫的，所以看下來自然是看到 <a href="https://github.com/ghcjs/ghcjs">GHCJS</a> 了，其實網路上以經有人成功的把 Pandoc 轉成 JS 了，叫做 <a href="http://markup.rocks/">markup.rocks</a>，我後來也是基於他在 github 上公開的這些程式碼來研究。</p>

<p>要安裝 GHCJS 有點麻煩，以 OSX 為例，要先去<a href="https://www.haskell.org/ghc/download_ghc_7_8_3#macosx_x86_64">下載</a> GHC 的 binary distribution 壓縮檔（ghc-7.8.3-x86_64-apple-darwin.tar.xz），解壓縮後，進目錄執行：</p>

<pre><code>./cofigure
make install
</code></pre>

<p>安裝完 GHC 後要更新 <code>cabal</code> 這個套件管理工具：</p>

<pre><code>cabal install cabal-install
</code></pre>

<p>然後這樣會把 cabal 裝到自己 home 目錄下面，所以還要更新一下 $PATH：</p>

<pre><code>PATH=$HOME/Library/Haskell/bin:$PATH
</code></pre>

<p>接下來才是安裝 GHCJS：</p>

<pre><code>git clone https://github.com/ghcjs/ghcjs-prim.git
git clone https://github.com/ghcjs/ghcjs.git
cabal install ./ghcjs ./ghcjs-prim
</code></pre>

<p>要用 GHCJS 之前，還要安裝一下環境的基本套件：</p>

<pre><code>ghcjs-boot --dev
</code></pre>

<p>如果一切順利的話就可以開始把 Haskell 程式轉成 JS 了，不過事情當然沒這麼簡單，首先 GHCJS 的套件和 GHC 的套件在本地是分開的，要裝給 GHCJS 環境的話，要加上 <code>--ghcjs</code> 的選項，例如：</p>

<pre><code>cabal install --ghcjs pandoc
</code></pre>

<p>這樣裝的套件才能夠讓 GHCJS 轉譯時使用，然後第二個問題就是上面這個指令其實裝不起來，因為 Pandoc 和 GHCJS 不相容，markup.rocks 的作者 Ozan Sener 其實有 fork 一份 Pandoc 針對這個問題作 <a href="https://github.com/osener/pandoc">patch</a>，所以安裝改成下面的指令：</p>

<pre><code>git clone git@github.com:osener/pandoc.git
cabal install --ghcjs ./pandoc
</code></pre>

<p>不過還是會有些問題，基本上就看缺什麼用 cabal 裝一下，然後有些錯誤要簡單修改一下程式碼，詳情不是很重要，因為接下來馬上有第三個問題，就是這樣裝起來後，會發現要成功的轉 markup.rocks 還是有問題，其中 reflex-dom 一直裝不起來，這個套件主要是拿來做網頁介面的，所以我把 <a href="https://github.com/osener/markup.rocks/blob/master/src/Main.hs">Main.hs</a> 內只和 pandoc 相關的抽出來，想建立一個只有 pandoc 單純一點的 Haskell 程式，然後一番努力後，終於成功了，這時同時出現兩個問題，第一個是產出的檔案超大，有 20MB 左右，markup.rocks 線上 demo 放的是有過 closure-compiler 的也還有 2.2MB，而另外一個問題，是我找不到程式可以讓我抓到輸出入的位置（嚴格來說有找到但是無法用），後來又查了些資料才發現，GHCJS 目前還沒辦法把 Haskell library 單獨轉譯然後開 API 出來，一定是一個完整的 Haskell 應用程式，然後編譯出來的 JS 就是執行這個程式，沒有外面插手的餘地，換句話說，就是所有事情都要用 Haskell 完成，然後用 GHCJS 編譯成一個獨立的 JavaScript 應用程式，GHCJS 的 <a href="https://github.com/ghcjs/ghcjs/issues/194">Issue 194</a> 就是在講這個問題，看起來離有結果還有些距離。</p>

<p>總之結論是，目前 GHCJS 還不到真的可拿來做應用的程度，最後遇到的兩個問題算是比較大的，就是輸出檔案太大和只能把整個應用程式轉譯成 JS 這兩個問題，不過事情總是要有開始，希望未來有一天這兩個問題能解決，就能夠把 Haskell 的一些工具轉到 JS 上了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000844" baseName="typescript-atscript-es-decorator">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-05-18</b:date>
				<b:time>18:24:37</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>TypeScript, AtScript, ES Decorator</b:title>
			<b:content>
				<b:summary> 前陣子花了些時間研究了 TypeScript 和一些相關的發展，包括了 Google Angular Team 的 AtScript 和推進 ES 標準的部分，會開始感興趣深入研究主要是因為 Angular 2 說改用 TypeScript 寫，好奇為什麼會有這樣的發展才下去搜尋資料的，這篇文章算是記錄用的，不過其實離寫好已經一陣子了，因為剛好遇到 Modern Web Conf，想說拿這題目去分享，就讓文章晚點上線了，後來投影片還有補充些內容，這篇文章就沒再更新了，所以兩邊會有些差異就是～ ECMAScript 標準一直以來都是動態型別的，雖然資料有不同的型別，但是變數本身是沒限制型別的，而在 ECMAScript 發展的過程中，靜態型別第一次出現是在已經被廢棄的 ECMAScript 4 裡，網路上還可以找到一些資料，可以看看當時設計的語法，和現在常看到的 :type 的寫法很接近，後來這個設計也在 ActionScript 3 中被使用，微軟現在的 TypeScript 也是用這種寫法。那加入靜態型別的特性會有什麼好處呢，我認為有兩個主要的優點，第一個是可以讓程式碼更可靠，減少一些 bug 發生的機會，對於大型專案來說，多了這個限制的差距是蠻大的，另外一個優點則是 JS Engine 更好最佳化，以前也有提過現在的 V8...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16813714825/" title="AtScript by othree, on Flickr"><img src="https://farm8.staticflickr.com/7639/16813714825_e15ff55b8b_b.jpg" width="1024" height="573" alt="AtScript" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7639/16813714825_e15ff55b8b.jpg 1x, https://farm8.staticflickr.com/7639/16813714825_e15ff55b8b_b.jpg 2x"  /></a></p>

<p>前陣子花了些時間研究了 TypeScript 和一些相關的發展，包括了 Google Angular Team 的 AtScript 和推進 ES 標準的部分，會開始感興趣深入研究主要是因為 <a href="http://blogs.msdn.com/b/typescript/archive/2015/03/05/angular-2-0-built-on-typescript.aspx">Angular 2 說改用 TypeScript 寫</a>，好奇為什麼會有這樣的發展才下去搜尋資料的，這篇文章算是記錄用的，不過其實離寫好已經一陣子了，因為剛好遇到 Modern Web Conf，想說拿這題目去分享，就讓文章晚點上線了，後來投影片還有補充些內容，這篇文章就沒再更新了，所以兩邊會有些差異就是～</p>

<p>ECMAScript 標準一直以來都是動態型別的，雖然資料有不同的型別，但是變數本身是沒限制型別的，而在 ECMAScript 發展的過程中，靜態型別第一次出現是在已經被廢棄的 ECMAScript 4 裡，網路上還可以找到一些<a href="http://www.ecmascript.org/es4/spec/overview.pdf">資料</a>，可以看看當時設計的語法，和現在常看到的 <code>:type</code> 的寫法很接近，後來這個設計也在 ActionScript 3 中被使用，微軟現在的 TypeScript 也是用這種寫法。那加入靜態型別的特性會有什麼好處呢，我認為有兩個主要的優點，第一個是可以讓程式碼更可靠，減少一些 bug 發生的機會，對於大型專案來說，多了這個限制的差距是蠻大的，另外一個優點則是 JS Engine 更好最佳化，以前也有提過現在的 V8 引擎就已經會判斷變數的型別會不會有變化來做最佳化了。</p>

<p>或許是因為微軟對於大型專案開發的關注比較多吧，他們於 2012 年推出了 <a href="http://www.typescriptlang.org/">TypeScript</a>，為 JavaScript 加入了靜態型別，用的語法很簡潔：</p>

<pre><code>var i:int;
var message:string;
</code></pre>

<p>另外還提供了當時沒有的 class 和之前提過的<a href="https://blog.othree.net/log/2014/12/04/typescript-definition/">定義檔</a>等東西，TypeScript 一開始是基於 ECMAScript 5 設計的，不過在 ECMAScript 6 差不多定案後，微軟也開始著手把 ES5 based 改成 ES6 based，像是 class 就會改用 ES6 原生的，而 TypeScript 所提供的靜態型別檢查功能其實是靜態分析而已，也就是只有在把 .ts 檔案編譯成 .js 檔案時會做檢查，而由於 JavaScript 還沒有 type 的特性，所以這些型別的資訊其實在編譯過後都會被拿掉。目前除了 AngularJS 2 改用 TypeScript 之外，還有像 <a href="https://eng.asana.com/2014/11/asana-switching-typescript/">Asana</a> 和 Mozilla 的 <a href="https://github.com/mozilla/shumway">Shumway</a> 都是用 TypeScript。</p>

<p>Google Angular Team 似乎對此還不夠滿足，因此他們開始發展 <a href="http://www.atscript.org/">AtScript</a>，在 TypeScript 上再加入 annotation 的功能，名稱的 At 代表的是 <code>@</code> 這個符號，因為這個符號是很多語言寫 annotation 用的符號，自然 AtScript 也是用這個符號來標記 Annotation：</p>

<pre><code>@Component({selector: 'foo'})
class MyComponent {
  @Inject()
  constructor(server:Server) {}
}
</code></pre>

<p>Annotation 簡單翻起來也是註解，不過他和 comment 不一樣，不是給人看，而是要給 compiler 和 JS engine 看的，而且實際上也會影響程式的一些運作，annotation 應該是一種完全沒有也不影響程式執行的 metadata，不過細分下去應該可以分為兩類，第一種是 Java 的 annotation，以 metadata 為主，像是物件的角色、物件間關係等，另外一種則是 decorator annotation，可以讓函數加上各種不同特性，其實就是 decorator pattern 的簡易語法，看到一些範例當中，最讓我覺得厲害的就是 memorize 了吧，如果程式引擎支援，加上一行 memorize 的 annotation 就可以讓那個函數自動有 memorize 特性，如果使用不支援此特性的引擎來執行程式，函數的輸出也不會有錯，就是沒有 memorize 的效果，效率會比較差，Python 中就有 <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache">lru_cache</a> 這個 decorator 可以做到這樣的效果（Python 的 decorator 語法是提供 syntax sugar，不過寫法和其它語言的 annotation 很像）:</p>

<pre><code>@lru_cache(maxsize=None)
def fib(n):
    if n &lt; 2:
        return n
    return fib(n-1) + fib(n-2)
</code></pre>

<p>AtScript 一個很重要的原則是這些附加的資訊，都要在 runtime 可以使用，所以就不像 TypeScript 那樣只是把不支援的東西拿掉而已，像上面費氏數列的程式碼如果改用 AtScript 寫會變成：</p>

<pre><code>@lru_cache()
function fib(n) {
  if (n &lt; 2) { return n; }
  return fib(n - 1) + fib(n - 2);
}
</code></pre>

<p>然後用 AtScript compiler 編譯過後會多上一段程式碼做類似下面的事情：</p>

<pre><code>fib.annotations = [
  new lru_cache(),
];
</code></pre>

<p>這個 <code>annotations</code> 屬性在 runtime 時就是可以取用的資訊，目前 AtScript 的 annotation  就是比較偏重於 metadata 而不是 decorator，所以這些資料並不會直接讓函數有不同特性，而 AtScript 另外一個新東西 introspection 也是和 runtime 有關，是 TypeScript 所沒有的 runtime 時的型別檢查，JavaScript 要怎樣做執行階段的型別檢查呢？沒錯，基本上就是土法煉鋼，不過 AtScript 是引入一個 rtts（run time type assertion） 的 library 來做這件事，目前主要也是用 Angular Team 維護的 <a href="http://angular.github.io/assert/">assert.js</a>，本來的 fib 再改寫一下：</p>

<pre><code>function fib(n:number):number {
    if (n &lt; 2) { return n; }
    return fib(n - 1) + fib(n - 2);
}
</code></pre>

<p>然後編譯過後大概會變成：</p>

<pre><code>function fib(n) {
  assert.argumentTypes(n, number);
  if (n &lt; 2) {
    return assert.returnType((n), number);
  }
  return assert.returnType((fib(n - 1) + fib(n - 2)), number);
}
</code></pre>

<p>可以看到不管是在函數開頭還是要回傳之前，都會多了用 assert.js 做型別檢查的程式碼，當然，多做的這些型別檢查是會造成效能影響的，所以 AtScript 把 runtime 的型別檢查分成兩個階段，開發階段和成品階段，成品階段，要上線的時候，就輸出不包含型別檢查的 js 程式碼，這樣就不會影響效能。AtScript 其實目前沒有自己的編譯器，而是使用 Google 的 <a href="https://github.com/google/traceur-compiler">Traceur</a>，Traceur 基本上是個 ES6 to ES5 compiler，不過實際上他還多一些非 ES6 標準的語法支援，包括了前面提到的 Type、Annotation，不過使用時要加些參數：</p>

<pre><code>traceur --annotations true --type-assertions --types true fib.ats --out fib.js
</code></pre>

<p>在 <a href="http://ngeurope.org/">ng-europe</a> 研討會，就有一場關於 AtScript 的演講：</p>

<div class="embed_16_9">
<iframe width="853" height="480" src="https://www.youtube.com/embed/lGdnh8QSPPk?rel=0" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>

<p>裡面除了基本的介紹，為什麼會發展 AtScript 之外，還有很重要的未來發展，Angular Team 是有打算把 Type、Annotation 等等特性推回 ECMAScript 未來的標準之中的。在 ECMAScript 標準的發展上，其實早在之前就有一些變數型別相關的功能在討論，包括了 <a href="http://wiki.ecmascript.org/doku.php?id=strawman:types">type</a>、<a href="http://wiki.ecmascript.org/doku.php?id=strawman:guards">guard</a>，不過都沒有進到目前的 ECMAScript 6(2015)，目前 AtScript 和 TypeScript 兩者正在逐漸互相同步，也有共同合作，而且 AtScript 還沒有嚴謹的 spec 文件，所以會看到官方發佈說 AngularJS 2 用 TypeScript 開發，而不是用 AtScript，目前看到 TC39 討論裡面，除了 type 之外，幫其它新東西提出 proposal 的，很令人意外，竟然是 Yehuda Katz，可以看到去年四月的<a href="https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-04/apr-10.md#decorators-for-es7">會議記錄</a>就有他提出 decorator 特性的討論，另外 TypeScript 的 <a href="https://github.com/Microsoft/TypeScript/issues/1557#issuecomment-77709527">Issue 1557</a> 是關於在 TypeScript 中加入 AtScript 的 annotation 支援，Yehuda Katz 也有提到他正在整理相關資料，幾週後會在 TC39 會議提出，在他的 github 帳號上也可以找到相關的<a href="https://github.com/wycats/javascript-decorators">資訊</a>，我個人對 Yehuda Katz 評價很高，不過實在是想不太到為什麼會是他跑出來推動這部分的發展，不過總之 Yehuda Katz 打算提出的是比現在 metadata 為主更進一步的 annotation，也就是包含像 Python decorator 特性的 annotation，如果真的順利成案，其實也不知道是好是壞，好的是一些程式碼可以更簡潔，壞的是 JavaScript 語法越來越多，入門要學的東西也變多很多。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000843" baseName="typescript-future-and-past">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-05-16</b:date>
				<b:time>15:03:02</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>TypeScript 過去、現在、未來</b:title>
			<b:content>
				<b:summary>今年 Modern Web Conf 的投影片喔，其實整份演講最重要的點就是 type 看來就是會進入 ECMAScript 了。 /* A_A */...</b:summary>
				<b:mainContent><p>今年 Modern Web Conf 的投影片喔，其實整份演講最重要的點就是 type 看來就是會進入 ECMAScript 了。</p>

<script async="async" class="speakerdeck-embed" data-id="b551e3b068aa4babb798c5e61c799b19" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000842" baseName="aster-postcss">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-05-02</b:date>
				<b:time>11:35:38</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Aster 與 PostCSS</b:title>
			<b:content>
				<b:summary> 前端為了 performance 需求，把網站推上 server 時會需要把 JavaScript、CSS 之類的文字檔案合併和最小化，如果開發時寫的是 CoffeeScript 或是 SASS 之類的還需要先轉成 JavaScript 和 CSS 這些主流格式，要做這些動作其實第一個想到的是可以用 Makefile，優點是常見、各平台都有，不過寫起來並不像這幾年流行的 build tool 那樣直覺，而前端領域流行的主要是 Grunt 和 Gulp 這兩個，兩者之中我個人是比較喜歡後起的 Gulp，不過前陣子意外發現一個看起來超正確的 build tool，叫 aster，是 Ingvar Stepanyan 做的，他在 Zurich 的 Frontend Conference 2014 的演講算是比較大規模的發佈：...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/17133620000/" title="台南 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7771/17133620000_64aac917c8_b.jpg" width="1024" height="683" alt="台南" srcset="https://farm8.staticflickr.com/7771/17133620000_64aac917c8.jpg 768w, https://farm8.staticflickr.com/7771/17133620000_3c43ee797f_k.jpg 2x" /></a></p>

<p>前端為了 performance 需求，把網站推上 server 時會需要把 JavaScript、CSS 之類的文字檔案合併和最小化，如果開發時寫的是 CoffeeScript 或是 SASS 之類的還需要先轉成 JavaScript 和 CSS 這些主流格式，要做這些動作其實第一個想到的是可以用 Makefile，優點是常見、各平台都有，不過寫起來並不像這幾年流行的 build tool 那樣直覺，而前端領域流行的主要是 <a href="http://gruntjs.com/">Grunt</a> 和 <a href="http://gulpjs.com/">Gulp</a> 這兩個，兩者之中我個人是比較喜歡後起的 Gulp，不過前陣子意外發現一個看起來超正確的 build tool，叫 <a href="http://asterjs.github.io/aster/">aster</a>，是 Ingvar Stepanyan 做的，他在 Zurich 的 Frontend Conference 2014 的演講算是比較大規模的發佈：</p>

<div class="embed_16_9">
<iframe width="853" height="480" src="https://www.youtube.com/embed/fF_jZ7ErwUY?rel=0" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>
</b:mainContent>
				<b:extendContent><p>Aster 這個名稱的來由是 AST，Aster 的特別之處就在於他所有的修改都是在 AST 上做修改：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/17141309009/" title="Aster by othree, on Flickr"><img src="https://farm8.staticflickr.com/7680/17141309009_fac4a51d86_b.jpg" width="1024" height="640" alt="Aster" srcset="https://farm8.staticflickr.com/7680/17141309009_fac4a51d86.jpg 768w, https://farm8.staticflickr.com/7680/17141309009_9f903156ca_k.jpg 2x" /></a></p>

<p>相較於 Gulp：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/17327152261/" title="Aster by othree, on Flickr"><img src="https://farm8.staticflickr.com/7662/17327152261_6de37ae977_b.jpg" width="1024" height="640" alt="Aster" srcset="https://farm8.staticflickr.com/7662/17327152261_6de37ae977.jpg 768w, https://farm8.staticflickr.com/7662/17327152261_ac75e48905_k.jpg 2x" /></a></p>

<p>和 Grunt：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/17327152081/" title="Aster by othree, on Flickr"><img src="https://farm8.staticflickr.com/7717/17327152081_7bd3f29f74_b.jpg" width="1024" height="640" alt="Aster" srcset="https://farm8.staticflickr.com/7717/17327152081_7bd3f29f74.jpg 768w, https://farm8.staticflickr.com/7717/17327152081_04e77878ff_k.jpg 2x" /></a></p>

<p>很明顯的是正確許多的設計，理論上 parse 成 AST 之後，一口氣在 AST 階段把需要的變更做完，然後再用 code generator 產生成果的程式碼，應該省去很多來回轉換的工作，不論是效能還是程式碼處理的正確性都應該是最好的，不過這看似正確設計下的產品，卻沒什麼人用，我嘗試使用過程中還發了幾個 PR 回去，結果到現在都還沒有回應，有種是不是作者都已經放棄的疑問。</p>

<p>然後這兩天，又看到一個其實已經出來蠻久的 compile to CSS language，叫 <a href="https://github.com/postcss/postcss">PostCSS</a>，號稱比 SASS 之類的快上 3-30 倍，還可以做到一些 SASS/LESS 做不到功能，也有很多大企業採用，像是 Google、VK、Alibaba 之類的，應該就是目前最夯的 CSS 工具，然後我看介紹的投影片看到這張：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/17301590026/" title="PostCSS by othree, on Flickr"><img src="https://farm8.staticflickr.com/7763/17301590026_184c69e66f_b.jpg" width="1024" height="638" alt="PostCSS" srcset="https://farm8.staticflickr.com/7763/17301590026_184c69e66f.jpg 768w" /></a></p>

<p>覺得，這根本和 Aster 是一樣的想法，不過一個處理 JavaScript，做 ES6 to ES5、concat、minimize 甚至是細微的程式碼修改，另外一個處理 CSS，也是做類似的工作，為什麼結果發展的差距會這麼大？想了一陣子之後，我覺得大概狀況是，SASS、LESS 之類的工具目前還是會造成一些讓開發者痛苦的問題，像是 nesting rule 讓 selector 太長太複雜、mixin 和 include 的混淆等等，所以開發者還會一直嘗試不同的新工具，甚至自己開發來解決這些問題，而相對於 CSS，JavaScript 的相關工具比較沒這些問題，二來 JavaScript 的 AST 比 CSS 的 AST 要複雜許多，要參與工具的開發難度是高上許多，Aster 作者的功力還蠻強的，除了 AST 操作之外，他的整個流程控制還用上很先進的 <a href="https://rxjs.codeplex.com/">RxJS</a>，其實也算是增加了參與的難度吧，而我想就是這沒有強烈需求加上進入難度高兩點，結果讓 Aster 並不太受到人注意，沒什麼人參與，開發的完整度不夠，我實際用起來，就覺得目前還只是核心完整，但是真的要離實用到專案上還有些距離，加上不知道還有沒有要繼續發展下去，覺得實在很可惜。</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000841" baseName="reactjs-conf">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-04-25</b:date>
				<b:time>15:41:59</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>React.js Conf</b:title>
			<b:content>
				<b:summary>今年的 React.js Conf 雖然是單一 library 的研討會，不過議程的水準卻是蠻高的，而且蠻多內容並不是只限於 React.js，加上也是對於前端領域一些比較新的概念，所以我覺得是這兩年最讓人感到印象深刻的一場研討會了吧，下面介紹幾場我覺得收穫比較多的講題： React Native React Native 是 React.js 最近最重大的發展，把本來抽出來的 DOM 底層換成 native app 的操作，原來寫 JavaScript 的開發者就可以直接用寫 React.js App 的方式來做原生介面的 Mobile App，發表時讓很多人眼睛一亮，沒想到會把 React.js 的 Virtual DOM 這樣用，而表現出來的效果也很讓人滿意，因為是用原生的控制元件，也不會有額外的親和力問題，加上現有的很多 JavaScript Library 都可以用，也不會有太多東西要自己從頭開始，Apache Cordova 的 plugin 也都可以使用，最近也正式對外公開了，有興趣的可以試試看。 CSP 之前我也有介紹過的...</b:summary>
				<b:mainContent><p>今年的 React.js Conf 雖然是單一 library 的研討會，不過議程的水準卻是蠻高的，而且蠻多內容並不是只限於 React.js，加上也是對於前端領域一些比較新的概念，所以我覺得是這兩年最讓人感到印象深刻的一場研討會了吧，下面介紹幾場我覺得收穫比較多的講題：</p>

<h4>React Native</h4>

<p>React Native 是 React.js 最近最重大的發展，把本來抽出來的 DOM 底層換成 native app 的操作，原來寫 JavaScript 的開發者就可以直接用寫 React.js App 的方式來做原生介面的 Mobile App，發表時讓很多人眼睛一亮，沒想到會把 React.js 的 Virtual DOM 這樣用，而表現出來的效果也很讓人滿意，因為是用原生的控制元件，也不會有額外的親和力問題，加上現有的很多 JavaScript Library 都可以用，也不會有太多東西要自己從頭開始，<a href="https://cordova.apache.org/">Apache Cordova</a> 的 plugin 也都可以使用，最近也正式對外<a href="https://facebook.github.io/react-native/">公開</a>了，有興趣的可以試試看。</p>

<div class="embed_16_9">
<iframe width="853" height="480" src="https://www.youtube.com/embed/KVZ-P-ZI6W4" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>

<h4>CSP</h4>

<p>之前我也有介紹過的 <a href="https://blog.othree.net/log/2015/02/14/csp/">CSP</a>，在 React.js Conf 也有講者介紹，雖然我覺得現在用 <a href="https://github.com/ubolonton/js-csp">js-csp</a> 來做 Channel 溝通還不是很好用，不過應該 async function 可以用之後會比較普遍吧，就算之後沒真的派上用場，要是轉行寫 Go 也會用的上才是。</p>

<div class="embed_16_9">
<iframe width="853" height="480" src="https://www.youtube.com/embed/W2DgDNQZOwo" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>

<h4>Immutable</h4>

<p>Immutable Data 已經聽說很久了，不過這場演講算是讓我第一次真的能有些體會到底優點在哪，雖然 Facebook 有 JavaScript 的 <a href="http://facebook.github.io/immutable-js/">Immutable library</a> ，不過這場主要是在介紹資料結構的特性，而不是在介紹自家 library，如果對他們底層如何實做的話還可以看看 Polymatheia 的 <a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1">Understanding Clojure's Persistent Vectors</a> 系列文章，單純要實做 Immutable Data 並不難，不過要考慮到不對效能產生影響其實還要考慮蠻多細節的，我後來也嘗試實做了一個 <a href="https://github.com/othree/immutable-quadtree-js">Immutable Quad Tree</a>，做的過程中則更實際的體會到所謂的只要簡單的 <code>==</code> 比對就可以知道資料是否相同的好處。另外還要補充一點，Immutable Data 可能在下一版的 ES7(2016) 也會有，總之又是個先學起來不吃虧的。</p>

<div class="embed_16_9">
<iframe width="853" height="480" src="https://www.youtube.com/embed/I7IdS-PbEgI" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>

<h4>AST</h4>

<p>這場演講是在講修改 Abstract Syntax Tree 來做一些程式碼的修改，算是把 AST 的應用講得很淺顯易懂的一場演講，還順便介紹到很多相關的工具，像是 <a href="https://github.com/estools">estools</a>，其實一個程式語言的 spec 通常只有定到語法的部分，後面 compiler 要產生什麼樣子的 AST 是他們自己決定的，不過通常會有個主流的格式，而目前 JavaScript 領域則是 Mozilla SpiderMonkey 的 AST 格式為主，不過其實因為應用太多，也有人在做標準化的工作，叫 <a href="https://github.com/estree/estree">estree</a>。</p>

<div class="embed_16_9">
<iframe width="853" height="480" src="https://www.youtube.com/embed/OZGgVxFxSIs" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000840" baseName="more-on-srcset">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-04-08</b:date>
				<b:time>00:53:33</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>srcset</b:title>
			<b:content>
				<b:summary>Responsive Image 大概定案成 srcset 和 &lt;picture&gt; 都有了，src-N 已經消失，雖然我還蠻喜歡，不過總之最近發現 srcset 和我當初介紹時已經差蠻多，中文資源有找到 Zhusee 有另外一篇介紹，不過其實我去看現在的 spec 的時候發現，又有些修改了！最早 srcset 後面是用類似 media query 的設計，後來改成對圖片的 metadata，spec 裡面稱為 descriptor，分別有 width descriptor 用 w 和 density descriptor 用 x，而且限制 srcset 裡面只能用同一種 descriptor，例如全部用 x 或是全部用 w，所以： 不能在一張圖片裡面同時有 w 和...</b:summary>
				<b:mainContent><p>Responsive Image 大概定案成 <code>srcset</code> 和 <code>&lt;picture&gt;</code> 都有了，src-N 已經消失，雖然我還蠻喜歡，不過總之最近發現 <code>srcset</code> 和我當初<a href="https://blog.othree.net/log/2012/12/02/srcset/">介紹</a>時已經差蠻多，中文資源有找到 Zhusee 有另外一篇<a href="http://blog.zhusee.in/post/248199/basic-responsive-image-with-srcset-property">介紹</a>，不過其實我去看現在的 spec 的時候發現，又有些修改了！最早 srcset 後面是用類似 media query 的設計，後來改成對圖片的 metadata，spec 裡面稱為 descriptor，分別有 width descriptor 用 <code>w</code> 和 density descriptor 用 <code>x</code>，而且限制 srcset 裡面只能用同一種 descriptor，例如全部用 <code>x</code> 或是全部用 <code>w</code>，所以：</p>

<ol>
<li>不能在一張圖片裡面同時有 <code>w</code> 和 <code>x</code></li>
<li>全部都用 <code>w</code> 或是全部都用 <code>x</code></li>
<li>不可有相同的數值，例如兩個 <code>1x</code> 或是兩個 <code>760w</code> </li>
<li>Descriptor 可以算是該圖片的資訊</li>
</ol>
</b:mainContent>
				<b:extendContent><p>不過最新的 spec 裡面少了第二點的限制，所以會有一組 srceset 混和 width descriptor 和 density descriptor 的情形，然後怎麼挑選圖片的<a href="https://html.spec.whatwg.org/multipage/embedded-content.html#select-an-image-source">地方</a>寫說：</p>

<blockquote>
  <p>In a user agent-specific manner, choose one image source from source set. Let this be selected source.</p>
</blockquote>

<p>就是叫瀏覽器自己想辦法的意思，我就很好奇，如果我想設定一組規則，要分成四個組合：</p>

<ul>
<li>小螢幕低密度</li>
<li>小螢幕高密度</li>
<li>大螢幕低密度</li>
<li>大螢幕高密度</li>
</ul>

<p>的話，我要怎樣設定 srcset 才能達到目標，因為現在已經不是用 media query 來寫 srcset 了，不能直接寫這樣四組，所以我就去找了 Firefox 和 Chromium 的原始碼來看看他們怎麼做的，Firefox 的找沒多久就<a href="https://dxr.mozilla.org/mozilla-central/source/dom/base/ResponsiveImageSelector.cpp#274">找到</a>了，因為他們有 <a href="https://github.com/mozilla/dxr">dxr</a> 專案用來方便找程式碼，實際用過覺得真的好用，至於 Chromium 就找比較久了，後來是在 <a href="https://github.com/WebKit/webkit/blob/master/Source/WebCore/html/parser/HTMLSrcsetParser.cpp#L232">WebKit 裡面</a>有找到，然後發現兩個瀏覽器的原理其實都一樣，要處理同時有 width descriptor 和 density descriptor 的狀況，基本上就是都轉成 density 然後來挑最適合的，作法大致如下，細節可能有誤：</p>

<ol>
<li>先對圖片標籤排版，這邊可能會用到 <code>sizes</code> 屬性，不過 CSS 還是優先，然後會得到圖片在頁面上的寬度，稱為 computed width</li>
<li>對每張候選圖片計算 effective pixel density，算法是： <code>圖片寬度 / computed width</code>，圖片寬度可以是 width descriptor 來的或是圖片的實際寬度，如果 descriptor 是 density descriptor 的話就不用計算，直接拿來用</li>
<li>比對 effective pixel density 和現在 device 螢幕的 density，取最接近的</li>
</ol>

<p>其中第三步驟的比較，大概是考慮效能和記憶體問題，兩個瀏覽器都沒真的做很嚴謹，都是照順序跑過一遍而已，所以在寫 srcset 的時候建議也要照圖片的大小排，至於要大的先還是小的先，就看開發者希望是 density 略大的優先還是略小的優先了，所以如果我寫：</p>

<pre><code>srcset="aaa.jpg 1x, bbb.jpg 1.4x, ccc.jpg 1.6x, ddd.jpg 2x"
</code></pre>

<p>然後我現在圖片需要 <code>1.5x</code> 的話，應該就會拿到 1.4x 的 <code>bbb.jpg</code>，而如果我偏好用 1.6x <code>ccc.jpg</code> 的話，就要改成：</p>

<pre><code>srcset="ddd.jpg 2x, ccc.jpg 1.6x, bbb.jpg 1.4x, aaa.jpg 1x"
</code></pre>

<p>後來發現這個挑選圖片的原則，其實在 WHATWG 的 <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#embedded-content">HTML Spec 裡面有寫</a>，不過是 non-normative 的段落，就是說這不是一定要遵守，只是建議，而且前面也有提到 spec 內是寫說挑選的原則是瀏覽器自己處理，而會這樣設計相信是為了像 mobile device 之類的裝置，網路速度如果比較慢，或是需要節省流量時，就可以挑選比較小的檔案，而不一定是挑出顯示上最好的那張圖片。</p>

<p>最後，其實 descriptor 除了 density 和 width 兩種之外，還有一種 height descriptor，不過目前只是保留可能性，spec 還沒定義要怎樣處理，其實還蠻能理解目前會以寬度為主的狀況，在 Matt Brubeck 的 Let's build a browser engine! 系列文章中的第六篇「<a href="http://limpet.net/mbrubeck/2014/09/17/toy-layout-engine-6-block.html">Block layout</a>」這篇文章有介紹到一般瀏覽器是怎樣排版畫 layout 的，而其處理的原則就是先從左上角開始把東西往右排，所以寬度一定先決定，然後才決定高度，相信這也是垂直置中搞這麼多年的原因吧。</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000839" baseName="loader">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-04-05</b:date>
				<b:time>14:50:09</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Loader</b:title>
			<b:content>
				<b:summary>Loader 是 ECMAScript 定義要來處理 module import/export 等等事情的底層介面，ES6 的 module 我一直都很好奇，到底要怎麼去找 import 進來模組的原始碼，會好奇這點是因為如果是網頁環境，所有其它模組的原始碼一定是在遠端的 server 上，要拿到勢必是一個 request，然後還要等下載，總之就是非同步的流程，以前在 ES5 的話，要做非同步控制大概就是要做成 callback 的形式，所以會有像 AMD 那樣的設計出來，加上 module 名稱和檔案名稱可能又有差別，像是差個副檔名之類的，而 ES6 提供了原生的 import/export 語法來定義 module，所以我就很好奇它的底層要怎樣設計才能標準化。...</b:summary>
				<b:mainContent><p>Loader 是 ECMAScript 定義要來處理 module import/export 等等事情的底層介面，ES6 的 module 我一直都很好奇，到底要怎麼去找 import 進來模組的原始碼，會好奇這點是因為如果是網頁環境，所有其它模組的原始碼一定是在遠端的 server 上，要拿到勢必是一個 request，然後還要等下載，總之就是非同步的流程，以前在 ES5 的話，要做非同步控制大概就是要做成 callback 的形式，所以會有像 <a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md">AMD</a> 那樣的設計出來，加上 module 名稱和檔案名稱可能又有差別，像是差個副檔名之類的，而 ES6 提供了原生的 import/export 語法來定義 module，所以我就很好奇它的底層要怎樣設計才能標準化。</p>
</b:mainContent>
				<b:extendContent><p>Addy Osmani 有建立一個 Loader 的 polyfill 給 ES5 環境使用 Loader API，就叫做 <a href="https://github.com/ModuleLoader/es6-module-loader">ES6 Module Loader Polyfill</a>，這個 polyfill 內部實做是照當初 ES6 draft 來寫的，其實還蠻複雜，不過把讀取一個 module 的事情拆分一下，可以分成以下幾個步驟：</p>

<ol>
<li>Normalize：根據給的名稱取得實際的 module name</li>
<li>Locate：根據實際的 module name 取得 module 的位置</li>
<li>Fetch：根據 module 位置去取得檔案內容</li>
<li>Translate：如果有需要對檔案內容作任何修改，就在這裡處理</li>
<li>Instaniate：最後是根據檔案內容（程式碼），判斷有哪些相依模組和知道如何初始化這個模組</li>
</ol>

<p>以上幾個步驟是屬於 Loader 可自訂化的部分，到 instaniate 完成後，Loader 就繼續去讀其它相依的模組，相依模組都準備好之後，就可以使用模組的的程式碼，正式的把模組建立起來，ES spec 細部還定義了很多實做細節，像是非同步的操作都是用 Promise 來做流程控制，還有 Loader 也有個 module 的 registry 可以來保存已經讀好的模組，就不用一直重新建立，另外還有一些內部溝通的資料結構，像 instaniate 步驟要回傳一個物件，裡面有兩個屬性分別是 <code>deps</code> 和 <code>execute</code>， <code>deps</code> 是相依模組名稱的陣列， <code>execute</code> 則是該模組本身的初始化函數，參數的數量要剛好和相依模組數量一樣，回傳的則是 Module 物件等等。</p>

<p>其實目前的 ES6 spec draft 已經把 Loader 拿掉了，TC39 決定把他獨立出來，目前是 WHATWG 接手<a href="https://github.com/whatwg/loader">繼續</a>，最新的版本已經改很大了，看起來感覺有簡化不少，不過上面的五個步驟基本上還是存在，我一開始看到這五個步驟加上說可以自訂還沒什麼感覺，只是覺得奇怪為什麼細節沒寫，沒錯，這五個步驟在 spec draft 都只有介紹目的，不像其它的操作有詳細的寫出 method 內的流程，關鍵的地方就在於 JavaScript 已經不是單純只是在瀏覽器上跑的語言了，把這部分抽象化就是為了讓它可以同時在瀏覽器環境和單機環境下都可以實做，根據不同的 JS 環境去實做相對應的步驟細節，像是 <code>fetch</code> 在瀏覽器下就是真的用 fetch 去拉檔案，但是在 node 下就變成讀檔案，而在 ES6 Module Loader Polyfill 下，就有實做一組瀏覽器環境下的操作，不過這組操作的實做未來也不會真的進到瀏覽器內，最大的問題在於第五個步驟的 instaniate。</p>

<p>Instaniate 這個步驟是要實做 ES6 module 一個很關鍵的部分，關鍵之處在於要把 module 的 dependency 找出來，在 ES6 module 裡面，有一個限制是每個 module 都必須要獨立一個檔案，所以不能一個檔案定義兩個 module，然後假設瀏覽器已經支援 ES6 module 了，只要 parse 程式碼成 AST 找出裡面的 <code>import</code> 就可以把 dependency 列出來。不過現在是 polyfill，瀏覽器也還不支援 <code>import</code>，所以要實做 instaniate 自然需要能處理這個問題，ES6 Module Loader Polyfill 的作法是使用 transpiler，目前支援 <a href="https://github.com/google/traceur-compiler">Traceur</a> 和 <a href="https://babeljs.io/">Babel</a>，把本來用 <code>import</code> 、 <code>export</code> 寫的模組轉成用類似的 AMD 模組定義的型式，而這邊用的型式是 <a href="https://github.com/systemjs/systemjs">systemjs</a> 裡面提供的 <a href="https://github.com/systemjs/systemjs/blob/master/lib/extension-register.js">System.register</a>，這個方法本身並不是 ES spec 裡面定義的，比較像是為了處理這尷尬時間點所設計的替代方案。</p>

<p>本來我是想看看，是不是能夠只靠 Loader 就把 ES6 的 module 機制在現在的瀏覽器上建立起來，結果發現只靠 ES6 Module Loader Polyfill 是辦不到的，Loader API 並沒有定義模組的語法，如果用 ES6 的語法來定義模組還需要 transpiler 來從程式碼中分析出 module dependency，不過我不太想要把整包 transpiler 也放到 translate 裡面用，雖然可以自己寫一個什麼事情都不做的 translate function，但是要解決 dependency 的話還是會需要像 <code>System.register</code> 的幫助，總之到這邊，可以發現一個重點是，Loader 不管 module 定義的方法，雖然假想情境下是用 ES6 module 語法，每個檔案代表一個 module，然後用 <code>import</code> 和 <code>export</code> 來定義相依模組和提供的 method，不過其實 Loader 也是可以處理 AMD、<a href="http://www.commonjs.org/specs/modules/1.0/">CommonJS</a> 甚至是 <a href="https://nodejs.org/api/modules.html">NodeJS</a> 型式的模組定義，只是要有人去實做這部分的 translate 和 instantiate 的部分，而 SystemJS最新版（0.16）就是這樣一個專案，它號稱是 universal module loader，支援 AMD、CommonJS、NodeJS 和 ES6 的模組定義，然後在最新的版本，改成使用 ES6 Module Loader Polyfill 的機制來做 module 的讀取、相依性的判斷和模組初始化，雖然有些地方沒有真的照之前的 spec 來實做。</p>

<p>另外一個之前不太清楚的問題也藉此搞清楚了，ES6 module 有限制一個檔案定義一個 module，而現在的 web application 常常為了效能問題，都把多個檔案合併成一個檔案，這時就不能用 ES6 module 了，當然也可以用像現在 SystemJS 的作法來處理，不過其實再過一兩年 HTTP/2 普及後，也不需要這樣搞了，會變成只需要 minimize，這部分倒是還可以接受。</p>

<p>ES6 裡面的 Loader 本身其實是一個 constructor，放在另外一個 ES6 提供的新東西 <code>Reflect</code> 下面，而用 <code>Reflect.Loader</code> 建立 Loader instance 時可以順便給他一些參數，像是前面提到的讀模組的五個步驟的實做，或是領域（realm），而 <code>System</code> 物件則是該 JS 環境下的預設的 Loader，理論上如果是瀏覽器環境，它就會知道怎樣去 fetch 遠端的程式碼回來，如果是 NodeJS 就會改用 file system 讀檔案，而且也知道要把模組放到那個 realm（理論上不同 frame 就是不同 realm），這樣大部分的使用都可以用 <code>System</code> 就好了，只有很少數的情形需要自己建立 Loader。其實上面說的 Loader API 不知道為什麼是移到 WHATWG 之後，幾乎是重新開始編寫，完整度欠佳，有些章節還是空的，另外也沒有定義 <code>System</code> 或是其它的新的替代方案，所以現在想要看看到底 Loader 內部怎麼做的話，要看舊版的 spec，可以去抓 2014 年 8 月的 <a href="http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#august_24_2014_draft_rev_27">ES6 draft rev 27</a> 然後看看 CH 26, 15，對照 ES6 Module Loader Polyfill 的程式碼可能比好懂。</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000838" baseName="ecmascript-6-final-draft">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-03-30</b:date>
				<b:time>18:34:07</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>ECMAScript 6 Final Draft Approved</b:title>
			<b:content>
				<b:summary>Ecma-TC39 just approved the final ES6 draft. It now goes to the Ecma General Assembly for approval in June- Allen Wirfs-Brock (@awbjs) 2015 3月 24日 剛剛看到說 ECMAScript 2015(ES6) 定稿了，最後一版草稿是 RC4（還沒 release），接下來會是 ECMA 認證流程的樣子，不過繼續下一版的討論也不會中斷，順便要說一下他們最後 approve 的地方是在 H.R. Giger 博物館的酒吧，超酷的，這是畫異形那位大師的博物館。 Celebrated w/@rebeccawb...</b:summary>
				<b:mainContent><blockquote class="twitter-tweet" lang="zh-tw"><p>Ecma-TC39 just approved the final ES6 draft. It now goes to the Ecma General Assembly for approval in June</p>- Allen Wirfs-Brock (@awbjs) <a href="https://twitter.com/awbjs/status/580321916403216384">2015 3月 24日</a></blockquote>

<p>剛剛看到說 ECMAScript 2015(ES6) 定稿了，最後一版草稿是 RC4（還沒 release），接下來會是 ECMA 認證流程的樣子，不過繼續下一版的討論也不會中斷，順便要說一下他們最後 approve 的地方是在 H.R. Giger 博物館的酒吧，超酷的，這是畫異形那位大師的博物館。</p>

<blockquote class="twitter-tweet" lang="zh-tw"><p>Celebrated w/<a href="https://twitter.com/rebeccawb">@rebeccawb</a>  TC39 approval of ES6, at H.R. Giger Museum in Gruyère <a href="http://t.co/uEKzfozxX2">pic.twitter.com/uEKzfozxX2</a></p>- Allen Wirfs-Brock (@awbjs) <a href="https://twitter.com/awbjs/status/582239060539904000">2015 3月 29日</a></blockquote>

<script async="async" src="//platform.twitter.com/widgets.js" charset="utf-8"><!-- --></script>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000837" baseName="for-the-entire-web">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-03-28</b:date>
				<b:time>13:25:25</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>For the Entire Web</b:title>
			<b:content>
				<b:summary>這陣子有兩件事情引起我的一些注意，覺得值得寫下，兩件事情我覺得其實本質上是同一件事情，先來看一下第一件事情，就是 Daniel Yoder 寫了篇文章 React Is A Terrible Idea，這篇文章在 React 當紅的時間出現，自然引起很多人的不滿，隨便在 Google 上搜尋就可以找到一堆回應，我自己對於 React 其實是沒特別感覺，沒有喜歡也沒有覺得它做錯什麼，真的要說的話大概還有點覺得它方向正確，我是認為 React 和 Angular 的 directive 都在把 component 的觀念引入前端工程師的視野之中，而這對於 Web Component 的發展應該會是有正面影響的。 再回到 Terriable Idea 這篇文章，作者對 React 的評論我其實不完全認同，最後面有提到用 Web Component 而不要用 React，這部分我覺得是作者誤會了 React 的角色，不過有些地方有人說 React 明明就可以和...</b:summary>
				<b:mainContent><p>這陣子有兩件事情引起我的一些注意，覺得值得寫下，兩件事情我覺得其實本質上是同一件事情，先來看一下第一件事情，就是 Daniel Yoder 寫了篇文章 <a href="https://www.pandastrike.com/posts/20150311-react-bad-idea">React Is A Terrible Idea</a>，這篇文章在 React 當紅的時間出現，自然引起很多人的不滿，隨便在 Google 上搜尋就可以找到一堆回應，我自己對於 React 其實是沒特別感覺，沒有喜歡也沒有覺得它做錯什麼，真的要說的話大概還有點覺得它方向正確，我是認為 React 和 Angular 的 directive 都在把 component 的觀念引入前端工程師的視野之中，而這對於 Web Component 的發展應該會是有正面影響的。</p>

<p>再回到 Terriable Idea 這篇文章，作者對 React 的評論我其實不完全認同，最後面有提到用 Web Component 而不要用 React，這部分我覺得是作者誤會了 React 的角色，不過有些地方有人說 React 明明就可以和 Web Component 合作，還附上 ng-conf 的<a href="https://www.youtube.com/watch?v=g0TD0efcwVg">演講影片</a>，我到覺得他們也完全沒搞清楚作者的重點在哪裡；提到 Flipboard 的 <a href="https://github.com/flipboard/react-canvas">react-canvas</a> 那部分算是我認為最能表現出作者想要講什麼的，作者想說的重點是現在的網路環境有限制、有問題，但是遇到時不要用一些旁門左道的方法來處理，因為這些問題終究會被解決，而問題被解決時，你之前所花的時間和資源就等於是完全浪費掉，與其要浪費在走旁門左道，還不如把這些時間和資源用在從正確的地方解決這個問題，而最後受惠的不只是自己，還有所有網際網路的開發者、使用者，這是從一個很高等生命體的角度來看事情，就如同這篇文章的標題：「For the Entire Web」，要你犧牲自己的部分利益去成就整體網際網路的利益，當然這是有些理想化，很多商業公司可能要短時間就有產品出來，不太可能所有的開發在遇到問題時都停下來等瀏覽器或是標準齊備，但是對於不少的大型企業，我就覺得他們確實應該要好好正確的回饋網路環境來解決這些問題，像是文中提到 Facebook，還有接下來要說的 Google，不過他說 Facebook 是為了和 Google 競爭才開發 React 之類的論點我就不予評論了，太多臆測～</p>

<p>可能有人會說，有沒有這些資源的投入應該差距也不大吧，最近就剛好有另外一件事情可以佐證，<a href="http://news.dartlang.org/2015/03/dart-for-entire-web.html">Dart for the Entire Web</a> 這篇 Dart 官方的公告說到，Dart VM 將不會進入到 Chrome 裡面，也就是說要在瀏覽器上跑 Dart，將還是只有轉成 JavaScript 這個選項，這件事其實是蠻大的一件事，上一個在網頁裡面跑的另外一種語言是微軟的 VBScript，最大的問題不在於好不好寫，而是在於他被單一企業把持，不過後來結果大家也都知道，所以當 Google 推出 Dart 而且說以後 Chrome 會可以直接跑 Dart 的時候，我想大部分人都是都不看好的，甚至部分人是覺得 Google 怎麼做微軟做過的蠢事。而剛好在這個官方公告出來後幾天內，Brendan Eich 在 Hacker News 上回應一串討論<a href="https://news.ycombinator.com/item?id=9269355">回應</a>的蠻激動的，這串本來是在說 ECMAScript 新版本有很多東西根本是從 Dart 來的，Brendan Eich 則是反駁說很多東西在 Dart 出來前就已經在討論有 Proposal 了，然後到後來寫了一篇幾乎都在抱怨 Dart，還提到 V8 team reset 的事情，從這邊看起來，似乎是因為新的 V8 team 不打算作 Dart VM 進去，才有了 Dart 那篇公告；而 Brendan Eich 抱怨的重點，其實就是前面那段提到的，Google 花了超多人力資源去搞 Dart，而不是來幫忙改進既有的 ECMAScript，而這確實有實際的影響，他舉了一個例子，就是大數(<a href="http://wiki.ecmascript.org/doku.php?id=strawman:bignums">bignums</a>)的支援，Dart 有支援，在 ES 這邊目前有一點可能性會在 ES7(2016) 中出來，但這東西其實從 2010 就已經開始有討論了，如果有人來將這些討論規格化，並實做起來，那大數應該在現在的 ES6(2015) 就有了。</p>

<p>最後再回到 Terriable Idea 這篇文章，我雖然不完全認同他對 React 的看法，但是我認為他的重點沒錯，如果他拿 Dart 出來講可能就不會引出這麼多砲火吧（可是可能也比較沒人注意），其實 react-canvas 我覺得也是很有趣的實驗，不過做成正式產品上線就是另外一回事了，最大的問題，他為了終會被解決的次要問題（畫面不流暢）完全放棄了親和力的問題，而 Flipboard 這種內容為主的產品性質是不該放棄親和力的。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000836" baseName="vim-syntax-regexp-note">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-03-18</b:date>
				<b:time>18:45:07</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Vim Syntax and Regexp Note</b:title>
			<b:content>
				<b:summary>前陣子為了寫更好的 Vim syntax 還去學了 compiler 的課程，雖然沒上完不過也對怎麼解析語法理解不少，不過其實 Vim syntax highlight 系統為了效能問題，有不少限制，沒辦法真的和 compiler 的 parse 原理完全互通，其中兩個限制影響比較大，第一個是沒辦法有完整的 AST 並解析其語意，因此除非寫得非常繁複，一定會有無法正確 highlight 的地方，例如 comment，不是說 comment 不能正確標示，問題是 comment 可以插入在很多地方，像是參數序列的中間，function 關鍵字和後面 () 的中間等等，幾乎是可以放空白字元的地方就可以放 comment，然後不會影響程式語意，本來，不考慮註解時，我可以用 skipwhite、skipempty 然後加上 nextgroup 就可以指定下一個 token 是什麼，以 JavaScript function declaration 來說： function fn (a)...</b:summary>
				<b:mainContent><p>前陣子為了寫更好的 Vim syntax 還去學了 compiler 的課程，雖然沒上完不過也對怎麼解析語法理解不少，不過其實 Vim syntax highlight 系統為了效能問題，有不少限制，沒辦法真的和 compiler 的 parse 原理完全互通，其中兩個限制影響比較大，第一個是沒辦法有完整的 AST 並解析其語意，因此除非寫得非常繁複，一定會有無法正確 highlight 的地方，例如 comment，不是說 comment 不能正確標示，問題是 comment 可以插入在很多地方，像是參數序列的中間，<code>function</code> 關鍵字和後面 <code>()</code> 的中間等等，幾乎是可以放空白字元的地方就可以放 comment，然後不會影響程式語意，本來，不考慮註解時，我可以用 <code>skipwhite</code>、<code>skipempty</code> 然後加上 <code>nextgroup</code> 就可以指定下一個 token 是什麼，以 JavaScript function declaration 來說：</p>

<pre><code>function fn (a) {}
</code></pre>

<p>這樣的程式碼我把他拆成四個部分，function keyword、function name、function parameter、function body，然後用 Vim syntax 語法設定：</p>

<pre><code>syntax keyword javascriptFuncKeyword function nextgroup=javascriptFuncName skipwhite
syntax match   javascriptFuncName    contained /\k\+/ nextgroup=javascriptFuncParam skipwhite
syntax match   javascriptFuncParam   contained /([^()]*)/ nextgroup=javascriptFuncBody skipwhite
syntax region  javascriptFuncBody    contained start=/{/ end=/}/
</code></pre>

<p>除了 function keyword 外都有 <code>contained</code>，用途是讓該 rule 不會在 TOP region 下生效，一個好處是減少 TOP region 下要檢查的 rule 數量，另一個好處是有些相同的 token pattern，但是其實語意上是不一樣的，可以盡量用這種機制拆分開來，到這裡都還很美好，但是加上 comment 後問題就變複雜了，先簡單寫一下 comment 的 syntax rule：</p>

<pre><code>syntax region  javascriptComment     start=/\/\*/ end=/\*\//
</code></pre>

<p>然後 comment 可以放在哪些地方呢：</p>

<pre><code>function /*cc*/ fn (a) {}
function fn /*cc*/ (a) {}
function fn (a) /*cc*/ {}
</code></pre>

<p>也就是本來 nextgroup 連接的地方都可以插入個 comment，可是只要插入了 comment，後面的 token 就不會被正確 highlight，因為 comment 的 rule 沒有 nextgroup，所以他的部分結束後就會回到用 TOP region 的情境，而後面應該符合的 rule 都有設上 <code>contained</code>，所以就沒機會對到。當然現在要解決這個問題也不是沒方法可以避開，但是非常不好看，就是如下的設計：</p>

<pre><code>syntax keyword javascriptFuncKeyword function nextgroup=javascriptFuncName,comment1 skipwhite
syntax match   javascriptFuncName    contained /\k\+/ nextgroup=javascriptFuncParam,comment2 skipwhite
syntax match   javascriptFuncParam   contained /([^()]*)/ nextgroup=javascriptFuncBody,comment3 skipwhite
syntax region  javascriptFuncBody    contained start=/{/ end=/}/

syntax region  comment1     start=/\/\*/ end=/\*\// nextgroup=javascriptFuncName,comment1 skipwhite
syntax region  comment2     start=/\/\*/ end=/\*\// nextgroup=javascriptFuncParam,comment2 skipwhite
syntax region  comment3     start=/\/\*/ end=/\*\// nextgroup=javascriptFuncBody,comment3 skipwhite
</code></pre>

<p>如此可以確保 comment 插入也不會讓後面的 token 沒 highlight，但是這樣的設計，實際寫起來會非常繁瑣，完全不想去研究 JavaScript 中會有多少類似的狀況。其實我是覺得 Vim syntax 應該是希望盡量都用前後獨立的 rule 來 highlight，盡量不要有前後相依的關係存在，就不會有上面的問題，也可以讓 highlight 過程比較單純，理想上是從頭開始，一個 token 一個 token 各自獨立的 highlight，不過是事情當然沒這麼簡單，第二個想記錄下來的事情也和這個有關係。</p>

<p>假設目前 highlight 處理中，parse 到一個 <code>=</code>，然後看到一組小括號 <code>(a)</code>，連起來如下：</p>

<pre><code>= (a)
</code></pre>

<p>這時你會覺得 <code>(a)</code> 是什麼呢？是小括號，裡面是一個 expression 然後回傳變數 <code>a</code> 嗎？相信很多人會這樣認為，如果他後面是接分號的話：</p>

<pre><code>= (a);
</code></pre>

<p>但是其實也可能是這樣子的：</p>

<pre><code>= (a) =&gt; {}
</code></pre>

<p>ES6 的 arrow function，也就是說，如果一個 token 一個 token 解析，一定無法直接知道目前 token 代表的正確意義，所以 compiler 把程式碼轉成 AST 的時候，有時候會先往後面看一下來判斷現在的 token 到底是什麼意義。然而 Vim syntax 系統並沒有這種能力，嚴格來說，是可以用 match 來達成，不過還是很受限制。再來則是往前看的問題，我在設定運算子的 match rule 的時候，會希望嚴謹一點，本來想在兩邊加上 word boundary 的 pattern，在 Vim 裡面是 <code>\&lt;</code> 和 <code>\&gt;</code>，不過測試幾回發現，我的字元本身不是文字字元的話，這個 pattern 是沒有用的：</p>

<pre><code>/\&lt;word
</code></pre>

<p>這樣是有效的，但是下面想要 match <code>==</code> 的會沒用：</p>

<pre><code>/\&lt;==
</code></pre>

<p>所以變成要自己寫往前看的 regexp，在 Vim 裡面有兩種類似的東西可以用，分別是 <code>\zs</code> 和 <code>\@&lt;=</code>，通常，<code>\zs</code> 效能比較好，會推薦使用，他的用途是標註你的 regexp 的 match 的起點，當然同時也有一個 <code>\ze</code> 是終點：</p>

<pre><code>/abcd\zsefgh\zeijkl
</code></pre>

<p>上面這串 regexp 的目標是 <code>efgh</code>，但是他的前後分別是 <code>abcd</code> 和 <code>ijkl</code>，實際執行時會去找 <code>abcdefghijkl</code> 這串字串，完整比對到之後，只會回中間的 <code>efgh</code> 作為 match 的範圍，這設計要做一些操作的時候就會有差，像是文字取代。本來我就想要用這個來做 syntax，可是就發現還是不生效，所以改成用 <code>\@&lt;=</code> 試試看：</p>

<pre><code>/\(abcd\)\@&lt;=efgh\@=\(ijkl\)
</code></pre>

<p>就發現成功了，想了許久才理解其原因，然後才瞭解，真的往前看的是 <code>\@&lt;=</code>，<code>\zs</code> 並沒有往前看，兩者最大的差異在於 pattern match 操作的起點，一般的使用大概感覺不太到差異，不過像是 syntax highlight 這種一個 token 一個 token 逐步處理的就會有差，當目標是 <code>efgh</code> 時，通常處理進度到 <code>e</code> 這個位置時，前面的 <code>abcd</code> 已經被處理過了，所以這時候會和 regexp 比對的字串就變成 <code>efghijkl</code>，使用 <code>\zs</code> 的話，因為它還是要完整比對到 <code>abcdefghijkl</code>，起點是 <code>a</code>，就不會和 <code>efghijkl</code> 相符，但是用 <code>\@&lt;=</code> 的話，pattern 的起點是 <code>efgh</code> 的 <code>e</code>，這樣就可以 match 到目前剩餘的字串了。</p>

<p>前面說的個 token 一個 token 逐步處理的問題還有一個情形也讓我困擾很久，不過這次不是東西被用掉，問題是沒被用掉。這個狀況發生在巢狀結構的 region，像是 JavaScript 的 block：</p>

<pre><code>syntax region  javascriptBlock start=/{/ end=/}/
</code></pre>

<p>然號要讓 block 裡面可已有 block 就要用 <code>contains</code>：</p>

<pre><code>syntax region  javascriptBlock start=/{/ end=/}/ contains=javascriptBlock
</code></pre>

<p>這時候就會發生奇怪的現象了，因為外面的 region 包括了頭尾的括號，然後進入 block 內要做 syntax match 的時候，一開始的 <code>{</code> 又 match 到 block，結果 Vim 就直接覺得這已經是第二層的 block 了，雖然好像有其它機制讓他不會一直循環下去變成無限多層，不過這樣還是會造成後面的 code 有被判斷錯誤的機會，因為 block 的開關不 match，這裡的關鍵也是要讓 <code>{</code> 和 <code>}</code> 被處理掉，進入 region 內部就不會跑到上一層的起點，而這裡要用的就是 <code>matchgroup</code>：</p>

<pre><code>syntax region  javascriptBlock matchgroup=bracks start=/{/ end=/}/ contains=javascriptBlock
</code></pre>

<p>如此就都會正常了，因為這樣的設定會讓 <code>{</code> 和 <code>}</code> 直接被當成 <code>bracks</code> 這個 group，然後就被當成已經被解析過的 token，從它的下一個 token 繼續 highlight 分析，但是千萬不要另外加上 <code>bracks</code> 的 syntax rule，剛好又 match 到 region 的起點和終點：</p>

<pre><code>syntax match   bracks  /[{}]/
</code></pre>

<p>這樣的話也會發生其它的怪異現象，總之 nested region 的重點在於，要用 matchgroup，然後不要用和 matchgrouop 同樣名稱，同樣 pattern 另外又設定一組 rule。</p>

<p>最後一個要紀錄的則是 Vim syntax 裡面的優先度，基本上是 keyoword 優先度最高，也就是有 match 到 keyword 的話，你的 match pattern 就都無效了，所以像是 JavaScript 裡面，label 雖然不可以用關鍵字，像是 <code>continue:</code> 就不合法，但是因為會先 match 到 <code>continue</code> 關鍵字，所以就很難用 syntax highlight 來標出這種錯誤，而在 keyword 比對完之後，才輪的到 region 和 match，兩者是同樣權重，但是後定義的優先，而且不受 <code>contains</code> 和 <code>nextgroup</code> 裡面的順序影響，搞清楚優先順序在做細部的 syntax highlight 的時候還蠻重要的。另外要順便說說 region contains 和 nextgroup 的差異，nextgroup 其實還蠻不錯的，他不是限制下一個 token 一定是哪些東西，而是改變優先順序，先檢查完 nextgroup 裡面的東西，再檢查該 region 下的其它可能性，region contains 就不一樣了，該 region 裡面只有在 contains 裡面的東西會出現，另外還要特別注意一點，region 的處理並不管該 region 能不能正確的關閉，只要 match 到起點，就會把 region 打開，然後剛剛有提到，region 和 match 是同樣權重的所以就要非常注意：</p>

<pre><code>syntax match  javascriptLabel       /\k\+:/
syntax region javascriptLabelblock  start=/\k\+: {/ end=/}/
</code></pre>

<p>這樣兩條 syntax highlight rule 然後配上下面的程式碼：</p>

<pre><code>abcd: {
  var ii = 1 + 1;

var jj = 2 + 2;
</code></pre>

<p>要注意我的 block 其實沒有結束，但是結果 Vim 只會 match 到 label block 那條規則，而且由於一直找不到 region 的結束點，所以下面的 <code>var jj</code> 那行也是被認為在 block 內。</p>

<p>最後的最後要推薦一下 <a href="https://github.com/gerw/vim-HiLinkTrace">gerw/vim-HiLinkTrace</a> 這個 Vim plugin，可以很完整的 trace syntax highlight 的狀況。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000835" baseName="macbook-2015">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-03-12</b:date>
				<b:time>23:43:36</b:time>
			</b:datetime>
			<b:category>mac</b:category>
			<b:title>MacBook 2015</b:title>
			<b:content>
				<b:summary>前兩天發表的 MacBook 很多人不看好，不過我倒是很看好的那邊，連我都想買了，不到一公斤但是確是台完整的 OSX 電腦，有正常大小的鍵盤、感壓觸控版，加上 Retina Display，買一台金色的去咖啡廳簡直要橫著走了，不過更讓我好奇的是它竟然沒取代 Air，Air 還比較重真是情何以堪，我推測比較可能的發展是 Air 產品線未來會收掉，回到之前兩條產品線的狀況。 另外還有一點讓我很好奇的就是觸控版的部分，一來是好奇他的感壓加上震動回饋操作起來的感覺 ，二來是 MacBook Pro 13 吋有更新，但是 15 吋卻沒更新，要知道相較於 13 吋 MBP，15 吋更新的頻率實在是低很多，在這個新觸控版的更新上竟然還沒有 15 吋的，實在不太合理，所以我猜蘋果是等另外一個產品出來：27 吋 5K 的 Cinema Display，可能很多人不知道，蘋果之前出的 iMac 5K 和以往不一樣，不能當作外接螢幕，其中一個最大的原因是目前通行的傳輸介面還不能傳輸到 5K 解析度，市場上的 DisplayPort 幾乎都是 1.2，至少要到 1.3 才有辦法處理...</b:summary>
				<b:mainContent><p>前兩天發表的 MacBook 很多人不看好，不過我倒是很看好的那邊，連我都想買了，不到一公斤但是確是台完整的 OSX 電腦，有正常大小的鍵盤、感壓觸控版，加上 Retina Display，買一台金色的去咖啡廳簡直要橫著走了，不過更讓我好奇的是它竟然沒取代 Air，Air 還比較重真是情何以堪，我推測比較可能的發展是 Air 產品線未來會收掉，回到之前兩條產品線的狀況。</p>

<p>另外還有一點讓我很好奇的就是觸控版的部分，一來是好奇他的感壓加上震動回饋操作起來的感覺
，二來是 MacBook Pro 13 吋有更新，但是 15 吋卻沒更新，要知道相較於 13 吋 MBP，15 吋更新的頻率實在是低很多，在這個新觸控版的更新上竟然還沒有 15 吋的，實在不太合理，所以我猜蘋果是等另外一個產品出來：27 吋 5K 的 Cinema Display，可能很多人不知道，蘋果之前出的 iMac 5K 和以往不一樣，不能當作外接螢幕，其中一個最大的原因是目前通行的傳輸介面還不能傳輸到 5K 解析度，市場上的 DisplayPort 幾乎都是 1.2，至少要到 1.3 才有辦法處理 5K 解析度，iMac 5K 發表則只比 DisplayPort 1.3 晚一個月左右，蘋果除了要等 DisplayPort 1.3 之外，還有另外一個就是這次 MacBook 的主角之一：USB 3.1 Type-C，這條新的介面真的很強，除了向下相容外，可以反差，可以傳更多電力，傳輸資料量當然更大，還可以傳輸影像訊號，用的就是 DisplayPort 規格，嚴格說來是 DisplayPort  規範有個 Alternate Mode 可以使用其它線材做傳輸，而 DisplayPort 1.3 理想最高資料量的情況下（其實就是 5K 解析度）都還塞不滿 USB 3.1，可以邊傳完整 5K 畫面邊傳資料。我的猜測就是 15 吋 MBP 下次更新除了新的觸控版外，還有 USB 3.1 Type-C，更強的顯示卡，然後同場加映 27 吋 5K 的 Cinema Display，用 USB 3.1 Type-C 連接，同時供電，傳資料，以前 Cinema Display 那條三頭的線就一條 USB 解決了。</p>

<p>最後話題回來 MacBook，其實我覺得這台打的目標消費者族群很明確，就是買 MacBook Air 的那個族群，MacBook Air 剛出來其實是比 MacBook 還要高級一點的，現在兩邊角色正好互換，其實也是蠻有趣的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16606304008/" title="MacBook_OP90_Tilt_Gld-PRINT by othree, on Flickr"><img src="https://farm8.staticflickr.com/7603/16606304008_fcb25667a4_b.jpg" width="607" height="1024" alt="MacBook_OP90_Tilt_Gld-PRINT" srcset="https://farm8.staticflickr.com/7603/16606304008_fcb25667a4.jpg 768w, https://farm8.staticflickr.com/7603/16606304008_35277c0292_k.jpg 2x" /></a></p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000834" baseName="csp">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-02-14</b:date>
				<b:time>15:26:33</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>CSP</b:title>
			<b:content>
				<b:summary> Communicating Sequential Processes，簡稱 CSP，和 Content Security Policy 不一樣，是用來處理非同步執行序之間溝通的一個數學模型，我最早是在 Addy Osmani 的 JavaScript Application Architecture On The Road To 2015 這篇文章裡面看到的，花了蠻多時間試著去瞭解，最近終於覺得懂一點皮毛可以紀錄一下了。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16440158642/" title="CSP by othree, on Flickr"><img src="https://farm9.staticflickr.com/8598/16440158642_62042f3837_b.jpg" width="791" height="1024" alt="CSP" srcset="https://farm9.staticflickr.com/8598/16440158642_62042f3837.jpg 768w, https://farm9.staticflickr.com/8598/16440158642_62042f3837_b.jpg 2x" /></a></p>

<p>Communicating Sequential Processes，簡稱 CSP，和 Content Security Policy 不一樣，是用來處理非同步執行序之間溝通的一個數學模型，我最早是在 Addy Osmani 的 <a href="https://medium.com/@addyosmani/javascript-application-architecture-on-the-road-to-2015-d8125811101b">JavaScript Application Architecture On The Road To 2015</a> 這篇文章裡面看到的，花了蠻多時間試著去瞭解，最近終於覺得懂一點皮毛可以紀錄一下了。</p>
</b:mainContent>
				<b:extendContent><p>CSP 其實不是新東西，是 <a href="http://en.wikipedia.org/wiki/Tony_Hoare">C. A. R. Hoare</a> 在 1978 年就發表的<a href="http://www.cs.ucf.edu/courses/cop4020/sum2009/CSP-hoare.pdf">論文</a>(PDF)，1985 還出了整本書來介紹，而且<a href="http://www.usingcsp.com/cspbook.pdf">全文 PDF</a> 都有在網路上，可是這本書實在太理論了，看了一點點就看不下去，只好找其它資源，發現還真的蠻少的，但是確有找到一些近幾年的實做，像是 Go 的 routine 間用 channel 溝通，或是 Clojure 的 core.async，當然 Addy Osmani 那篇也有提到 JavaScript 的部分。</p>

<p>根據我目前淺薄的理解，CSP 就是用 channel 的非同步溝通機制，channel 怎麼用呢，顧名思義，就是一個傳遞訊息用的頻道，不過我覺得用管線可以更精確的描述它，而且這是一個單向的管線，一邊只能傳訊息進去，一邊只能拿訊息出來，可以達成非同步的溝通最主要在於拿訊息這邊，當你在其中一個 process 中說你要跟某個 channel 拿一個訊息出來時，如果那個 channel 裡面沒有東西，則這邊的 process 就會停下來等到那個 channel 有訊息出現，這個等待的機制不同語言有各自的方法實做。</p>

<p>先來看看 Go 的範例吧，因為實在是比 JavaScript 的直覺多了：</p>

<pre><code>package main
import "fmt"

func main() {
    messages := make(chan string, 1)

    messages &lt;- "ping"

    msg := &lt;-messages
    fmt.Println(msg)
}
</code></pre>

<p>這段程式碼是基於 Go by Example 說明 channel 的<a href="https://gobyexample.com/channels">範例</a>，程式碼很好理解，<code>messages := make(chan string, 1)</code>這行用 make 產生一個 channel 指派給 messages 這個變數，<code>messages &lt;- "ping"</code> 表示把 "ping" 這個字串丟進去 message 這個 channel 裡面，然後 <code>msg := &lt;-messages</code> 表示從 message channel 裡面抓訊息出來，丟到 msg 這個變數，<code>:=</code> 是指派同時宣告變數的運算子，<code>&lt;-</code> 則是用來描述操作中訊息傳遞方向用的運算子，當它是箭頭就很好理解，在 Go 裡面稱為 <a href="https://golang.org/ref/spec#Receive_operator">receive operator</a>。</p>

<p>在第一個例子當中，因為是先送資料進去 channel 才拿出來，所以還不太有感覺，接下來看第二個例子，一樣是 Go by Example 的，這段是 <a href="https://gobyexample.com/channel-synchronization">Channel Synchronization</a> 的範例：</p>

<pre><code>package main

import "fmt"
import "time"

func worker(done chan bool) {
    fmt.Print("working...")
    time.Sleep(time.Second)
    fmt.Println("done")

    done &lt;- true
}

func main() {

    done := make(chan bool, 1)
    go worker(done)

    &lt;-done
}
</code></pre>

<p>這個範例稍微複雜一點，<code>done := make(chan bool, 1)</code> 先產生一個 done channel，然後用 <code>go worker(done)</code> 產生一個 concurrent routine，跑的是 worker 這個 function，內容在 main 的上面，基本上就是 sleep 一下然後傳訊息回 done channel，然後 main 最後的 <code>&lt;-done</code> 就是從 done channel 拿訊息出來，先不管平行出去的 routine，通常的程式跑到這行結束，整個程式就結束關閉了，不過，就是這個不過，正常情況下，有 <code>&lt;-channel</code> 的話，該 routine 程式執行到這邊就會暫停下來，直到有從 channel 裡面拿到訊息才會繼續跑下去（或是裡面已經有訊息，直接拿到就繼續往下）。</p>

<p>Go 的 channel 還有一些細節可以參考 <a href="http://guzalexander.com/2013/12/06/golang-channels-tutorial.html">Golang channels tutorial</a> 這篇文章，其實就是一個可以跨 routine 的傳遞資料的管道，資料可以一直傳，沒有限制數量，不過還有一些相關的細節，像是 sync channel，還有 channel 的 buffer 等等。</p>

<p>綜合以上的兩個範例，可以歸納出來，要支援 CSP 有兩個必要條件，第一個是可以做得出 channel 物件的機制，可以放資料進去，可以拿資料出來，是先進先出機制，這部分其實不是問題，問題是第二個條件，程式碼要能跑一跑停下來等訊息然後又繼續跑下去，這可不是用 <code>while (1)</code> 可以處理的狀況，用 recursive function call 效能也不太好，以前的 JavaScript 是無法良好的達成第二個條件的，直到 ES6 的 async function 出現。</p>

<p>ES6 async function 之前有<a href="https://blog.othree.net/log/2014/05/24/es6-iterable/">文章</a>介紹過，這邊就不再說明，不過總之就是執行到 <code>yield</code> 後，這個 function call 就會先停下來，把值傳出，直到下次再次執行該 function 才會繼續往下執行，這樣停下來的機制，正好可以利用來作為 CSP 等訊息的機制，不過利用 <code>yield</code> 的話有一個限制，就是一定要在 async function 裡面才可以利用 channel，不像 Go 由於是建在語言裡面的，main thread 也可以跟 channel 溝通。</p>

<p>雖然說可以利用 async function 可以做出 CSP 的架構出來，不過要只用 async function 來寫出像 Go 那樣簡短的程式碼實在是很困難，中間還有很多機制需要補起來，所以就開始有 library 實做，目前最有名的是 <a href="https://github.com/ubolonton/js-csp">js-csp</a>，Facebook 最近的 React.js Conf 其中一場議程介紹 CSP 時也是用 js-csp 做範例，錄影在這，作為入門 CSP 我覺得是蠻不錯的一場演講：</p>

<iframe width="853" height="480" src="https://www.youtube.com/embed/W2DgDNQZOwo?list=PLb0IAmt7-GS1cbw4qonlQztYV1TAW0sCr" frameborder="0" allowfullscreen="allowfullscreen"></iframe>

<p>js-csp 裡面其實做了很多事情，目前看起來像是參考 Go 來設計，例如這樣的 Go <a href="http://talks.golang.org/2013/advconc.slide#6">程式碼</a>：</p>

<pre><code>package main
import "fmt"
import "time"

type Ball struct{ hits int }

func player(name string, table chan *Ball) {
    for {
        ball := &lt;-table
        ball.hits++
        fmt.Println(name, ball.hits)
        time.Sleep(100 * time.Millisecond)
        table &lt;- ball
    }
}

func main() {
    table := make(chan *Ball)
    go player("ping", table)
    go player("pong", table)

    table &lt;- new(Ball) // game on; toss the ball
    time.Sleep(1 * time.Second)
    &lt;-table // game over; grab the ball
}
</code></pre>

<p>改成用 js-csp 寫的話就變成：</p>

<pre><code>function* player(name, table) {
  while (true) {
    var ball = yield csp.take(table);
    if (ball === csp.CLOSED) {
      console.log(name + ": table's gone");
      return;
    }
    ball.hits += 1;
    console.log(name + " " + ball.hits);
    yield csp.timeout(100);
    yield csp.put(table, ball);
  }
}

csp.go(function* () {
  var table = csp.chan();

  csp.go(player, ["ping", table]);
  csp.go(player, ["pong", table]);

  yield csp.put(table, {hits: 0});
  yield csp.timeout(1000);
  table.close();
});
</code></pre>

<p>用 <code>csp.chan</code> 產生 channel，用 <code>yield csp.take</code> 代替從 channel 取訊息，用 <code>yield csp.put</code> 代替送訊息到 channel，然後最重要的是用 <code>csp.go</code> 來代替從 Go 裡面用 <code>go</code> 產生 routine 的操作，然後不說可能沒人注意到，js-csp 把 routine(<a href="https://github.com/ubolonton/js-csp/blob/master/src/impl/process.js">process</a>)、<a href="https://github.com/ubolonton/js-csp/blob/master/src/impl/dispatch.js">ticker</a> 等比較底層的基礎建設都做起來了，也就是如此才能讓程式碼和 Go 的看起來這麼接近。</p>

<p>js-csp 基本上就是仿照 Go 的的語法來設計，只是常常需要 yield，語法還是不如 Go 來的簡潔，至於何種情境比較適合使用 CSP 呢，以 channel 的特性來說，目前看起來是常常會發生的 event 比較適合，像是常常被拿出來講的 mousemove 事件，另外就是有要分 thread 做平行運算的話也不錯，不過目前看起來是無法接上 WebWorker，主要是因為 <code>postMessage</code> 無法傳遞物件 instance 過去，而是會<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/The_structured_clone_algorithm">複製</a>一份；另外因為 channel 可以關起來，所以要用來實做 Promise 也不是不行，不過就沒什麼必要如此搞就是。</p>

<p>講到做事件的處理，應該會有人注意到實做上的細節問題，就是要怎麼讓多個 process 去讀取同一個 channel 呢，一般而言，channel 的訊息是只能讀取一次的，就是說雖然你可以多個 process 等同一個 channel 的訊息，但是只會有一個 process 會真的拿到新的訊息，而實務上，一個事件綁了多個 handler 的情形非常常見，照 channel 的機制，應該是不能用下去的，不然就要自己管裡 handler，又多繞了一圈，事實上，CSP 模型是有一些<a href="https://github.com/ubolonton/js-csp/blob/master/src/csp.operations.js">運算</a>可以用的，像要處理多個 handler 的問題，就可以用 <code>mult</code>，可以把一個 channel 轉成<a href="http://rupsshankar.tumblr.com/post/66648884392/demystifying-core-asyncs-tap-and-mult">一對多</a>，其它還有多對一的 share resource、Clojure 的 onto <a href="http://www.slideshare.net/borgesleonardo/clojure-reducers-cljsyd-aug-2012?ref=http://www.leonardoborges.com/writings/presentations/">等等</a>，應該是想的到的情形都已經有數學模型或是不同語言的實做可以處理了，不過 js-csp 在這部分還在開發中，像是 mult 就還在 beta 階段，其實還不太能真的用，作者有說現在的介面可能會改，也因此還沒寫到文件裡面。</p>

<p>最後想要記錄一下 Clojure 所提出的 transducer，transducer 的目的是讓 reduce 的操作可以用 compose 來組合，什麼是 reduce  操作呢，其實包括像 map、filter 都可以算是，但是這些操作以前是無法用 function composition 來做組合的，直到有了 transducer，又加上 transducer 把處理資料的型別也 decouple 出去了，所以 channel message 也可以利用。有兩篇文章可以參考，第一篇文章是 <a href="http://phuu.net/2014/08/31/csp-and-transducers.html">CSP and transducers in JavaScript</a>，這篇講得非常清楚，他是從無到有把 transducer 建構起來，我是第二次認真看這篇文章才理解的，另外一篇文章是 <a href="http://jlongster.com/Transducers.js--A-JavaScript-Library-for-Transformation-of-Data">Transducers.js: A JavaScript Library for Transformation of Data</a>，是 Transducer.js 的作者寫的，從不太一樣的角度來看 Transducer 這個設計，有機會再來分享詳細一點。</p>

<p>這篇文章其實也不算是介紹或教學 CSP on JavaScript，比較是記錄一些我花時間想辦法理解的問題，包括為什麼現在才有人用 JavaScript 實做 CSP，實際上怎麼實做，目前適用的地方，還有整理了對 transducer 的理解，如果單純是想理解 CSP，除了前面提到的文章之外，還有幾篇文章可以參考 <a href="https://swannodette.github.io/2013/08/24/es6-generators-and-csp/">ES6 Generators Deliver Go Style Concurrency</a>、<a href="http://jlongster.com/Taming-the-Asynchronous-Beast-with-CSP-in-JavaScript">Taming the Asynchronous Beast with CSP Channels in JavaScript</a>。</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000833" baseName="tokyo-illumination">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-02-10</b:date>
				<b:time>23:49:05</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>東京點燈</b:title>
			<b:content>
				<b:summary> 去年底去那趟東京主要的目標之一是看聖誕的燈飾，日本人喜歡用 Illumination 這個字，如果是用這個字的話，翻譯起來就變成是點燈了，總之，本來主要的目標大概就是六本木 Midtown、Caretta 汐留和台場富士電視台三個，不過日本聖誕節前真的是到處都有燈飾，上面第一張照片就是 Midtown 裡面的景色了。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16179501782/" title="東京 Midtown Illumination by othree, on Flickr"><img src="https://farm8.staticflickr.com/7469/16179501782_e2bf9e5441_b.jpg" width="1024" height="683" alt="東京 Midtown Illumination" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7469/16179501782_e2bf9e5441.jpg 1x, https://farm8.staticflickr.com/7469/16179501782_e2bf9e5441_b.jpg 2x" src-2="https://farm8.staticflickr.com/7469/16179501782_073c18e1ce_k.jpg 2x" /></a></p>

<p>去年底去那趟東京主要的目標之一是看聖誕的燈飾，日本人喜歡用 Illumination 這個字，如果是用這個字的話，翻譯起來就變成是點燈了，總之，本來主要的目標大概就是六本木 Midtown、Caretta  汐留和台場富士電視台三個，不過日本聖誕節前真的是到處都有燈飾，上面第一張照片就是 Midtown 裡面的景色了。</p>
</b:mainContent>
				<b:extendContent><p>其實在羽田機場就有了，用小燈點綴的樹枝。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16180233965/" title="東京 羽田機場 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7476/16180233965_30d7dd550d_b.jpg" width="683" height="1024" alt="東京 羽田機場" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7476/16180233965_30d7dd550d.jpg 1x, https://farm8.staticflickr.com/7476/16180233965_30d7dd550d_b.jpg 2x" src-2="https://farm8.staticflickr.com/7476/16180233965_00bcaf33a9_k.jpg 2x" /></a></p>

<p>接著去了 Midtown，這邊排隊的人就很多，要繞來繞去，最後才走到展區，平常展區那塊草地和步道是直接可以走過去的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15994464187/" title="東京 Midtown Illumination by othree, on Flickr"><img src="https://farm8.staticflickr.com/7503/15994464187_f9e10f6a73_b.jpg" width="1024" height="683" alt="東京 Midtown Illumination" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7503/15994464187_f9e10f6a73.jpg 1x, https://farm8.staticflickr.com/7503/15994464187_f9e10f6a73_b.jpg 2x" src-2="https://farm8.staticflickr.com/7503/15994464187_9205f30315_k.jpg 2x" /></a></p>

<p>主要展區，有不斷輪撥的表演，藍光配上音效營造出讓人置身未來世界的感覺。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15557892534/" title="東京 Midtown Illumination by othree, on Flickr"><img src="https://farm8.staticflickr.com/7489/15557892534_a34eea8f8e_b.jpg" width="1024" height="683" alt="東京 Midtown Illumination" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7489/15557892534_a34eea8f8e.jpg 1x, https://farm8.staticflickr.com/7489/15557892534_a34eea8f8e_b.jpg 2x" src-2="https://farm8.staticflickr.com/7489/15557892534_808451b2ce_k.jpg 2x" /></a></p>

<p>去森大樓看東京鐵塔後，就在裡面發現天花板上的雪花燈飾。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16179485552/" title="東京 六本木 森大樓 by othree, on Flickr"><img src="https://farm9.staticflickr.com/8678/16179485552_bcbfb958e5_b.jpg" width="683" height="1024" alt="東京 六本木 森大樓" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8678/16179485552_bcbfb958e5.jpg 1x, https://farm9.staticflickr.com/8678/16179485552_bcbfb958e5_b.jpg 2x" src-2="https://farm9.staticflickr.com/8678/16179485552_7ecbe87ce3_k.jpg 2x" /></a></p>

<p>然後是森大樓外面的聖誕樹，很特別的設計，基本上是拍不太起來的設計，只能故意對不準焦來讓顏色顯現。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15560455013/" title="東京 六本木 森大樓 by othree, on Flickr"><img src="https://farm9.staticflickr.com/8665/15560455013_79a812fdf6_b.jpg" width="683" height="1024" alt="東京 六本木 森大樓" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8665/15560455013_79a812fdf6.jpg 1x, https://farm9.staticflickr.com/8665/15560455013_79a812fdf6_b.jpg 2x" src-2="https://farm9.staticflickr.com/8665/15560455013_4f116cb7d6_k.jpg 2x" /></a></p>

<p>到箱根的小王子博物館也有聖誕樹和特別的投影表演。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15993952618/" title="箱根 小王子博物館 星の王子さまミュージアム by othree, on Flickr"><img src="https://farm8.staticflickr.com/7560/15993952618_d6f5768f3f_b.jpg" width="1024" height="683" alt="箱根 小王子博物館 星の王子さまミュージアム" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7560/15993952618_d6f5768f3f.jpg 1x, https://farm8.staticflickr.com/7560/15993952618_d6f5768f3f_b.jpg 2x" src-2="https://farm8.staticflickr.com/7560/15993952618_764244f18d_k.jpg 2x" /></a></p>

<p>然後是之前介紹過的 Disney TIMELESS STORY。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15999327639/" title="新丸大樓 魔髮奇緣 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7531/15999327639_d7e1eef74b_b.jpg" width="1024" height="683" alt="新丸大樓 魔髮奇緣" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7531/15999327639_d7e1eef74b.jpg 1x, https://farm8.staticflickr.com/7531/15999327639_d7e1eef74b_b.jpg 2x" src-2="https://farm8.staticflickr.com/7531/15999327639_e723a6ccb4_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15999578907/" title="丸大樓 Frozen by othree, on Flickr"><img src="https://farm9.staticflickr.com/8587/15999578907_2502cbddb4_b.jpg" width="1024" height="683" alt="丸大樓 Frozen" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8587/15999578907_2502cbddb4.jpg 1x, https://farm9.staticflickr.com/8587/15999578907_2502cbddb4_b.jpg 2x" src-2="https://farm9.staticflickr.com/8587/15999578907_89f9909fce_k.jpg 2x" /></a></p>

<p>兩棟丸大樓後面的仲通り也裝飾的很漂亮，本來在六本木沒看到的街道燈飾也在這邊看到了></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16185368255/" title="丸の内仲通り イルミネーション 丸之內仲通 illumination by othree, on Flickr"><img src="https://farm8.staticflickr.com/7562/16185368255_7920432223_b.jpg" width="1024" height="683" alt="丸の内仲通り イルミネーション 丸之內仲通 illumination" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7562/16185368255_7920432223.jpg 1x, https://farm8.staticflickr.com/7562/16185368255_7920432223_b.jpg 2x" src-2="https://farm8.staticflickr.com/7562/16185368255_dd326fadf9_k.jpg 2x" /></a></p>

<p>然後是東京郵政總局改的 Kitte 裡面也有聖誕樹，而且也有固定的表演。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16184598772/" title="Kitte by othree, on Flickr"><img src="https://farm9.staticflickr.com/8566/16184598772_751560bbd9_b.jpg" width="1024" height="683" alt="Kitte" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8566/16184598772_751560bbd9.jpg 1x, https://farm9.staticflickr.com/8566/16184598772_751560bbd9_b.jpg 2x" src-2="https://farm9.staticflickr.com/8566/16184598772_4e494dc35c_k.jpg 2x" /></a></p>

<p>這是旅館附近的大樓，回去時剛好看到。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15562993324/" title="東京 田町 by othree, on Flickr"><img src="https://farm9.staticflickr.com/8584/15562993324_591684a8a2_b.jpg" width="1024" height="683" alt="東京 田町" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8584/15562993324_591684a8a2.jpg 1x, https://farm9.staticflickr.com/8584/15562993324_591684a8a2_b.jpg 2x" src-2="https://farm9.staticflickr.com/8584/15562993324_a48c5bd1de_k.jpg 2x" /></a></p>

<p>再來就是彩色的彩虹橋。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16007370108/" title="彩虹橋 by othree, on Flickr"><img src="https://farm9.staticflickr.com/8563/16007370108_0e2501b4f9_b.jpg" width="1024" height="683" alt="彩虹橋" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8563/16007370108_0e2501b4f9.jpg 1x, https://farm9.staticflickr.com/8563/16007370108_0e2501b4f9_b.jpg 2x" src-2="https://farm9.staticflickr.com/8563/16007370108_b851522356_k.jpg 2x" /></a></p>

<p>小小的台場點燈。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15575022383/" title="台場  illumination by othree, on Flickr"><img src="https://farm8.staticflickr.com/7478/15575022383_44e08d2af3_b.jpg" width="1024" height="683" alt="台場  illumination" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7478/15575022383_44e08d2af3.jpg 1x, https://farm8.staticflickr.com/7478/15575022383_44e08d2af3_b.jpg 2x" src-2="https://farm8.staticflickr.com/7478/15575022383_3630dd6cd8_k.jpg 2x" /></a></p>

<p>目標之二的富士電視台，還蠻有趣的，不過其實內容都是在廣告，然後現場直接用肉眼看會發現畫面太大，點陣圖看不太出來是什麼，透過相機小螢幕反而可以看的出來。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16009043237/" title="富士電視台 illumination by othree, on Flickr"><img src="https://farm8.staticflickr.com/7583/16009043237_b71b09e830_b.jpg" width="1024" height="683" alt="富士電視台 illumination" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7583/16009043237_b71b09e830.jpg 1x, https://farm8.staticflickr.com/7583/16009043237_b71b09e830_b.jpg 2x" src-2="https://farm8.staticflickr.com/7583/16009043237_b9c3878cab_k.jpg 2x" /></a></p>

<p>第一次到台場 Decks，他外面也有一顆聖誕樹。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16194829755/" title="台場 Decks by othree, on Flickr"><img src="https://farm8.staticflickr.com/7552/16194829755_f9ae1de7dc_b.jpg" width="1024" height="683" alt="台場 Decks" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7552/16194829755_f9ae1de7dc.jpg 1x, https://farm8.staticflickr.com/7552/16194829755_f9ae1de7dc_b.jpg 2x" src-2="https://farm8.staticflickr.com/7552/16194829755_1cde8ad1d8_k.jpg 2x" /></a></p>

<p>目標之三的 Caretta  汐留，最喜歡的點，剛好走天橋過去，從上面看的時候真的有種異世界的感覺，在下面人很多沒機會這樣感覺～</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16203842762/" title="Caretta  汐留 Illumination by othree, on Flickr"><img src="https://farm9.staticflickr.com/8610/16203842762_3a4695db7f_b.jpg" width="1024" height="683" alt="Caretta  汐留 Illumination" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8610/16203842762_3a4695db7f.jpg 1x, https://farm9.staticflickr.com/8610/16203842762_3a4695db7f_b.jpg 2x" src-2="https://farm9.staticflickr.com/8610/16203842762_7936f95dd4_k.jpg 2x" /></a></p>

<p>這裡其實還可以排隊去照相，幾乎都是情侶，然後表演很頻繁，大概 15 分一次，在表演間的空檔才輪流拍照，另外也可以去走走道，穿過燈光的隧道，也是表演間的空檔一次開放一批人。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16202775001/" title="Caretta  汐留 Illumination by othree, on Flickr"><img src="https://farm9.staticflickr.com/8658/16202775001_c0d468fa97_b.jpg" width="1024" height="683" alt="Caretta  汐留 Illumination" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8658/16202775001_c0d468fa97.jpg 1x, https://farm9.staticflickr.com/8658/16202775001_c0d468fa97_b.jpg 2x" src-2="https://farm9.staticflickr.com/8658/16202775001_27ff2a51e5_k.jpg 2x" /></a></p>

<p>Caretta  汐留點燈晚上很漂亮，不過白天經過的話，就會夢想破滅了～～</p>

<p>迪士尼樂園裡面也有很大的聖誕樹。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16049979098/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7564/16049979098_b79bdbaed1_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7564/16049979098_b79bdbaed1.jpg 1x, https://farm8.staticflickr.com/7564/16049979098_b79bdbaed1_b.jpg 2x" src-2="https://farm8.staticflickr.com/7564/16049979098_9937dee4dc_k.jpg 2x" /></a></p>

<p>最後一天到銀座也看到一些特別的裝飾，像是 BVLGARI 的蛇。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16077055787/" title="BVLGARI 銀座 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7527/16077055787_c339145a3e_b.jpg" width="683" height="1024" alt="BVLGARI 銀座" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7527/16077055787_c339145a3e.jpg 1x, https://farm8.staticflickr.com/7527/16077055787_c339145a3e_b.jpg 2x" src-2="https://farm8.staticflickr.com/7527/16077055787_f3bc2b7aae_k.jpg 2x" /></a></p>

<p>還有其中一條小路的路燈。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16261121991/" title="Ginza by othree, on Flickr"><img src="https://farm9.staticflickr.com/8572/16261121991_eef742a898_b.jpg" width="1024" height="683" alt="Ginza" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8572/16261121991_eef742a898.jpg 1x, https://farm9.staticflickr.com/8572/16261121991_eef742a898_b.jpg 2x" src-2="https://farm9.staticflickr.com/8572/16261121991_4da229e19b_k.jpg 2x" /></a></p>

<p>以上就是這趟看到的聖誕燈飾了，有一些聖誕節過後就沒有了，有一些會維持到新年過後，所以如果瞄準這個來看的話還是要聖誕節前就到，數量真的是很多，日本好浪費電的啊～～</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000832" baseName="tokyo_tower">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-02-03</b:date>
				<b:time>23:29:21</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>Tokyo Tower</b:title>
			<b:content>
				<b:summary> 去年底去日本的主要目標是看聖誕燈飾，結果而言是真的看到很多各式各樣的聖誕燈飾，不過另外還有一個收穫是也看到很多的東京鐵塔，第一張是森大樓的標準色。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15557880724/" title="東京 六本木 森大樓 夜景 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7482/15557880724_a066ddf5df_b.jpg" width="1024" height="683" alt="東京 六本木 森大樓 夜景" srcset="https://farm8.staticflickr.com/7482/15557880724_a066ddf5df.jpg 768w, https://farm8.staticflickr.com/7482/15557880724_461641b926_k.jpg 2x" /></a></p>

<p>去年底去日本的主要目標是看聖誕燈飾，結果而言是真的看到很多各式各樣的聖誕燈飾，不過另外還有一個收穫是也看到很多的東京鐵塔，第一張是森大樓的標準色。</p>
</b:mainContent>
				<b:extendContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16154446766/" title="東京 六本木 森大樓 夜景 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7463/16154446766_bef5a1c9d8_b.jpg" width="1024" height="683" alt="東京 六本木 森大樓 夜景" srcset="https://farm8.staticflickr.com/7463/16154446766_bef5a1c9d8.jpg 768w, https://farm8.staticflickr.com/7463/16154446766_db1655b096_k.jpg 2x" /></a></p>

<p>鑽石點燈。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16154465746/" title="Tokyo Tower by othree, on Flickr"><img src="https://farm8.staticflickr.com/7560/16154465746_c0a1f43024_b.jpg" width="1024" height="683" alt="Tokyo Tower" srcset="https://farm8.staticflickr.com/7560/16154465746_c0a1f43024.jpg 768w, https://farm8.staticflickr.com/7560/16154465746_447c0dc48e_k.jpg 2x" /></a></p>

<p>從第一間旅館 Grand Arc 半藏門的房間就看的到了，這還是標準的色。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15999556357/" title="東京鐵塔 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7530/15999556357_70a6ab653c_b.jpg" width="683" height="1024" alt="東京鐵塔" srcset="https://farm8.staticflickr.com/7530/15999556357_70a6ab653c.jpg 768w, https://farm8.staticflickr.com/7530/15999556357_ee7a15d08c_k.jpg 2x" /></a></p>

<p>接近聖誕節開始有鑽石點燈加上愛心，這邊是第二間 JAL CITY 田町看過去的，聽說另外一邊的房間看的到彩虹橋。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16194838915/" title="東京 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7534/16194838915_e918aa545a_b.jpg" width="1024" height="683" alt="東京" srcset="https://farm8.staticflickr.com/7534/16194838915_e918aa545a.jpg 768w, https://farm8.staticflickr.com/7534/16194838915_f17600445f_k.jpg 2x" /></a></p>

<p>白天看愛心的部分。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16007370108/" title="彩虹橋 by othree, on Flickr"><img src="https://farm9.staticflickr.com/8563/16007370108_0e2501b4f9_b.jpg" width="1024" height="683" alt="彩虹橋" srcset="https://farm9.staticflickr.com/8563/16007370108_0e2501b4f9.jpg 768w, https://farm9.staticflickr.com/8563/16007370108_b851522356_k.jpg 2x" /></a></p>

<p>然後去台場時還看到彩虹的彩虹橋加上東京鐵塔。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16207863888/" title="Tokyo Tower 2014 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7290/16207863888_019f8c7b5d_b.jpg" width="683" height="1024" alt="Tokyo Tower 2014" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7290/16207863888_019f8c7b5d.jpg 1x, https://farm8.staticflickr.com/7290/16207863888_019f8c7b5d_b.jpg 2x" src-2="https://farm8.staticflickr.com/7290/16207863888_0d4dac650f_k.jpg 2x" /></a></p>

<p>過聖誕節之後變成 2014，據說過元旦後會有 2015，只是就沒待到那時候就沒看到了。</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000831" baseName="accessibility-before-been-blind">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-01-31</b:date>
				<b:time>18:58:52</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>在盲人之前的親和力</b:title>
			<b:content>
				<b:summary>不少人還會直接把網站的親和力（無障礙）問題和盲人朋友直接連在一起，覺得應該來解除迷思一下，盲人朋友確實是最直接會想到的，各種有身心障礙人士的族群當中，盲人朋友使用電腦上網的難度也是最高的，不過在你把眼睛矇起來體驗盲人如何操作電腦之前，有不少事情是可以先做的，隨便把腦袋裡馬上想的到的列了一下： 首先是網頁的文字內容易讀性，易讀性有分兩個面向，第一個面向大家比較清楚，就是文字排版、字形挑選、顏色對比等等視覺上的易讀程度，這部分做的好的話除了對老花眼、近視或是弱視的朋友有幫助外，一般人也會受惠；另一個面向則是文字內容好不好理解的程度，如果網站上的文字說明太難懂，那就應該要用更好理解的文字來重新講一遍，或是加上圖表輔助，或是乾脆減少資訊量，通常自己看的懂，不代表別人看的懂，所以如果是重要的說明（尤其是政府網站一些流程、辦理辦法之類的），建議都要找人看過，最簡單的是找家中長輩，因為網路上理解力較低的族群中，長輩們佔不少。 第二個是操作介面好不好操作，通常是 Web App 才有這需求，一樣有不同的面向，第一個是你的操作介面應該設計的容易理解，讓人看了也不會疑惑應該點哪裡，其中一個很重要的原則是不要破壞使用者的習慣，第二個面向是有些人可能無法好好的控制滑鼠（要模擬這個比模擬盲人的情境還要難），點擊不精確，所以永遠要保留鍵盤操作的選項，如果是使用原生的輸入元件來做操作介面的話，沒有亂做什麼奇怪的事情應該是都可以用鍵盤來控制，但是如果要自己設計一個嶄新的控制元件，那記得要好好利用 WAI-ARIA 來讓鍵盤可以順利的控制，像是 Google 的 Gmail 就有完整的鍵盤操作支援，這個應該是這篇文章當中做起來最辛苦的一項吧。 第三個是表單行為，要把表單作的好填，本身是一門很大的學問，不過在深入的思考設計表單的 usability 之前，有一些很基本的功能是應該具備的，其中特別想說的是錯誤訊息的處理，使用者送出表單後，如果後端的檢查沒過被打回來，應該要伴隨著能幫助使用者更新資料的錯誤訊息，並且正確的顯示在正確的位置，不然使用者不知道發生什麼事情，除了告訴使用者哪裡有錯之外，更進一步是讓使用者能把輸入資料改好，例如帳號名稱有格式限制的話，就要明確的說明有哪些限制，另外表單檢查不通過之後，記得也不要把使用者剛剛填的資料清空（實做這點還需要特別記得安全性問題）。 最後一個是文件結構，正確的使用 HTML 標籤，還可以輔以 WAI-ARIA 的 role 屬性，這已經是講到爛的項目了，當然 single page application 算是特殊情形，不過只要你做的頁面還是接近傳統網頁有文字內容，有主要內容的話，把網頁的文件結構弄好還是有兩大好處的：一、SEO 的部分已經好了一大半了；二、所有輔具都可以根據你的文件結構快速的帶領使用者在文件中穿梭，不用多做什麼奇怪的導盲機制。要把這塊做好算是四點當中最簡單的，只要正確的依照語意使用 HTML 標籤，不夠的再看看 WAI-ARIA 有沒有可用的 role，不要亂用標籤，然後用檢視原始碼的功能看看好不好看，如果你能開始從 HTML 原始碼中感受到美感甚至有完美的感覺出來，相信你就在正確的方向上了。 其實以上四點都有一個特色，就是把這些地方做好，不只是身心障礙人士會受惠，文字易讀性就不用說了，操控介面如果支援鍵盤，有些正常人操作起來會更得心應手，表單的訊息也是不論是怎樣的使用者都很需要，而文件結構也是，弄得好的話，大家都好找到資料，站長應該也開心。所以其實在你想要為了提升親和力而去實際模擬身心障礙人士使用電腦的情境之前，是有很多東西是可以先做的， 相信還是有人會有興趣盲人朋友怎麼操控電腦的，曾經 HappyDesigner 有邀請有聲書協會的朋友來介紹，不過已經有點久了，我去年初剛好有機會在 Moztw Lab...</b:summary>
				<b:mainContent><p>不少人還會直接把網站的親和力（無障礙）問題和盲人朋友直接連在一起，覺得應該來解除迷思一下，盲人朋友確實是最直接會想到的，各種有身心障礙人士的族群當中，盲人朋友使用電腦上網的難度也是最高的，不過在你把眼睛矇起來體驗盲人如何操作電腦之前，有不少事情是可以先做的，隨便把腦袋裡馬上想的到的列了一下：</p>

<p>首先是網頁的文字內容易讀性，易讀性有分兩個面向，第一個面向大家比較清楚，就是文字排版、字形挑選、顏色對比等等視覺上的易讀程度，這部分做的好的話除了對老花眼、近視或是弱視的朋友有幫助外，一般人也會受惠；另一個面向則是文字內容好不好理解的程度，如果網站上的文字說明太難懂，那就應該要用更好理解的文字來重新講一遍，或是加上圖表輔助，或是乾脆減少資訊量，通常自己看的懂，不代表別人看的懂，所以如果是重要的說明（尤其是政府網站一些流程、辦理辦法之類的），建議都要找人看過，最簡單的是找家中長輩，因為網路上理解力較低的族群中，長輩們佔不少。</p>

<p>第二個是操作介面好不好操作，通常是 Web App 才有這需求，一樣有不同的面向，第一個是你的操作介面應該設計的容易理解，讓人看了也不會疑惑應該點哪裡，其中一個很重要的原則是不要破壞使用者的習慣，第二個面向是有些人可能無法好好的控制滑鼠（要模擬這個比模擬盲人的情境還要難），點擊不精確，所以永遠要保留鍵盤操作的選項，如果是使用原生的輸入元件來做操作介面的話，沒有亂做什麼奇怪的事情應該是都可以用鍵盤來控制，但是如果要自己設計一個嶄新的控制元件，那記得要好好利用 <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA">WAI-ARIA</a> 來讓鍵盤可以順利的控制，像是 Google 的 Gmail 就有完整的鍵盤操作支援，這個應該是這篇文章當中做起來最辛苦的一項吧。</p>

<p>第三個是表單行為，要把表單作的好填，本身是一門很大的學問，不過在深入的思考設計表單的 usability 之前，有一些很基本的功能是應該具備的，其中特別想說的是錯誤訊息的處理，使用者送出表單後，如果後端的檢查沒過被打回來，應該要伴隨著能幫助使用者更新資料的錯誤訊息，並且正確的顯示在正確的位置，不然使用者不知道發生什麼事情，除了告訴使用者哪裡有錯之外，更進一步是讓使用者能把輸入資料改好，例如帳號名稱有格式限制的話，就要明確的說明有哪些限制，另外表單檢查不通過之後，記得也不要把使用者剛剛填的資料清空（實做這點還需要特別記得安全性問題）。</p>

<p>最後一個是文件結構，正確的使用 HTML 標籤，還可以輔以 WAI-ARIA 的 <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques">role</a> 屬性，這已經是講到爛的項目了，當然 single page application 算是特殊情形，不過只要你做的頁面還是接近傳統網頁有文字內容，有主要內容的話，把網頁的文件結構弄好還是有兩大好處的：一、SEO 的部分已經好了一大半了；二、所有輔具都可以根據你的文件結構快速的帶領使用者在文件中穿梭，不用多做什麼奇怪的導盲機制。要把這塊做好算是四點當中最簡單的，只要正確的依照語意使用 HTML 標籤，不夠的再看看 WAI-ARIA 有沒有可用的 role，不要亂用標籤，然後用檢視原始碼的功能看看好不好看，如果你能開始從 HTML 原始碼中感受到美感甚至有完美的感覺出來，相信你就在正確的方向上了。</p>

<p>其實以上四點都有一個特色，就是把這些地方做好，不只是身心障礙人士會受惠，文字易讀性就不用說了，操控介面如果支援鍵盤，有些正常人操作起來會更得心應手，表單的訊息也是不論是怎樣的使用者都很需要，而文件結構也是，弄得好的話，大家都好找到資料，站長應該也開心。所以其實在你想要為了提升親和力而去實際模擬身心障礙人士使用電腦的情境之前，是有很多東西是可以先做的，</p>

<p>相信還是有人會有興趣盲人朋友怎麼操控電腦的，曾經 HappyDesigner 有邀請有聲書協會的朋友來介紹，不過已經有點久了，我去年初剛好有機會在 Moztw Lab 遇到 Fancy 示範，當時有簡單的錄下來，有興趣的朋友可以看一下：</p>

<div class="embed_16_9">
<iframe width="853" height="480" src="https://www.youtube.com/embed/fV2ufa2galY?rel=0" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>

<p>至於要怎麼體驗盲人怎麼操作呢？如果你是用 OSX 的話，系統有內建 Voice Over，品質很好，可以直接使用，Windows 有好幾套商業軟體，至於免費的比較有名的是 <a href="http://www.nvaccess.org/">NVDA</a>，這套也是開源軟體，一開始可能需要先當明眼人練習操作，另外它講的話一開始可能會聽不太懂，聲音合成引擎和商業軟體比起來有差，多聽幾次慢慢就聽的出來再講什麼了。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000830" baseName="2014">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-01-22</b:date>
				<b:time>18:15:25</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>2014</b:title>
			<b:content>
				<b:summary> 2014 年的回顧終於出來了，今年比較晚主要是年底出國去玩，回來整理照片上傳就弄了好久，加上還有一堆其他事情，慢慢才找時間回顧照片，今年開始嘗試給每張照片加上一些解說。...</b:summary>
				<b:mainContent><p><a class="thumbnail" ratio="1.333" href="https://www.flickr.com/photos/othree/12005664094/" title="HTC 2013 Year End Party 五月天 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7453/12005664094_23d740a31e_b.jpg" width="1024" height="683" alt="HTC 2013 Year End Party 五月天" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7453/12005664094_23d740a31e.jpg 1x, https://farm8.staticflickr.com/7453/12005664094_23d740a31e_b.jpg 2x" src-2="https://farm8.staticflickr.com/7453/12005664094_2a44ce1258_k.jpg 2x" /></a></p>

<p>2014 年的回顧終於出來了，今年比較晚主要是年底出國去玩，回來整理照片上傳就弄了好久，加上還有一堆其他事情，慢慢才找時間回顧照片，今年開始嘗試給每張照片加上一些解說。</p>
</b:mainContent>
				<b:extendContent><p>一月的是公司尾牙的五月天，第一次拍舞台活動，要拍演唱會之類的要有點門路，一般喜歡攝影的也蠻少有機會拍演唱會形式的舞台活動，還好公司規模大，讓我有機會拍拍這種照片，不過當天是很遠拿望遠鏡頭拍的，因為舞台前都是人～～</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/12305981216/" title="月津港燈節 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7458/12305981216_61a40a2f26_b.jpg" width="1024" height="683" alt="月津港燈節" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7458/12305981216_61a40a2f26.jpg 1x, https://farm8.staticflickr.com/7458/12305981216_61a40a2f26_b.jpg 2x" src-2="https://farm8.staticflickr.com/7458/12305981216_b813863768_k.jpg 2x" /></a></p>

<p>二月的是去年台南的月津港燈節，月津港燈節是現在台南市的主要燈節活動，2014 年的已經是第三屆了，全部都是藝術作品，不過我覺得整體都很漂亮，雖然沒看到花燈還是非常值得，個人覺得最大特色是沿著月津港的水面裝置，水中的倒影讓畫面增色許多，也是其他地方燈節所看不到的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/13344858165/" title="太陽花學運 2014/03/22 by othree, on Flickr"><img src="https://farm4.staticflickr.com/3770/13344858165_412652e34d_b.jpg" width="1024" height="683" alt="太陽花學運 2014/03/22" src-1="(max-width: 768px)  https://farm4.staticflickr.com/3770/13344858165_412652e34d.jpg 1x, https://farm4.staticflickr.com/3770/13344858165_412652e34d_b.jpg 2x" src-2="https://farm4.staticflickr.com/3770/13344858165_9cdf330666_k.jpg 2x" /></a></p>

<p>三月國內的大事就是太陽花學運了，挑這張的原因是覺得總統府搞到需要一層又一層的防護，實在是很悲哀的一件事情。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/13960770556/" title="仁和寺 櫻花 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2934/13960770556_ef9f204b93_b.jpg" width="1024" height="683" alt="仁和寺 櫻花" src-1="(max-width: 768px)  https://farm3.staticflickr.com/2934/13960770556_ef9f204b93.jpg 1x, https://farm3.staticflickr.com/2934/13960770556_ef9f204b93_b.jpg 2x" src-2="https://farm3.staticflickr.com/2934/13960770556_1c9e8075c9_k.jpg 2x" /></a></p>

<p>四月去了日本看櫻花，這次主要是去關西看，不過時間點沒去年好，只有幾個點是滿開，其中一個是之前沒去過的仁和寺，滿開的量還是蠻驚人的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/14230059493/" title="八煙聚落 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5554/14230059493_4a23922cf1_b.jpg" width="1024" height="683" alt="八煙聚落" src-1="(max-width: 768px)  https://farm6.staticflickr.com/5554/14230059493_4a23922cf1.jpg 1x, https://farm6.staticflickr.com/5554/14230059493_4a23922cf1_b.jpg 2x" src-2="https://farm6.staticflickr.com/5554/14230059493_a57c9d94a4_k.jpg 2x" /></a></p>

<p>五月有去了<a href="http://bayien.eef.org.tw/">八煙聚落</a>參觀，特別挑八煙聚落的相片是因為最近看到新聞說那邊因為觀光客太多，造成居民困擾，所以打算把照片這個水中央的水關掉（不過仔細看新聞<a href="http://news.ltn.com.tw/news/life/paper/847450">內文</a>發現案情並不單純），覺得蠻可惜的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/14535736256/" title="生日蛋糕 by othree, on Flickr"><img src="https://farm4.staticflickr.com/3861/14535736256_43f071e208_b.jpg" width="683" height="1024" alt="生日蛋糕" src-1="(max-width: 768px)  https://farm4.staticflickr.com/3861/14535736256_43f071e208.jpg 1x, https://farm4.staticflickr.com/3861/14535736256_43f071e208_b.jpg 2x" src-2="https://farm4.staticflickr.com/3861/14535736256_b3036dd2b5_k.jpg 2x" /></a></p>

<p>六月的相片是生日蛋糕啦～～</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/14750209125/" title="FF24 by othree, on Flickr"><img src="https://farm4.staticflickr.com/3891/14750209125_db8d7f8707_b.jpg" width="1024" height="683" alt="FF24" src-1="(max-width: 768px)  https://farm4.staticflickr.com/3891/14750209125_db8d7f8707.jpg 1x, https://farm4.staticflickr.com/3891/14750209125_db8d7f8707_b.jpg 2x" src-2="https://farm4.staticflickr.com/3891/14750209125_611da69249_k.jpg 2x" /></a></p>

<p>七月是 Fancy Frontier 24 會場拍的，2014 年也去了不少場拍 Cosplayer，不過拍起來沒 2013 有趣，其實我閃燈用量最大的場合是拍 Cosplayer 的時候，閃燈幾乎都這時候練習的，話說今年的 FF 25 要換場地了，不知道是福是禍。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16300096816/" title="HITCON X Day 1 Panel by othree, on Flickr"><img src="https://farm8.staticflickr.com/7535/16300096816_7135021684_b.jpg" width="1024" height="683" alt="HITCON X Day 1 Panel" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7535/16300096816_7135021684.jpg 1x, https://farm8.staticflickr.com/7535/16300096816_7135021684_b.jpg 2x" src-2="https://farm8.staticflickr.com/7535/16300096816_576feea442_k.jpg 2x" /></a></p>

<p>八月是 HITCON X 的月份，這一年的 HITCON 剛好十週年，規模特大，包含第一天的 Training，總共有五天，研討會又分成企業場和社群場，其中企業場在喜來登飯店，是第一次去的場地，只能說真不愧是企業會議的場地，有 spotlight 照亮舞台真是好。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/14969790930/" title="RGBA × 柯文哲野生官網 unlimited 設計工作營 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5594/14969790930_7f669f9ee3_b.jpg" width="1024" height="683" alt="RGBA × 柯文哲野生官網 unlimited 設計工作營" src-1="(max-width: 768px)  https://farm6.staticflickr.com/5594/14969790930_7f669f9ee3.jpg 1x, https://farm6.staticflickr.com/5594/14969790930_7f669f9ee3_b.jpg 2x" src-2="https://farm6.staticflickr.com/5594/14969790930_24faf768a7_k.jpg 2x" /></a></p>

<p>九月有參加柯文哲野生官網的活動，幫忙活動記錄，現場見到柯文哲本人來致詞，這是最接近他本人的一次機會了，後來他也當選台北市市長，可喜可賀。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15464838359/" title="台南 林百貨對面的土地銀行 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7500/15464838359_609cc33494_b.jpg" width="1024" height="683" alt="台南 林百貨對面的土地銀行" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7500/15464838359_609cc33494.jpg 1x, https://farm8.staticflickr.com/7500/15464838359_609cc33494_b.jpg 2x" src-2="https://farm8.staticflickr.com/7500/15464838359_fa7e6eafd4_k.jpg 2x" /></a></p>

<p>十月又去了台南，這張是從林百貨頂樓拍出去的，對面的土地銀行也是很漂亮的建築物，之後大概會越來越常去台南吧～～</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15175460603/" title="Firefox x Moztw 10th Party by othree, on Flickr"><img src="https://farm8.staticflickr.com/7552/15175460603_c0db6ca021_b.jpg" width="1024" height="683" alt="Firefox x Moztw 10th Party" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7552/15175460603_c0db6ca021.jpg 1x, https://farm8.staticflickr.com/7552/15175460603_c0db6ca021_b.jpg 2x" src-2="https://farm8.staticflickr.com/7552/15175460603_dbb9d78558_k.jpg 2x" /></a></p>

<p>十一月則是最近被稱為台灣骨灰級社群的<a href="http://www.ithome.com.tw/news/93609">Moztw</a> 十週年，我也跟著這個社群很久了，其實能活這麼久還很活躍真的是靠幾位主要的聯絡人一路下來的努力，我其實貢獻不多，早期幫忙翻譯多一點文章，後來都幾乎是活動時去拍拍照，偶爾幫忙一下網站而已。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15596522194/" title="Tokyo Disney Christmas Parade by othree, on Flickr"><img src="https://farm9.staticflickr.com/8593/15596522194_7a3654b88c_b.jpg" width="1024" height="683" alt="Tokyo Disney Christmas Parade" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8593/15596522194_7a3654b88c.jpg 1x, https://farm9.staticflickr.com/8593/15596522194_7a3654b88c_b.jpg 2x" src-2="https://farm9.staticflickr.com/8593/15596522194_bcf0450fab_k.jpg 2x" /></a></p>

<p>十二月又去了一趟日本，主要目標是去看聖誕燈飾，不過也去了我人生第一次的迪士尼樂園，還遇上聖誕遊行，照片是聖誕遊行的第一台車，上面寫著 Welcome to Disney Santa Village，整個遊行的設計就是聖誕村，第一台車就是歡迎大家來到迪士尼聖誕村。</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000829" baseName="more-fetch">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-01-16</b:date>
				<b:time>12:31:16</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>fetch 二三事</b:title>
			<b:content>
				<b:summary>之前介紹過 fetch 之後過了一段時間，有發現幾個目前 spec 上的一些細節要來分享一下。首先是上一篇文章說到的重複 header 的問題，詳細看下去後，發現 fetch 收的 header 參數有兩種，一個是 key value pair 的原生物件，另外一種是 Headers 物件，這個物件是 fetch spec 裡面新定義的： var h = new Headers(); h.append('X-Custom-Header', '1'); h.append('X-Custom-Header', '2'); h.append('X-Custom-Header', '3'); 就可以像這樣用 append 重複加上同樣名稱的 Header，其實丟原生的物件進去，也會在內部被轉成這個 Header 物件。 第二個要說的是關於回應 status code...</b:summary>
				<b:mainContent><p>之前介紹過 fetch 之後過了一段時間，有發現幾個目前 spec 上的一些細節要來分享一下。首先是上一篇文章說到的重複 header 的問題，詳細看下去後，發現 fetch 收的 header 參數有兩種，一個是 key value pair 的原生物件，另外一種是 Headers 物件，這個物件是 fetch spec 裡面新定義的：</p>

<pre><code>var h = new Headers();
h.append('X-Custom-Header', '1');
h.append('X-Custom-Header', '2');
h.append('X-Custom-Header', '3');
</code></pre>

<p>就可以像這樣用 <code>append</code> 重複加上同樣名稱的 Header，其實丟原生的物件進去，也會在內部被轉成這個 Header 物件。</p>

<p>第二個要說的是關於回應 status code 在 400 到 600 之間時，Promise 物件是 resolve 不是 reject，理由是 Error 和 Exception 不一樣，不過有人開 Issue 在討論，會不會有改變還不知道，倒是如果現在用 github polyfill 想要處理這個問題的話，除了可以自己處理之外，也有人寫了 <a href="https://github.com/matthew-andrews/fetchres">fetchres</a> 這個，wrapper 可以把 fetch 的一些行為弄得更接近大部分開發者的直覺，目前提供的功能除了這個之外，還有一個是如果回傳的 type 是 JSON，但是內容的 JSON 語法有錯，那也會被丟到 reject 那邊去。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000828" baseName="tokyo-disney-land">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-01-15</b:date>
				<b:time>20:17:15</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>Tokyo Disney Land 一日遊</b:title>
			<b:content>
				<b:summary> 這次去東京還去了東京迪士尼樂園玩了一天，先直接說一下結論，去的那天遇到高中生開始放假，在車站有點嚇到，還好沒影響很大，大約開場前 20 分到場排隊（7:40），到要關門才離開，看了三場遊行，平常就有的日間和夜間加上聖誕節特別遊行，然後還看到煙火和 Once Upon a Time，而且有抽到中央的觀賞位，遊樂設施的部分玩到 11 個，其中八個 FastPass 的設施玩到了 6 個，整體下來我覺得算蠻值得的了（以下圖多）。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16050125400/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7518/16050125400_0bb5b9af8b_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7518/16050125400_0bb5b9af8b.jpg 1x, https://farm8.staticflickr.com/7518/16050125400_0bb5b9af8b_b.jpg 2x" src-2="https://farm8.staticflickr.com/7518/16050125400_3462471617_k.jpg 2x" /></a></p>

<p>這次去東京還去了東京迪士尼樂園玩了一天，先直接說一下結論，去的那天遇到高中生開始放假，在車站有點嚇到，還好沒影響很大，大約開場前 20 分到場排隊（7:40），到要關門才離開，看了三場遊行，平常就有的日間和夜間加上聖誕節特別遊行，然後還看到煙火和 Once Upon a Time，而且有抽到中央的觀賞位，遊樂設施的部分玩到 11 個，其中八個 FastPass 的設施玩到了 6 個，整體下來我覺得算蠻值得的了（以下圖多）。</p>
</b:mainContent>
				<b:extendContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15583831444/" title="Tokyo Disney by othree, on Flickr"><img src="https://farm9.staticflickr.com/8648/15583831444_09122d986e_b.jpg" width="1024" height="683" alt="Tokyo Disney" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8648/15583831444_09122d986e.jpg 1x, https://farm9.staticflickr.com/8648/15583831444_09122d986e_b.jpg 2x" src-2="https://farm9.staticflickr.com/8648/15583831444_f9c1a9a4a6_k.jpg 2x" /></a></p>

<p>去玩之前就有大概看過網路上的教戰守則了，其實我覺得重點大概還是一開始的那段時間要去處理兩個有 FastPass 的設施，一個人去排隊、一個人去抽 FastPass，真的不用擔心排隊只有一個人的問題，日本人也是這樣（真的不想分開行動的話我覺得也還好，影響不會太大），只是有兩個要注意的地方，第一個是抽 FastPass 的人要把所有人的票都帶去，第二個是排隊的人在進入遊樂設施的建築物前要等到伙伴回來會合，如果來不及就要在入口附近等人，讓後面的人先進去，位置通常是 FastPass 入口旁邊，園區的工作人員也知道會放人進來，然後 FastPass 也不是就完全不用排隊，其實是一個可以從接近排隊終點的地方插隊的機制，我這次去是先抽怪獸電力公司，然後一個人去排巴斯光年，所以確定的是巴斯光年的入口處有不少組遊客就在等人。然後其實只有早上第一輪會有這種分頭行動的狀況，因為 FastPass 也不能一直抽，加上排隊時間的變化蠻大的，後續就不需要這樣分頭，反而是隨時看看不同設施的排隊時間來決定下一步要怎麼動，下面這張照片是抽到的 FastPass。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16018731468/" title="Tokyo Disney by othree, on Flickr"><img src="https://farm9.staticflickr.com/8580/16018731468_6b96acb621_b.jpg" width="1024" height="683" alt="Tokyo Disney" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8580/16018731468_6b96acb621.jpg 1x, https://farm9.staticflickr.com/8580/16018731468_6b96acb621_b.jpg 2x" src-2="https://farm9.staticflickr.com/8580/16018731468_08f054d595_k.jpg 2x" /></a></p>

<p>上面還有說你要幾點以後才能抽下一張 FastPass，這張基本上之後入場的時候是會被收走的，不過你如果想要做紀念，可以跟工作人員說，他會做記號就可以帶回家了。抽完怪獸電力公司就去巴斯光年那邊排隊了。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15583824654/" title="Tokyo Disney by othree, on Flickr"><img src="https://farm8.staticflickr.com/7519/15583824654_efd48360f1_b.jpg" width="1024" height="683" alt="Tokyo Disney" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7519/15583824654_efd48360f1.jpg 1x, https://farm8.staticflickr.com/7519/15583824654_efd48360f1_b.jpg 2x" src-2="https://farm8.staticflickr.com/7519/15583824654_6786fd0d27_k.jpg 2x" /></a></p>

<p>玩完出來馬上就接著紀念品商店，幾乎是大一點的遊樂設施都是這樣接著紀念品商店，非常邪惡。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15583823954/" title="Tokyo Disney by othree, on Flickr"><img src="https://farm8.staticflickr.com/7562/15583823954_863ee7085f_b.jpg" width="1024" height="683" alt="Tokyo Disney" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7562/15583823954_863ee7085f.jpg 1x, https://farm8.staticflickr.com/7562/15583823954_863ee7085f_b.jpg 2x" src-2="https://farm8.staticflickr.com/7562/15583823954_14634aaf7d_k.jpg 2x" /></a></p>

<p>逛完商店後就出來邊走邊看，發現小熊維尼排隊需要時間是 20~30 分就直接去排了，小熊維尼也是有 FastPass 的遊樂設施，而且也是當天 FastPass 最早發完的一項，覺得比預期的要有趣許多，另外維尼的商品是他的商店比較多東西。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16028283669/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7559/16028283669_ca7db82540_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7559/16028283669_ca7db82540.jpg 1x, https://farm8.staticflickr.com/7559/16028283669_ca7db82540_b.jpg 2x" src-2="https://farm8.staticflickr.com/7559/16028283669_e97e12d720_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16026866058/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7484/16026866058_22b80d5713_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7484/16026866058_22b80d5713.jpg 1x, https://farm8.staticflickr.com/7484/16026866058_22b80d5713_b.jpg 2x" src-2="https://farm8.staticflickr.com/7484/16026866058_a51d2aa421_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15594531633/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7541/15594531633_4d936e46d6_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7541/15594531633_4d936e46d6.jpg 1x, https://farm8.staticflickr.com/7541/15594531633_4d936e46d6_b.jpg 2x" src-2="https://farm8.staticflickr.com/7541/15594531633_a0f7228ede_k.jpg 2x" /></a></p>

<p>離開維尼商店出來發現旁邊的小小世界排隊時間好像只要 10 分就趕快去體驗世界上最快樂的航程了。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16213582272/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7511/16213582272_c1a05deee2_b.jpg" width="683" height="1024" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7511/16213582272_c1a05deee2.jpg 1x, https://farm8.staticflickr.com/7511/16213582272_c1a05deee2_b.jpg 2x" src-2="https://farm8.staticflickr.com/7511/16213582272_db768773b7_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16213566272/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7570/16213566272_7fe4774bd5_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7570/16213566272_7fe4774bd5.jpg 1x, https://farm8.staticflickr.com/7570/16213566272_7fe4774bd5_b.jpg 2x" src-2="https://farm8.staticflickr.com/7570/16213566272_d9e72d366e_k.jpg 2x" /></a></p>

<p>這次的小小世界是聖誕節特別版，裡面有很多地方改成聖誕裝置，然後唱的歌變成小小世界主題曲和聖誕歌輪流唱，蠻有趣的。出來後就去旁邊的幽靈公館抽 FastPass，然後聽到廣播說遊行快要開始了，查了一下才發現有聖誕特別遊行，就不小心站到一個不錯的位子等了。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15596522194/" title="Tokyo Disney Christmas Parade by othree, on Flickr"><img src="https://farm9.staticflickr.com/8593/15596522194_7a3654b88c_b.jpg" width="1024" height="683" alt="Tokyo Disney Christmas Parade" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8593/15596522194_7a3654b88c.jpg 1x, https://farm9.staticflickr.com/8593/15596522194_7a3654b88c_b.jpg 2x" src-2="https://farm9.staticflickr.com/8593/15596522194_bcf0450fab_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15599065413/" title="Tokyo Disney Christmas Parade by othree, on Flickr"><img src="https://farm9.staticflickr.com/8605/15599065413_967eaf9fae_b.jpg" width="1024" height="683" alt="Tokyo Disney Christmas Parade" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8605/15599065413_967eaf9fae.jpg 1x, https://farm9.staticflickr.com/8605/15599065413_967eaf9fae_b.jpg 2x" src-2="https://farm9.staticflickr.com/8605/15599065413_bae679b496_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16031560940/" title="Tokyo Disney Christmas Parade by othree, on Flickr"><img src="https://farm9.staticflickr.com/8628/16031560940_ce14e788b9_b.jpg" width="1024" height="683" alt="Tokyo Disney Christmas Parade" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8628/16031560940_ce14e788b9.jpg 1x, https://farm9.staticflickr.com/8628/16031560940_ce14e788b9_b.jpg 2x" src-2="https://farm9.staticflickr.com/8628/16031560940_86394fc060_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16031555640/" title="Tokyo Disney Christmas Parade by othree, on Flickr"><img src="https://farm8.staticflickr.com/7469/16031555640_bc07f464ee_b.jpg" width="1024" height="683" alt="Tokyo Disney Christmas Parade" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7469/16031555640_bc07f464ee.jpg 1x, https://farm8.staticflickr.com/7469/16031555640_bc07f464ee_b.jpg 2x" src-2="https://farm8.staticflickr.com/7469/16031555640_9eb58f4932_k.jpg 2x" /></a></p>

<p>聖誕遊行的最後一台當然就是聖誕老人了。遊行剛結束的時候是去排沒 FastPass 遊樂設施的好時間，我們就去排了白雪公主的遊樂設施，不過其實這個設施的主角好像是壞女巫:P</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16037332007/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm9.staticflickr.com/8610/16037332007_84ee34afc5_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8610/16037332007_84ee34afc5.jpg 1x, https://farm9.staticflickr.com/8610/16037332007_84ee34afc5_b.jpg 2x" src-2="https://farm9.staticflickr.com/8610/16037332007_d687fb04a8_k.jpg 2x" /></a></p>

<p>玩完白雪公主就去幽靈公館了，因為抽 FastPass 的人比較少所以時間一下就到了，幽靈公館是聖誕夜驚魂為主題的，所以好像也很適合聖誕節玩。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15600761124/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7570/15600761124_5018107cba_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7570/15600761124_5018107cba.jpg 1x, https://farm8.staticflickr.com/7570/15600761124_5018107cba_b.jpg 2x" src-2="https://farm8.staticflickr.com/7570/15600761124_777f6ab8f5_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16035799450/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7528/16035799450_2c1ed3c82c_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7528/16035799450_2c1ed3c82c.jpg 1x, https://farm8.staticflickr.com/7528/16035799450_2c1ed3c82c_b.jpg 2x" src-2="https://farm8.staticflickr.com/7528/16035799450_a19d282709_k.jpg 2x" /></a></p>

<p>玩完幽靈公館後時間接近中午，就去玩早上抽的怪獸電力公司了，中間經過太空山順便抽了 FastPass。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16037046359/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7513/16037046359_3b7f3da4cc_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7513/16037046359_3b7f3da4cc.jpg 1x, https://farm8.staticflickr.com/7513/16037046359_3b7f3da4cc_b.jpg 2x" src-2="https://farm8.staticflickr.com/7513/16037046359_963bce374d_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16222345012/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7529/16222345012_05cb650e2d_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7529/16222345012_05cb650e2d.jpg 1x, https://farm8.staticflickr.com/7529/16222345012_05cb650e2d_b.jpg 2x" src-2="https://farm8.staticflickr.com/7529/16222345012_94d23a3535_k.jpg 2x" /></a></p>

<p>一樣出口是接商店，園區內的商店都會有很多很有趣的裝飾。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16037040369/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7517/16037040369_398fdce133_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7517/16037040369_398fdce133.jpg 1x, https://farm8.staticflickr.com/7517/16037040369_398fdce133_b.jpg 2x" src-2="https://farm8.staticflickr.com/7517/16037040369_f718e84d98_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16221286151/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm9.staticflickr.com/8580/16221286151_71c742a715_b.jpg" width="683" height="1024" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8580/16221286151_71c742a715.jpg 1x, https://farm9.staticflickr.com/8580/16221286151_71c742a715_b.jpg 2x" src-2="https://farm9.staticflickr.com/8580/16221286151_8c9da5a970_k.jpg 2x" /></a></p>

<p>然後中午沒吃正餐，吃了一些點心而已，包括吉拿棒、米奇包子、火雞腿等等，然後就接上一點多的日間遊行了，不過這次沒選好位子，站到逆光的一邊，如果要拍照的話千萬要挑對邊啊。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16228015961/" title="Tokyo Disney Daytime Parade by othree, on Flickr"><img src="https://farm8.staticflickr.com/7473/16228015961_b342784abb_b.jpg" width="1024" height="683" alt="Tokyo Disney Daytime Parade" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7473/16228015961_b342784abb.jpg 1x, https://farm8.staticflickr.com/7473/16228015961_b342784abb_b.jpg 2x" src-2="https://farm8.staticflickr.com/7473/16228015961_0ac74d01aa_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16228010411/" title="Tokyo Disney Daytime Parade by othree, on Flickr"><img src="https://farm9.staticflickr.com/8653/16228010411_42f0cd0d02_b.jpg" width="1024" height="683" alt="Tokyo Disney Daytime Parade" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8653/16228010411_42f0cd0d02.jpg 1x, https://farm9.staticflickr.com/8653/16228010411_42f0cd0d02_b.jpg 2x" src-2="https://farm9.staticflickr.com/8653/16228010411_1d9c50ca70_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16044031347/" title="Tokyo Disney Daytime Parade by othree, on Flickr"><img src="https://farm8.staticflickr.com/7480/16044031347_904a2da4e5_b.jpg" width="1024" height="683" alt="Tokyo Disney Daytime Parade" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7480/16044031347_904a2da4e5.jpg 1x, https://farm8.staticflickr.com/7480/16044031347_904a2da4e5_b.jpg 2x" src-2="https://farm8.staticflickr.com/7480/16044031347_66f90009ce_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16228000641/" title="Tokyo Disney Daytime Parade by othree, on Flickr"><img src="https://farm9.staticflickr.com/8671/16228000641_827b6713e4_b.jpg" width="683" height="1024" alt="Tokyo Disney Daytime Parade" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8671/16228000641_827b6713e4.jpg 1x, https://farm9.staticflickr.com/8671/16228000641_827b6713e4_b.jpg 2x" src-2="https://farm9.staticflickr.com/8671/16228000641_41223de3b1_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15607453644/" title="Tokyo Disney Daytime Parade by othree, on Flickr"><img src="https://farm8.staticflickr.com/7559/15607453644_b3a73c8057_b.jpg" width="683" height="1024" alt="Tokyo Disney Daytime Parade" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7559/15607453644_b3a73c8057.jpg 1x, https://farm8.staticflickr.com/7559/15607453644_b3a73c8057_b.jpg 2x" src-2="https://farm8.staticflickr.com/7559/15607453644_f6bb3f3a93_k.jpg 2x" /></a></p>

<p>我覺得日間遊行就是紅心皇后做這麼大最有趣了，提到紅心皇后順便說一下紅心皇后餐廳，是園區內蠻受歡迎的餐廳，而且有表演節目，記得也可以預約，表演聽說蠻不錯的。看完日間遊行去排了會被誤認為是阿拉丁的 3D 電影，其實這應該是米老鼠幻想曲系列的。然後路過抽票區，就去抽了，沒想到幸運抽到 Once Upon a Time 的座位。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16237505515/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7581/16237505515_68d38ab9c0_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7581/16237505515_68d38ab9c0.jpg 1x, https://farm8.staticflickr.com/7581/16237505515_68d38ab9c0_b.jpg 2x" src-2="https://farm8.staticflickr.com/7581/16237505515_f79773e2ac_k.jpg 2x" /></a></p>

<p>不過另外一個抽選的 One Man's Dream 就沒抽了，主要是算一算時間好像不太夠，然後順便還抽了旁邊的 STAR TOUR 的 FastPass，然後就往加勒比海盜那邊移動了，途中經過城堡正面拍了一下照，還剛好迪士尼和米老鼠頭上都有小鳥停留，這個銅像在世界市集，靠近大門那邊的椅子上也有一組不一樣的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16236687812/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7573/16236687812_471efec367_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7573/16236687812_471efec367.jpg 1x, https://farm8.staticflickr.com/7573/16236687812_471efec367_b.jpg 2x" src-2="https://farm8.staticflickr.com/7573/16236687812_117755eed6_k.jpg 2x" /></a></p>

<p>加勒比海盜排的有點久，裡面場景蠻大的，不過這次玩到的設施排名的話它應該是比較後面的就是了。玩完出來離 STAR TOUR 的 FastPass 還有些時間就去 ToonTown 看看有沒有可以拍合照的角色，ToonTown 的意思是卡通角色們住的城鎮，這邊的設施年齡限制比較低，而且會有卡通角色出沒，結果太晚去只有遇到剛好要回去休息的高菲，聽說是早上比較會有角色出來，不過早上都在玩設施所以就有點殘念了。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16211612746/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7503/16211612746_71e62dbc5e_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7503/16211612746_71e62dbc5e.jpg 1x, https://farm8.staticflickr.com/7503/16211612746_71e62dbc5e_b.jpg 2x" src-2="https://farm8.staticflickr.com/7503/16211612746_0cedd3e0a7_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15615087954/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm9.staticflickr.com/8604/15615087954_09471eb90e_b.jpg" width="683" height="1024" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8604/15615087954_09471eb90e.jpg 1x, https://farm9.staticflickr.com/8604/15615087954_09471eb90e_b.jpg 2x" src-2="https://farm9.staticflickr.com/8604/15615087954_cbd69365fa_k.jpg 2x" /></a></p>

<p>ToonTown 逛一陣子打發一些時間後就去 STAR TOUR，這個其實是星際大戰的一場體感電影。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15615081534/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7467/15615081534_bd63df3630_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7467/15615081534_bd63df3630.jpg 1x, https://farm8.staticflickr.com/7467/15615081534_bd63df3630_b.jpg 2x" src-2="https://farm8.staticflickr.com/7467/15615081534_c26e881c80_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16211603096/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7574/16211603096_717c25e479_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7574/16211603096_717c25e479.jpg 1x, https://farm8.staticflickr.com/7574/16211603096_717c25e479_b.jpg 2x" src-2="https://farm8.staticflickr.com/7574/16211603096_ed8abb7507_k.jpg 2x" /></a></p>

<p>體驗完 STAR TOUR 就去世界市集吃晚餐，世界市集是剛入園會經過的商店區，這裡有很多商店和餐廳，我們晚餐排了 UCC 咖啡的店，吃完差不多到了太空山的時間，這是我第一次玩太空山，覺得非常新奇，玩過之後才知道為什麼很多人都會推薦，而且雖然很快但是往下掉的部分很少，算是刺激遊樂設施當中相當友善的了。</p>

<p>太空山之後就去找地方等夜間遊行了，這邊也犯了一個小錯誤，就是夜間遊行是最受期待的，所以以很多人會早早就開始排隊，而靠近城堡前面那段路可以座的間距有點窄，比較能往後座的地方都是垂直遊行路線的走道，不過視野會變差，如果避開城堡前面那區塊，會有些地方腹地比較大，視野就會好很多。然後我們第一次去不知道就在城堡前找地方坐下來等了，也因為太晚去所以大概是坐在垂直走道區的第四排以後了，不過是我們坐下來之後，後面又慢慢的座了更多人下來。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16052632757/" title="Tokyo Disney Night Parade by othree, on Flickr"><img src="https://farm8.staticflickr.com/7463/16052632757_abef068bcc_b.jpg" width="1024" height="683" alt="Tokyo Disney Night Parade" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7463/16052632757_abef068bcc.jpg 1x, https://farm8.staticflickr.com/7463/16052632757_abef068bcc_b.jpg 2x" src-2="https://farm8.staticflickr.com/7463/16052632757_8994640d64_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16237653292/" title="Tokyo Disney Night Parade by othree, on Flickr"><img src="https://farm9.staticflickr.com/8619/16237653292_3226436214_b.jpg" width="683" height="1024" alt="Tokyo Disney Night Parade" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8619/16237653292_3226436214.jpg 1x, https://farm9.staticflickr.com/8619/16237653292_3226436214_b.jpg 2x" src-2="https://farm9.staticflickr.com/8619/16237653292_efe3f66dea_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16238477065/" title="Tokyo Disney Night Parade by othree, on Flickr"><img src="https://farm9.staticflickr.com/8586/16238477065_241a02ee3d_b.jpg" width="1024" height="683" alt="Tokyo Disney Night Parade" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8586/16238477065_241a02ee3d.jpg 1x, https://farm9.staticflickr.com/8586/16238477065_241a02ee3d_b.jpg 2x" src-2="https://farm9.staticflickr.com/8586/16238477065_25c37f1640_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16236623401/" title="Tokyo Disney Night Parade by othree, on Flickr"><img src="https://farm9.staticflickr.com/8606/16236623401_12e67619fa_b.jpg" width="1024" height="683" alt="Tokyo Disney Night Parade" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8606/16236623401_12e67619fa.jpg 1x, https://farm9.staticflickr.com/8606/16236623401_12e67619fa_b.jpg 2x" src-2="https://farm9.staticflickr.com/8606/16236623401_7355cf78a8_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15616051994/" title="Tokyo Disney Night Parade by othree, on Flickr"><img src="https://farm8.staticflickr.com/7519/15616051994_82036430e0_b.jpg" width="1024" height="683" alt="Tokyo Disney Night Parade" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7519/15616051994_82036430e0.jpg 1x, https://farm8.staticflickr.com/7519/15616051994_82036430e0_b.jpg 2x" src-2="https://farm8.staticflickr.com/7519/15616051994_fc6fe650d7_k.jpg 2x" /></a></p>

<p>夜間遊行我最喜歡的是阿拉丁的精靈，他會變成好多角色的花紋，像是跳跳虎、愛麗斯夢遊仙境的 Cheshire Cat，甚至是超人特攻隊的超人制服裝。然後夜間遊行真的蠻難拍的，相機要厲害一點，而且要有些拍過這種夜間燈飾的經驗比較來得及隨時調整，台灣的話我覺得去拍拍燈會可以當作不錯的練習，不過遊行的花車移動蠻快的，所以高 ISO 還是不能太差，另外就是一些花車上的角色不太亮，會拍不太出來。看完夜間遊行後，就跟著車隊尾巴移動，然後跑去玩了木偶奇遇記。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16051079370/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm9.staticflickr.com/8623/16051079370_b86ae9ea7d_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8623/16051079370_b86ae9ea7d.jpg 1x, https://farm9.staticflickr.com/8623/16051079370_b86ae9ea7d_b.jpg 2x" src-2="https://farm9.staticflickr.com/8623/16051079370_36daa73b7b_k.jpg 2x" /></a></p>

<p>玩完木偶奇遇記又很趕的回城堡前面的中央觀賞區，剛好碰上煙火開始。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16243590621/" title="Tokyo Disney Land by othree, on Flickr"><img src="https://farm8.staticflickr.com/7495/16243590621_3f4037b30a_b.jpg" width="1024" height="683" alt="Tokyo Disney Land" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7495/16243590621_3f4037b30a.jpg 1x, https://farm8.staticflickr.com/7495/16243590621_3f4037b30a_b.jpg 2x" src-2="https://farm8.staticflickr.com/7495/16243590621_32c0581f46_k.jpg 2x" /></a></p>

<p>然後就是最後的 Once Upon a Time 了。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16243586941/" title="Once Upon a Time, Tokyo Disney Land by othree, on Flickr"><img src="https://farm8.staticflickr.com/7553/16243586941_cd2686b9a1_b.jpg" width="1024" height="683" alt="Once Upon a Time, Tokyo Disney Land" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7553/16243586941_cd2686b9a1.jpg 1x, https://farm8.staticflickr.com/7553/16243586941_cd2686b9a1_b.jpg 2x" src-2="https://farm8.staticflickr.com/7553/16243586941_7b612eeea5_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16057902618/" title="Once Upon a Time, Tokyo Disney Land by othree, on Flickr"><img src="https://farm8.staticflickr.com/7522/16057902618_6f109bdbcd_b.jpg" width="1024" height="683" alt="Once Upon a Time, Tokyo Disney Land" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7522/16057902618_6f109bdbcd.jpg 1x, https://farm8.staticflickr.com/7522/16057902618_6f109bdbcd_b.jpg 2x" src-2="https://farm8.staticflickr.com/7522/16057902618_1848b4de25_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15623028554/" title="Once Upon a Time, Tokyo Disney Land by othree, on Flickr"><img src="https://farm8.staticflickr.com/7473/15623028554_4842bfeec4_b.jpg" width="1024" height="683" alt="Once Upon a Time, Tokyo Disney Land" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7473/15623028554_4842bfeec4.jpg 1x, https://farm8.staticflickr.com/7473/15623028554_4842bfeec4_b.jpg 2x" src-2="https://farm8.staticflickr.com/7473/15623028554_ba248ae7f8_k.jpg 2x" /></a></p>

<p>這不是只有投影在城堡上，還有搭配雷射光、煙火和火焰特效，還蠻棒的，是來之前就很期待的項目，目前也是東京迪士尼才有的表演。看完 Once Upon a Time 就差不多要閉園了，最後我們就去吃了米老鼠鬆餅，世界市集的商店逛一逛，然後就依依不捨的離開園區了。接下來兩張照片分別是晚上回程角度看到的世界市集和 Disney Hotel。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15618602983/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm8.staticflickr.com/7559/15618602983_97c8c68d9e_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm8.staticflickr.com/7559/15618602983_97c8c68d9e.jpg 1x, https://farm8.staticflickr.com/7559/15618602983_97c8c68d9e_b.jpg 2x" src-2="https://farm8.staticflickr.com/7559/15618602983_40cd572d17_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16051649487/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://farm9.staticflickr.com/8601/16051649487_0cb588012d_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8601/16051649487_0cb588012d.jpg 1x, https://farm9.staticflickr.com/8601/16051649487_0cb588012d_b.jpg 2x" src-2="https://farm9.staticflickr.com/8601/16051649487_6bebc64b1b_k.jpg 2x" /></a></p>

<p>在迪士尼這天我是真的玩的蠻高興的，而且有種不是在日本的感覺，這種感覺直到走到 JR 車站才被拉回現實，這趟雖然我覺得主要的都有玩到體驗到了，不過如果要玩得完整一點的話，還是需要個兩三天，像我其實遊樂設施都是玩東半邊的，西部樂園、探險樂園和動物天地幾乎都沒玩到，如果有第二天應該就會先去抽西邊的 FastPass，然後早上去 ToonTown 找卡通角色，順便玩玩那邊的設施，然後預約紅心女王餐廳和抽 One Man's Dream 表演的票，早點卡夜間遊行的位置吧。</p>

<p>然後迪士尼真的還蠻會搞花樣的，例如我去的時間就有一些聖誕節的特別版本，還有聖誕遊行，現在那邊已經變成 Frozen 的特別版，變成冬天雪景佈置，然後每天多兩場 Frozen 特別遊行，連 Once Upon a Time 都變成 Frozen 特別版，難怪會很多人買年票。</p>

<p>最後一張照片是晚上的 Disney Land 城堡。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16051080560/" title="Tokyo Disney Land Castle by othree, on Flickr"><img src="https://farm9.staticflickr.com/8664/16051080560_ebf9341310_b.jpg" width="683" height="1024" alt="Tokyo Disney Land Castle" src-1="(max-width: 768px)  https://farm9.staticflickr.com/8664/16051080560_ebf9341310.jpg 1x, https://farm9.staticflickr.com/8664/16051080560_ebf9341310_b.jpg 2x" src-2="https://farm9.staticflickr.com/8664/16051080560_37b785389d_k.jpg 2x" /></a></p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000827" baseName="disney-timeless-story-marunouchi">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-01-07</b:date>
				<b:time>13:56:44</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>Disney TIMELESS STORY 東京丸之內</b:title>
			<b:content>
				<b:summary>這次去東京其中一個目標就是去拍東京車站，拍東京車站其實就兩個點，丸之內大樓和新丸之內大樓，因為據說新丸之內大樓景比較漂亮，所以就先過去新丸，結果不知道為什麼超多人的。...</b:summary>
				<b:mainContent><p>這次去東京其中一個目標就是去拍東京車站，拍東京車站其實就兩個點，<a href="http://www.marunouchi.com/top/marubiru">丸之內大樓</a>和<a href="http://www.marunouchi.com/top/shinmaru.html">新丸之內大樓</a>，因為據說新丸之內大樓景比較漂亮，所以就先過去新丸，結果不知道為什麼超多人的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15999587797/" title="新丸大樓 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7485/15999587797_e2951e8028_b.jpg" width="1024" height="683" alt="新丸大樓" srcset="https://farm8.staticflickr.com/7485/15999587797_e2951e8028.jpg 768w, https://farm8.staticflickr.com/7485/15999587797_3cb4ba1de0_k.jpg 2x" /></a></p>
</b:mainContent>
				<b:extendContent><p>這是大樓外面排隊的人潮，從地下道雖然有直通，但是會被引導出來排隊進大樓，電扶梯也是滿滿的人。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15999585707/" title="新丸大樓 by othree, on Flickr"><img src="https://farm9.staticflickr.com/8614/15999585707_4366e3eec2_b.jpg" width="1024" height="683" alt="新丸大樓" srcset="https://farm9.staticflickr.com/8614/15999585707_4366e3eec2.jpg 768w, https://farm9.staticflickr.com/8614/15999585707_c608a96cad_k.jpg 2x" /></a></p>

<p>然後到三樓繞了一大圈排隊，想說東京車站夜景有這麼夯嗎，日本人都要排隊才看的到，然後就傻傻的跟著排到最後發現，是魔髮奇緣的裝置場景：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15999327639/" title="新丸大樓 魔髮奇緣 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7531/15999327639_d7e1eef74b_b.jpg" width="1024" height="683" alt="新丸大樓 魔髮奇緣" srcset="https://farm8.staticflickr.com/7531/15999327639_d7e1eef74b.jpg 768w, https://farm8.staticflickr.com/7531/15999327639_e723a6ccb4_k.jpg 2x" /></a></p>

<p>原來其實根本是誤會一場，到三樓後我可以直接繼續往上到七樓的，還傻傻的排隊，只好順便拍個照就上去七樓，結果沒想到新丸大樓七樓現在沒開放，沒說什麼原因，似乎是要維護檢查之類的，只好跑去丸大樓看，然後在地下道發現這是 Disney 和丸之內商圈的合作聖誕節活動「TIMELESS STORY」：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16017918950/" title="Disney TIMELESS Story 東京丸之內 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7463/16017918950_cb58c5e6a1_b.jpg" width="683" height="1024" alt="Disney TIMELESS Story 東京丸之內" srcset="https://farm8.staticflickr.com/7463/16017918950_cb58c5e6a1.jpg 768w, https://farm8.staticflickr.com/7463/16017918950_04b0bc2691_k.jpg 2x" /></a></p>

<p>海報上發現丸之內大樓也有，而且還是 Frozen，感覺人就會多到滿出來的樣子，結果就是這種情形：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15999578907/" title="丸大樓 Frozen by othree, on Flickr"><img src="https://farm9.staticflickr.com/8587/15999578907_2502cbddb4_b.jpg" width="1024" height="683" alt="丸大樓 Frozen" srcset="https://farm9.staticflickr.com/8587/15999578907_2502cbddb4.jpg 768w, https://farm9.staticflickr.com/8587/15999578907_89f9909fce_k.jpg 2x" /></a></p>

<p>真不愧是 Frozen，先不論人數，這兩者的規模也差太多了，靠近一點看可以看到做得很精緻。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15999569917/" title="丸大樓 Frozen by othree, on Flickr"><img src="https://farm8.staticflickr.com/7503/15999569917_8ed93cdd71_b.jpg" width="683" height="1024" alt="丸大樓 Frozen" srcset="https://farm8.staticflickr.com/7503/15999569917_8ed93cdd71.jpg 768w, https://farm8.staticflickr.com/7503/15999569917_5111b4c7eb_k.jpg 2x" /></a></p>

<p>然後是立體的 Elsa 和 Ana</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16159561936/" title="丸大樓 Frozen by othree, on Flickr"><img src="https://farm8.staticflickr.com/7575/16159561936_dd3d29d432_b.jpg" width="1024" height="683" alt="丸大樓 Frozen" srcset="https://farm8.staticflickr.com/7575/16159561936_dd3d29d432.jpg 768w, https://farm8.staticflickr.com/7575/16159561936_0bd166628d_k.jpg 2x" /></a></p>

<p>回來看看魔髮奇緣的兩位主角</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15998066910/" title="新丸大樓 魔髮奇緣 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7578/15998066910_a7e345f890_b.jpg" width="1024" height="683" alt="新丸大樓 魔髮奇緣" srcset="https://farm8.staticflickr.com/7578/15998066910_a7e345f890.jpg 768w, https://farm8.staticflickr.com/7578/15998066910_51d8f223a8_k.jpg 2x" /></a></p>

<p>只是兩片版子，還是黑的，真是太可憐了～～</p>

<p>其實看那張海報會發現還有米老鼠、維尼、愛麗斯夢遊仙境和兩個電影的場景，不過我就沒花時間去別棟大樓找了，最後來看看東京車站吧。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15565585843/" title="東京車站 by othree, on Flickr"><img src="https://farm9.staticflickr.com/8662/15565585843_66a48da675_b.jpg" width="1024" height="683" alt="東京車站" srcset="https://farm9.staticflickr.com/8662/15565585843_66a48da675.jpg 768w, https://farm9.staticflickr.com/8662/15565585843_3285cb75b8_k.jpg 2x" /></a></p>

<p>這是丸大樓拍過去的樣子，真的應該是新丸大樓的角度比較好，沒有右下角那塊黑黑的東西，然後高度也是，新丸大樓看車站的地方比丸大樓高兩層，另外可以發現車站本體雖然完工了，不過前面的馬路動線還沒好，不知道全部都弄好時看起來會怎樣。</p>

<p>另外丸大樓雖然目前看起來拍車站角度比較不好，不過有另外一個優點是可以看到日本郵局總局，也就是現在已經變成複合型商場的 <a href="http://jptower-kitte.jp/">KITTE</a>（還蠻好逛的），這個其實現在只有門面這塊是以前的樣子，可以從旁邊看到後面已經是新大樓了，和台灣那棟整棟都還在的不一樣啊～～</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15563003714/" title="PC230852 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7488/15563003714_72f6f2f562_b.jpg" width="1024" height="683" alt="PC230852" srcset="https://farm8.staticflickr.com/7488/15563003714_72f6f2f562.jpg 768w, https://farm8.staticflickr.com/7488/15563003714_31a6668394_k.jpg 2x" /></a></p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000826" baseName="android-l-webview-fullscreen-api">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2015-01-05</b:date>
				<b:time>21:20:32</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Android L WebView Fullscreen API</b:title>
			<b:content>
				<b:summary>今天遇到一個問題是，本來好好的全螢幕影片播放功能，到了 Android L 的 Facebook App 裡的 webview 瀏覽器就壞掉了，而且透過開發工具看沒有錯誤訊息出來，查了一陣子終於發現，最新的 webview 改成使用 Chrome 核心後，有些 API 雖然 Chrome 有支援，但是在 WebView 裡面是沒開啟的。 其實我本來已經有用 feature detection 的寫法了，不過這個情形實際上，requestFullscreen 是找的到，可以執行，也不會有錯誤的，只是就是什麼事情都不會發生，後來才 發現 是要用 document.fullscreenEnabled 來做判斷，這個東西我之前一直覺得在手機上都用不到的東西（桌面瀏覽器通常會先問使用者是否願意讓網頁進入全螢幕），沒想到會在這邊派上用場啊。...</b:summary>
				<b:mainContent><p>今天遇到一個問題是，本來好好的全螢幕影片播放功能，到了 Android L 的 Facebook App 裡的 webview 瀏覽器就壞掉了，而且透過開發工具看沒有錯誤訊息出來，查了一陣子終於發現，最新的 webview 改成使用 Chrome 核心後，有些 API 雖然 Chrome 有支援，但是在 WebView 裡面是<a href="https://developer.chrome.com/multidevice/webview/overview#does_the_new_webview_have_feature_parity_with_chrome_for_android_">沒開啟</a>的。</p>

<p>其實我本來已經有用 feature detection 的寫法了，不過這個情形實際上，<code>requestFullscreen</code> 是找的到，可以執行，也不會有錯誤的，只是就是什麼事情都不會發生，後來才 <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode#Other_information">發現</a> 是要用 <code>document.fullscreenEnabled</code> 來做判斷，這個東西我之前一直覺得在手機上都用不到的東西（桌面瀏覽器通常會先問使用者是否願意讓網頁進入全螢幕），沒想到會在這邊派上用場啊。</p>
</b:mainContent>
				<b:extendContent>
</b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
