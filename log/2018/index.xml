<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>y</b:listType>
			<b:listData listID="2018">2018</b:listData>

			<b:previous>
				<b:mTitle>2017</b:mTitle>
				<b:mDate>2017</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>2019</b:mTitle>
				<b:mDate>2019</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000948" baseName="kobo-forma">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-12-31</b:date>
				<b:time>17:57:20</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>Kobo Forma</b:title>
			<b:content>
				<b:summary> 最近終於入手我的第一台電子紙式的電子書了，其實嚴格說來是中了 Kobo 行銷的坑，其實我是一直有想買一台電子書很久，今年 Kobo 兩週年活動很大手筆的全站 50% off，加上還有開賣 Kobo Aura One，雖然當時已經有 Kindle 要進台灣的風聲了，不過現在中文書 Kobo 已經有很多了，加上漫畫輕小說也都有，所以最後就還是下手了，結果在等待到貨的時候，就看到有新機種的風聲，後來確定之後我就立馬取消 Aura One 的訂單，還好我當時沒買到現貨，新款就是現在入手的 Kobo Forma 了。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/46482862282/" title="Kobo Forma by othree, on Flickr"><img src="https://farm8.staticflickr.com/7818/46482862282_5ca67c3fbc_b.jpg" intrinsicsize="683x1024" width="683" height="1024" alt="Kobo Forma" srcset="https://farm8.staticflickr.com/7818/46482862282_5ca67c3fbc_b.jpg 683w, https://farm8.staticflickr.com/7818/46482862282_df0e51c0a5_h.jpg 1067w" /></a></p>
<p>最近終於入手我的第一台電子紙式的電子書了，其實嚴格說來是中了 Kobo 行銷的坑，其實我是一直有想買一台電子書很久，今年 Kobo 兩週年活動很大手筆的全站 50% off，加上還有開賣 Kobo Aura One，雖然當時已經有 Kindle 要進台灣的風聲了，不過現在中文書 Kobo 已經有很多了，加上漫畫輕小說也都有，所以最後就還是下手了，結果在等待到貨的時候，就看到有新機種的風聲，後來確定之後我就立馬取消 Aura One 的訂單，還好我當時沒買到現貨，新款就是現在入手的 <a href="https://books.rakuten.co.jp/event/e-book/ereaders/koboforma/">Kobo Forma</a> 了。</p>
</b:mainContent>
				<b:extendContent><p>我自己對於電子書的需求其實不多，就是還要能看漫畫而已，所以螢幕要大一點，容量也要夠，另外就是解析度了，早期的 Kindle 先不論螢幕大小和容量，那個電子紙的解析度實在不太夠，所以也是等技術夠成熟等了好一陣子，直到這幾年才覺得差不多了，就先來看一下 Forma 看漫畫的效果吧：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31594585267/" title="Kobo Forma by othree, on Flickr"><img src="https://farm8.staticflickr.com/7861/31594585267_e8288b2bbc_b.jpg" intrinsicsize="683x1024" width="683" height="1024" alt="Kobo Forma" srcset="https://farm8.staticflickr.com/7861/31594585267_e8288b2bbc_b.jpg 683w, https://farm8.staticflickr.com/7861/31594585267_c8533a10b1_h.jpg 1067w" /></a></p>
<p>放大看（鏡頭光圈太大影像有點散）：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31594583877/" title="Kobo Forma by othree, on Flickr"><img src="https://farm5.staticflickr.com/4829/31594583877_b5256f2e62_b.jpg" intrinsicsize="683x1024" width="683" height="1024" alt="Kobo Forma" srcset="https://farm5.staticflickr.com/4829/31594583877_b5256f2e62_b.jpg 683w, https://farm5.staticflickr.com/4829/31594583877_9abae2f4b8_h.jpg 1067w" /></a></p>
<p>內頁的話：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/44717450290/" title="Kobo Forma by othree, on Flickr"><img src="https://farm8.staticflickr.com/7809/44717450290_c326e7ba2d_b.jpg" intrinsicsize="683x1024" width="683" height="1024" alt="Kobo Forma" srcset="https://farm8.staticflickr.com/7809/44717450290_c326e7ba2d_b.jpg 683w, https://farm8.staticflickr.com/7809/44717450290_4e7eb91917_h.jpg 1067w" /></a></p>
<p>我覺得表現已經很可以了，圖像文字都夠清楚，看文字書的話：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/45621272285/" title="Kobo Forma by othree, on Flickr"><img src="https://farm5.staticflickr.com/4840/45621272285_915c07d7ef_b.jpg" intrinsicsize="683x1024" width="683" height="1024" alt="Kobo Forma" srcset="https://farm5.staticflickr.com/4840/45621272285_915c07d7ef_b.jpg 683w, https://farm5.staticflickr.com/4840/45621272285_713f8cf314_h.jpg 1067w" /></a></p>
<p>放大看（太靠近邊緣散了）：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/44717445910/" title="Kobo Forma by othree, on Flickr"><img src="https://farm5.staticflickr.com/4905/44717445910_1482047229_b.jpg" intrinsicsize="683x1024" width="683" height="1024" alt="Kobo Forma" srcset="https://farm5.staticflickr.com/4905/44717445910_1482047229_b.jpg 683w, https://farm5.staticflickr.com/4905/44717445910_7bfd1c52e2_h.jpg 1067w" /></a></p>
<p>直排小說：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/45621268375/" title="Kobo Forma by othree, on Flickr"><img src="https://farm8.staticflickr.com/7908/45621268375_1ca4f8f4f3_b.jpg" intrinsicsize="683x1024" width="683" height="1024" alt="Kobo Forma" srcset="https://farm8.staticflickr.com/7908/45621268375_1ca4f8f4f3_b.jpg 683w, https://farm8.staticflickr.com/7908/45621268375_6535785b52_h.jpg 1067w" /></a></p>
<p>整體而言我是很滿意，不過還是有些地方覺得可惜，所以就來說說目前的使用後覺得可惜吧，畢竟網路上開箱文很多了，首先，是 Micro USB 而不是 Type-C 的頭蠻可惜，都 2017 年末了竟然出不是 Type-C 接頭的裝置，我看下一代出的時候我會為了接頭更新吧，不過隨附的線還蠻厲害，是雙頭都雙面可插的線。</p>
<p>第二點就是皮革漆，雖然觸感比較好，不過就是會吸附油脂變白：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32661452008/" title="Kobo Forma by othree, on Flickr"><img src="https://farm5.staticflickr.com/4823/32661452008_f20a8a1b78_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="Kobo Forma" srcset="https://farm5.staticflickr.com/4823/32661452008_f20a8a1b78_b.jpg 1024w, https://farm5.staticflickr.com/4823/32661452008_e2d93cf35c_h.jpg 1600w" /></a></p>
<p>這種我到現在都還不知道怎麼清潔，而且很怕皮革漆以後又開始脫皮。然後是翻頁功能，先說按鈕的部分，我都是拿垂直（portrait）使用，設定的時候就是上下兩個按鍵分別是上一頁還是下一頁，不管你是左手拿還是右手拿都是只看那個按鈕在上，那個在下，這樣使用上是還好，不過觸控換頁就有點可惜了，它設計也是看裝置的方向，所以你設定成左邊下一頁，不管你是左手拿：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/45811002554/" title="Kobo Forma by othree, on Flickr"><img src="https://farm5.staticflickr.com/4883/45811002554_5dc419d51f_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="Kobo Forma" srcset="https://farm5.staticflickr.com/4883/45811002554_5dc419d51f_b.jpg 1024w, https://farm5.staticflickr.com/4883/45811002554_ddd26904a6_h.jpg 1600w" /></a></p>
<p>還是右手拿：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31594578287/" title="Kobo Forma by othree, on Flickr"><img src="https://farm8.staticflickr.com/7883/31594578287_5c4a077fdd_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="Kobo Forma" srcset="https://farm8.staticflickr.com/7883/31594578287_5c4a077fdd_b.jpg 1024w, https://farm8.staticflickr.com/7883/31594578287_5e86e8e154_h.jpg 1600w" /></a></p>
<p>都是要點左邊才是下一頁，如果要改行為要進設定調整，所以我臨時需要換手使用一陣子，翻頁時就會變的卡卡的不能一隻手就處理好，然後觸控也不能把 swiping 關掉：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31594571837/" title="Kobo Forma by othree, on Flickr"><img src="https://farm5.staticflickr.com/4808/31594571837_840b18f643_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="Kobo Forma" srcset="https://farm5.staticflickr.com/4808/31594571837_840b18f643_b.jpg 1024w, https://farm5.staticflickr.com/4808/31594571837_1f16e9a189_h.jpg 1600w" /></a></p>
<p>再來就是換頁蠻常觸發到劃重點（查字典）的功能：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/46534736331/" title="Kobo Forma by othree, on Flickr"><img src="https://farm5.staticflickr.com/4861/46534736331_463d75ff96_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="Kobo Forma" srcset="https://farm5.staticflickr.com/4861/46534736331_463d75ff96_b.jpg 1024w, https://farm5.staticflickr.com/4861/46534736331_31b4b73233_h.jpg 1600w" /></a></p>
<p>而且有時候會卡住蠻久沒反應，有點討厭，而且這功能也關不起來。最後就是書籍清單：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/45621256175/" title="Kobo Forma by othree, on Flickr"><img src="https://farm8.staticflickr.com/7875/45621256175_f1f28efc7c_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="Kobo Forma" srcset="https://farm8.staticflickr.com/7875/45621256175_f1f28efc7c_b.jpg 1024w, https://farm8.staticflickr.com/7875/45621256175_af6a6dac7e_h.jpg 1600w" /></a></p>
<p>缺了「系列」的選項（網站上有），這在看漫畫這種集數多的書時很不方便，目前是先用作者清單先擋一下，另外也有發現有些同系列書的幾本系列名有錯誤。另外雖然可以把標題和進度關閉，不過我其實更想要進度能夠同時顯示整體進度和章節進度，目前是只能二選一。好在這些問題大多是軟體的問題，再來找一下官方要哪裡回報。</p>
<p>最後來講一下我預期之外的優點吧，第一個是原廠皮革保護套很不錯，本來是有點猶豫怕加上後太重，不過結果完全沒這問題，用它來切換睡眠也比較簡單，不然按完按鈕還要用手往上滑一下。然後就是 bedtime (aka night shift) 和自動感光的背光照明了，night shift 功能（接近睡眠時間會用暖色）是我之前完全沒注意到的，然後就是環境光線不足時，它是用整個螢幕的背光來照明，我記得以前有些電子書是旁邊一個小的閱讀燈，兩者的視覺效果是差很多的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/45811000084/" title="Kobo Forma by othree, on Flickr"><img src="https://farm8.staticflickr.com/7896/45811000084_0f2ab63408_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="Kobo Forma" srcset="https://farm8.staticflickr.com/7896/45811000084_0f2ab63408_b.jpg 1024w, https://farm8.staticflickr.com/7896/45811000084_db541fce85_h.jpg 1600w" /></a></p>
<p>雖然說了這麼多缺點，不過整體而實我是很滿意的，入手之後也已經用它讀了 12 本輕小說和看了幾本漫畫，大概可以撐到 USB Type-C 接頭的機種出來吧。</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000946" baseName="browser-diversity">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-12-27</b:date>
				<b:time>22:47:53</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>瀏覽器多樣性 Browser Diversity</b:title>
			<b:content>
				<b:summary>前陣子大事就是微軟要放棄自家的 EdgeHTML 引擎，轉用 Chromium 專案為基礎來開發新版的 Edge Browser 了，風聲剛出來的時候，我注意到微軟官方完全沒做出回應，也沒有任何微軟員工出來講話，加上有些媒體早就發現到有 Edge 的開發成員在貢獻 Chromium，我就覺得是真的了，後來十二月六日微軟正式回應，還有一份比較長的聲明，Mozilla 也有回應，其實這件事情對於網路生態算是很大的衝擊，不過一般使用者可能沒什麼感覺，加上都沒看到中文的文章寫這件事情的影響，所以只好我來寫一下了。 首先，我講可能沒什麼公信力，所以可以直接來看一下 Google(?) 其中一集 HTTP 203 短片，標題是 Browser Monoculture，Monoculture 剛好是 Diversity 的相對，mono 是單一，單聲道或是黑白影像都是用 mono，culture 就是文化，Monoculture 的意思自然可以明白： 事實上，當微軟放棄 EdgeHTML 引擎之後，現在整個生態圈只剩下 Firefox 的 Gecko 引擎和 WebKit 家族（Safari 的 WebKit 和 Chrome...</b:summary>
				<b:mainContent><p>前陣子大事就是微軟要放棄自家的 EdgeHTML 引擎，轉用 Chromium 專案為基礎來開發新版的 Edge Browser 了，風聲剛出來的時候，我注意到微軟官方完全沒做出回應，也沒有任何微軟員工出來講話，加上有些媒體早就發現到有 Edge 的開發成員在貢獻 Chromium，我就覺得是真的了，後來十二月六日微軟<a href="https://blogs.windows.com/windowsexperience/2018/12/06/microsoft-edge-making-the-web-better-through-more-open-source-collaboration/">正式回應</a>，還有一份比較長的<a href="https://github.com/MicrosoftEdge/MSEdge">聲明</a>，Mozilla 也有<a href="https://blog.mozilla.org/blog/2018/12/06/goodbye-edge/">回應</a>，其實這件事情對於網路生態算是很大的衝擊，不過一般使用者可能沒什麼感覺，加上都沒看到中文的文章寫這件事情的影響，所以只好我來寫一下了。</p>
<p>首先，我講可能沒什麼公信力，所以可以直接來看一下 Google(?) 其中一集 HTTP 203 短片，標題是 Browser Monoculture，Monoculture 剛好是 Diversity 的相對，mono 是單一，單聲道或是黑白影像都是用 mono，culture 就是文化，Monoculture 的意思自然可以明白：</p>
<div class="embed_16_9">
  <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/IskiTVqHp18" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>事實上，當微軟放棄 EdgeHTML 引擎之後，現在整個生態圈只剩下 Firefox 的 Gecko 引擎和 WebKit 家族（Safari 的 WebKit 和 Chrome 的 Blink ），而 WebKit 家族現在的市佔率已經是超過八成的獨大局面，行動裝置領域更是嚴重，如果扣除 iOS 的 Mobile Safari 則幾乎都是 Chrome 的天下了，幾乎是回到 IE 壟斷的時光，不過其實我覺得現在狀況又比那時候更險峻一點，有兩個問題：第一個是現在的 Web Platform 已經太複雜了，HTML 本身還算是單純的部分，但是各種 CSS、Web API 的推陳出新，再加上安全性、親和力、網路連線、Extensible Web 等等，到底有多少東西呢？可以參考我之前貼過的 <a href="https://blog.othree.net/log/2018/09/16/web-platform/">Web Platform</a> 那篇文章中 <a href="https://www.chromestatus.com/features">Google Chrome 的 Platform Status</a>，光這邊登記在案的，現在就有 1255 個功能，還有不少面向的東西不會列在這邊，像是效能、開發工具、WebDriver 等，其實我已經不認為現在有什麼其他第三方勢力還有辦法維護一個獨自的瀏覽器引擎了，就算是 Google 一開始也是從 WebKit，Mozilla 也是從 Gecko 來發展，微軟今天放棄繼續開發 EdgeHTML 之後，可能過一兩年就會讓它難以再次跟上標準的發展，其實微軟當年能從把 IE 重構成現在的 Edge 我覺得實在很厲害了，不過未來這種事情難度只會越來越高。</p>
<p>第二個是如果 Chrome 已經佔有率這麼高，它是不是可以自己開始亂搞加功能呢？就像是以前的 IE。答案其實是<strong>可以</strong>，只是現在手法已經進化了，以下舉個例子，不過先消毒，我不是指控 Google Chrome 團隊這件事是 be evil，而是假設要 be evil，這已經是可行的方法，或是換個角度，他們其實不覺得自己在 be evil，只是結果就是這樣了。</p>
<p>我要舉的例子是前兩週 Chrome 發表了他們支援 Background Fetch 這個新標準的<a href="https://developers.google.com/web/updates/2018/12/background-fetch">消息</a>，我第一時間反應其實是，WTF 我怎麼完全沒聽過這東西，然後我就去查查怎麼回事，然後了解到：</p>
<ol>
<li>看介紹大概就了解這個需求確實是有的</li>
<li>Chrome 外其他家都還沒有說要支援（根據 <a href="https://www.chromestatus.com/feature/5712608971718656">Chrome Platform Status</a>）</li>
<li>標準文件的兩位編輯都是 Google 的人，主要應該是 Jake Archibald</li>
<li>WICG <a href="https://discourse.wicg.io/t/proposal-background-fetch/1994">那邊</a>是去年二月也是由 Jake Archibald 提的，然後 W3C 那邊根據 blink-dev 的正向回饋就決定接收提案了</li>
</ol>
<p>這狀況有點讓我聯想到「進化的獨裁者」，一切該有的過程其實都有，但是就都是他們的人，自己提案說有這需求，有寫好文件了，在自己家的討論區得到正向回饋，然後實做起來馬上就有市場 80% 的支援度了，這樣要不要直接算正式的網路標準了，其他家（aka Firefox）又情何以堪。事實上 Chrome 這樣衝網路標準的狀況也好一陣子了，早在 2015 年 ppk 就已經有提出對於標準發展太快的疑慮而發了一篇 <a href="https://www.quirksmode.org/blog/archives/2015/07/stop_pushing_th.html">Stop pushing the web forward</a>。</p>
<p>而除了快速的發展新功能之外，還有一種狀況是擱置他們覺得不重要的 Web API 開發，然後因為已經獨大了，所以開發者就算很想要這個新的 Web API 也是無能為力，這其實也就是 HTTP 203 短片有提到的，多樣性意味著開發者有選擇的權力，而有這個力量才能讓兩邊對等。</p>
<p>而除了這兩個問題之外，也有人提出我之前沒想過的安全性問題，剛好就在微軟發佈消息之後沒多久就爆發出 <a href="https://www.zdnet.com/article/sqlite-bug-impacts-thousands-of-apps-including-all-chromium-based-browsers/">SQLite 漏洞</a>，ZDNet 的標題提到影響到所有以 Chromium 為基礎的瀏覽器，這也是一個我之前沒想到過的問題，如果獨大的軟體有嚴重的漏洞，那一下就直接影響超多人，不過其實這次的漏洞連 Firefox 也有受影響，然後也還好不是直接可以遠端就下手的漏洞，其實佔有率高的軟體或服務都一直是駭客的目標，想必 Chromium 的 Blink 核心之後勢必會更加受到駭客關注吧。</p>
<p>這陣子這個圈子很多人都已經發表過看法了，像是 <a href="https://www.quirksmode.org/blog/archives/2018/12/chromedge_and_h.html">ppk</a> 和 <a href="https://www.zeldman.com/2018/12/07/browser-diversity-starts-with-us/">Zeldman</a> 都出來發表意見，如果有人不知道這兩位是誰，趁機介紹一下，Jeffery Zeldman 是 <a href="https://en.wikipedia.org/wiki/Designing_with_Web_Standards">Designing with Web Standards</a> 的作者，A List Apart（A Book Apart, An Event Apart 等）和 <a href="https://www.webstandards.org/">Web Standards Project</a> 的發起人，也是當年推動瀏覽器實做應該回歸網路標準的意見領袖，ppk 也是那個時期蠻活躍的，做了很多相容性測試，著有 ppk on JavaScript，當年是很棒的入門書。大部分的人其實都是針對 monoculture 論述，然後建議大家現在就開始行動，包括確保你的網站支援 Firefox、開始使用 Firefox 等等，不過 Lea Verou 有則評論則是針對那些覺得少一個瀏覽器要測試很高興的開發者，講的比較重：</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">If you think a WebKit monoculture is good for web developers or the Web, you're incredibly short-sighted (and likely inexperienced), sorry.</p>- Lea Verou (@LeaVerou) <a href="https://twitter.com/LeaVerou/status/301727973273391104?ref_src=twsrc%5Etfw">February 13, 2013</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>至於事主之一的 Google 則就裝死當沒他的事。總之，現在雖然 Firefox 還有個 10% 左右的佔有率，光看數字還比 IE 那時候好，但是我卻覺得情勢更加險峻，很難再有新的競爭者出來，只能希望 Google  don't be evil，還有 Mozilla 能夠堅持下去，真是有點想念還有五大主流瀏覽器的時候啊。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000945" baseName="conf-photograper">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-12-17</b:date>
				<b:time>23:12:18</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>記錄組記錄記錄</b:title>
			<b:content>
				<b:summary> 這是篇拖稿超過一年以上的文章啊，去年就把一部份大綱騰好了，結果一直沒動筆，剛好今年開始變半退休狀態的紀錄組員，所以想說不能再拖了，才終於開始動手了，接下來就來記錄這幾年來參與社群研討會記錄組的記錄吧。 雖然大部分的研討會稱為記錄組（documentary），但是其實幾乎是只負責攝影記錄（拍照、photography），HITCON 以前倒是就很正確的稱為攝影組，這兩年又改成記錄組，反倒是 COSCUP 以前叫記錄組，今年叫攝影組了... 其實記錄這詞並沒限制在攝影記錄上，COSCUP 曾經有幾年是記錄組還有處理過錄影記錄，不過近年工作量太大，都包組長會太吃力，所以後來錄影記錄部分都還是拆出去跟直播混在一起，而除了攝影紀錄和錄影記錄外，其實還有文字紀錄，不過就我所知只有 JSDC 有官方做的，TonyQ 的堅持。總之後面文章依然稱為記錄組，實際上是主要在討論攝影紀錄的部分啦。 以下預計分為兩篇，第一篇（就是這篇）先記錄我這幾年的心路歷程，後篇記錄記錄（攝影）組現在的工作方式、流程等細節，也可以當作公開文件，第二篇還在寫，今年大概來不及寫完了，或許農曆年前有機會把主要的文字寫好吧。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/14547779017/" title="COSCUP 2014 Day1 記錄組 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2913/14547779017_c7aeb4db56_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="COSCUP 2014 Day1 記錄組" srcset="https://farm3.staticflickr.com/2913/14547779017_c7aeb4db56_b.jpg 1024w, https://farm3.staticflickr.com/2913/14547779017_2761103bbb_h.jpg 1600w" /></a></p>
<p>這是篇拖稿超過一年以上的文章啊，去年就把一部份大綱騰好了，結果一直沒動筆，剛好今年開始變半退休狀態的紀錄組員，所以想說不能再拖了，才終於開始動手了，接下來就來記錄這幾年來參與社群研討會記錄組的記錄吧。</p>
<p>雖然大部分的研討會稱為記錄組（documentary），但是其實幾乎是只負責攝影記錄（拍照、photography），HITCON 以前倒是就很正確的稱為攝影組，這兩年又改成記錄組，反倒是 COSCUP 以前叫記錄組，今年叫攝影組了... 其實記錄這詞並沒限制在攝影記錄上，COSCUP 曾經有幾年是記錄組還有處理過錄影記錄，不過近年工作量太大，都包組長會太吃力，所以後來錄影記錄部分都還是拆出去跟直播混在一起，而除了攝影紀錄和錄影記錄外，其實還有文字紀錄，不過就我所知只有 JSDC 有官方做的，TonyQ 的堅持。總之後面文章依然稱為記錄組，實際上是主要在討論攝影紀錄的部分啦。</p>
<p>以下預計分為兩篇，第一篇（就是這篇）先記錄我這幾年的心路歷程，後篇記錄記錄（攝影）組現在的工作方式、流程等細節，也可以當作公開文件，第二篇還在寫，今年大概來不及寫完了，或許農曆年前有機會把主要的文字寫好吧。</p>
</b:mainContent>
				<b:extendContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/10710491495/" title="Canon AE-1 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7430/10710491495_a9c8d117a4_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="Canon AE-1" srcset="https://farm8.staticflickr.com/7430/10710491495_a9c8d117a4_b.jpg 1024w, https://farm8.staticflickr.com/7430/10710491495_06f2f4e618_h.jpg 1600w" /></a></p>
<p>我和攝影的緣分其實是從上面那台 Canon AE-1 開始的，這台是我爸的底片相機，在接觸到這台相機之前，其實傻瓜相機也是有玩過，不過就是一般家庭出遊拍照那樣，沒認真拍過照，發現家裡有這台相機之後，出遊就會試著帶他出門，記得小時候有一次家裡跟團搭遊覽車出去玩，經過海邊時，為了拍一張海岸的照片，等海浪等到整遊覽車的人都在等我，後來還是我媽跑來找我，結果那張照片我媽說很多朋友要加洗，讓我很受鼓舞，之後也就一直維持著對攝影的興趣，不過都沒真的進一步深入，而且這台實在是很重，全金屬機身，現在我已經覺得重到不想用了，不過實在是很喜歡裂像對焦、機械快門的聲音和感覺。</p>
<p>後來到了數位相機時代，其實一直對 DSLR 有些興趣想入手，不過體積重量讓人感到卻步，所以只有買小 DC 加減拍，直到 2009 年的 M43 系統的 Olympus E-P1，我才終於有就是這台了的感覺，也正式入手了我的第一台可換鏡頭的數位相機，於是 2009 我更積極的帶著相機跑去技術社群研討會拍照，一開始比較像是我對攝影有興趣、想盡量找機會拍照，然後我也對技術社群研討會有興趣，所以有了帶相機去技術社群研討會拍照的想法，拍的照片就丟上 Flickr，那兩年主要是有去 COSCUP 和 OSDC 加減拍，除了社群研討會之外，我還拍了不少 Moztw 的活動，像是那幾年的<a href="https://www.flickr.com/photos/othree/sets/72157625113595042">生</a><a href="https://www.flickr.com/photos/othree/sets/72157625113646352">日</a> Party，結果 2011 年的時候，當年 COSCUP 的紀錄組長小朱主動找上我問我有沒有興趣加入記錄組，於是從那年我才開始在社群研討會當記錄組志工，那幾年就是一直跌跌撞撞自己邊學邊拍，剛開始連色溫是什麼都不懂，所以照片都黃黃的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/3825883141/" title="P8161402 by othree, on Flickr"><img src="https://farm4.staticflickr.com/3534/3825883141_fe24ec08e6_b.jpg" intrinsicsize="768x1024" width="768" height="1024" alt="P8161402" srcset="https://farm4.staticflickr.com/3534/3825883141_fe24ec08e6_b.jpg 768w" /></a></p>
<p>2011 年記錄組其實就已經有一份對組員的工作介紹<a href="https://drive.google.com/file/d/0B5M9BKeFzSyHODcxYThhODYtY2ZhZi00YWVkLTkzZGItZjVlZGE1YzkwZmYx/view?usp=sharing">投影片</a>（經小朱同意放上連結），我對研討會攝影記錄工作的理解起點其實是從這邊開始的，有興趣的可以看看，其實很多流傳已久的基本工作項目在這個時候就已經有明確的定下來了，到 2012 年 Allen 也找我加入 HITCON 的攝影組，然後 2013 那年本來 Bobchao 有問我要不要接 COSCUP 的紀錄組長的工作，不過那時候我打算要衝博士班畢業所以放棄沒接手，不過後來我放棄 2013 畢業，之後 Allen 就剛好問我有沒有想接手 HITCON 攝影組組長的工作，結果我就一直做到去年，其實這中間也有考慮應該要交棒出去，剛好去年 HITCON 有副組長編制，然後今年我家小孩又跑出來，就順水推舟把棒子交出去了，COSCUP 則是一直做組員而已，雖然好像很多人以為我有當過 COSCUP 記錄組組長，不過實際上並沒有～</p>
<p>拍這麼多場下來其實對我來說也是有點後遺症的，像是最近有機會當純會眾，但是都當的很不適應，無法定下心來認真聽，還在努力適應中。整理一下開始比較認真以來拍過參與過的研討會，以下是我自己的相簿，有些是都丟官方相簿自己沒開相簿的就沒放連結了：</p>
<ul>
<li>2009: <a href="https://www.flickr.com/photos/othree/sets/72157621922185831">COSCUP</a>, OSDC</li>
<li>2010: <a href="https://www.flickr.com/photos/othree/sets/72157624717324004">COSCUP</a>, OSDC</li>
<li>2011: <a href="https://www.flickr.com/photos/othree/sets/72157627429874999">COSCUP</a>, OSDC, <a href="https://www.flickr.com/photos/othree/sets/72157627798533377">PHPConf</a></li>
<li>2012: <a href="https://www.flickr.com/photos/othree/sets/72157631204280794">COSCUP</a>, HITCON, <a href="https://www.flickr.com/photos/othree/sets/72157629813540539">OSDC</a>, JSDC, <a href="https://www.flickr.com/photos/othree/sets/72157631923222362">PHPConf</a></li>
<li>2013: <a href="https://www.flickr.com/photos/othree/sets/72157633006652796">COSCUP</a>, HITCON, <a href="https://www.flickr.com/photos/othree/sets/72157633285813487">OSDC</a>, <a href="https://www.flickr.com/photos/othree/sets/72157632513210336">WebConf</a>, <a href="https://www.flickr.com/photos/othree/sets/72157637051143764">MOPCON</a>, <a href="https://www.flickr.com/photos/othree/albums/72157636566067766">Mozilla Summit</a></li>
<li>2014: <a href="https://www.flickr.com/photos/othree/sets/72157644494249041">COSCUP</a>, <a href="https://www.flickr.com/photos/othree/sets/72157645480813455">HITCON</a>, <a href="https://www.flickr.com/photos/othree/albums/72157643898997823">OSDC</a></li>
<li>2015: COSCUP, HITCON, <a href="https://www.flickr.com/photos/othree/albums/72157658850044826">SoTM</a></li>
<li>2016: COSCUP, HITCON, g0v Summit, <a href="https://www.flickr.com/photos/othree/sets/72157664996945152">SITCON</a></li>
<li>2017: HITCON</li>
</ul>
<p>早期的編制及需求和現在其實差異很大了，以前就是估計一下人數，找些有興趣的朋友，做一點行前教育，然後排排班表就上場了，後來開始有些現場要出圖給媒體和其他組別做即時宣傳的，這才開始有比較多的前置規劃，COSCUP 2013 時，第一次在台北國際會議中心，活動規模大很多，剛好蝦蝦也在那次找了海哥進來當顧問幫忙，也是從那次開始，整個記錄組的工作方式有了很大的變化，詳細的差異在下一篇文章比較完整，大概就是工人區開始有個固定的紀錄組基地了，然後會有人（通常是組長）在基地負責即時出圖的需求和現場人員調度，實際操作當然還是看活動規模和人員編制，有什麼臨時攝影需求都還算有辦法處理。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/9442836139/" title="COSCUP 2013 慶功宴 by othree, on Flickr"><img src="https://farm4.staticflickr.com/3747/9442836139_9edd686a28_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="COSCUP 2013 慶功宴" srcset="https://farm4.staticflickr.com/3747/9442836139_9edd686a28_b.jpg 1024w, https://farm4.staticflickr.com/3747/9442836139_b5a92d12a0_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/hitcon/43994339272/" title="HITCON CMT 2018-D2-YH by h17c0n, on Flickr"><img src="https://farm2.staticflickr.com/1818/43994339272_c7cd672735_b.jpg" intrinsicsize="1024x678" width="1024" height="678" alt="HITCON CMT 2018-D2-YH" srcset="https://farm2.staticflickr.com/1818/43994339272_c7cd672735_b.jpg 1024w, https://farm2.staticflickr.com/1818/43994339272_4816146154_h.jpg 1600w" /></a></p>
<p>在拍過的這些場次當中，2015 年的 SoTM（Open Street Map 年會）是我印象很深的一場，當初是闇鴉還是 Snake（抱歉我記姓不好）找我去的，是個很小規模的研討會，第一天兩軌第二天一軌，只有我一個專職攝影紀錄，但是我很喜歡那次的拍攝經驗，拍起其實蠻輕鬆的，也很愉快，因為規模小，參與的人其實也都是真的對議題有熱情的人，對我來說這場有點像是重新回到 COSCUP 2009/2010 那個時期的心境吧。</p>
<p>至於去年沒參加 COSCUP 記錄組其實算是意外也算是順其自然發展的吧，一來我有在籌組 Open Web Technologies 社群議程，二來是當初 COSCUP 志工報名的時候是不選組的，而是用媒合的方式幫報名的志工分配，我對這個方式有些疑慮所以就一直沒報名，然後也不知不覺就拖過期了，至於後來跑去幫忙直播組又是另外一個故事了；今年則是因為小孩的關係就完全沒有接活動了，明年應該也不會接工作人員，不過我目標是明年把 Open Web Technologies 弄回來，不過其實在 2016、2017 這兩年的時候我已經覺得自己有點撞牆期了，拍的照片自己也越來越不滿意，有很多照片主題多年來就是不太會有變化，像是食物點心照之類的，拍起來都有點食之無味的感覺，除此之外，投入拍照的時間其實也是減少不少，或許兩者也是有關，可能也是組長當久了慢慢轉型成中間協調溝通者的樣子吧，不過在這樣的情境之中，我還是一直有些嘗試，像是後期幾年我都開始思考有什麼不一樣的可以記錄的，因為很多元素已經是一直重複出現的了，像是開場人潮我已經拍過很多次了，那個時間點我確定有人在拍的話，我就會去其他地方看看有什麼不一樣的東西可以紀錄，另外我還會拍活動指標之類的，一開始的動機其實是記錄 badge、手冊等印刷品的延伸，這似乎是比較沒其他人拍；另外一個有點類似的就是白板塗鴉區的中間過程和最後成果了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/14711375846/" title="COSCUP 2014 Day 2 by othree, on Flickr"><img src="https://farm4.staticflickr.com/3891/14711375846_052f662c8c_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="COSCUP 2014 Day 2" srcset="https://farm4.staticflickr.com/3891/14711375846_052f662c8c_b.jpg 1024w, https://farm4.staticflickr.com/3891/14711375846_7d63dc9662_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26219017966/" title="SITCON 2016 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1661/26219017966_186c4c69d1_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="SITCON 2016" srcset="https://farm2.staticflickr.com/1661/26219017966_186c4c69d1_b.jpg 1024w, https://farm2.staticflickr.com/1661/26219017966_7ef6171732_h.jpg 1600w" /></a></p>
<p>另外一個想嘗試的是想要拍出研討會參與者的眾生像，不只是工人講者、還有包括一般會眾廠商等等，其中，有些工人要怎麼拍真的是蠻難的，尤其實我攝影功力不到位，要把平凡的東西拍出特色來其實是很大的挑戰，我有在一些場次中嘗試記錄一些比較不起眼的志工的工作情形，像是工作中的機動組和門神等，不過實在也是很難拍得出一些想呈現的畫面。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21070323543/" title="COSCUP 2015 Day 1 by othree, on Flickr"><img src="https://farm1.staticflickr.com/644/21070323543_fe8497ec1c_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="COSCUP 2015 Day 1" srcset="https://farm1.staticflickr.com/644/21070323543_fe8497ec1c_b.jpg 1024w, https://farm1.staticflickr.com/644/21070323543_ee85110e05_h.jpg 1600w" /></a></p>
<p>在這一類的影像中，我自己覺得拍的比較好的大概就是 2012 年 OSDC 的 HC 了吧。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/7080579251/" title="OSDC 2012 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7266/7080579251_ea17761469_b.jpg" intrinsicsize="683x1024" width="683" height="1024" alt="OSDC 2012" srcset="https://farm8.staticflickr.com/7266/7080579251_ea17761469_b.jpg 683w, https://farm8.staticflickr.com/7266/7080579251_c43db07ff4_h.jpg 1067w" /></a></p>
<p>2014 年我還做了另外一個嘗試，背著一台 GoPro 拍了組員一天的縮時影片：</p>
<div class="embed_16_9">
  <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/FhGK7nU-GTc?start=94" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>因為整個工作時間有將近十個小時，所以這縮時影片跑很快，畫面也很跳動，萬幸的是看起來好像不會很容易頭暈。最近很夯的 VR 相片（全景相片、360 相片）我也有嘗試，不過對於這種型式的媒介我覺得還是影片的表現效果更加好，2016 年的時候我就有帶著 Ricoh Theta 上台講了一場 lightning talk：</p>
<div class="embed_16_9">
  <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/OBadluXaJi8?start=40" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>錄影畫質雖然是 1920x1080，但是實際觀看其實會發現畫質還是蠻差，而且播放時 CPU 用很凶，這其實算是當年技術限制，現在新的機種已經可以錄到 5K 的畫質，我前兩年其實一直都很想把記錄組員的一天改用全景設備拍攝，不過都還沒找到可行的設備，所以一直沒實行，最近出的一些設備倒是感覺有點可行了，就看有沒有有心人願意（花錢）嘗試了。</p>
<p>除了多方嘗試外，我其實也對數位典藏的部分有點在意，最早開始處理這些東西是從 COSCUP 錄影的蒐集整理開始的，現在 YouTube 上的 COSCUP 頻道其實是 2012 年才建立的，在有官方頻道之前的錄影都是散落在不同社群朋友（小朱、Choupi）的頻道上，討論時 Bobchao 有提到可以丟一份去 <a href="https://archive.org/details/coscup">archive.org</a>，畢竟 YouTube 還算是商業網站，對於講求 open 的活動還說調性不太和，那時候我就開始有在意標籤和一些 metadata 該怎樣加上，那時候也是花了很多時間，每個分享都還要再次確認講題、年份、講者，然後手動上傳標資料，不過那邊只有更新到 2013 年份的，最近幾年的還需要勇者下來幫忙。除了影片外，照片的 metadata 也一直是我的心頭痛，最初期是只有上活動標籤，後來開始標題也會注意一點，然後這之中還要盡力的保留攝影師的 credit，到 HITCON 2017 年的時候應該已經是目前可以做到相當好的程度了吧，有適當的標題、標籤、簡介也把該分享場次的資訊都放上了，也有保留到攝影師 credit，比較可惜是攝影師 credit 沒有其他方式在 Flickr 上呈現，其中照片所屬的場次資訊其實是我長年的目標，一直到 2017 年才弄起來，也很感謝副組長 Vagabond 幫忙校正了許多錯誤，他記憶力比我好太多了，上這些資訊一個最明顯的好處是幫助搜尋，其實對於 SEO 也是有正面幫助，不過對我來說，作為一張活動紀錄的照片，他的訊息應該是要包含這些資訊才是足夠的，不過這些工作就是要細心，很花時間，能堅持做完的人也比較少。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31044023577/" title="metadata on flickr by othree, on Flickr"><img src="https://farm5.staticflickr.com/4806/31044023577_3f39d10866_b.jpg" intrinsicsize="1024x753" width="1024" height="753" alt="metadata on flickr" srcset="https://farm5.staticflickr.com/4806/31044023577_3f39d10866_b.jpg 1024w, https://farm5.staticflickr.com/4806/31044023577_a87b2edf69_h.jpg 1600w" /></a></p>
<p>雖然最初只是想拍照才開始做研討會記錄的，不過拍了這幾年下來，也是對於攝影記錄有些想法，其中最核心的還是這東西對於活動來說只是附加價值，而不是必要的，完全沒有攝影記錄活動還是可以辦得很出色，畢竟活動的主體不是攝影，所以我一直以來是傾向於盡量避免干擾議程的方式進行，在場內移動盡量避免檔到人，會檔到人的位置定點拍攝完也會趕快離開或是蹲下，寧願犧牲一點照片的構圖也不要太侵略，還有就是盡量少用閃燈，而閃燈大概是最常被人抱怨的問題了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/30595564362/" title="MOPCON 2016 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5756/30595564362_9a6e5892cf_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="MOPCON 2016" srcset="https://farm6.staticflickr.com/5756/30595564362_9a6e5892cf_b.jpg 1024w, https://farm6.staticflickr.com/5756/30595564362_e8b99a204c_h.jpg 1600w" /></a></p>
<p>其實對於記錄組來說，閃燈在一些時候真的是必要之惡，因為場地燈光不好，不開閃燈有些時候就會拍的很慘烈，而且閃燈也不是有開就萬事解決，使用上真的還要很多技術，不然也是慘不忍睹，經驗不足就是會需要一直調整，而對於記錄組員來說，拍出可以用的照片算是他的任務，要在燈光不好的地方拍好照片，閃燈已經算是最簡單的解決方案了，事實上就算買來高 ISO 很強的機身，光線不好其實拍出來的照片還是會比較差，所以閃燈還是有其必要性，而現在記錄組社群內主流的想法也是以完成任務為優先，所以閃燈也算是基本配備了，所幸，這幾年的研討會如果預算足夠都會開始處理場地的燈光問題了，這些場次的紀錄都輕鬆許多，照片品質也可以維持的比較好。</p>
<p>其實不只是燈光，國內的會議場地真是很多問題，幾個最基本的，不一定有 spotlight 打光照講者，投影機通常都有點老舊、規格不好，投影畫面色溫和 spotlight 或是場地燈光的色溫或是亮度差異太大，這樣拍講者帶畫面的時候，就很容易兩個重點不一樣色溫或是亮度差異太大，真的是不知道要何年何月國內才會有場地沒這些問題的，之前有些時候我在修圖的時候還要手動拿畫筆把投影幕整個塗起來調色溫亮度的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26178600971/" title="SITCON 2016 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1574/26178600971_0bf88dd0dd_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="SITCON 2016" srcset="https://farm2.staticflickr.com/1574/26178600971_0bf88dd0dd_b.jpg 1024w, https://farm2.staticflickr.com/1574/26178600971_a67e6297a6_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/13824483713/" title="OSDC 2014 Day2 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7194/13824483713_89cd40e2df_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="OSDC 2014 Day2" srcset="https://farm8.staticflickr.com/7194/13824483713_89cd40e2df_b.jpg 1024w, https://farm8.staticflickr.com/7194/13824483713_a6dd73aa68_h.jpg 1600w" /></a></p>
<p>閃燈會被抱怨其實還有一個很有趣的情形，因為參加記錄組的人，包含我大部分都是對攝影有熱情的人，幾乎都會拍的停不下，不想錯過任何大畫面、keynote，所以即使有排班，在一些大場合，像是開幕、lightning talk、keynote 可能沒事的組員都還是會跑去，一來自己忍不住想拍，二來可以互相支援，但是場地光線不好就會變成悲劇，每個人都想拍，都想拍好，都開閃燈，所以後來也開始有些場次會規定限制只有排班人員開閃燈之類的，我則是在自我修練，一些時候能放下不拍。</p>
<p>最後，作為攝影記錄的延伸，其實我有個夢想是能有個 COSCUP 的紀錄片，我知道現在線上有一個，不過那個和我夢想中的樣子不太一樣，另外記錄組也有拍過一次，我覺得那位導演還蠻會訪談的，不過我一直沒有看到剪完的成品出來就是，不確定狀況如何。不過，總之紀錄片這個目標我目前看是很難達成，因為相關的能力我太缺乏（包括攝影、製作和怎樣訪談都完全不行），夢想中的樣子是需要花比較多時間，跟著 COSCUP 一籌開始，跟著中間的幾次會議、場堪一直到活動結束的過程記錄，記錄的重點希望是比較偏重在志工身上，記錄這些無償志工不辭辛勞的籌辦亞洲區最大的 Open Source 研討會的過程，不過就只是個夢想而已，畢竟我人生有其他更想達成的目標，這個就只能先放著了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/13824268293/" title="OSDC 2014 Day2 天祐台灣 by othree, on Flickr"><img src="https://farm4.staticflickr.com/3796/13824268293_1997b14f82_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="OSDC 2014 Day2 天祐台灣" srcset="https://farm4.staticflickr.com/3796/13824268293_1997b14f82_b.jpg 1024w, https://farm4.staticflickr.com/3796/13824268293_5a13f07269_h.jpg 1600w" /></a></p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000944" baseName="vimconf-2018">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-11-29</b:date>
				<b:time>11:23:05</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>VimConf 2018</b:title>
			<b:content>
				<b:summary>Next Vim version is decided in Tokyo: Vim 2000! #vimconf pic.twitter.com/lt83pgnxkH-- Ruslan Osipov (@antistatuquo) November 25, 2018 11/24 不但是台灣的大日子，日本還舉辦了 2018 年度的 VimConf，這次比較特別的是 Vim 的作者 Bram Moolenaar 也有去講 Keynote，我雖然今年依然無法去參與，但是 Twitter 上已經可以挖到不少東西了，其中有官方的投影片收集，我想在這介紹其中三個分享，第一個是 Effective Modern Vim scripting，這篇主要是做一點 Vim script 入門，另外還介紹了 Vim 8 開始的...</b:summary>
				<b:mainContent><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Next Vim version is decided in Tokyo: Vim 2000! <a href="https://twitter.com/hashtag/vimconf?src=hash&amp;ref_src=twsrc%5Etfw">#vimconf</a> <a href="https://t.co/lt83pgnxkH">pic.twitter.com/lt83pgnxkH</a></p>-- Ruslan Osipov (@antistatuquo) <a href="https://twitter.com/antistatuquo/status/1066541845407137793?ref_src=twsrc%5Etfw">November 25, 2018</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>11/24 不但是台灣的大日子，日本還舉辦了 2018 年度的 VimConf，這次比較特別的是 Vim 的作者 Bram Moolenaar 也有去講 Keynote，我雖然今年依然無法去參與，但是 Twitter 上已經可以挖到不少東西了，其中有官方的<a href="https://vimconf.wordpress.com/2018/11/25/vimconf-2018/">投影片收集</a>，我想在這介紹其中三個分享，第一個是 <a href="https://docs.google.com/presentation/d/e/2PACX-1vQKaWJY8w6QJpebvuzg334RfLDbQHv4-J_06yFxdTzLrrjhE_y5iuzA-JxCCuFdUAZQB2QQsidF_mys/pub?start=false&amp;loop=false&amp;delayms=3000#slide=id.p">Effective Modern Vim scripting</a>，這篇主要是做一點 Vim script 入門，另外還介紹了 Vim 8 開始的 synchronous/asynchronous process 機制的程式要怎麼寫，有興趣寫 Vim8 asynchronous script 的人可以參考一下，要找整理好的範例其實不是很好找。</p>
<p>第二個想介紹的是 mattn 的 <a href="https://docs.google.com/presentation/d/e/2PACX-1vTj2uCbuCffhaLVBZE6biI538GG6jMi1INbku-T9q5hu5W0zGLwuibN3m5xbEuqdUFTDnhdhtikPyTi/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p">What is the next feature?</a> 這段分享主要是在介紹 <a href="https://vim-jp.org/">vim-jp</a> 社群，也是 VimConf 的主辦社群，這個社群還蠻活躍的，而和一般的社群比較不一樣的地方是他不只是使用者社群，也是個開發者社群，有在協助幫忙日本想貢獻 Vim 的人，包括像是資源整合、避免重工、協助轉發 bug report 和 patch，還有翻譯文件和一些文件撰寫等，接著就介紹了一些 vim-jp 貢獻的東西，像是 color emoji、lambda 之類的</p>
<p>最後一個就是 Bram 的 <a href="https://vimconf.org/2018/slides/Vim_From-hjkl-to-a-platform-for-plugins.pdf">From hjkl To a plaform of plugins</a>，介紹了 Vim 的一些發展史，主要是 plugin 相關的，也提到 Vim scripts performance 的問題（有個建議是換台更快的電腦），最後一段還提到一些未來可能的新功能，其中兩個我很有興趣，第一個是 Bram 打算處理 Plugin dependency 的問題了，投影片中有一些目前可能的解決方法，當然看起來都是走 Vim8 的 package 機制。另外一個則是 text properties，就是可以給一段文字 meta data，這個功能我非常的感興趣，因為這可以用來改善現在的 syntax highlight 機制，理想上，我可以非同步的把程式碼丟給外部的 JS parser tokenize，然後利用結果來加上 text properties，syntax highlight 再根據這個資訊來決定用那個 Highlight Group，這可以解決我的 <a href="https://github.com/othree/yajs.vim">yajs</a> 一直無法解決的 arrow function 的判斷難題，不過還沒預計何時會出來，只能慢慢等了。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000943" baseName="chrome-privacy-issue">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-09-27</b:date>
				<b:time>13:56:07</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Chrome 10 週年</b:title>
			<b:content>
				<b:summary> Chrome 10 週年 Google 真的是很精心的規劃要幫它慶祝啊，我猜大概是找了個很有狼性的 PM 來，最近一下就被發現兩個問題，第一個小一點點，就是 Clear browser data 的地方，全部清除的功能不會幫你清除 Google 的資料喔： "Clear all Cookies except Google Cookies", thanks Chrome. /cc @matthew_d_green pic.twitter.com/tR0UJjtPFL-- Christoph Tavan (@ctavan) September 24, 2018 第二個問題比較大一點，灣區日報看到的 Why I'm done with Chrome，問題就是 Chrome 69 開始，登入網頁版的...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31070118768/" title="Chrome 10 Years by othree, on Flickr"><img src="https://farm2.staticflickr.com/1977/31070118768_f2335fb367_b.jpg" intrinsicsize="960x540" width="960" height="540" alt="Chrome 10 Years" srcset="" /></a></p>
<p>Chrome 10 週年 Google 真的是很精心的規劃要幫它慶祝啊，我猜大概是找了個很有狼性的 PM 來，最近一下就被發現兩個問題，第一個小一點點，就是 Clear browser data 的地方，全部清除的功能不會幫你清除 Google 的資料喔：</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">"Clear all Cookies except Google Cookies", thanks Chrome. /cc <a href="https://twitter.com/matthew_d_green?ref_src=twsrc%5Etfw">@matthew_d_green</a> <a href="https://t.co/tR0UJjtPFL">pic.twitter.com/tR0UJjtPFL</a></p>-- Christoph Tavan (@ctavan) <a href="https://twitter.com/ctavan/status/1044282084020441088?ref_src=twsrc%5Etfw">September 24, 2018</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>第二個問題比較大一點，灣區日報看到的 <a href="https://wanqu.co/a/6982/why-im-done-with-chrome/">Why I'm done with Chrome</a>，問題就是 Chrome 69 開始，登入網頁版的 Google 服務會自動把 Chrome 瀏覽器端的 Google 帳號也登入，然後根據 Google 工程師所說，這樣還不會觸發同步備份密碼和 autofill 等隱私資料（包括密碼、信用卡資料），不過在這狀態下你很可能不小心就觸發了，由於這個機制官方沒說過，介面上也沒明顯提示，就只有大頭那邊的頭像會變，幾乎都會被使用者忽略，而會不會自動備份隱私資料只是一部份，比較嚴重的點還是這個行為是破壞使用者的信任，事情鬧出來之後 Google 有<a href="https://www.blog.google/products/chrome/product-updates-based-your-feedback/">官方回應</a> 說下一版會有修改讓使用者可以關閉（不過預設還是開啟啦～～），登入後的介面也有相對應的修改讓狀態更清楚，另外就是刪除所有 Cookie 不會保留 Google 的了，以上這些修改都要等十月中的 Chrome 70。</p>
<p>最後就是，隨著這次事件才注意到有 <a href="https://github.com/Eloston/ungoogled-chromium">ungoogled-chromium</a> 這個專案啊。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000942" baseName="zone-of-zero">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-09-26</b:date>
				<b:time>22:15:56</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>保護專注力</b:title>
			<b:content>
				<b:summary> 前陣子 Ash Wu 寫了篇 如何在 Context Switch 間維持自己的生產力，講他這陣子的經驗，所以我也來分享我這陣子的經驗，不過不是 Context Switch，而是底層工程師如何保護自己的專注力。 之前在開放式辦公室工作，雖然我已經面對牆壁了，還是覺得很容易受到干擾，不論是環境還是工作模式造成的都有，所以我逐步做了一些調整來減少心流被打斷的機會，首先，硬體設備最常見的就是抗噪耳機了，之前是買 SONY 的 WH-1000XM2，最近剛上市 Mark 3 也更新過去了，抗噪耳機一開始會有點不習慣，像是本來打鍵盤的聲音都聽不到了之類的，不過不用很久就會習慣了，這筆開銷是比較大，不過要是花的起的話，我建議直接買三代，舒適度比較好，二代我戴久耳朵還是會不舒服；除了聲音設備外，螢幕弄大一點把視野佔滿也是個不錯的方式，前陣子網路上不少人都買了 40 吋的大螢幕來用的樣子，我自己是只有用到 27 吋的，其實遮蔽效果也沒比 24 吋的好很多就是。 第二個是我現在工作時的電腦不登入 SNS 了，包括 Facebook 和 Twitter，所以我不會查資料或是看 Email 的時候發現有小紅點就順手點過去看，其實一開始是因為在用 Toggl 追蹤時間，注意到去看 SNS 會造成時間計算不準確，所以乾脆都不登入了，也是沒很久就習慣了，當專心時，其實完全不會注意到有 SNS 等著我去看。 第三個是我會把能關的提示音都關掉，不過這是因為我耳機音樂的訊源就是工作用的電腦，所以電腦的 IM、收信軟體的提示音都會過去，如果耳機可以弄獨立音源給它其實也沒這問題，這時候就有點懷念...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/44085125844/" title="SONY WH-1000XM3 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1895/44085125844_aacd940553_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="SONY WH-1000XM3" srcset="https://farm2.staticflickr.com/1895/44085125844_f1d3c9a560_k.jpg 2x" /></a></p>
<p>前陣子 Ash Wu 寫了篇 <a href="https://medium.com/@hSATAC/%E5%A6%82%E4%BD%95%E5%9C%A8-context-switch-%E9%96%93%E7%B6%AD%E6%8C%81%E8%87%AA%E5%B7%B1%E7%9A%84%E7%94%9F%E7%94%A2%E5%8A%9B-8b910e468076">如何在 Context Switch 間維持自己的生產力</a>，講他這陣子的經驗，所以我也來分享我這陣子的經驗，不過不是 Context Switch，而是底層工程師如何保護自己的專注力。</p>
<p>之前在開放式辦公室工作，雖然我已經面對牆壁了，還是覺得很容易受到干擾，不論是環境還是工作模式造成的都有，所以我逐步做了一些調整來減少心流被打斷的機會，首先，硬體設備最常見的就是抗噪耳機了，之前是買 SONY 的 WH-1000XM2，最近剛上市 Mark 3 也更新過去了，抗噪耳機一開始會有點不習慣，像是本來打鍵盤的聲音都聽不到了之類的，不過不用很久就會習慣了，這筆開銷是比較大，不過要是花的起的話，我建議直接買三代，舒適度比較好，二代我戴久耳朵還是會不舒服；除了聲音設備外，螢幕弄大一點把視野佔滿也是個不錯的方式，前陣子網路上不少人都買了 40 吋的大螢幕來用的樣子，我自己是只有用到 27 吋的，其實遮蔽效果也沒比 24 吋的好很多就是。</p>
<p>第二個是我現在工作時的電腦不登入 SNS 了，包括 Facebook 和 Twitter，所以我不會查資料或是看 Email 的時候發現有小紅點就順手點過去看，其實一開始是因為在用 Toggl 追蹤時間，注意到去看 SNS 會造成時間計算不準確，所以乾脆都不登入了，也是沒很久就習慣了，當專心時，其實完全不會注意到有 SNS 等著我去看。</p>
<p>第三個是我會把能關的提示音都關掉，不過這是因為我耳機音樂的訊源就是工作用的電腦，所以電腦的 IM、收信軟體的提示音都會過去，如果耳機可以弄獨立音源給它其實也沒這問題，這時候就有點懷念 iPod 了；如果提示音都關了，還會被 Dock 上的紅色數字或是訊息通知窗干擾，那我還會更進一步把 IM 的程式都關掉，即使那是工作用的 IM 我也是會不客氣的關掉，可能過兩個小時後你會發現其實你不在線上也沒關係的，真的很要緊的事，其它同事會透過各種方式找到你的（然後你還會發現有時候其實被這樣聯絡也不是很要緊的事）。</p>
<p>除了電腦提示外，手機我也會關到完全靜音，完全靜音是指連震動都沒有，所以如果有來電的話就只有螢幕會亮而已，也因此我常常沒接到推銷電話，其實平常會打電話給我的人很少，大部分都是我事前會知道的。</p>
<p>以上的部分主要在於減少干擾，其實還有一些其它工作方式的細節可以幫助，不過還沒有太多想法整理出來，所以這次就先不提了。最後補充一下，Ash 也有提到的 <a href="https://workflowy.com/invite/3067b108.lnx">workflowy</a>（這是我的推薦連結）我也覺得很不錯，大概是遇到這個服務之前，有認真考慮過自己做一個這種東西自用，不過後來發現這個服務之後就再也沒想過這回事了。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000941" baseName="homebrew-rollback-mysql-57">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-09-26</b:date>
				<b:time>11:49:46</b:time>
			</b:datetime>
			<b:category>mac</b:category>
			<b:title>Homebrew rollback to MySQL 5.7</b:title>
			<b:content>
				<b:summary>最近 Mac 的 homebrew 預設的 MySQL 已經改到 8，然後產生了些相容性問題，像是 GUI 不支援之類的，所以提供一下方法回到 5.7 brew uninstall mysql brew install mysql@5.7 brew link --force mysql@5.7 然後清空舊資料重建新的 rm -rf /usr/local/var/mysql/ mysqld --initialize 其中第二個步驟會產生新的 root 密碼，先複製下來，啟動服務並修改密碼： brew services start mysql@5.7 mysqladmin -u root -p password 照指令操作，應該是先填前一步產生的密碼，然後輸入新密碼、再次輸入新密碼，這樣就...</b:summary>
				<b:mainContent><p>最近 Mac 的 homebrew 預設的 MySQL 已經改到 8，然後產生了些相容性問題，像是 GUI 不支援之類的，所以提供一下方法回到 5.7</p>
<pre><code class="language-sh">brew uninstall mysql
brew install mysql@5.7
brew link --force mysql@5.7
</code></pre>
<p>然後清空舊資料重建新的</p>
<pre><code class="language-sh">rm -rf /usr/local/var/mysql/
mysqld --initialize
</code></pre>
<p>其中第二個步驟會產生新的 root 密碼，先複製下來，啟動服務並修改密碼：</p>
<pre><code class="language-sh">brew services start mysql@5.7
mysqladmin -u root -p password
</code></pre>
<p>照指令操作，應該是先填前一步產生的密碼，然後輸入新密碼、再次輸入新密碼，這樣就 ok 了，剩下就是找個 GUI 或是匯入資料之類的。</p>
<p>參考資料：</p>
<ul>
<li><a href="https://actom.me/blog/macos-brew-%E5%AE%89%E8%A3%85-mysql-8-0%EF%BC%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99.html">macos brew 安装 mysql 8.0，客户端连接报错 - 积跬步，行千里</a></li>
</ul>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000940" baseName="intrinsic-size">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-09-21</b:date>
				<b:time>22:08:14</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Intrinsic Size 媒體寬高比</b:title>
			<b:content>
				<b:summary>HTML 文件在編寫插入 &lt;img&gt; 時，通常都會順便加上寬高的資訊，早期這樣做除了指定圖片呈現時的大小外，還有一個好處是提升頁面繪製的速度，不用在圖片讀取好、知道實際寬高時，又重新排版重畫版面，不過這個狀況在用 CSS 設定動態寬度時，就又回到原點了，像是設定 width: 100%; 這種，因為沒辦法設定相對於圖片寬度的高度值，所以瀏覽器只能自己先隨便決定一個高度，等圖片抓好再重排一次。 一直以來這問題都沒好的方案處理，在排版上比較多人採用的是外面多一層 block 元素然後用 padding-top 來把空間先佔好，不過這也只算是個替代方案，真的要處理應該還是要從 HTML 或是 CSS 下手，然後前兩天才終於看到有個不錯的方案 Chrome 要來實做了，叫做 Intrinsic Size： &lt;img intrinsicsize=&quot;250 x 200&quot; src=&quot;cat.jpg&quot;&gt; 就是一個長乘寬的概念，中間那個乘號其實是小寫的 x，然後提供的長寬資訊其實是等於預先給的 naturalWidth、naturalHeight，為什麼不用 aspect ratio 呢？在提案的文件裡面其實都有寫到，基本上就是這種設計提供的資訊更多，有更多好處，例如都沒設定寬高時，可以拿 intrinsicsize 來先用之類的，intrinsicsize目前設計只能用在圖片和影片上，Chrome 預計在 71 的時候推出這個功能，也已經做好有貓的測試網頁了，感覺一切都箭在弦上了，不過這新提案在 WICG 上幾乎沒討論，提案者是...</b:summary>
				<b:mainContent><p>HTML 文件在編寫插入 <code>&lt;img&gt;</code> 時，通常都會順便加上寬高的資訊，早期這樣做除了指定圖片呈現時的大小外，還有一個好處是提升頁面繪製的速度，不用在圖片讀取好、知道實際寬高時，又重新排版重畫版面，不過這個狀況在用 CSS 設定動態寬度時，就又回到原點了，像是設定 <code>width: 100%;</code> 這種，因為沒辦法設定相對於圖片寬度的高度值，所以瀏覽器只能自己先隨便決定一個高度，等圖片抓好再重排一次。</p>
<p>一直以來這問題都沒好的方案處理，在排版上比較多人採用的是外面多一層 block 元素然後用 <code>padding-top</code> 來把空間先佔好，不過這也只算是個替代方案，真的要處理應該還是要從 HTML 或是 CSS 下手，然後前兩天才終於看到有個不錯的方案 Chrome 要來實做了，叫做 <a href="https://github.com/ojanvafai/intrinsicsize-attribute">Intrinsic Size</a>：</p>
<pre><code class="language-html">&lt;img intrinsicsize=&quot;250 x 200&quot; src=&quot;cat.jpg&quot;&gt;
</code></pre>
<p>就是一個長乘寬的概念，中間那個乘號其實是小寫的 <code>x</code>，然後提供的長寬資訊其實是等於預先給的 naturalWidth、naturalHeight，為什麼不用 aspect ratio 呢？在提案的文件裡面其實都有寫到，基本上就是這種設計提供的資訊更多，有更多好處，例如都沒設定寬高時，可以拿 <code>intrinsicsize</code> 來先用之類的，<code>intrinsicsize</code>目前設計只能用在圖片和影片上，Chrome <a href="https://www.chromestatus.com/feature/4704436815396864">預計</a>在 71 的時候推出這個功能，也已經做好<strong>有貓</strong>的<a href="https://googlechrome.github.io/samples/intrinsic-size/index.html">測試網頁</a>了，感覺一切都箭在弦上了，不過這新提案在 WICG 上幾乎沒<a href="https://discourse.wicg.io/t/layout-of-img-canvas-and-video-for-any-elements-suggestion/1595/2">討論</a>，提案者是 WICG 也是 Chromium 成員就是，另外就是另外三家的 web platform status 都還查不到，並且，其實也有一個 CSS 的 <code>aspect-ratio</code> <a href="https://www.xanthir.com/blog/b4810">提案</a>，所以到底會怎樣還很難說啊（不過我覺得是會變標準啦）。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000939" baseName="extensible-web-2018">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-09-18</b:date>
				<b:time>21:31:27</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Extensible Web at 2018</b:title>
			<b:content>
				<b:summary> 2013 年有一份 Extensible Web 宣言，簽署人同意致力於開發 Web Platform 更底層的介面，讓開發者可以自己擴展 Web Platform，而構成 Web 介面的基本三要素其實就是 HTML、CSS、JavaScript。 其實我在當時就覺得很奇妙，我可以想像的到開發者自己擴充 HTML 標籤，不過卻想像不出來到底 JavaScript 和 CSS 要如何讓開發者擴充，沒想到今天回過頭來看，整個網路標準的發展方向真的是有在朝這方向前進，首先來看 HTML 的部分，其實就是 Web Component，包括了 Custom Element、Shadow DOM、Template、HTML Import 等標準，透過這些新的 Web API，開發者很容易就可以做出可重複利用，有自訂行為的自製標籤了。 JavaScript 的部分，其實在上一篇文章介紹那一串 ES6 新功能的最後，有提到 meta programming 的新功能，雖然不是完完全全想擴充什麼就擴充什麼，但是 JavaScript...</b:summary>
				<b:mainContent><p><img src="https://i.imgur.com/YsbKHg1.gif" alt="" width="275" height="252" /></p>
<p>2013 年有一份 Extensible Web 宣言，簽署人同意致力於開發 Web Platform 更底層的介面，讓開發者可以自己擴展 Web Platform，而構成 Web 介面的基本三要素其實就是 HTML、CSS、JavaScript。</p>
<p>其實我在當時就覺得很奇妙，我可以想像的到開發者自己擴充 HTML 標籤，不過卻想像不出來到底 JavaScript 和 CSS 要如何讓開發者擴充，沒想到今天回過頭來看，整個網路標準的發展方向真的是有在朝這方向前進，首先來看 HTML 的部分，其實就是 <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">Web Component</a>，包括了 Custom Element、Shadow DOM、Template、HTML Import 等標準，透過這些新的 Web API，開發者很容易就可以做出可重複利用，有自訂行為的自製標籤了。</p>
<p>JavaScript 的部分，其實在上一篇文章介紹<a href="https://blog.othree.net/log/2018/09/17/ecmascript-2015-rel-of-features/">那一串 ES6 新功能</a>的最後，有提到 meta programming 的新功能，雖然不是完完全全想擴充什麼就擴充什麼，但是 JavaScript 確實是慢慢的有些可以讓開發者比較深入底層的介面可以用。</p>
<p>最後 CSS 的部分，就是 CSS Houdini 了，Houdini 其實就是史上最偉大魔術師胡迪尼，從名稱就可以感受到這個東西有多 <em>magic</em> 了，其實 Houdini 不是一個標準，而是一個 <a href="https://wiki.mozilla.org/CSS/Houdini">W3C Working Group</a>，他們主要的目標就是建構出一整套 API 讓 CSS 可以擴充，而目前也已經有些<a href="https://drafts.css-houdini.org/">成果</a>了，我自己是看了去年一場演講的影片才對 Houdini 有了初步的認識：</p>
<div class="embed_16_9">
    <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/r-Hc3hN9e6I?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>現在最主要是已經有 Chrome 把 Paint API 實做出來，所以已經可以用 Canvas 畫圖了，雖然整個計畫離完成還要很久，不過看到 CSS 真的可以開始擴充了，還是覺得很 Magic~</p>
<p>Image Source: <a href="https://imgur.com/gallery/YsbKHg1">https://imgur.com/gallery/YsbKHg1</a></p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000937" baseName="ecmascript-2015-rel-of-features">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-09-17</b:date>
				<b:time>00:28:27</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>ECMAScript 2015 新功能間的關係</b:title>
			<b:content>
				<b:summary> 這篇想說的是 2015 年的那個 ECMAScript 6（後面簡稱 ES6），也就是之前 ECMAScript Harmony 計畫的主要成果，那版 ES6 其實是這幾年來改動最多的一版，新增了很多的新功能和語法，而這一堆新功能很多是環環相扣的，我以前曾經在 Facebook 上提過，不過那邊的東西容易就消失在網路上，所以還是另開一篇文章來記錄，剛好也可以做為下一篇文章的參考資料。 首先要從 Map/Set 這兩個新的資料型態說起，ECMAScript 一直以來都只有少少的資料型態，直到 ES6 才加了些新的，其中比較容易注意到的就是 Map 和 Set 了，其實這兩種資料型態以前就是直接用 object 來 array 來做，兩邊蠻接近的，最主要的差異則是 Map 的 key 可以是任意型態， 而以前 object 的 key 只能是字串，Set 是 unique 的，array...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/29781972467/" title="ECMAScript 2015 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1845/29781972467_06b6deb358_b.jpg" width="1024" height="622" alt="ECMAScript 2015, " srcset="https://farm2.staticflickr.com/1845/29781972467_06b6deb358_b.jpg 1024w, https://farm2.staticflickr.com/1845/29781972467_e79243c585_h.jpg 1600w" /></a></p>
<p>這篇想說的是 2015 年的那個 ECMAScript 6（後面簡稱 ES6），也就是之前 ECMAScript Harmony 計畫的主要成果，那版 ES6 其實是這幾年來改動最多的一版，新增了很多的新功能和語法，而這一堆新功能很多是環環相扣的，我以前曾經在 Facebook 上提過，不過那邊的東西容易就消失在網路上，所以還是另開一篇文章來記錄，剛好也可以做為下一篇文章的參考資料。</p>
<p>首先要從 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a>/<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> 這兩個新的資料型態說起，ECMAScript 一直以來都只有少少的資料型態，直到 ES6 才加了些新的，其中比較容易注意到的就是 Map 和 Set 了，其實這兩種資料型態以前就是直接用 object 來 array 來做，兩邊蠻接近的，最主要的差異則是 Map 的 key 可以是任意型態， 而以前 object 的 key 只能是字串，Set 是 unique 的，array 則否，另外就是在適合的情境下，現在 Map/Set 的效能不一定會比較差。</p>
<blockquote class="twitter-tweet" data-lang="zh-tw"><p lang="en" dir="ltr">???? Jest reduced their test runner time by 20% by switching from plain JavaScript objects to Maps where it made sense. <a href="https://t.co/ZrtgeJIwOU">https://t.co/ZrtgeJIwOU</a><br /><br />In general, don't be afraid to use modern features! Focus on writing idiomatic code, and let JS engines worry about making it fast.</p> -- V8 (@v8js) <a href="https://twitter.com/v8js/status/1040219491358179328?ref_src=twsrc%5Etfw">2018年9月13日</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Map、Set 其實都算是 collection 的資料，所以會需要有個方法可以遍歷所有元素，像是 array 的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">forEach</a> 或是 for...in 語法，不過 for...in 先拿到的東西是 key，還需要拿 key 去取元素實際的值：</p>
<pre><code class="language-javascript">for (let k in arr) {
  let v = arr[k];
}
</code></pre>
<p>一直以來，其實開發者社群都希望有個語法能直接取 collection 內的元素，所以像是 CoffeeScript 就是把 <code>for...in</code> 換成直接拿到 value，於是 ES6 就有了個 <code>for...of</code> 語法，可以遍歷 collection 類型的資料並直接取得值：</p>
<pre><code class="language-javascript">for (let v of arr) {
    
}
</code></pre>
<p>ES6 的這個語法，其實底層是透過 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols">iteration protocols</a> 這些內部協定來運作的，包括了 iterable protocol 和 iterator protocol，<code>for...of</code> 其實就是透過 iterable protocol 去拿物件的 iterator，利用 iterator 來遍歷元素，所以自己寫的物件也可以實做 iterable protocol，然後就可以讓該物件支援 <code>for...of</code> 語法了；除此之外，iterator 是不能重複使用的，所以其實每次 <code>for..of</code>，都是拿一個該物件的新的 iterator，而為了可以簡單產生這個 iterator，又有了 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*">generator function</a>，generator function 每次執行都會回傳一個新的 iterator（精確一點說是 generator object，同時是 iterator 也是 iterable），正好適合這個情境。</p>
<p>Iterable protocol 的定義其實很簡單，就是定義怎樣把 generator function 放在物件裡的方式，實際上是利用 ES6 另一個新的資料型態： <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a> 來達成的，為什麼不直接定個屬性名稱給它呢？最主要就是不要讓這些內部 protocol 的東西在 <code>for...in</code> 操作的時候被遍歷到，所以定義了新的 Symbol 型別，利用它的特性來把內部 protocol 做了一定程度的保護，iterable protocol 就是把 generator function 用一個預先定義好的 Symbol 來儲存，這個 Symbol 又稱為 <code>Symbol.iterator</code>，這種預先定義好的 Symbol 則統稱為 Well-Known Symbols，ES6 其實定義了<a href="http://exploringjs.com/es6/ch_symbols.html#_well-known-symbols">好幾個</a>，不是只有 iterable 用的到，透過定義這些 Well-Known Symobls，可以介入改變一些 JavaScript 比較基礎的運作。</p>
<p>Well-Known Symobls 可以做到的事情，其實有點像是改變程式語言的運作，而這種類型的機制又稱為 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming">meta programming</a>，除了 Well-Known Symobls 之外，ES6 其實還提供了 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect">Reflect</a>，這兩個東西應該比較多人知道 Proxy 是幹嘛的，對 Reflect 比較陌生，其實 Reflect 有點像是為了 JavaScript 一些設計不好的地方，想了解詳細一點推薦可以看主要的 polyfill [harmony-reflect][] 的 Wiki 頁：<a href="https://github.com/tvcutsem/harmony-reflect/wiki">Why should I use this library?</a></p>
<p>最後總結一下，這串從 Map/Set 開始，接著連到 <code>for...of</code> 語法、Iterator、Generator、Symbol、Well-Known Symobls 最後到 meta programming 的 Proxy 和 Reflect，其實也差不多佔了 1/4 的 ES6 新功能。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000936" baseName="web-platform">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-09-16</b:date>
				<b:time>16:49:51</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Web Platform</b:title>
			<b:content>
				<b:summary>這篇記錄一下現在主要四個瀏覽器核心對於新標準的支援計畫的狀態網站，不然每次都要重新查。 Chrome https://www.chromestatus.com/features Edge https://developer.microsoft.com/en-us/microsoft-edge/platform/status/ Firefox https://platform-status.mozilla.org/ Safari/WebKit https://webkit.org/status/ Chrome 的應該是最多人看過，其實看過這個就能了解現在幾乎是無法從 0 開始開發一個瀏覽器了，Google Chrome 從 WebKit 的基礎開始，到現在也花了十年。...</b:summary>
				<b:mainContent><p>這篇記錄一下現在主要四個瀏覽器核心對於新標準的支援計畫的狀態網站，不然每次都要重新查。</p>
<ul>
<li>Chrome <a href="https://www.chromestatus.com/features">https://www.chromestatus.com/features</a></li>
<li>Edge <a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/status/">https://developer.microsoft.com/en-us/microsoft-edge/platform/status/</a></li>
<li>Firefox <a href="https://platform-status.mozilla.org/">https://platform-status.mozilla.org/</a></li>
<li>Safari/WebKit <a href="https://webkit.org/status/">https://webkit.org/status/</a></li>
</ul>
<p>Chrome 的應該是最多人看過，其實看過這個就能了解現在幾乎是無法從 0 開始開發一個瀏覽器了，Google Chrome 從 WebKit 的基礎開始，到現在也花了十年。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000935" baseName="eslint-plugin-pep8-blank-lines">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-09-08</b:date>
				<b:time>10:24:24</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>eslint-plugin-pep8-blank-lines</b:title>
			<b:content>
				<b:summary> 我的第二個 ESLint plugin 終於進 beta 了，這是我自己期望很久的檢查規範，上一次介紹 ESLint plugin 的時候就有說到接下來想處理空行，其實 ESLint 內建的 rule 已經有蠻多是用來檢查空行的了，不過沒有一個能符合我想要的規範，我想要的規範其實很簡單，就是希望能在大一點的物件中間能多一點空行，比較有段落的感覺，這樣閱讀起來感覺也比較好（如上圖），剛好我這兩年寫了一點 Python，有用 Flake8 做語法檢查，其中的 PEP8 coding style 中關於空行的規範，就符合我想要的樣子，而且很簡單，這個規範是在大部分地方都允許最多一行空行，但是最上層（top level）的 function, class 前後要兩行空行。 於是這個 ESLint plugin 的主要目標，就是把 PEP8 這部分的規範搬過來，一開始想的實做方式有兩個，其一是參考 padding-line-between-statements 的作法，比較兩個相鄰 token/node 間的 line number，另一個則是用 sourceCode 來一行一行看，不過同時也要知道該行的 context...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/43805736994/" title="eslint-plugin-pep8-blank-lines by othree, on Flickr"><img src="https://farm2.staticflickr.com/1855/43805736994_ed80198c0b_b.jpg" width="1024" height="768" alt="eslint-plugin-pep8-blank-lines, " srcset="https://farm2.staticflickr.com/1855/43805736994_ed80198c0b_b.jpg 1024w, https://farm2.staticflickr.com/1855/43805736994_84b2fc4977_h.jpg 1600w" /></a></p>
<p>我的第二個 ESLint plugin 終於進 beta 了，這是我自己期望很久的檢查規範，上一次介紹 ESLint plugin 的時候就有說到接下來想處理空行，其實 ESLint 內建的 rule 已經有蠻多是用來檢查空行的了，不過沒有一個能符合我想要的規範，我想要的規範其實很簡單，就是希望能在大一點的物件中間能多一點空行，比較有段落的感覺，這樣閱讀起來感覺也比較好（如上圖），剛好我這兩年寫了一點 Python，有用 Flake8 做語法檢查，其中的 <a href="https://www.python.org/dev/peps/pep-0008/#blank-lines">PEP8 coding style 中關於空行</a>的規範，就符合我想要的樣子，而且很簡單，這個規範是在大部分地方都允許最多一行空行，但是最上層（top level）的 function, class 前後要兩行空行。</p>
<p>於是這個 ESLint plugin 的主要目標，就是把 PEP8 這部分的規範搬過來，一開始想的實做方式有兩個，其一是參考 <a href="https://github.com/eslint/eslint/blob/master/lib/rules/padding-line-between-statements.js">padding-line-between-statements</a> 的作法，比較兩個相鄰 token/node 間的 line number，另一個則是用 <a href="https://eslint.org/docs/developer-guide/working-with-rules#contextgetsourcecode">sourceCode</a> 來一行一行看，不過同時也要知道該行的 context 是什麼才能判斷，所以也是跑不掉要進去看 AST，加上我想要玩玩看 JavaScript 的 AST，所以最終我是選擇第一種作法，不過不是用 ESLint 內建的 walker，而是在 <code>Program:exit</code> 的時候才用自己寫的 walker 進去看 AST；而經過一輪重構後，現在的架構其實是靈活度很高的，我實際上做出了一個比 padding-line-between-statements 還要更多功能的<a href="https://github.com/othree/eslint-plugin-pep8-blank-lines/blob/master/lib/guides/pep8.js">規範定義格式</a>，然後根據這個格式寫出我想要的空行規範，只是目前還沒開介面出來給使用者輸入自訂的空行規範就是了；其實我自己覺得這個 plugin 實做的理想型式應該還是要用實做方案二，並搭配使用 ESLint 的 AST walker，實際上  padding-line-between-statements 也就是這樣做，會這樣想最主要的原因是現在的實做只看 AST，但是 AST 其實不能 100% 表達原來的程式碼，這也是這次開發經驗中我最大的體悟，所以其實一些奇怪地方的空行就會很難抓到，例如 <code>await 1</code> 這兩個 token 中間如果有空行就會跳過，不過會在這種地方放空行的情形應該都是蠻少見的，所以目前也沒打算繼續改下去，短期內都會以處理 bug 為主，過陣子應該會試著加上 fix 的功能，總之歡迎測試並回報問題，雖然有寫測試，不過還沒什麼實際跑在真實的程式碼上，目前唯一的就是它自己的 code base 本身是有用吧，另外就是使用時如果是搭配其它 style 可能會需要把其它 style 的空行規則關掉，例如搭配 <a href="https://standardjs.com/">standardjs</a> 時的 <code>.eslintrc</code> 範例：</p>
<pre><code class="language-json">{
  &quot;extends&quot;: &quot;standard&quot;,
 
  &quot;plugins&quot;: [
    &quot;pep8-blank-lines&quot;,
    &quot;no-parameter-e&quot;
  ],
 
  &quot;rules&quot;: {
    &quot;semi&quot;: [2, &quot;always&quot;],
    &quot;no-extra-semi&quot;: 2,
    &quot;comma-dangle&quot;: [&quot;error&quot;, &quot;always-multiline&quot;],
    &quot;no-multiple-empty-lines&quot;: 0,
    &quot;pep8-blank-lines/pep8-blank-lines&quot;: 2,
    &quot;no-parameter-e/no-parameter-e&quot;: 2
  }
}
</code></pre>
<p>這組其實也是我目前在用的設定啦～</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000934" baseName="tern-022-released">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-09-02</b:date>
				<b:time>17:41:32</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Tern 0.22 released</b:title>
			<b:content>
				<b:summary>First Tern release in a year and a half today https://t.co/1Ws7zYEJSd . All thanks to @othree picking up maintenance!-- Marijn Haverbeke (@MarijnJH) 2018年8月28日 大約七月初的時候，我開始接手幫忙維護 Tern，Tern 是一個獨立的 JavaScript inference engine，用於協助撰寫 JavaScript 程式碼，就和之前介紹過的 Microsoft 的 LSP 後面的 Language Server 一樣，都是獨立於編輯器/IDE之外，不過 TernJS 是...</b:summary>
				<b:mainContent><blockquote class="twitter-tweet" data-lang="zh-tw"><p lang="en" dir="ltr">First Tern release in a year and a half today <a href="https://t.co/1Ws7zYEJSd">https://t.co/1Ws7zYEJSd</a> . All thanks to <a href="https://twitter.com/othree?ref_src=twsrc%5Etfw">@othree</a> picking up maintenance!</p>--	 Marijn Haverbeke (@MarijnJH) <a href="https://twitter.com/MarijnJH/status/1034328203026984961?ref_src=twsrc%5Etfw">2018年8月28日</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>大約七月初的時候，我開始接手幫忙維護 <a href="http://ternjs.net/">Tern</a>，Tern 是一個獨立的 JavaScript inference engine，用於協助撰寫 JavaScript 程式碼，就和之前介紹過的 Microsoft 的 LSP 後面的 Language Server 一樣，都是獨立於編輯器/IDE之外，不過 TernJS 是 2013 年就有開始發展的，所以是走自己的溝通介面；其實我幾年前也有幫忙貢獻過 TernJS，以前弄過我還有印象的有 Promise 支援、fetch 的定義、CoffeeScript plugin。</p>
<p>後來作者 <a href="https://github.com/marijnh">Marijn</a>暫停維護 Tern 跑去弄其他東西像是 <a href="https://github.com/acornjs/acorn">Acorn</a>、<a href="https://codemirror.net/">CodeMirror</a> 還有 ProseMirror 等（這位很厲害，改天再來介紹），並公開找人接手，在一些文字內有找到他的說法是說現在這個架構有些問題處理不了，很難再發展下去了，總之所以就停了一年多沒更新了，我也是斷斷續續注意到這個狀況，不過在研究 LSP 的時候發現其實還蠻多東西是依賴 TernJS 的，讓他這樣荒廢下去好像有點可惜，認真考慮了一兩週後決定接手維護工作，考慮的點主要在於不知道能不能順利接手處理問題，因為 TernJS 的 code base 實在不容易理解，尤其是我沒有相關的 compiler、工具的訓練和開發經驗，以前那些貢獻其實都是花很大心力下去才弄出來的，幾乎是處於那種「程式碼會動了，但是我不知道為什麼」的狀態，不過這兩年相關的知識補了不少，還玩了好一陣子的 JavaScript AST，有覺得比較看的懂 TernJS 的程式碼了，就心一橫報名說要幫忙維護了，Marijn 看到我過去有發過一些 PR 後，很迅速的就開協作者權限給我了。</p>
<p>正式開始接手後，我就開始把要做的事情整理出來，我的目標是在保持現有架構之下，盡可能的繼續支援新語法，直到真的這個架構撐不住為止，所以一開始就是把一些落後的語法支援和定義補上，這次發佈的 <a href="http://ternjs.net/#releases">0.22 版</a>就是包括 0.21 之後的一些小 bugfix，還有我加入之後開始弄的 async/await、async iteration(包括 <code>for await of</code>) 以及 <code>**</code> 支援，下一版我會開始一些內部的修改、還有看看 bug，不過 Emacs 相關的我現在是真的無法處理。</p>
<p>最後一段來說說目前感想吧，Tern 真是我目前為止看過最難理解的 code 了，不知道是不是會寫 compiler 的人腦袋都會轉換到常人無法理解的形狀，我目前為止看的第二辛苦的 code base 是 Kibana 的，不過 Kibana 單純只是東西很多，找入口找很久，Tern 難的點在於它用了很多 side effect 來做事，而且 code 內沒什麼文件說明，所以像下面這行我就花了很多時間才看懂實際上做什麼事：</p>
<pre><code class="language-js">infer(node.right, scope, new HasMethodCall(&quot;:Symbol.iterator&quot;, [], null,
                                           new HasMethodCall(&quot;next&quot;, [], null,
                                                             new GetProp(&quot;value&quot;, target))))
</code></pre>
<p>這行程式碼是先拿 <code>node.right</code> 的 <code>:Symbol.iterator</code> method 的執行結果，再看它的 <code>next</code> method 的執行結果，然後取最後這個結果的 <code>value</code> property 的資訊（可能的 type 之類的）塞給 target 物件，然後這行下面你又看不到 target 做何用，因為 target 物件是在上面已經有和其它會回傳的物件有建立關聯的；除此之外，這裡有個 <code>new GetProp</code>，其它地方還有個 <code>AVal.getProp</code> 又是不同功能，一開始看的真的是黑人問號...</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000933" baseName="web-fe-news-service-ofrontend">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-08-22</b:date>
				<b:time>23:42:43</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Web 前端文章廣播服務 ofrontend</b:title>
			<b:content>
				<b:summary> 前陣子弄了一個 web 前端文章的廣播服務，現在沒有正式的服務名稱，不過 code base 和一些帳號都叫 ofrontend，所以就先這樣稱呼它吧，現在這服務有兩個末端： Twitter Telegram Channel 會轉發的文章主要就是我看到和前端相關的為主，也會有少量其他的技術文章，大約 80% 英文、20 % 中文，不過不一定是我讀過覺得要推薦的，也是有過一些剛看標題覺得好像不錯，結果找到時間看完覺得沒什麼的文章，不介意的話可以 follow 一下。 目前資訊來源包括了： Twitter 上的 follows 和 Facebook 上自己的 Timeline GitHub 上的 follows、watching（沒有 public 的頁面）我有 watch 一些標準文件的 repository，像是 TC39、CSS-WG 等，現在蠻多資訊可以在 GitHub issue 內看到了，以前都要訂閱 mailing-list...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/30332209388/" title="frontend-news by othree, on Flickr"><img src="https://farm2.staticflickr.com/1897/30332209388_f956381a2d_b.jpg" width="512" height="512" alt="frontend-news" srcset="https://farm2.staticflickr.com/1897/30332209388_f956381a2d_b.jpg 1024w" /></a></p>
<p>前陣子弄了一個 web 前端文章的廣播服務，現在沒有正式的服務名稱，不過 code base 和一些帳號都叫 <a href="https://github.com/othree/ofrontend">ofrontend</a>，所以就先這樣稱呼它吧，現在這服務有兩個末端：</p>
<ul>
<li><a href="https://twitter.com/ofrontend">Twitter</a></li>
<li><a href="https://t.me/ofrontend">Telegram Channel</a></li>
</ul>
<p>會轉發的文章主要就是我看到和前端相關的為主，也會有少量其他的技術文章，大約 80% 英文、20 % 中文，不過不一定是我讀過覺得要推薦的，也是有過一些剛看標題覺得好像不錯，結果找到時間看完覺得沒什麼的文章，不介意的話可以 follow 一下。</p>
<p>目前資訊來源包括了：</p>
<ul>
<li>Twitter 上的 <a href="https://twitter.com/following">follows</a> 和 Facebook 上自己的 Timeline</li>
<li>GitHub 上的 <a href="https://github.com/othree?tab=following">follows</a>、watching（沒有 public 的頁面）我有 watch 一些標準文件的 repository，像是 TC39、CSS-WG 等，現在蠻多資訊可以在 GitHub issue 內看到了，以前都要訂閱 mailing-list</li>
<li>跟的 <a href="https://blog.othree.net/blogroll/">Feed</a>，有記得才會去看，線上這份 Feed 清單沒有隨時更新</li>
<li>Facebook 上的社團：
<ul>
<li><a href="https://www.facebook.com/groups/enjoyfonts/">字嗨</a></li>
<li><a href="https://www.facebook.com/groups/javascript.tw/">JavaScript.tw</a></li>
<li><a href="https://www.facebook.com/groups/vim.tw/">Vim 正體中文社群</a></li>
<li><a href="https://www.facebook.com/groups/augularjs.tw/">Angular Taiwan</a></li>
<li><a href="https://www.facebook.com/groups/1249720198386038/">Fire-and-Forget 前端轉貼總部</a></li>
<li><a href="https://www.facebook.com/groups/142197385837507/">Ruby Taiwan</a></li>
<li><a href="https://www.facebook.com/groups/521085554595481/">Front-End Developers Taiwan</a></li>
<li><a href="https://www.facebook.com/groups/168537393167684/">Perl 台灣</a></li>
<li><a href="https://www.facebook.com/groups/830853873715381/">Markdown 台灣</a></li>
<li><a href="https://www.facebook.com/groups/262800543746083/">node.js台灣</a></li>
<li><a href="https://www.facebook.com/groups/1439747729634154/">ReactJS.tw</a></li>
<li>...等</li>
</ul>
</li>
<li>訂閱的電子報：
<ul>
<li><a href="https://weekly.codetengu.com/">碼天狗</a></li>
<li><a href="https://weekly.techbridge.cc/">TechBridge 技術週刊</a></li>
<li><a href="https://javascriptweekly.com/">JavaScript Weekly</a></li>
<li><a href="https://nodeweekly.com/">Node Weekly</a></li>
<li><a href="https://frontendfoc.us/">Frontend Focus</a></li>
<li><a href="https://mobiledevweekly.com/">Mobile Dev Weekly</a></li>
<li><a href="https://webopsweekly.com/">WebOps Weekly</a></li>
<li><a href="https://www.pycoders.com/">Pycoder's Weekly</a></li>
<li><a href="https://rubyweekly.com/">Ruby Weekly</a></li>
<li><a href="https://golangweekly.com/">Golang Weekly</a></li>
<li><a href="https://wasmweekly.news/">WebAssembly Weekly</a></li>
<li>...等</li>
</ul>
</li>
<li>其它各種一時想不起來或是非預期的來源</li>
</ul>
<p>會做這個服務有幾個原因，一個是我其實本來就有在轉發前端相關的文章連結，不過大多丟在一些非公開的地方，並且這些文章連結都沒好好整理，一直都有想找個書籤服務弄起來，然後這陣子看到<a href="https://wanqu.co/">灣區日報</a>和<a href="https://t.me/JustShareChannel">吹水 Just Share</a> 覺得也可以來做類似的傳播管道，研究和思考了好一陣子，最後決定花錢訂閱了個 <a href="https://pinboard.in/">Pinboard</a> 服務來收集和管理連結，Pinboard 雖然介面沒找什麼設計師，看起來很陽春，不過其實他還蠻靈活的，API 很簡單可以用，不用 oauth，只要帶 token 發請求就可以，和 Telegram Bot 蠻像的，所以其實也不少工具可以用，Android、iOS、Firefox 都有，隨時看到相關的文章都可以很快的把連結丟進 Pinboard。</p>
<p>連結進 Pinboard 之後，就有個轉發的工具來把這連結丟去 Twitter 和 Telegram，轉發的程式也放在 GitHub 上，叫 <a href="https://github.com/othree/pinboardto">pinboardto</a>，Python 寫的，本來有想趁機玩玩看 Rust，不過研究一下覺得還是先用 Python 把基本款弄出來，裡面東西很簡單沒什麼技術難題，並且不依靠外部儲存（資料庫、檔案），同步的機制是靠系統時間和 cronjob，所以不知什麼原因錯過就錯過了，不過因為這服務也沒有這麼要求可靠性，所以還好。</p>
<p>Facebook 的部分，本來有想接到 Fire-and-Forget 前端轉貼總部 去的，可是 FB 那邊弄不到永久有效的 token 就放棄。</p>
<p>最後成本部分，這個服務其實對我來說蠻低成本的，主要固定支出就只有 Pinboard 的年費，不過本來就要好好收集算是本來就要花，轉發服務掛在現有的主機上，最後就是 iPad 上有花錢買一個 Pinboard 的 app，不過其實也還沒有滿意就是，不知道為什麼抓 Twitter 的網頁 title 都會抓錯。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000932" baseName="language-server-protocol">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-07-28</b:date>
				<b:time>23:59:05</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Language Server Protocol</b:title>
			<b:content>
				<b:summary> 最近才注意到 Language Server Protocol （官方中文介紹）這東西，微軟為了 Visual Studio Code 所定的一個協定，專門用來輔助程式開發用的，像是 VSCode 的 IntelliSense 提供的自動補完就可以基於這個協定支援更多語言，這協定其實在 2016 就發表了，感覺我 lag 很久，不過其實我也好奇 VSCode 怎麼處理這問題一陣子了，最近在 TernJS 的 issue 裡面看到 LSP 這個詞，好奇之下才去看到底是什麼東西。 LSP 的設計理念是開發 Editor 的不可能每種程式語言都花時間心力去把它們的編輯輔助功能做起來（還不一定做的好），所以不如就把這塊拆出來，讓分析程式碼、提供輔助功能的部分（Language Server）拆出去給各自領域的人開發，然後透過一個公定的介面來做溝通，這個介面就是 Language Server Protocol 了。 LSP 是架構在 JSON-RPC 這個 protocol...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/43311328182/" title="Language Server Protocol by othree, on Flickr"><img src="https://farm1.staticflickr.com/838/43311328182_e7663f40dc_b.jpg" width="1024" height="640" alt="Language Server Protocol, " srcset="https://farm1.staticflickr.com/838/43311328182_e7663f40dc_b.jpg 1024w, https://farm1.staticflickr.com/838/43311328182_b3478fb066_h.jpg 1600w" /></a></p>
<p>最近才注意到 <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a> （<a href="https://docs.microsoft.com/zh-tw/visualstudio/extensibility/language-server-protocol">官方中文介紹</a>）這東西，微軟為了 Visual Studio Code 所定的一個協定，專門用來輔助程式開發用的，像是 VSCode 的 IntelliSense 提供的自動補完就可以基於這個協定支援更多語言，這協定其實在 2016 就發表了，感覺我 lag 很久，不過其實我也好奇 VSCode 怎麼處理這問題一陣子了，最近在 TernJS 的 issue 裡面看到 LSP 這個詞，好奇之下才去看到底是什麼東西。</p>
<p>LSP 的設計理念是開發 Editor 的不可能每種程式語言都花時間心力去把它們的編輯輔助功能做起來（還不一定做的好），所以不如就把這塊拆出來，讓分析程式碼、提供輔助功能的部分（Language Server）拆出去給各自領域的人開發，然後透過一個公定的介面來做溝通，這個介面就是 <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a> 了。</p>
<p>LSP 是架構在 JSON-RPC 這個 protocol 上，只要你的 Editor 可以透過 JSON-RPC 發送請求並接收結果，就可以利用 LSP 來提供功能，現在支援 LSP 的編輯器也不少，不是只有 VSCode 有支援，其它還有 Eclipse、Vim、NeoVim、Sublime Text 3 都已經有方案可以支援了，在社群維護的網站  <a href="http://langserver.org/">langserver.org</a> 上有一份<a href="http://langserver.org/#implementations-server#implementations-client">清單</a>介紹各個 client 的支援狀況。</p>
<p>送到 Language Server 的指令，目前 Protocol 可以提供以下功能：</p>
<ul>
<li><a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_completion">Completion</a></li>
<li><a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_hover">Hover Information</a></li>
<li><a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_signatureHelp">Signature Help</a></li>
<li><a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_definition">Goto Definition</a></li>
<li><a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_typeDefinition">Goto Type Definition</a></li>
<li><a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_implementation">Goto Implementation</a></li>
<li><a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_references">Find References</a></li>
<li><a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_codeAction">Action</a>, fix code</li>
<li><a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_codeLens">Code Lens</a>, information for specific position</li>
<li><a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_formatting">Formatting</a></li>
<li><a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_publishDiagnostics">Diagnostic</a>, 像是 code lint</li>
</ul>
<p>其它還有一些是檔案、工作區相關的操作指令，另外由於現在 Language Server 實做和 LSP 是分開的，也沒有限制一定要所有功能都有支援，所以有些 Language Server 可能是沒有支援特定功能的，目前可以找到兩份 Language Server 的列表，一份是 LSP <a href="https://microsoft.github.io/language-server-protocol/implementors/servers/">官網的</a>，另一份則是 <a href="http://langserver.org#implementations-server">langserver.org</a> 上的，社群維護的版本才有標示不同的 Language Server 對應支援的功能，不過說是社群維護，其實 langserver.org 是另外一間公司 <a href="https://about.sourcegraph.com/">Sourcegraph</a> 在維護的，該公司做的東西和 LSP 相關性看起來還蠻大的，也提供了很多 Language Server。</p>
<p>然後我就很感興趣，VSCode 現在內建的 JavaScript 用的 Language Server 是哪一套呢？畢竟仔細一看，兩個列表裡面，都沒有列出內建由微軟維護的 JavaScript 的 Language Server，只有 Sourcegraph 的版本，不止 JavaScript 沒有，TypeScript 也沒，只有 <a href="http://typefox.io">TypeFox</a> 的版本（TypeFox 也是做程式碼相關工具的公司，我有找到一些研討會演講介紹 LSP 的講者就是這間公司的人）。總之兩個語言都沒列這真是太不尋常了，實在引起了我的好奇心，後來到處尋找總算在 <a href="https://code.visualstudio.com/docs/languages/javascript">JavaScript in VS Code</a> 這頁找到蛛絲馬跡，這頁內文第二句話就有個連結連去 <a href="https://github.com/Microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio">JavaScript Language Service</a> 在 GitHub 的介紹，位置是 TypeScript 專案下的 Wiki 頁面，也有找到 TypeScript 專案內的相關<a href="https://github.com/Microsoft/TypeScript/tree/master/src/services">程式碼</a>，實際上 VSCode 對於 JavaScript 和 TypeScript 的編輯輔助功能都是依靠這個 TypeScript Language Service 提供的，或是也可以叫它 <a href="https://github.com/Microsoft/TypeScript/wiki/Standalone-Server-%28tsserver%29">tsserver</a>，TypeScript 的大架構可以參考 <a href="https://github.com/Microsoft/TypeScript/wiki/Architectural-Overview">Architectural Overview</a> 這篇文章；由於 tsserver 比較早推出，所以用的不是 LSP 用的 JSON-RPC，而是 STDIO 然後傳輸 JSON 加上 header，指令也有些落差，不過其實整體而言沒差距很大，因為 VSCode 那些輔助功能幾乎都是從 Visual Studio 來的，TypeScript 的支援也早就都透過 tsserver 來實現了，事實上，Sourcegraph 的 <a href="https://github.com/sourcegraph/javascript-typescript-langserver">TypeScript Language Service</a> 就是個 tsserver 的 proxy，底層還是 tsserver，不過實際上要用的話應該是 <a href="https://github.com/theia-ide/typescript-language-server">TypeFox 的</a>比較好；然後當然也有人提出來說 TypeScript 是不是應該直接提供 LSP 版本的開發工具支援，在 GitHub 上的 <a href="https://github.com/Microsoft/TypeScript/issues/11274">Issue 11274</a>，不過目前看來是沒打算樣子，這點我也是蠻意外的，畢竟 LSP 和 TypeScript 同公司的，沒打算支援自家公司定的標準，也是十足的霸氣，也看的出來各開源專案自治度其實蠻高的。</p>
<p>補充：另外有個 debugger 用的 <a href="https://microsoft.github.io/debug-adapter-protocol/">Debug Adapter Protocol</a></p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000931" baseName="naming-1">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-07-21</b:date>
				<b:time>23:12:15</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>命名記錄 1</b:title>
			<b:content>
				<b:summary> 記錄一下這兩年自己覺得還不錯的命名，本來是想累積更多再貼的。 Herculus 海克力士，用在測試服務名稱上，是希臘神話中的大力士，曾經完成十二偉業，這兩年還有部電影，取名源由其實是 Fate/stay night 中，他做為 Berserk 的 Servant 所持有的寶具，稱為 十二の試練，試練就聯想到 test ～ Erebor 用在資料庫相關的服務，哈比人歷險記的孤山的精靈語，因為孤山裡面有很多矮人的寶物，資料庫內的資料某種層面來說也算是個寶物。 Olympus 應該不用介紹來源了，用在 client 端自己寫的 API helper，取這個名字的原因是覺的客戶端跟 server 端要資料就如同在跟眾神請求一樣。...</b:summary>
				<b:mainContent><p><a title="By Thorin Oakenshield II [CC BY-SA 4.0 
(https://creativecommons.org/licenses/by-sa/4.0
)], from Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:%D0%9A%D0%B0%D1%80%D1%82%D0%B0_%D0%9E%D0%B4%D0%B8%D0%BD%D0%BE%D0%BA%D0%BE%D0%B9_%D0%93%D0%BE%D1%80%D1%8B_.jpg"><img width="512" alt="Карта Одинокой Горы " src="https://upload.wikimedia.org/wikipedia/commons/b/b3/%D0%9A%D0%B0%D1%80%D1%82%D0%B0_%D0%9E%D0%B4%D0%B8%D0%BD%D0%BE%D0%BA%D0%BE%D0%B9_%D0%93%D0%BE%D1%80%D1%8B_.jpg" /></a></p>
<p>記錄一下這兩年自己覺得還不錯的命名，本來是想累積更多再貼的。</p>
<h4>Herculus</h4>
<p><a href="https://zh.wikipedia.org/zh-tw/%E8%B5%AB%E6%8B%89%E5%85%8B%E5%8B%92%E6%96%AF">海克力士</a>，用在測試服務名稱上，是希臘神話中的大力士，曾經完成十二偉業，這兩年還有部電影，取名源由其實是 Fate/stay night 中，他做為 Berserk 的 Servant 所持有的寶具，稱為 <strong>十二の試練</strong>，試練就聯想到 test ～</p>
<h4>Erebor</h4>
<p>用在資料庫相關的服務，哈比人歷險記的<a href="https://en.wikipedia.org/wiki/Lonely_Mountain">孤山</a>的精靈語，因為孤山裡面有很多矮人的寶物，資料庫內的資料某種層面來說也算是個寶物。</p>
<h4>Olympus</h4>
<p>應該不用介紹來源了，用在 client 端自己寫的 API helper，取這個名字的原因是覺的客戶端跟 server 端要資料就如同在跟眾神請求一樣。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000930" baseName="quotation">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-07-17</b:date>
				<b:time>00:39:20</b:time>
			</b:datetime>
			<b:category>others</b:category>
			<b:title>引號</b:title>
			<b:content>
				<b:summary> 記錄一下搞 i18n 的一些發現，首先是引號，一般寫程式用的單雙引號 '&quot; 是沒分開關的，不過這和寫作的不一樣，當初 ASCII Code 編定時也是因為資源有限所以才不分開引號還是關引號，不過現在其實這些標點符號都已經有區分的版本了，在 Mac 上也都有快速鍵輸入，像是： &quot; : opt + [ &quot; : opt + shift + [ ' : opt + ] ' : opt + shift + ] 一般文字我還蠻喜歡把普通的單引號雙引號都轉成這種，有個意外的好處就是放在 JSON 裡的字串內時，不需要用 \ 跳脫，肉眼看起來和諧許多。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/28562524947/" title="Qutation Marks by othree, on Flickr"><img src="https://farm2.staticflickr.com/1786/28562524947_6b41f2c99a_b.jpg" width="233" height="454" alt="Qutation Marks, " srcset="https://farm2.staticflickr.com/1786/28562524947_6b41f2c99a_b.jpg 466w" /></a></p>
<p>記錄一下搞 i18n 的一些發現，首先是引號，一般寫程式用的單雙引號 <code>'&quot;</code> 是沒分開關的，不過這和寫作的不一樣，當初 ASCII Code 編定時也是因為資源有限所以才不分開引號還是關引號，不過現在其實這些標點符號都已經有區分的版本了，在 Mac 上也都有快速鍵輸入，像是：</p>
<ul>
<li><code>&quot;</code> :  <code>opt + [ </code></li>
<li><code>&quot;</code> :  <code>opt + shift + [ </code></li>
<li><code>'</code> :  <code>opt + ] </code></li>
<li><code>'</code> :  <code>opt + shift + ]</code></li>
</ul>
<p>一般文字我還蠻喜歡把普通的單引號雙引號都轉成這種，有個意外的好處就是放在 JSON 裡的字串內時，不需要用 <code>\</code> 跳脫，肉眼看起來和諧許多。</p>
<p>然後當初實做 Markdown 的 John Gruber 有個工具叫 <a href="https://daringfireball.net/projects/smartypants/">SmartyPants</a> 可以來處理單雙引號的轉換，這工具當年常和 Markdown 一起合作，我則是有把它 port 到 <a href="https://www.npmjs.com/package/smartypants">JavaScript</a>，然後其實有些語言的引號不是這種點點得，像是大家都知道的中日文的 <code>「」</code> ，我要提的則是俄文用的是箭頭引號 <code>«»</code> 叫 Guillemet，長的和<a href="https://zh.wikipedia.org/wiki/%E4%B9%A6%E5%90%8D%E5%8F%B7">書名號</a>很像，不過大小就有差，當然 Guillemet 也有單線條的版本 <code>‹›</code>，輸入方法如下：</p>
<ul>
<li><code>«</code> :  <code>opt + \</code></li>
<li><code>»</code> :  <code>opt + shift + \</code></li>
<li><code>‹</code> :  <code> opt + shift + 3</code></li>
<li><code>›</code> :  <code>opt + shift + 4</code></li>
</ul>
<p>德文又比較特別，左邊的引號是放在底部的 <code>„</code>，輸入方法為：</p>
<ul>
<li><code>„</code> : <code>opt + shift + w</code></li>
</ul>
<p>當然這些不同語言的不同型式好像現在也沒有講究一定要用，我隨便找一些該語言的新聞網站也還是很多用普通的雙引號，而且實際上這些引號的組合很多，<a href="https://en.wikipedia.org/wiki/Quotation_mark">wikipedia</a> 上有人整理好。</p>
<p>另外想特別提一下西班牙文，它的問句和驚嘆句，除了在句尾加問號和驚嘆號之外，還可以在句首加上反過來的問號和驚嘆號，一樣，現在似乎也沒一定要這樣寫了，輸入方法為：</p>
<ul>
<li><code>¿</code> : <code>opt + shift + /</code></li>
<li><code>¡</code> : <code>opt + 1</code></li>
</ul>
<p>最後補篇少數派的文章 <a href="https://sspai.com/post/45516">别再用「六个点」当省略号了，这些标点都有更规范的输入方式</a>。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000929" baseName="monokai-pro">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-07-15</b:date>
				<b:time>10:45:48</b:time>
			</b:datetime>
			<b:category>vim</b:category>
			<b:title>Monokai Pro</b:title>
			<b:content>
				<b:summary> 因為用 Dank Mono 字體的關係，最近開始有想要讓 Vim 支援斜體的 syntax highlight，於是又花了不少時間測試，過程中想起在 Twitter 上看到有人說過有一款付費的 Sublime/VSCode 佈景主題（印象中是 @yorkxin），叫 Monokai Pro，因為可以免費評估，可能是用幾天後才會出現 popup 吧，就一時興起就裝來玩玩看，結果還蠻滿意的。 雖然我主力是 Vim，但是 Sublime 和 VSCode 都還是有用，後來又繼續研究了一下，原來 Monokai 是在 Textmate 2 的佈景主題，還蠻有名的，也很多人 port 到不同環境，Vim 那邊比較多人用的應該是 molokai，然後 Monokai Pro 是同個作者做的，如果有 Vim 版的我會支持一下吧～ 然後弄一弄發現我用 jellybean...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/43359779851/" title="Monokai Pro VSCode by othree, on Flickr"><img src="https://farm1.staticflickr.com/841/43359779851_2b149c66d6_b.jpg" width="1024" height="637" alt="Monokai Pro VSCode" srcset="https://farm1.staticflickr.com/841/43359779851_2b149c66d6_b.jpg 1024w, https://farm1.staticflickr.com/841/43359779851_8253ea1d98_h.jpg 1600w" /></a></p>
<p>因為用 <a href="http://blog.othree.net/log/2018/05/02/dank-mono/">Dank Mono</a> 字體的關係，最近開始有想要讓 Vim 支援斜體的 syntax highlight，於是又花了不少時間測試，過程中想起在 Twitter 上看到有人說過有一款付費的 Sublime/VSCode 佈景主題（印象中是 <a href="https://twitter.com/yorkxin">@yorkxin</a>），叫 <a href="https://www.monokai.pro/">Monokai Pro</a>，因為可以免費評估，可能是用幾天後才會出現 popup 吧，就一時興起就裝來玩玩看，結果還蠻滿意的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/28490909197/" title="Monokai Pro Sublime by othree, on Flickr"><img src="https://farm1.staticflickr.com/917/28490909197_7621988d47_b.jpg" width="1024" height="636" alt="Monokai Pro Sublime" srcset="https://farm1.staticflickr.com/917/28490909197_7621988d47_b.jpg 1024w, https://farm1.staticflickr.com/917/28490909197_a9739e01cc_h.jpg 1600w" /></a></p>
<p>雖然我主力是 Vim，但是 Sublime 和 VSCode 都還是有用，後來又繼續研究了一下，原來 Monokai 是在 <a href="http://wiki.macromates.com/Themes/UserSubmittedThemes">Textmate 2</a> 的佈景主題，還蠻有名的，也很多人 port 到不同環境，Vim 那邊比較多人用的應該是 <a href="https://github.com/tomasr/molokai">molokai</a>，然後 Monokai Pro 是同個作者做的，如果有 Vim 版的我會支持一下吧～</p>
<p>然後弄一弄發現我用 jellybean 的配色用到 256 色的，結果把 True Color 支援打開之後發現有點難看，又開始我的探索之旅了，目前暫時是用 <a href="https://github.com/jacoborus/tender.vim">tender</a>：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/29489585588/" title="tender.vim by othree, on Flickr"><img src="https://farm1.staticflickr.com/843/29489585588_48aa296746_b.jpg" width="1024" height="684" alt="tender.vim" srcset="https://farm1.staticflickr.com/843/29489585588_48aa296746_b.jpg 1024w, https://farm1.staticflickr.com/843/29489585588_bd4c88fe92_h.jpg 1600w" /></a></p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000928" baseName="language">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-06-29</b:date>
				<b:time>13:54:45</b:time>
			</b:datetime>
			<b:category>books</b:category>
			<b:title>推薦閱讀 - Language</b:title>
			<b:content>
				<b:summary>之前有一篇介紹 PEG.js，其實在那之後我還有花不少時間想深入理解，然後家裡小寶寶就誕生了，還沒機會完整理解到我想要的程度，因為現在可以自由研究、寫程式的時間比較少了，時間都拿去寫另外一個工具了，等能理解透徹不知道還要何時，所以先把其中一篇覺得很棒的參考文件放上來： Language - 演算法筆記 這篇對我來說是篇相見恨晚的文件，裡面很有條理的從最基礎的語言定義開始介紹到 Parser 相關的語法，也解答了我幾個存在已久的疑問： 正規表示式（Regular Expression）的正規是什麼意思 Context Free Grammar 的 Context Free 是什麼意思 為什麼 RE 無法 parse HTML 文件 演算法筆記這網站我其實也不是第一次看到，之前忘了研究什麼的時候也有找到這，當時就覺得怎麼有人這麼佛心的用中文解釋這麼多演算法，其實有搜尋了一下沒找到原作者是誰，倒是有看到以前要找人維護的消息，倒是我比較喜歡以前的樣式，現在這樣式，先不說粉紅色系，文字顏色和背景對比很低，讀起來比較辛苦啊。...</b:summary>
				<b:mainContent><p>之前有一篇介紹 <a href="https://blog.othree.net/log/2018/04/09/pegjs/">PEG.js</a>，其實在那之後我還有花不少時間想深入理解，然後家裡小寶寶就誕生了，還沒機會完整理解到我想要的程度，因為現在可以自由研究、寫程式的時間比較少了，時間都拿去寫另外一個工具了，等能理解透徹不知道還要何時，所以先把其中一篇覺得很棒的參考文件放上來：</p>
<ul>
<li><a href="http://www.csie.ntnu.edu.tw/%7Eu91029/Language.html">Language - 演算法筆記</a></li>
</ul>
<p>這篇對我來說是篇相見恨晚的文件，裡面很有條理的從最基礎的語言定義開始介紹到 Parser 相關的語法，也解答了我幾個存在已久的疑問：</p>
<ul>
<li>正規表示式（Regular Expression）的正規是什麼意思</li>
<li>Context Free Grammar 的 Context Free 是什麼意思</li>
<li>為什麼 RE 無法 parse HTML 文件</li>
</ul>
<p><a href="http://www.csie.ntnu.edu.tw/%7Eu91029/index.html">演算法筆記</a>這網站我其實也不是第一次看到，之前忘了研究什麼的時候也有找到這，當時就覺得怎麼有人這麼佛心的用中文解釋這麼多演算法，其實有搜尋了一下沒找到原作者是誰，倒是有看到以前要找人維護的消息，倒是我比較喜歡以前的樣式，現在這樣式，先不說粉紅色系，文字顏色和背景對比很低，讀起來比較辛苦啊。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000927" baseName="smooshgate">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-05-28</b:date>
				<b:time>12:32:28</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>SmooshGate</b:title>
			<b:content>
				<b:summary>之前應該沒在這邊提過這件事，總之就是之前 TC39 有個 flatten 的 proposal，搞一搞後，發現這東西實做啟用後 MooTools 會爛掉，詳細的原因 Google 那邊有一篇文章解釋，標題就是 SmooshGate，Smoosh 這個單字其實有點少見，我大概查一下，雖然有說是 flatten、squash 的意思，不過目前覺得應該是作畫時把顏料抹平那種動作感覺最對吧，總之，當初為了這個問題第一個提案的改名就是 smoosh，不過這個單字整體感覺和 flatten 差距實在太大，所以出現一堆聲音，有的是建議加上 &quot;use es2019&quot; 的 statement 來開啟 flatten，像是 stirct mode 一樣，有的建議其他名字，當然也有些人是覺得管 MooTools 去死的，不過因為 Don't Break the Web 的大原則所以還是要處理這個問題。 其實我覺得當初提案 smoosh 的人搞不好是故意挑這個字的，藉此增加話題性引發討論和建議，效果其實很好，在 Twitter 上還出現了 #SmooshGate 這樣的...</b:summary>
				<b:mainContent><p>之前應該沒在這邊提過這件事，總之就是之前 TC39 有個 flatten 的 proposal，搞一搞後，發現這東西實做啟用後 MooTools 會爛掉，詳細的原因 Google 那邊有一篇文章<a href="https://developers.google.com/web/updates/2018/03/smooshgate">解釋</a>，標題就是 SmooshGate，Smoosh 這個單字其實有點少見，我大概查一下，雖然有說是 flatten、squash 的意思，不過目前覺得應該是作畫時把顏料抹平那種動作感覺最對吧，總之，當初為了這個問題第一個提案的改名就是 <a href="https://github.com/tc39/proposal-flatMap/pull/56"><code>smoosh</code></a>，不過這個單字整體感覺和 flatten 差距實在太大，所以出現一堆聲音，有的是建議加上 <code>&quot;use es2019&quot;</code> 的 statement 來開啟 <code>flatten</code>，像是 stirct mode 一樣，有的建議其他名字，當然也有些人是覺得管 MooTools 去死的，不過因為 Don't Break the Web 的大原則所以還是要處理這個問題。</p>
<p>其實我覺得當初提案 smoosh 的人搞不好是故意挑這個字的，藉此增加話題性引發討論和建議，效果其實很好，在 Twitter 上還出現了 <a href="https://twitter.com/hashtag/smooshgate">#SmooshGate</a> 這樣的 hashtag，不過，總之在最近一次五月的 TC39 會議，確定 proposal 改新的名稱：<code>flat</code> ，雖然詞性不同，不過大家都還蠻可以接受，或許也可能是相較於 smoosh 來說很可以接受吧。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000926" baseName="github-pages-custom-domain-https">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-05-04</b:date>
				<b:time>19:12:21</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>GitHub Pages Custom Domain HTTPS</b:title>
			<b:content>
				<b:summary> 等了好久終於出來的功能，追了蠻久，昨天 DK 也有提到，其實正式發佈前就看到有人已經可以用了，不過總之這篇稍微記錄一下如果已經是舊有的 GitHub Pages 還不能用可以怎麼處理，不過不完全有效，舊有的專案在設定看起來會像是： 下面有寫說因為用了 custom domain 就不能用，這時候把 custom domain 刪除，然後儲存重新加回去就會變成： 然後就等，我大概是等到隔天就有了（變成第一張圖的狀態），不過這幾天剛好完全沒空，到現在才有空檔紀錄一下。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41138623844/" title="GitHub Pages by othree, on Flickr"><img src="https://farm1.staticflickr.com/957/41138623844_b976542030_b.jpg" width="730" height="491" alt="GitHub Pages" srcset="https://farm1.staticflickr.com/957/41138623844_b976542030_b.jpg 1024w" /></a></p>
<p>等了好久終於出來的功能，<a href="https://github.com/isaacs/github/issues/156">追了蠻久</a>，昨天 DK 也有<a href="https://blog.gslin.org/archives/2018/05/02/8295/github-%E9%80%8F%E9%81%8E-lets-encrypt-%E6%8F%90%E4%BE%9B%E8%87%AA%E8%A8%82%E7%B6%B2%E5%9F%9F%E7%9A%84-https-%E6%9C%8D%E5%8B%99/">提到</a>，其實正式發佈前就看到有人已經可以用了，不過總之這篇稍微記錄一下如果已經是舊有的 GitHub Pages 還不能用可以怎麼處理，不過不完全有效，舊有的專案在設定看起來會像是：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41127813434/" title="GitHub Pages by othree, on Flickr"><img src="https://farm1.staticflickr.com/972/41127813434_4219cc0fa1_b.jpg" width="730" height="491" alt="GitHub Pages" srcset="https://farm1.staticflickr.com/972/41127813434_4219cc0fa1_b.jpg 1024w" /></a></p>
<p>下面有寫說因為用了 custom domain 就不能用，這時候把 custom domain 刪除，然後儲存重新加回去就會變成：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/40945601525/" title="GitHub Pages by othree, on Flickr"><img src="https://farm1.staticflickr.com/863/40945601525_2331845c36_b.jpg" width="730" height="512" alt="GitHub Pages" srcset="https://farm1.staticflickr.com/863/40945601525_2331845c36_b.jpg 1024w" /></a></p>
<p>然後就等，我大概是等到隔天就有了（變成第一張圖的狀態），不過這幾天剛好完全沒空，到現在才有空檔紀錄一下。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000925" baseName="dank-mono">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-05-02</b:date>
				<b:time>22:46:24</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>Dank Mono</b:title>
			<b:content>
				<b:summary> 上週在 Twitter 上看到有人轉推作者的發文，發現這個新的 coding 字型：Dank Mono，然後我就買來用用看了，在這之前我是用 Source Code Pro 的，一剛開始設定下去覺得還有點不習慣，不過強迫用了一下卻適應的蠻快的。 套用上我的編輯環境後是這樣：...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/40940786465/" title="Dank Mono Regular by othree, on Flickr"><img src="https://farm1.staticflickr.com/870/40940786465_3dbdd2972e_b.jpg" width="400" height="345" alt="Dank Mono Regular, " srcset="https://farm1.staticflickr.com/870/40940786465_3dbdd2972e_b.jpg 800w" /></a></p>
<p>上週在 Twitter 上看到有人轉推作者的發文，發現這個新的 coding 字型：<a href="https://dank.sh">Dank Mono</a>，然後我就買來用用看了，在這之前我是用 <a href="https://adobe-fonts.github.io/source-code-pro/">Source Code Pro</a> 的，一剛開始設定下去覺得還有點不習慣，不過強迫用了一下卻適應的蠻快的。</p>
<p>套用上我的編輯環境後是這樣：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/27971035788/" title="Dank Mono by othree, on Flickr"><img src="https://farm1.staticflickr.com/959/27971035788_ac9bef913e_b.jpg" width="970" height="707" alt="Dank Mono, " srcset="https://farm1.staticflickr.com/959/27971035788_ac9bef913e_b.jpg 1024w, https://farm1.staticflickr.com/959/27971035788_964e25aeb6_h.jpg 1600w" /></a></p>
</b:mainContent>
				<b:extendContent><p>其實我覺得這套字形最大的特色就是那個有 descendant 的小寫 f，讓人忍不住想多用 f 來命名啊，除此之外，它和貴貴的 <a href="https://www.typography.com/fonts/operator/styles/operatormono">Operator Mono</a> 一樣有手寫風格的斜體可用：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/40940786495/" title="Dank Mono Italic by othree, on Flickr"><img src="https://farm1.staticflickr.com/965/40940786495_db2904bb0e_b.jpg" width="400" height="345" alt="Dank Mono Italic, " srcset="https://farm1.staticflickr.com/965/40940786495_db2904bb0e_b.jpg 800w" /></a></p>
<p>有空可以來調整調整現在的 syntax highlight；然後和 <a href="https://github.com/tonsky/FiraCode">Fira Code</a> 一樣，有一些連字（ligatures）：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26977563397/" title="Dank Mono Ligatures by othree, on Flickr"><img src="https://farm1.staticflickr.com/907/26977563397_a129414a80_b.jpg" width="970" height="707" alt="Dank Mono Ligatures, " srcset="https://farm1.staticflickr.com/907/26977563397_a129414a80_b.jpg 1024w, https://farm1.staticflickr.com/907/26977563397_55a399c747_h.jpg 1600w" /></a></p>
<p>目前的缺點的話，符號整體而言都是比較小的，我還是比較喜歡 Source Code Pro 的符號和其它字元大小的比例，另外就是現在還只有 regular 字重，不排除也不保證會有其它字重，除了這兩點之外，這個字體我目前倒是還蠻喜歡的。</p>
<p>最後附上作者自己的介紹 <a href="https://medium.com/@philpl/what-sets-dank-mono-apart-1bbdc1cc3cbd">What sets Dank Mono apart?</a></p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000924" baseName="tfn-domain-transfer-out">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-05-02</b:date>
				<b:time>12:13:08</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>TFN 域名轉出</b:title>
			<b:content>
				<b:summary> 我的 markdown.tw 在 TFN 註冊的，其實一直很想轉出，但是很怕轉的過程出意外，遲遲沒動手。不過剛剛看到 GitHub Pages 用 custom domain 也正式支援 HTTPS 了，如果是設定 A record 的話需要更新 DNS 設定，於是我就決定認真的來處理這件事，不意外的介面很難理解，決定記錄一下幫助眾生～...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41839613061/" title="dig markdown.tw by othree, on Flickr"><img src="https://farm1.staticflickr.com/908/41839613061_4caec6e31e_b.jpg" width="665" height="452" alt="dig markdown.tw, " srcset="https://farm1.staticflickr.com/908/41839613061_4caec6e31e_b.jpg 1024w" /></a></p>
<p>我的 markdown.tw 在 TFN 註冊的，其實一直很想轉出，但是很怕轉的過程出意外，遲遲沒動手。不過剛剛看到 GitHub Pages 用 custom domain 也正式支援 HTTPS 了，如果是設定 A record 的話需要更新 DNS 設定，於是我就決定認真的來處理這件事，不意外的介面很難理解，決定記錄一下幫助眾生～</p>
</b:mainContent>
				<b:extendContent><p>域名要轉出最重要的就是要從原註冊商拿到 authorization code，然後在新註冊商轉入的時候輸入，TFN 要轉出還好不是要聯絡客服，介面上有，然後我就點下去看：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26970973117/" title="TFN domain transfer by othree, on Flickr"><img src="https://farm1.staticflickr.com/959/26970973117_e94bf86d90_b.jpg" width="1024" height="846" alt="TFN domain transfer, " srcset="https://farm1.staticflickr.com/959/26970973117_e94bf86d90_b.jpg 1024w, https://farm1.staticflickr.com/959/26970973117_579cf5d5b0_h.jpg 1600w" /></a></p>
<p>馬上就卡關了，完全沒有說明，就要我輸入<strong>移轉中密碼</strong>，還是必填欄位，根據我一些以往經驗，我以為這邊是要輸入什麼先跟他們取得的安全驗證碼，然後才會拿到 authorization code，不過卻死活找找不到這個取得安全驗證碼的地方，鬼打牆半個鐘頭後，我決定作一個測試，就是把 <strong>移轉中密碼</strong> 當成就是 authorization code 來試試，然後自己想一個密碼輸入後：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41122773584/" title="TFN domain transfer by othree, on Flickr"><img src="https://farm1.staticflickr.com/944/41122773584_37384abe31_b.jpg" width="1024" height="846" alt="TFN domain transfer, " srcset="https://farm1.staticflickr.com/944/41122773584_37384abe31_b.jpg 1024w, https://farm1.staticflickr.com/944/41122773584_9dbf36d901_h.jpg 1600w" /></a></p>
<p>就得到成功訊息了！這時候眼尖的人會發現左邊的目錄多了個<strong>取消轉出</strong>的選項，看到這選項的我時在忍不住想看看裡面有什麼訊息，就點了下去：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/41122773934/" title="TFN domain transfer by othree, on Flickr"><img src="https://farm1.staticflickr.com/976/41122773934_eba87c97b9_b.jpg" width="1024" height="846" alt="TFN domain transfer, " srcset="https://farm1.staticflickr.com/976/41122773934_eba87c97b9_b.jpg 1024w, https://farm1.staticflickr.com/976/41122773934_f040f1fe0f_h.jpg 1600w" /></a></p>
<p>恩恩，真是不意外的結果啊，總之我就重新操作一次，然後拿著我自己設定的密碼去 Gandi 那邊當 authorization code 轉入，弄完等了一陣子後，竟然就通過了！</p>
<p>所以結論是，TFN 域名轉出時要輸入的<strong>移轉中密碼</strong>其實就是給使用者自訂 authorization code，而且還有個蠻短的長度限制 XD，現在雖然 nameserver 都轉好了，不過我的 GitHub Pages HTTPS 還是沒生效啊～</p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000923" baseName="eslint-plugin-intro">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-04-21</b:date>
				<b:time>21:17:13</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>ESLint Plugin 入門</b:title>
			<b:content>
				<b:summary> 最近寫了個簡單的 ESLint plugin，來記錄一下一些基礎知識，我做的 plugin 很簡單，叫做 eslint-plugin-no-parameter-e，這個 ESLint plugins 做的事情只是檢查所有 function 的參數，然後如果有任何一個參數名是 e 的話就警報，這條 rule 其實是為了避免把 error 或 event 簡寫成 e，會容易混淆。 接下來進入正題，ESLint 基本上就是透過 ESPree 這個 parser 先把程式碼轉為 ESTree 相容的 AST，EStree 是個 de facto standard，是從 Mozilla Spider Monkey 用的 AST 演化而來，現在幾乎做...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26729618387/" title="ESLint by othree, on Flickr"><img src="https://farm1.staticflickr.com/912/26729618387_d25b36bfed_z.jpg" width="581" height="514" alt="ESLint" srcset="https://farm1.staticflickr.com/912/26729618387_d25b36bfed_z.jpg 581w" /></a></p>
<p>最近寫了個簡單的 ESLint plugin，來記錄一下一些基礎知識，我做的 plugin 很簡單，叫做 <a href="https://github.com/othree/eslint-plugin-no-parameter-e">eslint-plugin-no-parameter-e</a>，這個 ESLint plugins 做的事情只是檢查所有 function 的參數，然後如果有任何一個參數名是 <code>e</code> 的話就警報，這條 rule 其實是為了避免把 <code>error</code> 或 <code>event</code> 簡寫成 <code>e</code>，會容易混淆。</p>
<p>接下來進入正題，ESLint 基本上就是透過 <a href="https://github.com/eslint/espree">ESPree</a> 這個 parser 先把程式碼轉為 <a href="https://github.com/estree/estree">ESTree</a> 相容的 AST，EStree 是個 de facto standard，是從 Mozilla Spider Monkey 用的 AST 演化而來，現在幾乎做 JavaScript 工具，會需要轉 AST 的話都會用這個格式；有了 AST 後，才來分析 AST 做檢查，然後現在有工具叫 <a href="https://astexplorer.net/">AST Explorer</a>，非常方便，可以線上直接修改 code sample 看 AST 變化，可以用它來看你想要處理的 code 的 AST 結構，至於怎麼寫 rule 就看個人了，基本上就是監聽要注意的 node，然後檢查 AST 結構，有問題就呼叫 report 這樣。</p>
<p>第二點，npm module 的名稱要用 <code>eslint-plugin-</code> 開頭，官方說的規則，應該不遵守還是可以抓的到，不過就還是遵守一下免的有意外。</p>
<p>第三點，測試其實 ESLint 有 RuleTester 可以拿來寫測試用：</p>
<pre><code class="language-javascript">const rule = require('../rule.js')
const RuleTester = require('eslint').RuleTester

const ruleTester = new RuleTester();

ruleTester.run('no-parameter-e', rule, {
  valid: [
    'function a (event) {}',
  ],
  invalid: [
    {
      code: 'function e (e) {}',
      errors: [{ message }],
    }
  ],
});
</code></pre>
<p>很方便，都不用 test framework 了，並且有特別要求 valid 和 invalid 都要有 test case，不然測試就會失敗。</p>
<p>然後測試的時候是每個 rule 獨立跑，每個 plugin 可以有多個 rule，很多 plugin 是把不同 rule 都獨立一個檔案，每個 rule 可以丟的東西除了檢查外還有不少，像是說明文件、自動修復的動作等，詳見<a href="https://eslint.org/docs/developer-guide/working-with-rules">官方文件</a>，我一開始是參考 <a href="https://github.com/benmosher/eslint-plugin-import">eslint-plugin-import</a> 的，不過現在初心者應該也可以先看我的 <a href="https://github.com/othree/eslint-plugin-no-parameter-e">eslint-plugin-no-parameter-e</a>，東西更少一些。</p>
<p>下一個想來挑戰處理空行，看了一下感覺是比較困難啊～</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000922" baseName="immer">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-04-19</b:date>
				<b:time>23:11:20</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Immer 原理</b:title>
			<b:content>
				<b:summary>前陣子有個蠻有趣的 library 叫 Immer，是 MobX 的開發者 Michel Weststrate 做的，這個 library 做的事情很有趣，它整合了 immutable 資料和原生資料的特性，反過來從缺點來看，immutable 資料型態的問題就是操作比較不方便，所有的修改動作都要透過 method 來執行，不能直接用 assign 的，有時候要改比較深層一點的資料就很麻煩，像 Facebook 的 immutable.js 就需要用 getIn、updateIn 來處理： getIn({ x: { y: { z: 123 }}}, ['x', 'y', 'z']) // 123 const original =...</b:summary>
				<b:mainContent><p>前陣子有個蠻有趣的 library 叫 <a href="https://github.com/mweststrate/immer">Immer</a>，是 MobX 的開發者 Michel Weststrate 做的，這個 library 做的事情很有趣，它整合了 immutable 資料和原生資料的特性，反過來從缺點來看，immutable 資料型態的問題就是操作比較不方便，所有的修改動作都要透過 method 來執行，不能直接用 assign 的，有時候要改比較深層一點的資料就很麻煩，像 Facebook 的 <a href="https://github.com/facebook/immutable-js">immutable.js</a> 就需要用 <code>getIn</code>、<code>updateIn</code> 來處理：</p>
<pre><code class="language-js">getIn({ x: { y: { z: 123 }}}, ['x', 'y', 'z']) // 123

const original = { x: { y: { z: 123 }}}
setIn(original, ['x', 'y', 'z'], 456) // { x: { y: { z: 456 }}}
</code></pre>
<p>用陣列丟每層的屬性名稱，也有一些是用 <code>.</code> 切分的 path 來處理這個問題（像是 <code>prop1.prop2.prop3</code> 這種結構），而原生資料的缺點，在這個場景來看當然就是不 immutable 了，Immer 就提出了一個新的構想，把這兩者的優點結合在一起，讓資料可以保持 immutable 特性，又可以直接修改，當然不能直接修改 JavaScript 行為，所以還是有些地方需要等價交換，就是修改資料的時候，要包進 produce function 內：</p>
<pre><code class="language-js">const nextState = produce(baseState, draftState =&gt; {
    draftState.push({ todo: &quot;Tweet about it&quot; })
    draftState[1].done = true
})
</code></pre>
<p>然後得到的 <code>nextState</code> 和 <code>baseState</code> 就會是不同物件，就像是 immutable 物件一樣行為，所以如果沒修改就還是同個物件，初看覺得有點黑魔法，不過思考過後覺得也不是不能做，有了些假想的實做方法後去研究了一下程式碼，不太意外的其實在 produce 裡面拿到的 draft 物件，是一個 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a> 包裝過的物件，然後 immutable 相關的邏輯都做在 Proxy 內，produce 跑完後再把新的值 finalize 取出用 plain object 傳回給 <code>nextState</code>，當然因為 Proxy 是比較新的東西，所以針對 ES5 也有另外的處理，我大致看一下就是比較土法煉鋼的下去比對，至於為什麼不全部都這樣做應該是效能考量吧。其實我覺得比起實做的原理，能想到這樣設計實在是很厲害，不像大部分人早就放棄了，還持續思考是不是有更好的作法可以整合兩種資料格式的優點才有機會找到這條路。</p>
<p>最後，Immer 這名字的由來，雖然在德文有這單字，不過我判斷應該還是從 immersive 來的吧。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000921" baseName="2017">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-04-18</b:date>
				<b:time>23:25:57</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>2017</b:title>
			<b:content>
				<b:summary> 拖稿很久的 2017 回顧，今年比較沒時間，所以只挑了一輪就直接上陣了（然後還晚了好幾個月），一月是現在固定的台南春節，台南還看的到很多手寫春聯，而且都寫得很漂亮。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32417917172/" title="神農老街 by othree, on Flickr"><img src="https://farm1.staticflickr.com/395/32417917172_5e0de7f00c_b.jpg" width="1024" height="683" alt="神農老街" srcset="https://farm1.staticflickr.com/395/32417917172_5e0de7f00c_b.jpg 1024w, https://farm1.staticflickr.com/395/32417917172_1d7322eea0_h.jpg 1600w" /></a></p>
<p>拖稿很久的 2017 回顧，今年比較沒時間，所以只挑了一輪就直接上陣了（然後還晚了好幾個月），一月是現在固定的台南春節，台南還看的到很多手寫春聯，而且都寫得很漂亮。</p>
</b:mainContent>
				<b:extendContent><p>二月是台北燈節時去拍的，台灣總督府交通局鐵道部，當時是特別晚上點燈的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32197014823/" title="台灣總督府交通局鐵道部 台北燈節 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2431/32197014823_ef6d988581_b.jpg" width="1024" height="683" alt="台灣總督府交通局鐵道部 台北燈節" srcset="https://farm3.staticflickr.com/2431/32197014823_ef6d988581_b.jpg 1024w, https://farm3.staticflickr.com/2431/32197014823_0715faaa47_h.jpg 1600w" /></a></p>
<p>三月是現在已經自由的狐狸們在<a href="https://moztw.org/space/">摩茲工寮</a>的分享，介紹了 2017 年最大更新，Firefox Quantum 的一些技術。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32746891364/" title="Firebug 開發者 Honza 跟你聊：不斷進化中的 Firefox 開發工具 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2875/32746891364_95d1119f08_b.jpg" width="1024" height="683" alt="Firebug 開發者 Honza 跟你聊：不斷進化中的 Firefox 開發工具" srcset="https://farm3.staticflickr.com/2875/32746891364_95d1119f08_b.jpg 1024w, https://farm3.staticflickr.com/2875/32746891364_c4a0de9cb8_h.jpg 1600w" /></a></p>
<p>四月帶爸媽去了一趟沖繩，這張照片是其中的首里城，以前琉球王國的首都，本來期待不高，不過結果覺得還蠻不錯的景點，有 Stamp Rally 可以換紀念品蠻不錯的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34118881786/" title="首里城 by othree, on Flickr"><img src="https://farm4.staticflickr.com/3931/34118881786_9a7027f118_b.jpg" width="1024" height="683" alt="首里城" srcset="https://farm4.staticflickr.com/3931/34118881786_9a7027f118_b.jpg 1024w, https://farm4.staticflickr.com/3931/34118881786_89626f61ab_h.jpg 1600w" /></a></p>
<p>五月又回台南，這間烤滷味還蠻好吃的，趁機偷拍一點街頭紀實類的照片，其實這類照片算是我很想要拍的類型。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34405072766/" title="上好烤滷味 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4186/34405072766_b548d10359_b.jpg" width="1024" height="683" alt="上好烤滷味" srcset="https://farm5.staticflickr.com/4186/34405072766_b548d10359_b.jpg 1024w, https://farm5.staticflickr.com/4186/34405072766_97201b0052_h.jpg 1600w" /></a></p>
<p>六月有去一趟東京，逛了一下人形町，其中的 RON 咖啡已經開業 50 年，裡面不只裝設很陳舊，店員年紀也都很大了，感覺是個會消失在時間洪流的景點。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34927506263/" title="RON by othree, on Flickr"><img src="https://farm5.staticflickr.com/4239/34927506263_3525c44b55_b.jpg" width="1024" height="683" alt="RON" srcset="https://farm5.staticflickr.com/4239/34927506263_3525c44b55_b.jpg 1024w, https://farm5.staticflickr.com/4239/34927506263_5843297051_h.jpg 1600w" /></a></p>
<p>七月更新了 iPad Pro 10.5，近年難得的有感升級，當時還有寫<a href="https://blog.othree.net/log/2017/08/03/ipad-pro-105-inch/">文章介紹</a>。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/36164319222/" title="iPad Pro 10.5 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4415/36164319222_192e05cf58_b.jpg" width="1024" height="683" alt="iPad Pro 10.5" srcset="https://farm5.staticflickr.com/4415/36164319222_192e05cf58_b.jpg 1024w, https://farm5.staticflickr.com/4415/36164319222_4c8603e28b_h.jpg 1600w" /></a></p>
<p>八月也是慣例的 COSCUP，其實還有 HITCON，今年都無法參與了，如果能抽空去臉一下就很不錯了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35576419213/" title="COSCUP 2017 Day 1 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4419/35576419213_e3dbd58f45_b.jpg" width="1024" height="683" alt="COSCUP 2017 Day 1" srcset="https://farm5.staticflickr.com/4419/35576419213_e3dbd58f45_b.jpg 1024w, https://farm5.staticflickr.com/4419/35576419213_6e102939db_h.jpg 1600w" /></a></p>
<p>九月跑去香港兩天，主要是吃吃行程，剛好看到了現在世上少有的竹子鷹架。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37123095245/" title="香港 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4413/37123095245_64b1945e42_b.jpg" width="1024" height="683" alt="香港" srcset="https://farm5.staticflickr.com/4413/37123095245_64b1945e42_b.jpg 1024w, https://farm5.staticflickr.com/4413/37123095245_5dfa622565_h.jpg 1600w" /></a></p>
<p>十月趁連假去了紐西蘭十多天，整個行程還蠻順利，運氣也很不錯，這是其中一天在 Te Anau 看到的夕陽，其實去這一趟是有些感觸，不過沒什麼時間記錄。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37712147255/" title="Te Anau by othree, on Flickr"><img src="https://farm5.staticflickr.com/4517/37712147255_87335bd4f0_b.jpg" width="1024" height="683" alt="Te Anau" srcset="https://farm5.staticflickr.com/4517/37712147255_87335bd4f0_b.jpg 1024w, https://farm5.staticflickr.com/4517/37712147255_3451ae8619_h.jpg 1600w" /></a></p>
<p>十一月是自由的狐狸啊～</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24851237238/" title="Firefox by othree, on Flickr"><img src="https://farm5.staticflickr.com/4529/24851237238_99d621559b_b.jpg" width="683" height="1024" alt="Firefox" srcset="https://farm5.staticflickr.com/4529/24851237238_99d621559b_b.jpg 683w, https://farm5.staticflickr.com/4529/24851237238_d78256eca1_h.jpg 1067w" /></a></p>
<p>十二月的是 Mario Odyssey，本來想要玩完寫篇文章記錄的，也還沒開工，不過 Switch 的遊戲拍照機能真是很不錯，薩爾達的時候我就拍了一大堆，不過因為一直沒全破所以還沒發佈，希望今年能找時間解決它。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24541906227/" title="Super Mario Odyssey by othree, on Flickr"><img src="https://farm5.staticflickr.com/4590/24541906227_34ecf7c3da_b.jpg" width="1024" height="576" alt="Super Mario Odyssey" srcset="https://farm5.staticflickr.com/4590/24541906227_34ecf7c3da_b.jpg 1024w" /></a></p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000920" baseName="pegjs">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-04-09</b:date>
				<b:time>21:15:01</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>PEG.js</b:title>
			<b:content>
				<b:summary> 知道這東西也好一陣子了，最近才真的第一次用，感覺還不錯，很久沒有因為東西會動而這麼高興了，大概也是太久沒努力離開舒適圈的關係吧。 總之，最近想著要做出類似一些搜尋引擎支援的條件語法，像是 and、or、not 之類的，稍微花了點時間調查一下確定要正確的處理就是要個 parser，沒錯，就是 compiler 最前面那個 parser，身為非 CS 領域出身的人，compiler 我一直是朦懂朦懂的，parser 到產生 AST 那塊算是比較清楚一些，因為像是 Babel、還有以前幫忙過的 TernJS 都是先 parse 程式碼產生 AST 才開始做事，不過這次和以前不一樣的是我要從頭開始建立一個語法的 parser，然後因為是網頁前端要用的，所以就找到了 PEG.js 這個用 JavaScript 寫的 parser generator，相較於手工的 parser，這種工具只要有定義好的語法（grammer）給它，它就可以產生出對應的 parser，至於什麼是語法（grammer）呢，例如下面這段就是： IdentifierName :: IdentifierStart IdentifierName IdentifierPart IdentifierStart :: UnicodeIDStart $...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/40359029595/" title="pegjs by othree, on Flickr"><img src="https://farm1.staticflickr.com/792/40359029595_8bd25d41e5_b.jpg" width="1024" height="991" alt="pegjs" srcset="https://farm1.staticflickr.com/792/40359029595_8bd25d41e5_b.jpg 1024w, https://farm1.staticflickr.com/792/40359029595_f00581bfe8_h.jpg 1600w" /></a></p>
<p>知道這東西也好一陣子了，最近才真的第一次用，感覺還不錯，很久沒有因為東西會動而這麼高興了，大概也是太久沒努力離開舒適圈的關係吧。</p>
<p>總之，最近想著要做出類似一些搜尋引擎支援的條件語法，像是 and、or、not 之類的，稍微花了點時間調查一下確定要正確的處理就是要個 parser，沒錯，就是 compiler 最前面那個 parser，身為非 CS 領域出身的人，compiler 我一直是朦懂朦懂的，parser 到產生 AST 那塊算是比較清楚一些，因為像是 Babel、還有以前幫忙過的 <a href="http://ternjs.net/">TernJS</a> 都是先 parse 程式碼產生 AST 才開始做事，不過這次和以前不一樣的是我要從頭開始建立一個語法的 parser，然後因為是網頁前端要用的，所以就找到了 <a href="https://pegjs.org/">PEG.js</a> 這個用 JavaScript 寫的 parser generator，相較於手工的 parser，這種工具只要有定義好的語法（grammer）給它，它就可以產生出對應的 parser，至於什麼是語法（grammer）呢，例如下面這段就是：</p>
<pre><code>IdentifierName ::
    IdentifierStart
    IdentifierName IdentifierPart

IdentifierStart ::
    UnicodeIDStart
    $
    _
    \ UnicodeEscapeSequence

IdentifierPart ::
    UnicodeIDContinue
    $
    _
    \ UnicodeEscapeSequence
    &lt;ZWNJ&gt;
    &lt;ZWJ&gt;

UnicodeIDStart ::
    any Unicode code point with the Unicode property &amp;ldquo;ID_Start&amp;rdquo;

UnicodeIDContinue ::
    any Unicode code point with the Unicode property &amp;ldquo;ID_Continue&amp;rdquo;
</code></pre>
<p>這段是從 ECMAScript Spec 內找出來的，identifier 名稱格式的語法（grammer）定義，其實還算蠻好理解的，而 PEG.js 也有自己定的語法格式，只要使用該格式定義好語法，就可以產生出 parser 來，不過當我開始寫的時候，才發現到一個問題：我不知道 parse 後要產生什麼東西，這時我才意識到，在開始定義語法之前，我應該要先想清楚後續的產出物（例如 AST）的結構，和要如何使用這個 parser 的產出物實做出真正想要的效果。</p>
<p>以我的目標來說，我希望可以做出簡單的邏輯組合，包括 and、or、not 和 parenthesized expression（括號包起來的），其實我一開始的想法也沒很明確，只是覺得應該可以用樹狀結構加上遞迴來實做後面的判斷，然後參考了 <a href="https://www.elastic.co/products/kibana">Kibana</a> 裡面 Kuery 的語法，也算是慢慢的把語法和 AST 的組合方式定義出來，當時做的語法我還有放在 <a href="https://gist.github.com/othree/8beecb7e3a6d4650ddbada3426854362">gist</a> 上，語法和 AST 定義好的時候，其實後面應用端的 script 還沒寫，不過因為結構很簡單，所以我已經確信一定可以運作了，後來隔一天果然不花什麼時間就把應用端的 script 也寫好，之後還花時間作了些手工測試，修正了一些語法上的細節問題，像是支援 <code>&amp;</code> 、<code>|</code> 這些符號之類的，還有符號兩邊不用空格等等。</p>
<p>還有一點想特別說的是，其實一開始定義語法的時候，我是沒有想要去參考 Kibana 的，雖然我當時就知道 Kibana 的 Kuery 語法和我的需求很像，而且也是用 PEG.js 做的，不過我開始寫語法定義沒多久就卡關了，卡關的地方就是，一開始就是 and、or、not、parenthesized expression 都有可能出現，但是這無法用 <code>/</code> 的方式來處理，因為 PEG.js 的 parser 不會解析到一半發現不對就游標往回退（<a href="https://github.com/pegjs/pegjs/blob/master/docs/grammar/backtracking.md">backtracking</a>），然後我就卡關了，我可以寫出 and 加上判斷，支援以下兩種查詢：</p>
<pre><code>keyword
keyword1 and keyword2
</code></pre>
<p>但是卻無法更進一步加上支援 <code>or</code>，結果只好去參考 Kuery 語法，發現奇妙的寫法，以下是我後來成品的定義：</p>
<pre><code class="language-pegjs">start
  = orQuery?

orQuery
  = left:andQuery Or right:orQuery
  / andQuery

andQuery
  = left:notQuery And right:andQuery
  / notQuery

notQuery
  = Not right:subQuery
  / subQuery

subQuery
  = '(' ws* query:orQuery ws* ')'
  / queryValue
</code></pre>
<p>如此，<code>or</code> 查詢支援兩種內容，第一種是 <code>and</code> 查詢語句，第二種才是真的 <code>or</code> 查詢，但是他的第一個元素是 <code>and</code> 查詢，也就是說雖然是 <code>or</code> 查詢的判斷，但是卻先去看有沒有 <code>and</code> 查詢，然後 <code>and</code> 查詢也是類似的定義，實際上先去找有沒有 <code>not</code>  的語句，然後 <code>not</code> 會去看有沒有子查詢（parenthesized expression），整個讓人覺得很神奇，仔細下去推敲也確實可以理解判斷的過程，不過在邏輯上我還不太能完全通透的理解。第一次看到這種定義方式時，覺得很神妙，不過也有想說這應該是什麼常見的 grammer 寫法，後來去查了一下 ECMAScript Spec，發現也是這樣的作法，看來真的算是個 convention 了吧（看起來是 <a href="https://zh.wikipedia.org/wiki/%E5%B7%A6%E9%81%9E%E6%AD%B8">left recursive</a>），真不知道第一個寫出這種 grammer 的人腦袋裝什麼。</p>
<p>最後我的成果有丟一個可以讓人用的版本上 GitHub，也有用 NPM 發佈，叫 <a href="https://github.com/othree/simple-search-query">simple-search-query</a>，詳細用法可以參考 README，至於完整的語法定義就在 <code>query</code> 目錄內，還在補測試就是。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000919" baseName="htc-u11plus">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-03-24</b:date>
				<b:time>17:46:13</b:time>
			</b:datetime>
			<b:category>buy</b:category>
			<b:title>HTC U11+</b:title>
			<b:content>
				<b:summary> 去年想說要把用了兩三年的 HTC M9 換掉，在 M9 之前其實我 M8、M7 都有用，算是三代機皇的使用者，本來這次想要買 Google Pixel 2 的，不過台灣一直沒上市，直到前幾天 Google 才說要在台灣上市，不過總之，最後考量價錢、機能等等，決定買號稱本來是 Pixel 2 XL 的 HTC U11+，然後也決定要買主打的透明黑，不過可能因為生產問題，透明黑比較晚上市，其實當時差不多是去年的 1111，各家都有特價什麼的，但是卻買不到透明黑感覺實在有點尷尬，連 HTC 自家網站，當時也有些活動，買 U11+ 就可以用很好的折扣家買周邊，有限期間，於是我就每天上去看，看了好幾天覺得，應該沒這麼會做決策吧，結果一如預期的，特價活動結束隔天才有得下單預定透明黑... 我當然是不差買那些周邊啦，不過對於這種搞法實在是無法參透，總之我還是第一天就下定了，後來也比一堆開箱文還早兩三天拿到，不過拖到今天才來記錄一下。 整體而言我覺得這台還蠻不錯的，透明黑玻璃很漂亮，價錢 ok，定價和五吋的高階機種（U11）一樣，對比於 Pixel 的價位真的是親切很多，而且規格和螢幕都比較大，電池電量表現也很不錯，出門一整天也不用擔心沒電，U11 開始主打的 Edge Sense，拿來單手拍照真的很不錯，相機表現也不錯，不過那個側框啟動叫出目錄的功能就不太行了，主要是反應太慢，還不如用指紋直接開畫面，另外一點就是指紋速度很快，還有防塵防水，然後初期宣傳有說全面屏，不過實際上只是正面的玻璃是全部覆蓋，沒有接縫，或許 Google 當初要捨棄實體鍵打的就是這個主意。 不過 U11+ 還是有點問題，其中我比較有感的就是要用 Google...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/38956472765/" title="HTC U11+ by othree, on Flickr"><img src="https://farm5.staticflickr.com/4704/38956472765_7d5d8a75ce_b.jpg" width="1024" height="683" alt="HTC U11+" srcset="https://farm5.staticflickr.com/4704/38956472765_7d5d8a75ce_b.jpg 1024w, https://farm5.staticflickr.com/4704/38956472765_4c6a20240a_h.jpg 1600w" /></a></p>
<p>去年想說要把用了兩三年的 HTC M9 換掉，在 M9 之前其實我 M8、M7 都有用，算是三代機皇的使用者，本來這次想要買 Google Pixel 2 的，不過台灣一直沒上市，直到前幾天 Google 才說要在台灣上市，不過總之，最後考量價錢、機能等等，決定買號稱本來是 Pixel 2 XL 的 HTC U11+，然後也決定要買主打的透明黑，不過可能因為生產問題，透明黑比較晚上市，其實當時差不多是去年的 1111，各家都有特價什麼的，但是卻買不到透明黑感覺實在有點尷尬，連 HTC 自家網站，當時也有些活動，買 U11+ 就可以用很好的折扣家買周邊，有限期間，於是我就每天上去看，看了好幾天覺得，應該沒這麼會做決策吧，結果一如預期的，特價活動結束隔天才有得下單預定透明黑... 我當然是不差買那些周邊啦，不過對於這種搞法實在是無法參透，總之我還是第一天就下定了，後來也比一堆開箱文還早兩三天拿到，不過拖到今天才來記錄一下。</p>
<p>整體而言我覺得這台還蠻不錯的，透明黑玻璃很漂亮，價錢 ok，定價和五吋的高階機種（U11）一樣，對比於 Pixel 的價位真的是親切很多，而且規格和螢幕都比較大，電池電量表現也很不錯，出門一整天也不用擔心沒電，U11 開始主打的 Edge Sense，拿來單手拍照真的很不錯，相機表現也不錯，不過那個側框啟動叫出目錄的功能就不太行了，主要是反應太慢，還不如用指紋直接開畫面，另外一點就是指紋速度很快，還有防塵防水，然後初期宣傳有說全面屏，不過實際上只是正面的玻璃是全部覆蓋，沒有接縫，或許 Google 當初要捨棄實體鍵打的就是這個主意。</p>
<p>不過 U11+ 還是有點問題，其中我比較有感的就是要用 Google Map 導航會進不了導航狀態，這問題在官方論壇上也有討論，暫時的解法是重開機可以修復，所以還可以接受，除此之外如果還要挑，大概就是螢幕還沒到 4K 吧，不過是廣色域的其實也蠻不錯了，聽說今年的 U12 就會是 4K 螢幕了，不過我應該下一台真的會買 Pixel 了吧。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000918" baseName="accessibility-object-model">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-03-08</b:date>
				<b:time>08:25:17</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>Accessibility Object Model</b:title>
			<b:content>
				<b:summary>很久以前介紹 AMP 的時候，有提到標準內的 HTML attribute，都是有其意義和用途，而當然 WAI-ARIA 的那堆 aria-* 屬性也是，不過以前那堆東西的介面在 web 開發端是碰不到的，不過前陣子在看 Chrome Platform Status 的時候，發現到了一個新的標準草稿叫做 Accessibility Object Model，中文可以叫做親和力物件模型吧，還很早期不過 Firefox 有一些基本實做，預設關閉，掛在他們的 Accessiblity API 下面。 這個標準目前規劃四個階段，目前有內容的只有前兩個，分別要做的事情是： Accessible Property，建立存取親和力相關屬性的標準界面，包括了 role 和 aria-*，目前的草案不是直接把這些屬性放在 ElementNode 下，而是在 ElementNode 新增一個 accessibleNode； Accessible Action，建立和親和力相關的事件，擴充 accessibleNode 並且讓它會接收到這些親和力相關事件； Virtual Accessibility...</b:summary>
				<b:mainContent><p>很久以前介紹 <a href="https://blog.othree.net/log/2016/10/14/acclerated-mobile-pages/">AMP</a> 的時候，有提到標準內的 HTML attribute，都是有其意義和用途，而當然 WAI-ARIA 的那堆 <code>aria-*</code> 屬性也是，不過以前那堆東西的介面在 web 開發端是碰不到的，不過前陣子在看 <a href="https://www.chromestatus.com/features/6643371200217088">Chrome Platform Status</a> 的時候，發現到了一個新的標準草稿叫做 <a href="https://github.com/WICG/aom/">Accessibility Object Model</a>，中文可以叫做親和力物件模型吧，還很早期不過 Firefox 有一些基本實做，預設關閉，掛在他們的 <a href="https://wiki.mozilla.org/Accessibility/WebAccessibilityAPI">Accessiblity API</a> 下面。</p>
<p>這個標準目前規劃四個階段，目前有內容的只有前兩個，分別要做的事情是：</p>
<ol>
<li>Accessible Property，建立存取親和力相關屬性的標準界面，包括了 <code>role</code> 和 <code>aria-*</code>，目前的草案不是直接把這些屬性放在 ElementNode 下，而是在 ElementNode 新增一個 <code>accessibleNode</code>；</li>
<li>Accessible Action，建立和親和力相關的事件，擴充  <code>accessibleNode</code> 並且讓它會接收到這些親和力相關事件；</li>
<li>Virtual Accessibility Node，讓開發者可以產生虛擬的 <code>accessibleNode</code>，然後這些虛擬的 node 也有前兩個階段的能力，所以可以預期像是用 canvas 畫的介面也可以生出介面讓數位輔具可以溝通；</li>
<li>Computed Accessibility Tree，提供 Accessibility Tree 的介面，目前，Accessibility Tree 也還是網頁開發者碰不到的。</li>
</ol>
<p>目前這份草稿還在 WICG，不過已經開始有些實做了，除了 Firefox 之外 Chrome 也有，我看作者是 Mozilla、Google、Apple 的人都有，之後應該會慢慢發展成統一的數位輔具介面吧。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000917" baseName="webdriver-level-2">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-02-17</b:date>
				<b:time>00:00:08</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>WebDriver Level 2</b:title>
			<b:content>
				<b:summary> 這超新的，新到其實什麼都還沒有，不過總之記錄一下，有兩條路線匯流： 第一條是 E2E 測試，E2E 測試比較早期是 Selenium 一家獨大，以前不知道是用什麼方法控制瀏覽器，就我瞭解應該不是太正規的方式，後來到 Selenium 2 開始發展 WebDriver，而且各家 browser vendor 都還蠻支持的，也朝向標準化的方向前進，標準文件現在也已經是 CR 了，由 Browser Testing and Tools 工作小組在維護，不過看了看 mailing list，該工作小組目前活躍度好像不高。標準化的好處就是大家都可以照著做，除了 Selenium WebDriver 之外的實做，現在還有 WebDriverIO 這個 nodejs 環境的實做，理論上可以只用 WebDriverIO 加上瀏覽器各自的 driver 而不用透過 Selenium 來做自動化測試 另外一條路線是 remote debugging，這個一開始是為了...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26429223408/" title="Chrome DevTool Protocol by othree, on Flickr"><img src="https://farm5.staticflickr.com/4632/26429223408_e0beb83830_b.jpg" width="1024" height="483" alt="Chrome DevTool Protocol, " srcset="https://farm5.staticflickr.com/4632/26429223408_e0beb83830_b.jpg 1024w, https://farm5.staticflickr.com/4632/26429223408_a4b04c9af7_h.jpg 1600w" /></a></p>
<p>這超新的，新到其實什麼都還沒有，不過總之記錄一下，有兩條路線匯流：</p>
<p>第一條是 E2E 測試，E2E 測試比較早期是 Selenium 一家獨大，以前不知道是用什麼方法控制瀏覽器，就我瞭解應該不是太正規的方式，後來到 Selenium 2 開始發展 WebDriver，而且各家 browser vendor 都還蠻支持的，也朝向標準化的方向前進，標準文件現在也已經是 <a href="https://www.w3.org/TR/webdriver/">CR</a> 了，由 <a href="https://www.w3.org/testing/browser/">Browser Testing and Tools 工作小組</a>在維護，不過看了看 mailing list，該工作小組目前活躍度好像不高。標準化的好處就是大家都可以照著做，除了 Selenium WebDriver 之外的實做，現在還有 <a href="http://webdriver.io/">WebDriverIO</a> 這個 nodejs 環境的實做，理論上可以只用 WebDriverIO 加上瀏覽器各自的 driver 而不用透過 Selenium 來做自動化測試</p>
<p>另外一條路線是 remote debugging，這個一開始是為了 debug 手機上的瀏覽器，後，讓手機上的 browser 傳送訊息到桌機上，用桌機瀏覽器的開發工具來顯示資訊，方便除錯，發展到後來，變成開發工具和瀏覽器之間的溝通協定都走同一套，也就是說現在桌機瀏覽器也是用 remote debugging 同樣的溝通方式在跟自己的開發工具溝通，兩者耦合就這樣拉開了，我最早知道可以這樣拆開的是 Opera 以前的 <a href="http://www.opera.com/dragonfly/">Dragonfly</a>，然後可以想見每家瀏覽器的協定內容不一樣，然後就有一位 <a href="https://kenneth.io/">Kenneth Auchenberg</a> 的人出來說這應該要有個標準！然後弄了個 <a href="https://remotedebug.org/">remotedebug.org</a>，初期計畫是希望大家都有個 adapter 可以轉譯自家的協定到公用的協定，像是 Mozilla 的 <a href="https://github.com/mozilla/valence">Valence</a>，然後接著就開始有一些利用這些協定的各種發展，像是幫 Node 程式除錯、或是 iOS App、Electron 應用程式的除錯，甚至是除錯工具的開發也是用除錯工具自己 remote debug 自己，同時 Kenneth Auchenberg 也在推動 W3C 的標準化，一開始（約三年前）就是找上 Browser Testing and Tools 工作小組，不過一開始不太順利，因為那邊的都是自動化測試專門的人，和除錯工具關係其實不大。</p>
<p>Remote debug protocol 的資訊種類和訊息量其實都很大，目前看起來也只有 Google Chrome 的 <a href="https://chromedevtools.github.io/devtools-protocol/">DevTool Protocol</a> 整理的比較完整，而 Firefox 的 Valence 其實已經沒維護了，他們的 README 上說要盡量相容 Chrome 的 protocol，這點讓我有點失望也不太意外，一來是擴充套件的 <a href="https://developer.chrome.com/extensions/devguide">API</a> 已經被 Google <a href="https://blog.mozilla.org/addons/2015/08/21/the-future-of-developing-firefox-add-ons/">帶著走</a>了，二來是 debug 用的資訊太多太雜，不好維護，而且這樣似乎也是比較快可以統一的方式。而標準化的工作其實在去年有點進展，也就是 Browser Testing and Tools 工作小組 終於接納，要把他放進 WebDriver Level 2 裡面了，這其實是去年十月底的消息，在 remotedebug 的 <a href="https://twitter.com/auchenberg/status/925079235173138432">twitter</a> 上有發消息，也有工作小組章程修改的 <a href="https://github.com/AutomatedTester/charter-drafts/commit/0d924010aa1c87c7e39ad7a0737e8b7854eb9428">commit</a> 連結證實，接下來就看他們要怎麼標準化了，畢竟複雜度比 WebDriver Level 1 複雜許多，還有些部分是不穩定可能隨時會變動的。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000916" baseName="codeceptjs-puppeteer">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-02-07</b:date>
				<b:time>12:29:49</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>CodeceptJS + puppeteer</b:title>
			<b:content>
				<b:summary>看起來一切似乎都很美好，直到真的下去用。 這幾天就在這組合裡面打滾，昨天還花了幾乎半天在查一個問題，總之先條列一下目前覺得幾個重點： CodeceptJS 文件裡面有 code sample 用 generator function 的非同步取值，現在支援用 async await 了，不過 code sample 還沒改。 每種 helper 可以用的 method 不完全相同，大部分一樣，不過也沒列出基本組合，所以好像也不是很好一組 test 測所有 helper。 Puppeteer helper 裡面其實有很多地方是直接跟 CDP（Chrome DevTools Protocol） 溝通的，這部分也可以印 debug log： env DEBUG=&quot;puppeteer:protocol&quot; codeceptjs run --steps --verbose 開...</b:summary>
				<b:mainContent><p>看起來一切似乎都很美好，直到真的下去用。</p>
<p>這幾天就在這組合裡面打滾，昨天還花了幾乎半天在查一個問題，總之先條列一下目前覺得幾個重點：</p>
<ul>
<li><a href="https://codecept.io/">CodeceptJS</a> 文件裡面有 code sample 用 generator function 的非同步取值，現在支援用 async await 了，不過 code sample 還沒改。</li>
<li>每種 helper 可以用的 method 不完全相同，大部分一樣，不過也沒列出基本組合，所以好像也不是很好一組 test 測所有 helper。</li>
<li>Puppeteer helper 裡面其實有很多地方是直接跟 CDP（Chrome DevTools Protocol） 溝通的，這部分也可以印 debug log：  <code>env DEBUG=&quot;puppeteer:protocol&quot; codeceptjs run --steps --verbose</code></li>
<li>開 CDP 的 log 的話資訊量會超多，訊息內容還算好理解，細節網路上也有<a href="https://chromedevtools.github.io/devtools-protocol/">文件</a>，左邊 sidebar 有很多不同領域的，上面的 DEBUG 參數也可以自己修改只顯示想要的，詳見 <a href="https://github.com/GoogleChrome/puppeteer#debugging-tips">puppeteer 文件</a>。</li>
<li>puppeteer 的 <code>page.goto</code> 有個選項是 waitUntil，預設是 load 事件，不過我發現這個事件有時候會觸發不到，雖然我看開發工具的 network 圖是有線出來，不過總之我後來會這樣的案例就先都改成 <code>networkidle2</code> 了。</li>
</ul>
<p>然後昨天花很多時間查的問題已經上去發了 <a href="https://github.com/Codeception/CodeceptJS/issues/914">issue</a>，總之就是發點擊事件點連結後，要檢查新頁面的內容會出現錯誤：</p>
<pre><code>     Protocol error (Runtime.callFunctionOn): Cannot find context with specified id undefined
</code></pre>
<p>目前探究下來狀況應該是：puppeteer 的點擊回傳的 promise，在點擊完成就 resolve 了，這時候瀏覽器去開新網頁，才要開始發出請求，新的網頁還沒準備好，所以要做檢查的時候就會沒有 context。然後我有用 Nightwatch helper 測試過，是沒這問題的，總之就是個實做問題，puppeteer 目前這樣邏輯上也不算是錯誤的設計，不知道最後會怎麼修改，當然簡單一點就是 click 觸發 browser navigate 到別的網頁時就要等新網頁回來。目前的 work around 是自己多 wait 一下。</p>
<p>最後就是，我終於可以順暢的把 puppeteer 這個單字打出來了QQ</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000915" baseName="tc39-logo">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-02-02</b:date>
				<b:time>12:29:18</b:time>
			</b:datetime>
			<b:category>web</b:category>
			<b:title>TC39 logo</b:title>
			<b:content>
				<b:summary>每兩個月一次的 TC39 會議剛結束的一月會議，除了確定了 ECMAScript 2018 的 feature set 之外，還加碼發佈了 TC39 自己的 logo： 這設計基本上就是參照 JS logo，顏色改成 ECMA 橘，之前那個 JS logo 其實不是官方的，而是社群發起的： 現在還蠻廣泛使用，已經是公認的 logo，兩個 logo 都是放在 GitHub 上 https://github.com/tc39/logo/ https://github.com/voodootikigod/logo.js/...</b:summary>
				<b:mainContent><p>每兩個月一次的 TC39 會議剛結束的一月會議，除了確定了 ECMAScript 2018 的 feature set 之外，還加碼發佈了 TC39 自己的 logo：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/28255675539/" title="TC39 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4623/28255675539_95a96b168d_b.jpg" width="1024" height="1024" alt="TC39, " srcset="https://farm5.staticflickr.com/4623/28255675539_95a96b168d_b.jpg 1024w" /></a></p>
<p>這設計基本上就是參照 JS logo，顏色改成 <a href="https://www.ecma-international.org/">ECMA</a> 橘，之前那個 JS logo 其實不是官方的，而是社群發起的：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/40034835081/" title="JS by othree, on Flickr"><img src="https://farm5.staticflickr.com/4715/40034835081_1ebf851535_b.jpg" width="1024" height="1024" alt="JS, " srcset="https://farm5.staticflickr.com/4715/40034835081_1ebf851535_b.jpg 1024w" /></a></p>
<p>現在還蠻廣泛使用，已經是公認的 logo，兩個 logo 都是放在 GitHub 上</p>
<ul>
<li><a href="https://github.com/tc39/logo/">https://github.com/tc39/logo/</a></li>
<li><a href="https://github.com/voodootikigod/logo.js/">https://github.com/voodootikigod/logo.js/</a></li>
</ul>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000914" baseName="recommend-semicolon">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-01-12</b:date>
				<b:time>10:54:06</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>分號大戰 again</b:title>
			<b:content>
				<b:summary>今天一早起來就看到有人說 TC39 要準備建議 JavaScript 程式碼應該要加分號： TC39 is recommending that JS programmers use semicolons at the end of statements in code, rather than relying on ASI.https://t.co/9FY4i29iqs-- Daniel Ehrenberg (@littledan) 2018年1月11日 然後下面就一大串了，本來想說 standardjs 要哭哭了，難道 semistandard 要扶正了嗎？不過我仔細端詳了一下，發現這個 PR 還是 open 狀態，而且 Brendan Eich...</b:summary>
				<b:mainContent><p>今天一早起來就看到有人說 TC39 要準備建議 JavaScript 程式碼應該要加分號：</p>
<blockquote class="twitter-tweet" data-lang="zh-tw"><p lang="en" dir="ltr">TC39 is recommending that JS programmers use semicolons at the end of statements in code, rather than relying on ASI.<a href="https://t.co/9FY4i29iqs">https://t.co/9FY4i29iqs</a></p>-- Daniel Ehrenberg (@littledan) <a href="https://twitter.com/littledan/status/951523844262637568?ref_src=twsrc%5Etfw">2018年1月11日</a></blockquote>
<p>然後下面就一大串了，本來想說 <a href="https://standardjs.com/">standardjs</a> 要哭哭了，難道 <a href="https://www.npmjs.com/package/semistandard">semistandard</a> 要扶正了嗎？不過我仔細端詳了一下，發現這個 <a href="https://github.com/tc39/ecma262/pull/1062">PR</a> 還是 open 狀態，而且 Brendan Eich 甚至表態反對：</p>
<blockquote class="twitter-tweet" data-lang="zh-tw"><p lang="en" dir="ltr">I dissent.</p>-- BrendanEich (@BrendanEich) <a href="https://twitter.com/BrendanEich/status/951554266535141377?ref_src=twsrc%5Etfw">2018年1月11日</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>原因之一是已經有很多 standardjs 的 code 其實運作的很好，不過另外一個原因我覺得更有力，就是 TC39 的文件，做為 spec 似乎不該提出<strong>建議</strong>，當然提出這個 PR 的 Daniel Ehrenberg 其實也不是單純因為支持加分號才提的，他其實是 <a href="https://github.com/tc39/proposal-class-fields">Class field declarations</a> 的主要貢獻者，這是什麼呢？就是：</p>
<pre><code class="language-javascript">class Counter extends HTMLElement {
  x = 0;

  clicked() {
    this.x++;
    window.requestAnimationFrame(this.render.bind(this));
  }
}
</code></pre>
<p>這種在 class method 外面定義 class 屬性和預設值的語法（另外還有 private property），而這種很像是 expression 的語句，一定要 semicolon，不然會有他稱為 AST hazard 的情形，也就是很難評斷開發者實際上意圖的情形發生，也就無法用 ASI 自動補分號，對此 Brendan Eich 有個建議是在 class field 裡面關掉 ASI 機制，也就是這些 property 定義一定要加分號做結。</p>
<p>目前看起來，Brendan Eich 提的那點，TC39 不該做語法的建議實在很強而有力，應該也反駁不了，所以結果應該就是沒有收 PR，或是改成更中性的文字，不是建議的文字，不過想來想去還是沒有比較適合的，畢竟在 spec 文件裡面還提建議、警告開發者用的語法就很怪。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
