<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>m</b:listType>
			<b:listData listID="2018-04">April 2018</b:listData>

			<b:previous>
				<b:mTitle>March 2018</b:mTitle>
				<b:mDate>2018/03</b:mDate>
			</b:previous>


			<b:next>
				<b:mTitle>May 2018</b:mTitle>
				<b:mDate>2018/05</b:mDate>				
			</b:next>

		</b:entriesMeta>

		<b:entry entryID="000923" baseName="eslint-plugin-intro">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-04-21</b:date>
				<b:time>21:17:13</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>ESLint Plugin 入門</b:title>
			<b:content>
				<b:summary> 最近寫了個簡單的 ESLint plugin，來記錄一下一些基礎知識，我做的 plugin 很簡單，叫做 eslint-plugin-no-parameter-e，這個 ESLint plugins 做的事情只是檢查所有 function 的參數，然後如果有任何一個參數名是 e 的話就警報，這條 rule 其實是為了避免把 error 或 event 簡寫成 e，會容易混淆。 接下來進入正題，ESLint 基本上就是透過 ESPree 這個 parser 先把程式碼轉為 ESTree 相容的 AST，EStree 是個 de facto standard，是從 Mozilla Spider Monkey 用的 AST 演化而來，現在幾乎做...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26729618387/" title="ESLint by othree, on Flickr"><img src="https://farm1.staticflickr.com/912/26729618387_d25b36bfed_z.jpg" width="581" height="514" alt="ESLint" srcset="https://farm1.staticflickr.com/912/26729618387_d25b36bfed_z.jpg 581w" /></a></p>
<p>最近寫了個簡單的 ESLint plugin，來記錄一下一些基礎知識，我做的 plugin 很簡單，叫做 <a href="https://github.com/othree/eslint-plugin-no-parameter-e">eslint-plugin-no-parameter-e</a>，這個 ESLint plugins 做的事情只是檢查所有 function 的參數，然後如果有任何一個參數名是 <code>e</code> 的話就警報，這條 rule 其實是為了避免把 <code>error</code> 或 <code>event</code> 簡寫成 <code>e</code>，會容易混淆。</p>
<p>接下來進入正題，ESLint 基本上就是透過 <a href="https://github.com/eslint/espree">ESPree</a> 這個 parser 先把程式碼轉為 <a href="https://github.com/estree/estree">ESTree</a> 相容的 AST，EStree 是個 de facto standard，是從 Mozilla Spider Monkey 用的 AST 演化而來，現在幾乎做 JavaScript 工具，會需要轉 AST 的話都會用這個格式；有了 AST 後，才來分析 AST 做檢查，然後現在有工具叫 <a href="https://astexplorer.net/">AST Explorer</a>，非常方便，可以線上直接修改 code sample 看 AST 變化，可以用它來看你想要處理的 code 的 AST 結構，至於怎麼寫 rule 就看個人了，基本上就是監聽要注意的 node，然後檢查 AST 結構，有問題就呼叫 report 這樣。</p>
<p>第二點，npm module 的名稱要用 <code>eslint-plugin-</code> 開頭，官方說的規則，應該不遵守還是可以抓的到，不過就還是遵守一下免的有意外。</p>
<p>第三點，測試其實 ESLint 有 RuleTester 可以拿來寫測試用：</p>
<pre><code class="language-javascript">const rule = require('../rule.js')
const RuleTester = require('eslint').RuleTester

const ruleTester = new RuleTester();

ruleTester.run('no-parameter-e', rule, {
  valid: [
    'function a (event) {}',
  ],
  invalid: [
    {
      code: 'function e (e) {}',
      errors: [{ message }],
    }
  ],
});
</code></pre>
<p>很方便，都不用 test framework 了，並且有特別要求 valid 和 invalid 都要有 test case，不然測試就會失敗。</p>
<p>然後測試的時候是每個 rule 獨立跑，每個 plugin 可以有多個 rule，很多 plugin 是把不同 rule 都獨立一個檔案，每個 rule 可以丟的東西除了檢查外還有不少，像是說明文件、自動修復的動作等，詳見<a href="https://eslint.org/docs/developer-guide/working-with-rules">官方文件</a>，我一開始是參考 <a href="https://github.com/benmosher/eslint-plugin-import">eslint-plugin-import</a> 的，不過現在初心者應該也可以先看我的 <a href="https://github.com/othree/eslint-plugin-no-parameter-e">eslint-plugin-no-parameter-e</a>，東西更少一些。</p>
<p>下一個想來挑戰處理空行，看了一下感覺是比較困難啊～</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000922" baseName="immer">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-04-19</b:date>
				<b:time>23:11:20</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>Immer 原理</b:title>
			<b:content>
				<b:summary>前陣子有個蠻有趣的 library 叫 Immer，是 MobX 的開發者 Michel Weststrate 做的，這個 library 做的事情很有趣，它整合了 immutable 資料和原生資料的特性，反過來從缺點來看，immutable 資料型態的問題就是操作比較不方便，所有的修改動作都要透過 method 來執行，不能直接用 assign 的，有時候要改比較深層一點的資料就很麻煩，像 Facebook 的 immutable.js 就需要用 getIn、updateIn 來處理： getIn({ x: { y: { z: 123 }}}, ['x', 'y', 'z']) // 123 const original =...</b:summary>
				<b:mainContent><p>前陣子有個蠻有趣的 library 叫 <a href="https://github.com/mweststrate/immer">Immer</a>，是 MobX 的開發者 Michel Weststrate 做的，這個 library 做的事情很有趣，它整合了 immutable 資料和原生資料的特性，反過來從缺點來看，immutable 資料型態的問題就是操作比較不方便，所有的修改動作都要透過 method 來執行，不能直接用 assign 的，有時候要改比較深層一點的資料就很麻煩，像 Facebook 的 <a href="https://github.com/facebook/immutable-js">immutable.js</a> 就需要用 <code>getIn</code>、<code>updateIn</code> 來處理：</p>
<pre><code class="language-js">getIn({ x: { y: { z: 123 }}}, ['x', 'y', 'z']) // 123

const original = { x: { y: { z: 123 }}}
setIn(original, ['x', 'y', 'z'], 456) // { x: { y: { z: 456 }}}
</code></pre>
<p>用陣列丟每層的屬性名稱，也有一些是用 <code>.</code> 切分的 path 來處理這個問題（像是 <code>prop1.prop2.prop3</code> 這種結構），而原生資料的缺點，在這個場景來看當然就是不 immutable 了，Immer 就提出了一個新的構想，把這兩者的優點結合在一起，讓資料可以保持 immutable 特性，又可以直接修改，當然不能直接修改 JavaScript 行為，所以還是有些地方需要等價交換，就是修改資料的時候，要包進 produce function 內：</p>
<pre><code class="language-js">const nextState = produce(baseState, draftState =&gt; {
    draftState.push({ todo: &quot;Tweet about it&quot; })
    draftState[1].done = true
})
</code></pre>
<p>然後得到的 <code>nextState</code> 和 <code>baseState</code> 就會是不同物件，就像是 immutable 物件一樣行為，所以如果沒修改就還是同個物件，初看覺得有點黑魔法，不過思考過後覺得也不是不能做，有了些假想的實做方法後去研究了一下程式碼，不太意外的其實在 produce 裡面拿到的 draft 物件，是一個 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a> 包裝過的物件，然後 immutable 相關的邏輯都做在 Proxy 內，produce 跑完後再把新的值 finalize 取出用 plain object 傳回給 <code>nextState</code>，當然因為 Proxy 是比較新的東西，所以針對 ES5 也有另外的處理，我大致看一下就是比較土法煉鋼的下去比對，至於為什麼不全部都這樣做應該是效能考量吧。其實我覺得比起實做的原理，能想到這樣設計實在是很厲害，不像大部分人早就放棄了，還持續思考是不是有更好的作法可以整合兩種資料格式的優點才有機會找到這條路。</p>
<p>最後，Immer 這名字的由來，雖然在德文有這單字，不過我判斷應該還是從 immersive 來的吧。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000921" baseName="2017">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-04-18</b:date>
				<b:time>23:25:57</b:time>
			</b:datetime>
			<b:category>diary</b:category>
			<b:title>2017</b:title>
			<b:content>
				<b:summary> 拖稿很久的 2017 回顧，今年比較沒時間，所以只挑了一輪就直接上陣了（然後還晚了好幾個月），一月是現在固定的台南春節，台南還看的到很多手寫春聯，而且都寫得很漂亮。...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32417917172/" title="神農老街 by othree, on Flickr"><img src="https://farm1.staticflickr.com/395/32417917172_5e0de7f00c_b.jpg" width="1024" height="683" alt="神農老街" srcset="https://farm1.staticflickr.com/395/32417917172_5e0de7f00c_b.jpg 1024w, https://farm1.staticflickr.com/395/32417917172_1d7322eea0_h.jpg 1600w" /></a></p>
<p>拖稿很久的 2017 回顧，今年比較沒時間，所以只挑了一輪就直接上陣了（然後還晚了好幾個月），一月是現在固定的台南春節，台南還看的到很多手寫春聯，而且都寫得很漂亮。</p>
</b:mainContent>
				<b:extendContent><p>二月是台北燈節時去拍的，台灣總督府交通局鐵道部，當時是特別晚上點燈的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32197014823/" title="台灣總督府交通局鐵道部 台北燈節 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2431/32197014823_ef6d988581_b.jpg" width="1024" height="683" alt="台灣總督府交通局鐵道部 台北燈節" srcset="https://farm3.staticflickr.com/2431/32197014823_ef6d988581_b.jpg 1024w, https://farm3.staticflickr.com/2431/32197014823_0715faaa47_h.jpg 1600w" /></a></p>
<p>三月是現在已經自由的狐狸們在<a href="https://moztw.org/space/">摩茲工寮</a>的分享，介紹了 2017 年最大更新，Firefox Quantum 的一些技術。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32746891364/" title="Firebug 開發者 Honza 跟你聊：不斷進化中的 Firefox 開發工具 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2875/32746891364_95d1119f08_b.jpg" width="1024" height="683" alt="Firebug 開發者 Honza 跟你聊：不斷進化中的 Firefox 開發工具" srcset="https://farm3.staticflickr.com/2875/32746891364_95d1119f08_b.jpg 1024w, https://farm3.staticflickr.com/2875/32746891364_c4a0de9cb8_h.jpg 1600w" /></a></p>
<p>四月帶爸媽去了一趟沖繩，這張照片是其中的首里城，以前琉球王國的首都，本來期待不高，不過結果覺得還蠻不錯的景點，有 Stamp Rally 可以換紀念品蠻不錯的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34118881786/" title="首里城 by othree, on Flickr"><img src="https://farm4.staticflickr.com/3931/34118881786_9a7027f118_b.jpg" width="1024" height="683" alt="首里城" srcset="https://farm4.staticflickr.com/3931/34118881786_9a7027f118_b.jpg 1024w, https://farm4.staticflickr.com/3931/34118881786_89626f61ab_h.jpg 1600w" /></a></p>
<p>五月又回台南，這間烤滷味還蠻好吃的，趁機偷拍一點街頭紀實類的照片，其實這類照片算是我很想要拍的類型。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34405072766/" title="上好烤滷味 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4186/34405072766_b548d10359_b.jpg" width="1024" height="683" alt="上好烤滷味" srcset="https://farm5.staticflickr.com/4186/34405072766_b548d10359_b.jpg 1024w, https://farm5.staticflickr.com/4186/34405072766_97201b0052_h.jpg 1600w" /></a></p>
<p>六月有去一趟東京，逛了一下人形町，其中的 RON 咖啡已經開業 50 年，裡面不只裝設很陳舊，店員年紀也都很大了，感覺是個會消失在時間洪流的景點。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34927506263/" title="RON by othree, on Flickr"><img src="https://farm5.staticflickr.com/4239/34927506263_3525c44b55_b.jpg" width="1024" height="683" alt="RON" srcset="https://farm5.staticflickr.com/4239/34927506263_3525c44b55_b.jpg 1024w, https://farm5.staticflickr.com/4239/34927506263_5843297051_h.jpg 1600w" /></a></p>
<p>七月更新了 iPad Pro 10.5，近年難得的有感升級，當時還有寫<a href="https://blog.othree.net/log/2017/08/03/ipad-pro-105-inch/">文章介紹</a>。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/36164319222/" title="iPad Pro 10.5 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4415/36164319222_192e05cf58_b.jpg" width="1024" height="683" alt="iPad Pro 10.5" srcset="https://farm5.staticflickr.com/4415/36164319222_192e05cf58_b.jpg 1024w, https://farm5.staticflickr.com/4415/36164319222_4c8603e28b_h.jpg 1600w" /></a></p>
<p>八月也是慣例的 COSCUP，其實還有 HITCON，今年都無法參與了，如果能抽空去臉一下就很不錯了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35576419213/" title="COSCUP 2017 Day 1 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4419/35576419213_e3dbd58f45_b.jpg" width="1024" height="683" alt="COSCUP 2017 Day 1" srcset="https://farm5.staticflickr.com/4419/35576419213_e3dbd58f45_b.jpg 1024w, https://farm5.staticflickr.com/4419/35576419213_6e102939db_h.jpg 1600w" /></a></p>
<p>九月跑去香港兩天，主要是吃吃行程，剛好看到了現在世上少有的竹子鷹架。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37123095245/" title="香港 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4413/37123095245_64b1945e42_b.jpg" width="1024" height="683" alt="香港" srcset="https://farm5.staticflickr.com/4413/37123095245_64b1945e42_b.jpg 1024w, https://farm5.staticflickr.com/4413/37123095245_5dfa622565_h.jpg 1600w" /></a></p>
<p>十月趁連假去了紐西蘭十多天，整個行程還蠻順利，運氣也很不錯，這是其中一天在 Te Anau 看到的夕陽，其實去這一趟是有些感觸，不過沒什麼時間記錄。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37712147255/" title="Te Anau by othree, on Flickr"><img src="https://farm5.staticflickr.com/4517/37712147255_87335bd4f0_b.jpg" width="1024" height="683" alt="Te Anau" srcset="https://farm5.staticflickr.com/4517/37712147255_87335bd4f0_b.jpg 1024w, https://farm5.staticflickr.com/4517/37712147255_3451ae8619_h.jpg 1600w" /></a></p>
<p>十一月是自由的狐狸啊～</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24851237238/" title="Firefox by othree, on Flickr"><img src="https://farm5.staticflickr.com/4529/24851237238_99d621559b_b.jpg" width="683" height="1024" alt="Firefox" srcset="https://farm5.staticflickr.com/4529/24851237238_99d621559b_b.jpg 683w, https://farm5.staticflickr.com/4529/24851237238_d78256eca1_h.jpg 1067w" /></a></p>
<p>十二月的是 Mario Odyssey，本來想要玩完寫篇文章記錄的，也還沒開工，不過 Switch 的遊戲拍照機能真是很不錯，薩爾達的時候我就拍了一大堆，不過因為一直沒全破所以還沒發佈，希望今年能找時間解決它。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24541906227/" title="Super Mario Odyssey by othree, on Flickr"><img src="https://farm5.staticflickr.com/4590/24541906227_34ecf7c3da_b.jpg" width="1024" height="576" alt="Super Mario Odyssey" srcset="https://farm5.staticflickr.com/4590/24541906227_34ecf7c3da_b.jpg 1024w" /></a></p>
</b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000920" baseName="pegjs">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2018-04-09</b:date>
				<b:time>21:15:01</b:time>
			</b:datetime>
			<b:category>script</b:category>
			<b:title>PEG.js</b:title>
			<b:content>
				<b:summary> 知道這東西也好一陣子了，最近才真的第一次用，感覺還不錯，很久沒有因為東西會動而這麼高興了，大概也是太久沒努力離開舒適圈的關係吧。 總之，最近想著要做出類似一些搜尋引擎支援的條件語法，像是 and、or、not 之類的，稍微花了點時間調查一下確定要正確的處理就是要個 parser，沒錯，就是 compiler 最前面那個 parser，身為非 CS 領域出身的人，compiler 我一直是朦懂朦懂的，parser 到產生 AST 那塊算是比較清楚一些，因為像是 Babel、還有以前幫忙過的 TernJS 都是先 parse 程式碼產生 AST 才開始做事，不過這次和以前不一樣的是我要從頭開始建立一個語法的 parser，然後因為是網頁前端要用的，所以就找到了 PEG.js 這個用 JavaScript 寫的 parser generator，相較於手工的 parser，這種工具只要有定義好的語法（grammer）給它，它就可以產生出對應的 parser，至於什麼是語法（grammer）呢，例如下面這段就是： IdentifierName :: IdentifierStart IdentifierName IdentifierPart IdentifierStart :: UnicodeIDStart $...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/40359029595/" title="pegjs by othree, on Flickr"><img src="https://farm1.staticflickr.com/792/40359029595_8bd25d41e5_b.jpg" width="1024" height="991" alt="pegjs" srcset="https://farm1.staticflickr.com/792/40359029595_8bd25d41e5_b.jpg 1024w, https://farm1.staticflickr.com/792/40359029595_f00581bfe8_h.jpg 1600w" /></a></p>
<p>知道這東西也好一陣子了，最近才真的第一次用，感覺還不錯，很久沒有因為東西會動而這麼高興了，大概也是太久沒努力離開舒適圈的關係吧。</p>
<p>總之，最近想著要做出類似一些搜尋引擎支援的條件語法，像是 and、or、not 之類的，稍微花了點時間調查一下確定要正確的處理就是要個 parser，沒錯，就是 compiler 最前面那個 parser，身為非 CS 領域出身的人，compiler 我一直是朦懂朦懂的，parser 到產生 AST 那塊算是比較清楚一些，因為像是 Babel、還有以前幫忙過的 <a href="http://ternjs.net/">TernJS</a> 都是先 parse 程式碼產生 AST 才開始做事，不過這次和以前不一樣的是我要從頭開始建立一個語法的 parser，然後因為是網頁前端要用的，所以就找到了 <a href="https://pegjs.org/">PEG.js</a> 這個用 JavaScript 寫的 parser generator，相較於手工的 parser，這種工具只要有定義好的語法（grammer）給它，它就可以產生出對應的 parser，至於什麼是語法（grammer）呢，例如下面這段就是：</p>
<pre><code>IdentifierName ::
    IdentifierStart
    IdentifierName IdentifierPart

IdentifierStart ::
    UnicodeIDStart
    $
    _
    \ UnicodeEscapeSequence

IdentifierPart ::
    UnicodeIDContinue
    $
    _
    \ UnicodeEscapeSequence
    &lt;ZWNJ&gt;
    &lt;ZWJ&gt;

UnicodeIDStart ::
    any Unicode code point with the Unicode property &amp;ldquo;ID_Start&amp;rdquo;

UnicodeIDContinue ::
    any Unicode code point with the Unicode property &amp;ldquo;ID_Continue&amp;rdquo;
</code></pre>
<p>這段是從 ECMAScript Spec 內找出來的，identifier 名稱格式的語法（grammer）定義，其實還算蠻好理解的，而 PEG.js 也有自己定的語法格式，只要使用該格式定義好語法，就可以產生出 parser 來，不過當我開始寫的時候，才發現到一個問題：我不知道 parse 後要產生什麼東西，這時我才意識到，在開始定義語法之前，我應該要先想清楚後續的產出物（例如 AST）的結構，和要如何使用這個 parser 的產出物實做出真正想要的效果。</p>
<p>以我的目標來說，我希望可以做出簡單的邏輯組合，包括 and、or、not 和 parenthesized expression（括號包起來的），其實我一開始的想法也沒很明確，只是覺得應該可以用樹狀結構加上遞迴來實做後面的判斷，然後參考了 <a href="https://www.elastic.co/products/kibana">Kibana</a> 裡面 Kuery 的語法，也算是慢慢的把語法和 AST 的組合方式定義出來，當時做的語法我還有放在 <a href="https://gist.github.com/othree/8beecb7e3a6d4650ddbada3426854362">gist</a> 上，語法和 AST 定義好的時候，其實後面應用端的 script 還沒寫，不過因為結構很簡單，所以我已經確信一定可以運作了，後來隔一天果然不花什麼時間就把應用端的 script 也寫好，之後還花時間作了些手工測試，修正了一些語法上的細節問題，像是支援 <code>&amp;</code> 、<code>|</code> 這些符號之類的，還有符號兩邊不用空格等等。</p>
<p>還有一點想特別說的是，其實一開始定義語法的時候，我是沒有想要去參考 Kibana 的，雖然我當時就知道 Kibana 的 Kuery 語法和我的需求很像，而且也是用 PEG.js 做的，不過我開始寫語法定義沒多久就卡關了，卡關的地方就是，一開始就是 and、or、not、parenthesized expression 都有可能出現，但是這無法用 <code>/</code> 的方式來處理，因為 PEG.js 的 parser 不會解析到一半發現不對就游標往回退（<a href="https://github.com/pegjs/pegjs/blob/master/docs/grammar/backtracking.md">backtracking</a>），然後我就卡關了，我可以寫出 and 加上判斷，支援以下兩種查詢：</p>
<pre><code>keyword
keyword1 and keyword2
</code></pre>
<p>但是卻無法更進一步加上支援 <code>or</code>，結果只好去參考 Kuery 語法，發現奇妙的寫法，以下是我後來成品的定義：</p>
<pre><code class="language-pegjs">start
  = orQuery?

orQuery
  = left:andQuery Or right:orQuery
  / andQuery

andQuery
  = left:notQuery And right:andQuery
  / notQuery

notQuery
  = Not right:subQuery
  / subQuery

subQuery
  = '(' ws* query:orQuery ws* ')'
  / queryValue
</code></pre>
<p>如此，<code>or</code> 查詢支援兩種內容，第一種是 <code>and</code> 查詢語句，第二種才是真的 <code>or</code> 查詢，但是他的第一個元素是 <code>and</code> 查詢，也就是說雖然是 <code>or</code> 查詢的判斷，但是卻先去看有沒有 <code>and</code> 查詢，然後 <code>and</code> 查詢也是類似的定義，實際上先去找有沒有 <code>not</code>  的語句，然後 <code>not</code> 會去看有沒有子查詢（parenthesized expression），整個讓人覺得很神奇，仔細下去推敲也確實可以理解判斷的過程，不過在邏輯上我還不太能完全通透的理解。第一次看到這種定義方式時，覺得很神妙，不過也有想說這應該是什麼常見的 grammer 寫法，後來去查了一下 ECMAScript Spec，發現也是這樣的作法，看來真的算是個 convention 了吧（看起來是 <a href="https://zh.wikipedia.org/wiki/%E5%B7%A6%E9%81%9E%E6%AD%B8">left recursive</a>），真不知道第一個寫出這種 grammer 的人腦袋裝什麼。</p>
<p>最後我的成果有丟一個可以讓人用的版本上 GitHub，也有用 NPM 發佈，叫 <a href="https://github.com/othree/simple-search-query">simple-search-query</a>，詳細用法可以參考 README，至於完整的語法定義就在 <code>query</code> 目錄內，還在補測試就是。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
