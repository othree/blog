<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/main.xsl"?>
<b:blog xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://blog.othree.net"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://blog.othree.net http://blog.othree.net/blooog.xsd">
	<b:blogTitle>O3noBLOG</b:blogTitle>
	<b:blogDescription></b:blogDescription>
	<b:entries>
		<b:entriesMeta>
			<b:listType>c</b:listType>
			<b:listData listID="css-html">css-html</b:listData>
		</b:entriesMeta>

		<b:entry entryID="000986" baseName="wbr-and-nobr">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2023-01-13</b:date>
				<b:time>22:52:00</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>wbr 的這些那些</b:title>
			<b:content>
				<b:summary>在 responsive design 成為主流之後，有個問題也隨之被突顯出來，就是文字的換行，尤其是標題文字的換行位置，現在的瀏覽器的換行方式簡單來說就是超出區塊範圍的東西都往下放到下一行，所以在某些情況下，就會有第一行很長第二行很短的狀況，視覺上非常不平衡，以下圖為例，網頁的副標題沒有作特殊處理，所以會有可能會變成兩行長度差距很大的樣子： 這個問題有蠻多解決方法的，目前我知道的就有： 微調 responsvie 的樣式來避免出現不平衡的狀態 在特定地方插入 &amp;nbsp; 避免換行 用 flex layout 來控制換行位置 基本上就是只要你不擇手段，問題還是可以解決的，不過我一直以來都是會偏好用標準的方法來解決問題，所以整理了一下我所知道可以拿來用的東西： &lt;wbr&gt; HTML element white-space CSS property &lt;nobr&gt; HTML element text-wrap CSS property 首先的想法是 &lt;wbr&gt; 配上 white-space: nowrap; 或是 &lt;nobr&gt;，不過意外的是大部分瀏覽器都不支援這個組合，也就是說，包在 &lt;nobr&gt; 內的 &lt;wbr&gt; 的地方在現在大部分主流瀏覽器內是不會換行的： &lt;nobr&gt;ChatGPT:...</b:summary>
				<b:mainContent><p>在 responsive design 成為主流之後，有個問題也隨之被突顯出來，就是文字的換行，尤其是標題文字的換行位置，現在的瀏覽器的換行方式簡單來說就是超出區塊範圍的東西都往下放到下一行，所以在某些情況下，就會有第一行很長第二行很短的狀況，視覺上非常不平衡，以下圖為例，網頁的副標題沒有作特殊處理，所以會有可能會變成兩行長度差距很大的樣子：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52622679026/" title="line breaking by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52622679026_dce07ba029_b.jpg" width="1024" height="626" alt="line breaking" srcset="https://live.staticflickr.com/65535/52622679026_a03a8ede93_k.jpg 2x" /></a></p>
<p>這個問題有蠻多解決方法的，目前我知道的就有：</p>
<ol>
<li>微調 responsvie 的樣式來避免出現不平衡的狀態</li>
<li>在特定地方插入 <code>&amp;nbsp;</code> 避免換行</li>
<li>用 flex layout 來控制換行位置</li>
</ol>
<p>基本上就是只要你不擇手段，問題還是可以解決的，不過我一直以來都是會偏好用標準的方法來解決問題，所以整理了一下我所知道可以拿來用的東西：</p>
<ol>
<li><code>&lt;wbr&gt;</code> HTML element</li>
<li><code>white-space</code> CSS property</li>
<li><code>&lt;nobr&gt;</code> HTML element</li>
<li><code>text-wrap</code> CSS property</li>
</ol>
<p>首先的想法是 <code>&lt;wbr&gt;</code> 配上 <code>white-space: nowrap;</code> 或是 <code>&lt;nobr&gt;</code>，不過意外的是大部分瀏覽器都不支援這個組合，也就是說，包在 <code>&lt;nobr&gt;</code> 內的 <code>&lt;wbr&gt;</code> 的地方在現在大部分主流瀏覽器內是不會換行的：</p>
<pre><code class="language-html">&lt;nobr&gt;ChatGPT: Optimizing&lt;wbr&gt;Language Models&lt;wbr&gt;for Dialogue&lt;/nobr&gt;
</code></pre>
<p>這就激起了我的好奇心了，於是我開始仔細的找資料，看看 <code>&lt;nobr&gt;</code> 和 <code>&lt;wbr&gt;</code> 到底是怎樣運作的。首先，就來看看 <code>&lt;wbr&gt;</code> 吧，雖然他第一次出現在 W3C 的文件內就是在 HTML5，但是其實它已經出現了 20 年以上，最早是作為 <a href="https://web.archive.org/web/20000303182655/http://www.netscape.com/assist/net_sites/html_extensions.html">Netscape 的 HTML 2 extension</a> 的一員：</p>
<blockquote>
<p>The WBR element stands for <strong>W</strong>ord <strong>BR</strong>eak. This is for the very rare case when you have a NOBR section and you know exactly where you want it to break. Also, any time you want to give the Netscape Navigator help by telling it where a word is allowed to be broken. The WBR element does not force a line break (BR does that) it simply lets the Netscape Navigator know where a line break is allowed to be inserted if needed.</p>
</blockquote>
<p>在 Internet Archive 上找到的備份，最早的定義其實明確的說著 <code>&lt;wbr&gt;</code> 處應該是要可以優先於 <code>&lt;nobr&gt;</code> 的，我甚至還在 bugzilla 上找到一個 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=6347">24 年前的 bug report</a> 在講這件事，根據這張票最後的關掉前的討論，其實可以用 <code>&lt;/nobr&gt;&lt;nobr&gt;</code> 來達成一樣的效果，然後 Firefox 不打算支援 <code>&lt;wbr&gt;</code>，看到這邊，我只能說這解法怎麼這麼天才（稱讚的意味）。</p>
<p>查到這邊，我還是很好奇為什麼現在的主流瀏覽器依然 <code>&lt;wbr&gt;</code> 優先度比 <code>&lt;nobr&gt;</code> 還低，所以繼續找資料，這次看的就是最新的文件了，首先是 <code>&lt;wbr&gt;</code> 的<a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-wbr-element">定義</a>，在 HTML5 中變成：</p>
<blockquote>
<p>The <code><a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-wbr-element">wbr</a></code> element <a href="https://html.spec.whatwg.org/multipage/dom.html#represents">represents</a> a line break opportunity.</p>
</blockquote>
<p>從 &quot;word break&quot; 變成 &quot;line break opportunity&quot; 了，<code>&lt;nobr&gt;</code> 則和 <code>&lt;wbr&gt;</code> 一樣一開始是 Netscape extension，不過他倒是沒有進到 HTML5，事實上，雖然 <code>&lt;nobr&gt;</code> 不是 HTML5 的一員，但是文件中<a href="https://html.spec.whatwg.org/multipage/rendering.html#phrasing-content-3">定義的 default style 還是有它</a>：</p>
<pre><code class="language-css">br { display-outside: newline; } /* this also has bidi implications */
nobr { white-space: nowrap; }
wbr { display-outside: break-opportunity; } /* this also has bidi implications */
nobr wbr { white-space: normal; }
</code></pre>
<p>其實就是等價於 <code>white-space: nowrap</code>，而 <code>white-space</code> 屬性<a href="https://www.w3.org/TR/CSS2/text.html#white-space-prop">在 CSS2 時</a>是用來定義空白的處理方式：</p>
<blockquote>
<p>This property declares how white space inside the element is handled.</p>
</blockquote>
<p>到 CSS Text Level 3 時<a href="https://www.w3.org/TR/css-text-3/#white-space-property">定義</a>說的更明確，是用來決定遇到 &quot;line break opportunity&quot; 時的處理方式和是不是要合併 space 字元的屬性：</p>
<blockquote>
<ul>
<li>whether and how <a href="https://www.w3.org/TR/css-text-3/#white-space">white space</a> is collapsed</li>
<li>whether lines may <a href="https://www.w3.org/TR/css-text-3/#wrapping">wrap</a> at unforced <a href="https://www.w3.org/TR/css-text-3/#soft-wrap-opportunity">soft wrap opportunities</a></li>
</ul>
</blockquote>
<p>其實在 <a href="https://www.w3.org/TR/css-text-4/#white-space-property">Level 4</a> 更是可以分開設定兩種屬性，<code>white-space</code> 變成一個 shorthand，而看到這些定義的演進，其實也讓人發現最早命名時其實只有考慮到西方語言的特色。</p>
<p>看到這邊，會發現有一個新的名詞：&quot;line break opportunity&quot;，有些地方是稱為 &quot;wrap opportunity&quot;，這個名詞其實是出現在 CSS Module Text 文件中的，顧名思義，就是可以換行的位置，而這份文件也是<a href="https://www.w3.org/TR/css-text-4/#line-breaking">定義換行邏輯</a>的文件，不過這邊其實沒把換行演算法（line breaking algorithm）明確定義下來，而是闡明各種相關的 CSS 屬性和它們會怎樣影響換行的結果，例如換行有分強制（<code>&lt;br&gt;</code>）和非強制（<code>&lt;wbr&gt;</code>），然後不同 CSS 屬性會影響這些換行點的出現與否，至於文本之中，哪些地方可以換行，就是換行演算法的部分了，這部份在 W3C 文件沒有定義死，所以是允許瀏覽器自己決定的，不過有提供一些參考文件，像是 Unicode 的附件 14：&quot;Unicode Line Breaking Algorithm&quot;，或是稱為 UAX14，這份文件要搭配 Unicode Database（UCD） 的 <a href="https://www.unicode.org/Public/UCD/latest/ucd/LineBreak.txt">Line_Break Property 資料</a>，文件中的第五章有仔細的說明各種不同的 line breaking class，然後資料庫則是定義了所有 Unicode 字元的 Line_Break property，接著的第六章就是最重要的換行演算法了，這邊列出了 31 條規則，基本上是反向列舉，說哪些地方不能換行，例如 WJ（word joiner）前後都不能換行，數字中間的符號前後也不能換行之類的，不過不確定哪些瀏覽器是實作 UAX14 的，Chrome 似乎有用到 UCD，Firefox 則是以 JIS X 4051 為基礎做的<a href="https://searchfox.org/mozilla-central/rev/6566d92dd46417a2f57e75c515135ebe84c9cef5/intl/lwbrk/LineBreaker.cpp">換行演算法</a>，其實 JIS X 4051 是我所知道，二戰後世界，最早的正式的文字編排的標準，查到的紀錄是 <a href="https://www.klnet.pref.kanagawa.jp/find-books/kawasaki/kikaku/kikaku-list/jis-hb-x-03.html">1989 有一版</a>，而 UAX14 第一個非草稿的版本則是要到 1999 年才出來。</p>
<p>回到現在主流瀏覽器不支援 <code>&lt;wbr&gt;</code> 放在 <code>white-space: nowrap</code> 裡面無法換行的問題，其實要回到這個 HTML 標籤在繪製時，是不是有 magic 的，什麼是 magic 呢？簡單說就是，你能不能用 CSS 來定義該標籤的樣子，以及你能不能用 CSS 來改掉這些預設的樣式，而 <code>&lt;br&gt;</code> 和 <code>&lt;wbr&gt;</code> 正好是有 magic 的標籤，可以想想看，要怎樣用 CSS 讓文字內產生一個換行點，可能有人會說剛剛上面才看到的，不過，其實那幾個 <code>display-outside</code> 的值只存在於以前的草稿中，CSS-WG 決議不為了這個問題<a href="https://github.com/w3c/csswg-drafts/issues/610">新增多的 display 狀態</a>，所以問題就回到 HTML-WG 這邊了，CSS-WG 的 fantasai 其實有給了一組 default style：</p>
<pre><code class="language-css">br { all: unset !important; display: contents !important; content: &quot;\a&quot; !important; white-space: pre !important; }
wbr { all: unset !important; display: contents !important; content: &quot;\200B&quot; !important; }
</code></pre>
<p>我把 <code>!important</code> 拿掉整理一下：</p>
<pre><code class="language-css">br {
  all: unset;
  display: contents;
  content: &quot;\a&quot;;
  white-space: pre;
}
wbr {
  all: unset;
  display: contents;
  content: &quot;\200B&quot;;
}
</code></pre>
<p>其中，<code>\a</code> 就是<a href="https://util.unicode.org/UnicodeJsps/character.jsp?a=000A&amp;B1=Show">換行字元</a>，<code>\200B</code> 則是 <a href="https://util.unicode.org/UnicodeJsps/character.jsp?a=200B&amp;B1=Show">ZWSP</a>，zero width space，因為是 zero width，所以看不到，然後又因為是 space，所以可以用來把字切開，也就表示可以在該處斷行。不過這個版本有些問題，因為有很多瀏覽器還不支援在 <code>::before, ::after</code> 以外的物件上套用 <code>content</code> 屬性，所以 fantasai 又提供一版用 <code>::before</code> 的版本：</p>
<pre><code class="language-css">br, wbr { all: unset !important; display: contents !important; white-space: pre !important; }
br::before { all: unset !important; content: &quot;\a&quot; !important; }
wbr::before { all: unset !important; content: &quot;\200B&quot; !important; }
</code></pre>
<p>但是，實際上直接拿這組定義來用，還是一樣有問題，就是有些瀏覽器已經讓 <code>&lt;wbr&gt;</code> 有 magic 了，結果 <code>wbr::before</code> 是沒有用的，目前 <a href="https://github.com/whatwg/html/pull/2298">HTML 標準的修改也就還卡在這邊</a>（issue 則是<a href="https://github.com/whatwg/html/issues/2291">另外一個</a>），HTML-WG 的 Domenic 開了這個 PR 要讓 <code>&lt;br&gt;</code> 和 <code>&lt;wbr&gt;</code> 就用 magic 來實現效果，不過這討論已經停很久了，所以最後會是怎樣的方案還不知道。</p>
<p>總之目前的結論就是，現在如果想要讓 <code>&lt;wbr&gt;</code> 照其定義的一樣，可以在 <code>&lt;nobr&gt;</code> 或是 <code>white-space: nowrap</code> 內產生換行，是辦不到的，不過可以用其他的標籤來辦到，像是：</p>
<pre><code class="language-css">.wbr::before {
  display: inline;
  content: &quot;\00200B&quot;;
  white-space: normal;
}
</code></pre>
<p>配上</p>
<pre><code class="language-html">&lt;nobr&gt;ChatGPT: Optimizing&lt;span class=&quot;wbr&quot;&gt;Language Models&lt;span class=&quot;wbr&quot;&gt;for Dialogue&lt;/nobr&gt;
</code></pre>
<p>這個寫法也有出現在一份由 Leif Halvard Silli 在提交 <a href="https://bugs.webkit.org/show_bug.cgi?id=64005">bug</a> 給 WebKit 所做的 <a href="https://www.m%C3%83%C2%A5lform.no/testing/html5/nobr+wbr.html">test 內</a>。</p>
<p>到這邊，大概已經把自己控制換行位置的部分講的差不多了，不過其實，還有一個方法可以處理一開始所提到的換行結果不理想的問題，就是在 CSS Text Module Level 4 中有一個新的屬性叫做 <code>text-wrap</code>，其中有一個屬性值是 <code>balance</code>，合起來<a href="https://www.w3.org/TR/css-text-4/#valdef-text-wrap-balance">就是</a>：</p>
<pre><code class="language-css">text-wrap: balance;
</code></pre>
<p>這樣設定，預期的結果就是會換行換在每一行的寬度最接近的位置，不過當然還沒有瀏覽器支援，連 caniuse 都還查不到 <code>text-wrap</code> 屬性，只是還是有 JS 的解決方案：</p>
<ul>
<li><a href="https://github.com/adobe/balance-text">Adobe 的 balance text</a>，是 jQuery plugin，因為是認真去算長度的，效能比較不好；</li>
<li><a href="https://github.com/qgustavor/vanilla-balance-text">vanilla 版本的 balance text</a>；</li>
<li><a href="https://github.com/nytimes/text-balancer">nytimes（紐約時報）的 text-balancer</a>，透過 binary search 改寬度來調整換行位置，效能比較好；</li>
<li><a href="https://react-wrap-balancer.vercel.app/">React wrap balancer</a>，React component，基本原理和前者一樣，但是還多支援 <code>ratio</code> 屬性。</li>
</ul>
<p>最後的最後補上一些參考資料，一篇是古老的 IE 時代的東西，一篇則是現在的相關 CSS 屬性，一篇則是 balance wrap 的介紹：</p>
<ul>
<li><a href="https://jkorpela.fi/html/nobr.html">Word division in IE</a></li>
<li><a href="https://codersblock.com/blog/deep-dive-into-text-wrapping-and-word-breaking/">Deep Dive into Text Wrapping and Word Breaking</a></li>
<li><a href="https://www.ctrl.blog/entry/text-wrap-balance.html">Improving the New York Times' line wrap balancer</a></li>
</ul>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000975" baseName="intrinsic-aspect-ratio-of-incomplete-image">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2020-11-29</b:date>
				<b:time>23:05:12</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>HTML 文件圖片預設寬高比</b:title>
			<b:content>
				<b:summary> 我在 2018 年有篇文章 Intrinsic Size 媒體寬高比，介紹一個標準的草案 intrinsicsize ，為什麼會需要這東西在那篇文章也有講，主要就是要搭配像是： img { max-width: 100%; height: auto; } 這種寫法非常通用，但是在圖片讀取完成前，&lt;img /&gt; 標籤的佔位會無法先知道，這會造成頁面在圖片讀取完成後瀏覽器會需要比較大的重新繪製的工作。 這幾天想起來去查了一下近況，發現竟然早早就停止發展了，caniuse 那邊 也顯示瀏覽器都把一些實驗中的支援都拿掉了，細看下去，發現 Firefox 的人當時說要開始試驗另一個比較優雅的方法，也有和 CSS WG 的人開始討論，他們當時的想法就是直接用 width 和 height 屬性來計算寬高比（aspect ratio），不過之後就都沒有標準文件相關的發展細節或連結了。 搜尋一番後，發現 Firefox 在 71 開始就已經發佈這個修改了，當時的 release note 其實有寫，而且...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50660948372/" title="Intrinsic aspect ratio of incomplete image by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50660948372_745a2dd865_b.jpg" width="1024" height="718" alt="Intrinsic aspect ratio of incomplete image" srcset="https://live.staticflickr.com/65535/50660948372_745a2dd865_b.jpg 1024w, https://live.staticflickr.com/65535/50660948372_7b5b33b5cd_h.jpg 1600w" /></a></p>
<p>我在 2018 年有篇文章 <a href="https://blog.othree.net/log/2018/09/21/intrinsic-size/">Intrinsic Size 媒體寬高比</a>，介紹一個標準的草案 <code>intrinsicsize</code> ，為什麼會需要這東西在那篇文章也有講，主要就是要搭配像是：</p>
<pre><code class="language-css">img {
  max-width: 100%;
  height: auto;
}
</code></pre>
<p>這種寫法非常通用，但是在圖片讀取完成前，<code>&lt;img /&gt;</code> 標籤的佔位會無法先知道，這會造成頁面在圖片讀取完成後瀏覽器會需要比較大的重新繪製的工作。</p>
<p>這幾天想起來去查了一下近況，發現竟然早早就停止發展了，caniuse <a href="https://caniuse.com/mdn-html_elements_img_intrinsicsize">那邊</a> 也顯示瀏覽器都把一些實驗中的支援都拿掉了，<a href="https://github.com/WICG/intrinsicsize-attribute/issues/16">細看下去</a>，發現 Firefox 的人當時說要開始試驗另一個比較優雅的方法，也有和 CSS WG 的人開始討論，他們當時的想法就是直接用 <code>width</code> 和 <code>height</code> 屬性來計算寬高比（aspect ratio），不過之後就都沒有標準文件相關的發展細節或連結了。</p>
<p>搜尋一番後，發現 Firefox 在 71 開始就已經發佈這個修改了，當時的 <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/71#CSS">release note</a> 其實有寫，而且 MDN 上還有一篇文章：<a href="https://developer.mozilla.org/en-US/docs/Web/Media/images/aspect_ratio_mapping">Mapping the width and height attributes of media container elements to their aspect-ratio</a>，也有介紹這個修改要解決的問題以及技術上是怎樣處理的，簡單一點形容就是：</p>
<pre><code class="language-css">img { 
  aspect-ratio: attr(width) / attr(height); 
}
</code></pre>
<p>不過實際上不是真的使用這條 User Agent style 來實作就是了，因為這個透過  <code>width</code> 和  <code>height</code> 計算出來的寬高比只有在圖片還沒讀取的時候會有效，圖片讀取完成後就會改成用圖片實際的尺寸來計算怎麼顯示了，所以要說它是預設的寬高比也不太正確。</p>
<p>在 CSS Image 這個 Module 的第四章：<a href="https://drafts.csswg.org/css-images/#sizing">Sizing Images and Objects in CSS</a> 中，有詳細的定義要怎樣決定圖片在繪製在網頁上時要怎樣處理，還定義了一些專有名詞：</p>
<ul>
<li><strong>Intrinsic dimensions</strong> 簡單一點形容就是圖片的原始尺寸，尺寸包含了寬（intrinsic width）、高和寬高比，不一定會全部都有，像是向量圖就只有寬高比，另外 intrinsic 中文翻譯是固有、或是根本的，所以 intrinsic dimentions 也不是真的就是圖片原始尺寸，它的文字敘述是：a preferred or natural size of the object itself。</li>
<li><strong>Specified size</strong> 使用 CSS 設定的物件大小。</li>
<li><strong>Concrete object size</strong> 根據上面兩個資訊所決定的實際上物件要繪製的大小，也就是我們眼睛所會看到的圖片呈現的大小。</li>
</ul>
<p>所以主要就是在寫怎樣計算 concrete object size 了，大概計算過程就是和各位腦袋中想的不會差距太大。不過在這個地方，有一個細節是在 CSS 文件中故意沒有講出來的，就是怎樣取得 intrinsic dimensions，CSS 文件中沒有明確的說 intrinsic width 是來自圖片標籤的 <code>width</code> 屬性，或是圖片的實際寬度（早在 CSS 2.1 就有<a href="https://www.w3.org/TR/CSS21/conform.html#intrinsic">寫出</a> CSS 文件不定義怎樣取得該數值了）。其實 HTML 圖片的 intrinsic dimensions 要怎麼取得是放在 HTML 文件的 <a href="https://html.spec.whatwg.org/multipage/rendering.html#dimRendering">15.4.3</a>，15 章都在講 rendering，15.4 則是 replaced elements，也就是圖片、影片之類的內容會整個替換掉的元素，15.4.3 最後一段的第一點是說圖片如果有抓下來的話就直接用圖片的 intrinsic aspect ratio，而第二點是這樣寫的：「If img's <code>width</code> and <code>height</code> attribute values, when parsed using the rules for parsing dimension values), are both not an error, not a percentage, and non-zero, then use   the ratio resulting from dividing the <code>width</code> attribute value   by the <code>height</code> attribute value.」這邊就明確的寫到用兩個屬性來計算 intrinsic aspect ratio 了，不過針對這個圖片讀取完成前的 intrinsic aspect ratio，並沒有定義一個專有名詞，所以可以看到 cnaiuse 用一個<a href="https://caniuse.com/mdn-html_elements_img_aspect_ratio_computed_from_attributes">複雜的文字</a>來敘述這項修改，要是我的話應該會把這個值命名為 intrinsic aspect ratio of incomplete image 之類的吧。</p>
<p>最後整理一下：</p>
<ul>
<li>圖片讀取完成前，如果有設定正確的數值的 width 和 hieght 的話，瀏覽器會先它們來計算 intrinsic aspect ratio</li>
<li>圖片讀取完成後，瀏覽器會用圖片原始的寬高比來作為 intrinsic aspect ratio</li>
<li>本來是希望能用在所有的 replaced elements，不過會造成既有網站壞掉所以目前限制在 <code>&lt;img&gt;</code> 標籤</li>
<li>以上的修改是大約是今年前半年才進入瀏覽器的</li>
</ul>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000974" baseName="scroll-margin-padding">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2020-11-25</b:date>
				<b:time>22:18:02</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>Scroll Margin/Padding</b:title>
			<b:content>
				<b:summary>這篇文章要介紹一組算是蠻新的 CSS 屬性，分別是 scroll-margin 和 scroll-padding，這兩個屬性是在 Scroll Snap Module Level 1 裡面定義的，目前主要的瀏覽器都有支援，IE 完全不支援，Safari 則是還在使用舊的非標準的屬性名稱，為什麼要介紹這兩個屬性呢？因為它除了原來 scroll-snap 微調的需求之外，還順便解決了一個存在已久的問題，也就是如果網頁的設計有固定浮動在頁面頂端的 header 時（Sticky/Fixed Header），使用 link 的 fragment 直接定位到頁面特定位置的時候，最上面一部份想顯示給訪客的內容會被 header 覆蓋到。 這個問題大概是從 Sticky Header 出現時就存在了，Stack Overflow 上就可以找到十年前的發問，以前的主要的解決方法就是讓連結的目標有看不到的高度，像是用 padding-top，比較乾淨一點是用 pseudo-element 的 :before 來把內容往下推，不過這幾個方法雖然有用，但是對我來說卻一直不是個最佳解，所以一直以來我都期待能有更漂亮的解決方案，有事沒事就會搜尋一下，然後，終於我發現了這組 CSS 屬性可以用來讓瀏覽器自己捲動到目標時有指定的偏移。 scroll-margin 是用在你想要捲動到的目標元件上，也就是有...</b:summary>
				<b:mainContent><p>這篇文章要介紹一組算是蠻新的 CSS 屬性，分別是 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin"><code>scroll-margin</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding"><code>scroll-padding</code></a>，這兩個屬性是在 <a href="https://stackoverflow.com/questions/4086107/fixed-page-header-overlaps-in-page-anchors">Scroll Snap Module Level 1</a> 裡面定義的，目前主要的瀏覽器都有<a href="https://caniuse.com/mdn-css_properties_scroll-margin">支援</a>，IE 完全不支援，Safari 則是還在使用舊的非標準的屬性名稱，為什麼要介紹這兩個屬性呢？因為它除了原來 scroll-snap 微調的需求之外，還順便解決了一個存在已久的問題，也就是如果網頁的設計有固定浮動在頁面頂端的 header 時（Sticky/Fixed Header），使用 link 的 fragment 直接定位到頁面特定位置的時候，最上面一部份想顯示給訪客的內容會被 header 覆蓋到。</p>
<p>這個問題大概是從 Sticky Header 出現時就存在了，Stack Overflow 上就可以找到<a href="https://stackoverflow.com/questions/4086107/fixed-page-header-overlaps-in-page-anchors">十年前的發問</a>，以前的主要的解決方法就是讓連結的目標有看不到的高度，像是用 <code>padding-top</code>，比較乾淨一點是用 pseudo-element 的 <code>:before</code> 來把內容往下推，不過這幾個方法雖然有用，但是對我來說卻一直不是個最佳解，所以一直以來我都期待能有更漂亮的解決方案，有事沒事就會搜尋一下，然後，終於我發現了這組 CSS 屬性可以用來讓瀏覽器自己捲動到目標時有指定的偏移。</p>
<p><code>scroll-margin</code> 是用在你想要捲動到的目標元件上，也就是有 id 的那個，像我的 blog 就是 <code>&lt;article&gt;</code> 標籤，給它加個 <code>scroll-margin-top: 56px;</code> 就可以了：</p>
<pre><code class="language-css">article {
  scroll-margin-top: 56px;
}
</code></pre>
<p><code>scroll-padding</code> 則是要用在 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Scroll_container">scroll container</a> 上的，而不是目標的父母層，舉例來說，在我這邊，沒有特別設定任何 <code>overflow</code> 的情形下，scroll container 會落在 <code>&lt;html&gt;</code> 元件上，而不是 <code>&lt;article&gt;</code> 外面的 <code>&lt;main&gt;</code>，所以設定就要改成：</p>
<pre><code class="language-css">html {
  scroll-padding-top: 56px;
}
</code></pre>
<p>這組 CSS 屬性我是今年才發現的，不過其實 CSS Trick 在去年就有文章介紹了：<a href="https://css-tricks.com/fixed-headers-on-page-links-and-overlapping-content-oh-my/">Fixed Headers, On-Page Links, and Overlapping Content, Oh My! </a>，真是太後知後覺了（其實也是因為我現在沒用 RSS reader 的關係）。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000964" baseName="enter-space-keydown-keyup">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2019-10-22</b:date>
				<b:time>22:54:22</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>ENTER or SPACE, KEYDOWN or KEYUP</b:title>
			<b:content>
				<b:summary>前一篇文章作動行為 Activation Behavior 發佈之後，卡西又做了一些測試，發現到 ENTER 和 SPACE 的觸發時機其實不一樣： 終於可以登入 codesandbox 了，在目前的 Chrome, Firefox, Safari 試了一下，結果 enter 會在 keydown 觸發 activation behavior ，但是 space 會在 keyup 觸發 https://t.co/ec1rMlFVvO-- 卡西 (@caasih) October 21, 2019 然後我仔細測試過發現真的是這樣，而且 SPACE 有 keypress 的狀態，就像是滑鼠按鍵按下去但是還沒放開時的樣子，然後這又讓我有點好奇起來了，仔細搜尋一番，發現 web 標準都沒有提到這個細節的定義，唯一有一點關係的是卡西也有找到的 WAI-ARIA...</b:summary>
				<b:mainContent><p>前一篇文章<a href="https://blog.othree.net/log/2019/10/20/activation-behavior/">作動行為 Activation Behavior</a> 發佈之後，卡西又做了一些測試，發現到 <kbd>ENTER</kbd> 和 <kbd>SPACE</kbd> 的觸發時機其實不一樣：</p>
<blockquote class="twitter-tweet" data-conversation="none"><p lang="zh" dir="ltr">終於可以登入 codesandbox 了，在目前的 Chrome, Firefox, Safari 試了一下，結果 enter 會在 keydown 觸發 activation behavior ，但是 space 會在 keyup 觸發 <a href="https://t.co/ec1rMlFVvO">https://t.co/ec1rMlFVvO</a></p>-- 卡西 (@caasih) <a href="https://twitter.com/caasih/status/1186268152184766464?ref_src=twsrc%5Etfw">October 21, 2019</a></blockquote> <script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> 
<p>然後我仔細測試過發現真的是這樣，而且 <kbd>SPACE</kbd> 有 <code>keypress</code> 的狀態，就像是滑鼠按鍵按下去但是還沒放開時的樣子，然後這又讓我有點好奇起來了，仔細搜尋一番，發現 web 標準都沒有提到這個細節的定義，唯一有一點關係的是卡西也有找到的 <a href="https://github.com/w3c/aria-practices/issues/610">WAI-ARIA Authoring Practices Issue 610</a>，於是我就覺得這應該和 Web 標準定義沒關係，應該是更古老的預設行為，於是改變方向改找 Windows 預設行為相關的文件，搜尋一陣子其實也找不太到東西，大概是因為 GUI 和 Windows 剛出的時候其實 www 還不知道在哪裡吧，不過後來還是找到兩篇 stackoverflow 的問答看起來是相關的：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/16090578/why-do-enter-and-space-keys-behave-differently-for-buttons">Why do Enter and Space keys behave differently for buttons?</a></li>
<li><a href="https://stackoverflow.com/questions/6706689/keyboard-control-of-gui-dialogs-should-default-button-change-with-focus">Keyboard control of GUI dialogs - Should default button change with focus?</a></li>
</ul>
<p>總和這兩篇的內容，大概整理一下：</p>
<p>這個行為應該是 Windows 一開始的時候就如此設計的了（看起來是很難找到相關設計的文件），然後實際上和 <kbd>ENTER</kbd> 相關（相對）的操作其實是 <kbd>ESC</kbd> 鍵，<kbd>ENTER</kbd> 鍵代表的是直接點 default button（例如 form 的 submit、dialog 的 ok 之類的），或是可以說是執行元件預設的行為，至於 <kbd>ESC</kbd> 鍵則是取消，不過取消在網頁的控制元件中幾乎是不存在的，過去有的大概只有 <code>&lt;select&gt;</code> 展開下拉選單後又決定不選時可以取消，到 HTML5 則又多了 <code>&lt;dialog&gt;</code> 有取消的行為（關閉 dialog），大概也是因為這個原因讓人忽略了 <kbd>ENTER</kbd> 和 <kbd>ESC</kbd> 的關係，變成注意到 <kbd>ENTER</kbd> 和 <kbd>SPACE</kbd> 都可以操作元件；至於 <kbd>SPACE</kbd> 鍵其實就像是滑鼠點擊，<code>keyDown</code> 如同 <code>mouseDown</code>，<code>keyUp</code> 如同 <code>mouseUp</code>，要到 <code>keyUp</code> 才算一個點擊的動作，也就是到這時候才會去觸發 <code>click</code> 事件。</p>
<p>搞清楚這現象的原理之後，其實也就更容易理解 <a href="https://github.com/w3c/aria-practices">WAI-ARIA Authoring Practices</a> 的範例那些 <kbd>ENTER</kbd>、<kbd>ESC</kbd>、<kbd>SPACE</kbd> 幾個按鍵行為為什麼是那樣了，當然，以後需要客製 widget 時也不用再對這幾個按鍵的行為該怎樣定義苦惱了。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000963" baseName="activation-behavior">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2019-10-20</b:date>
				<b:time>14:22:27</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>作動行為 Activation Behavior</b:title>
			<b:content>
				<b:summary>前幾天全知全能的米奧大人在 Twitter 上徵求中階的 JavaScript 課程： 想求推薦中階 JavaScript 課程，唯一期望是想要有實務向的練習題，不用解答都沒關係，但我的腦需要靠自己動手來體會「使用 OOO 可以做出 XXX，OOO 是有用的！」才能學會東西 +_+，如果剛好有看過這樣的東西還請各位大人不吝推薦給我（跪）-- Miau Huang (@miau715) October 14, 2019 然後 Jedi 提供了一個題目： 困難的簡單習題（平均起來就是中階）：讓一個 &lt;span&gt; 獲得跟 &lt;a&gt; 完全一樣的行為，以及讓一個 &lt;div&gt; 獲得跟 &lt;button&gt; 完全一樣的行為（提示：空白鍵跟 Enter 的差別、按下按鍵還沒放開前又按下 Esc、滑鼠中鍵把連結開到新分頁、是否已訪問過、停用狀態、Accessibility Tree / AOM 等）。-- Jedi (@JediLin)...</b:summary>
				<b:mainContent><p>前幾天全知全能的米奧大人在 Twitter 上徵求中階的 JavaScript 課程：</p>
<blockquote class="twitter-tweet" data-theme="light"><p lang="zh" dir="ltr">想求推薦中階 JavaScript 課程，唯一期望是想要有實務向的練習題，不用解答都沒關係，但我的腦需要靠自己動手來體會「使用 OOO 可以做出 XXX，OOO 是有用的！」才能學會東西 +_+，如果剛好有看過這樣的東西還請各位大人不吝推薦給我（跪）</p>-- Miau Huang (@miau715) <a href="https://twitter.com/miau715/status/1183625099137540098?ref_src=twsrc%5Etfw">October 14, 2019</a></blockquote>
<p>然後 Jedi 提供了一個題目：</p>
<blockquote class="twitter-tweet" data-conversation="none"><p lang="zh" dir="ltr">困難的簡單習題（平均起來就是中階）：<br/>讓一個 &lt;span&gt; 獲得跟 &lt;a&gt; 完全一樣的行為，以及讓一個 &lt;div&gt; 獲得跟 &lt;button&gt; 完全一樣的行為（提示：空白鍵跟 Enter 的差別、按下按鍵還沒放開前又按下 Esc、滑鼠中鍵把連結開到新分頁、是否已訪問過、停用狀態、Accessibility Tree / AOM 等）。</p>-- Jedi (@JediLin) <a href="https://twitter.com/JediLin/status/1183634431929503744?ref_src=twsrc%5Etfw">October 14, 2019</a></blockquote>
<p>後來米奧大人真的交作業了，也有提出一些問題，然後卡西有回應：</p>
<blockquote class="twitter-tweet" data-conversation="none"><p lang="zh" dir="ltr">button 比較明顯的問題有：<br/>* 點了 button 後不放開滑鼠，移到 button 外，不該 active 該 button ，但該取得 focus<br/>* button 上的文字不該被選取<br/>* keyup 該觸發 button 上的 onclick</p>-- 卡西 (@caasih) <a href="https://twitter.com/caasih/status/1184838289603231744?ref_src=twsrc%5Etfw">October 17, 2019</a></blockquote> <script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> 
<p>其中，「keyup 該觸發 button 上的 onclick」這句引起了我的興趣。</p>
<p>為了要顧及到網頁親和力，所有的控制元件的操作都應該要可以用鍵盤執行，所以像是 button 的動作也應該要可以用鍵盤控制，但是其實我以前一直搞不清楚，這之間正確的關係應該是怎樣，就三種可能性：</p>
<ul>
<li>key 事件觸發 click 事件，click 事件有 default handler</li>
<li>click 事件觸發 key 事件，key 事件有 default handler</li>
<li>click 事件和 key 事件都有同一個 default handler</li>
</ul>
<p>當我看到卡西那段文字的時候，我覺得他應該說的是有憑據的，不過我也覺得有些不正確，像是就我的認知，button 的 key 事件預設是不會觸發 click 事件的，於是我就花了點時間研究一下網路標準，這次終於找到規範和正確的關係了。</p>
<p>我先從 button 標籤開始查起，然後注意到一段，在說明 button 的 <a href="https://dom.spec.whatwg.org/#eventtarget-activation-behavior">activation behavior</a> 行為應該如何的文字，行為分成 submit button、reset button 和 button 三種，其中前兩個就像是在說 submit button 和 reset button 的行為一樣，所以我就了解到，activation behavior 就是我要找的關鍵字了，目前將它翻譯為「作動行為」。</p>
<p>然後在 <a href="https://html.spec.whatwg.org/multipage/interaction.html#activation">HTML 6.3 Activation</a> 找到：</p>
<blockquote>
<p>Certain elements in HTML have an <a href="https://dom.spec.whatwg.org/#eventtarget-activation-behavior">activation behavior</a>, which means that the user  can activate them. This is always caused by a <code>click</code> event.</p>
<p>The user agent should allow the user to manually trigger elements that have an <a href="https://dom.spec.whatwg.org/#eventtarget-activation-behavior">activation   behavior</a>, for instance using keyboard or voice input, or through mouse clicks. When the  user triggers an element with a defined <a href="https://dom.spec.whatwg.org/#eventtarget-activation-behavior">activation behavior</a> in a manner other than  clicking it, the default action of the interaction event must be to <a href="https://html.spec.whatwg.org/multipage/webappapis.html#fire-a-click-event">fire a <code>click</code> event</a> at the element.</p>
</blockquote>
<p>第一段就是說作動行為（activation behavior）都是 <code>click</code> 事件觸發，第二段則是說瀏覽器要讓其它方法（像是鍵盤、語音操作等）可以觸發作動行為的話，實做的方法應該是在該事件的處理器（event handler）內觸發 <code>click</code> 事件來觸發該 HTML 元素的作動行為。這段文字就可以證明卡西說的基本上沒錯，另外就是我有疑惑的，應該是 <code>keydown</code> 還是 <code>keyup</code> 事件呢？根據我自己的實驗結果應該是要用 <code>keydown</code>，不過總還是想找一下標準定義的出處，雖然沒有找到很明確的文字說明，不過 <a href="https://www.w3.org/TR/uievents/#event-flow-activation">UI Events 3.5. Activation triggers and behavior</a> 裡面的 EXAMPLE 4 內確實是寫 keydown event，當然 <code>keydown</code> 的時間點也比較符合期待，目前在不同標準文件內看到的範例也都是用 keydown。</p>
<p>查到這邊大概就可以確定，正確的關係應該是「key 事件觸發 click 事件，click 事件有 default handler」，<del>不過卡西說的小錯誤是應該要用 keydown 事件，然後我在 twitter 有回說普通 button 不應該 keydown 觸發 click 則是我當時的錯誤認知</del>（請見 <a href="https://blog.othree.net/log/2019/10/22/enter-space-keydown-keyup/">ENTER or SPACE, KEYDOWN or KEYUP</a>）。</p>
<p>再來，其實我還很好奇，哪裡有定義不同的元素分別用哪些按鍵 <strong>active</strong> 呢？因為表單送出是用 <kbd>ENTER</kbd> 鍵，但是像是 checkbox 的狀態切換卻是用 <kbd>SPACE</kbd> 鍵；上面提供的幾份文件也都沒講到這部分的定義，有種刻意避開的感覺，後來又找了許久才終於找到，其實是放在 WAI-ARIA Authoring Practices 這份 Working Group Note 內，拿 <a href="https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-4">checkbox</a> 為例，在它的 Keyboard Interaction 段落內就明白寫了：</p>
<blockquote>
<p>When the checkbox has focus, pressing the Space key changes the state of the checkbox.</p>
</blockquote>
<p>當然也有 <a href="https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-3">button</a> 的規範，就是同時有定義 <code>space</code> 和 <code>enter</code> ；由於這份文件是 Working Group Note，規範的硬性比較低，這應該也是故意為之的。</p>
<p>最後來整理一下，首先是 HTML 文件有定義，預設的作動行為都是透過 <code>click</code> 事件觸發，但是同時也要保留其它操作介面觸發作動行為的可能性，像是常見的鍵盤行為，而其它操作方式都要透過觸發 <code>click</code> 事件的方式來觸發作動行為；再來就是不同 HTML 元素的作動行為要做哪些事情也是在 HTML 文件內；至於不同 HTML 元素要支援哪些按鍵呢，這部分就要交叉參考 <a href="https://w3c.github.io/html-aria">ARIA in HTML</a> 和 <a href="https://www.w3.org/TR/wai-aria-practices-1.2/">WAI-ARIA Authoring Practices</a> 兩份文件了，前者用來查詢 HTML 元素對應的 ARIA role，後者可以根據 role 來判斷要支援哪些鍵盤按鍵。</p>
<p>以後要做自訂的控制元件的時候，就可以正大光明的把主要的動作寫在 onclick 事件下了（然後根據情況去加上 key event）。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000957" baseName="w3c-whatwg-html">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2019-05-28</b:date>
				<b:time>23:06:35</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>W3C and WHATWG and HTML</b:title>
			<b:content>
				<b:summary> 「天下大勢，分久必合，合久必分」，沒想到 W3C 和 WHATWG 之間的複雜關係就這麼突然的踏上新的里程碑了，今天 W3C blog 發表了一篇文章－W3C and the WHATWG signed an agreement to collaborate on a single version of HTML and DOM，說兩個組織已經簽好合作的協議了，未來算是要共同維護同一份 HTML 和 DOM 的 spec，HTML WG 的章程也因此要重新制訂，現在有草稿可看，詳細一點的摘要可以看 W3C CEO Jeff Jaffe 的文章 － W3C and...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/47951484072/" title="w3c-whatwg-logos by othree, on Flickr"><img src="https://live.staticflickr.com/65535/47951484072_044a889c15_b.jpg" intrinsicsize="1024x768" width="512" height="384" alt="w3c-whatwg-logos" srcset="https://live.staticflickr.com/65535/47951484072_044a889c15_b.jpg 1024w" /></a></p>
<p>「天下大勢，分久必合，合久必分」，沒想到 W3C 和 WHATWG 之間的複雜關係就這麼突然的踏上新的里程碑了，今天 W3C blog 發表了一篇文章－<a href="https://www.w3.org/blog/news/archives/7753">W3C and the WHATWG signed an agreement to collaborate on a single version of HTML and DOM</a>，說兩個組織已經簽好合作的協議了，未來算是要共同維護同一份 HTML 和 DOM 的 spec，HTML WG 的章程也因此要重新制訂，現在有<a href="https://www.w3.org/2018/12/html.html">草稿</a>可看，詳細一點的摘要可以看 W3C CEO Jeff Jaffe 的文章 － <a href="https://www.w3.org/blog/2019/05/w3c-and-whatwg-to-work-together-to-advance-the-open-web-platform/">W3C and WHATWG to work together to advance the open Web platform</a>：</p>
<ul>
<li>W3C and WHATWG work together on HTML and DOM, in the WHATWG  repositories, to produce a Living Standard and Recommendation/Review  Draft-snapshots</li>
<li>WHATWG maintains the HTML and DOM Living Standards</li>
<li>W3C facilitates community work directly in the WHATWG repositories  (bridging communities, developing use cases, filing issues, writing  tests, mediating issue resolution)</li>
<li>W3C stops independent publishing of a designated list of  specifications related to HTML and DOM and instead will work to take  WHATWG Review Drafts to W3C Recommendations</li>
</ul>
<p>基本上就是 W3C 相關的 WG 以後都改成貢獻到 WHATWG 那邊（在 GitHub 上），然後 W3C 那邊會拿 WHATWG 標準文件的 snapshot 來作為 CR、PR、REC，或許也可以稱為 Living Standard 的勝利。</p>
<p>如果要看比較細節關於兩個組織間簽的合作內容也有公開在網路上－<a href="https://www.w3.org/2019/04/WHATWG-W3C-MOU.html">Memorandum of Understanding Between W3C and WHATWG</a>，裡面還有列出所有相關的 W3C 的標準文件，以前我就一直很好奇到底全部是有哪些，剛好趁這機會一次收集齊全，其實還不少我沒看過的，甚至也有 404 的(?)，其中推薦標準（REC）的部分：</p>
<ol>
<li><a href="https://www.w3.org/TR/html5/">https://www.w3.org/TR/html5/</a> including other URLs under this directory</li>
<li><a href="https://www.w3.org/TR/html50/">https://www.w3.org/TR/html50/</a> including other URLs under this directory</li>
<li><a href="https://www.w3.org/TR/html51/">https://www.w3.org/TR/html51/</a> including other URLs under this directory</li>
<li><a href="https://www.w3.org/TR/html52/">https://www.w3.org/TR/html52/</a> including other URLs under this directory</li>
<li><a href="https://www.w3.org/TR/html/">https://www.w3.org/TR/html/</a> including other URLs under this directory</li>
<li><a href="https://www.w3.org/TR/webstorage/">https://www.w3.org/TR/webstorage/</a></li>
<li><a href="https://www.w3.org/TR/webmessaging/">https://www.w3.org/TR/webmessaging/</a></li>
<li><a href="https://www.w3.org/TR/eventsource/">https://www.w3.org/TR/eventsource/</a></li>
<li><a href="https://www.w3.org/TR/2dcontext/">https://www.w3.org/TR/2dcontext/</a></li>
<li><a href="https://www.w3.org/TR/dom/">https://www.w3.org/TR/dom/</a></li>
</ol>
<p>非推薦標準：</p>
<ol>
<li><a href="https://w3c.github.io/html/">https://w3c.github.io/html/</a> including other URLs under this directory</li>
<li><a href="https://www.w3.org/html/wg/drafts/html/master/">https://www.w3.org/html/wg/drafts/html/master/</a> including other URLs under this directory</li>
<li><a href="https://www.w3.org/TR/websockets/">https://www.w3.org/TR/websockets/</a></li>
<li><a href="https://www.w3.org/TR/2dcontext2/">https://www.w3.org/TR/2dcontext2/</a></li>
<li><a href="https://www.w3.org/TR/microdata/">https://www.w3.org/TR/microdata/</a></li>
<li><a href="https://www.w3.org/TR/staticrange/">https://www.w3.org/TR/staticrange/</a></li>
<li><a href="https://www.w3.org/TR/workers/">https://www.w3.org/TR/workers/</a></li>
<li><a href="https://dvcs.w3.org/hg/webperf/raw-file/default/specs/RequestAnimationFrame/Overview.html">https://dvcs.w3.org/hg/webperf/raw-file/default/specs/RequestAnimationFrame/Overview.html</a></li>
<li><a href="https://w3c.github.io/dom/">https://w3c.github.io/dom/</a></li>
<li><a href="https://www.w3.org/TR/dom41/">https://www.w3.org/TR/dom41/</a></li>
<li><a href="https://www.w3.org/TR/DOM-Parsing/">https://www.w3.org/TR/DOM-Parsing/</a></li>
<li><a href="https://www.w3.org/TR/html53/">https://www.w3.org/TR/html53/</a></li>
</ol>
<p>這些東西在 WHATWG 那邊基本上都寫在 <a href="https://html.spec.whatwg.org/multipage/">HTML</a> 和 <a href="https://dom.spec.whatwg.org/">DOM</a> 裡面，就是單一份標準文件內塞了比較多東西這樣。</p>
<p>最後就是我還發現一點有趣的，WHATWG <a href="https://github.com/whatwg/sg/issues/90">投票那邊</a>，四位出來投票的分別是 Apple、Microsoft、Mozilla 和 Google 四間公司的人。然後我只對 Mozilla 的 <a href="https://github.com/dbaron">dbaron</a> 有印象而已。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000953" baseName="lab-gradient">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2019-03-18</b:date>
				<b:time>22:38:25</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>Lab Gradient</b:title>
			<b:content>
				<b:summary> 一早起來就看到這篇文章 視覺上的完美漸層 Chromatic，介紹了一個 Sketch plugin 可以用不同色彩系統的漸層來產生更好的視覺效果，之前其實也有注意到這個問題好幾次，就是覺得 CSS gradient 的效果不好，也有注意到一些其他的漸層方法，不過一直沒記錄下來，所以趁這時候把一些資源記錄一下，該篇文章的作者 Samuel 是推薦 Lab 色彩系統的漸層。 目前因為 CSS 就是只有 RGB 漸層，所以要用其他系統的漸層就只能用模擬的，SASS 的話有 chromatic-sass，PostCSS 則是 postcss-easing-gradients，這套背後用的則是首篇文章也有介紹的 chroma.js 來轉換的，不過它其實主要是在做 easing gradient 的，然後還有一些線上的模擬工具可以讓人直接看看效果，第一個其實是 easing gradient 的工具，其實就是在 easing gradient 標準提案時有人做來讓人體驗的，另一個介面比較不 fancy，但是我覺得比較實用的 Lch and Lab colour and...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/47359638052/" title="Gradient by othree, on Flickr"><img src="https://farm8.staticflickr.com/7852/47359638052_59f473d2c0_b.jpg" intrinsicsize="1024x768" width="1024" height="768" alt="Gradient" srcset="https://farm8.staticflickr.com/7852/47359638052_59f473d2c0_b.jpg 1024w" /></a></p>
<p>一早起來就看到這篇文章 <a href="https://medium.com/@citysite1025/%E8%A6%96%E8%A6%BA%E4%B8%8A%E7%9A%84%E5%AE%8C%E7%BE%8E%E6%BC%B8%E5%B1%A4-chromatic-e1acbfcd2428">視覺上的完美漸層 Chromatic</a>，介紹了一個 Sketch plugin 可以用不同色彩系統的漸層來產生更好的視覺效果，之前其實也有注意到這個問題好幾次，就是覺得 CSS gradient 的效果不好，也有注意到一些其他的漸層方法，不過一直沒記錄下來，所以趁這時候把一些資源記錄一下，該篇文章的作者 Samuel 是推薦 Lab 色彩系統的漸層。</p>
<p>目前因為 CSS 就是只有 RGB 漸層，所以要用其他系統的漸層就只能用模擬的，SASS 的話有 <a href="https://github.com/bugsnag/chromatic-sass">chromatic-sass</a>，PostCSS 則是 <a href="https://github.com/larsenwork/postcss-easing-gradients">postcss-easing-gradients</a>，這套背後用的則是首篇文章也有介紹的 <a href="https://vis4.net/chromajs/">chroma.js</a> 來轉換的，不過它其實主要是在做 easing gradient 的，然後還有一些線上的模擬工具可以讓人直接看看效果，第一個其實是 easing gradient 的<a href="https://larsenwork.com/easing-gradients/">工具</a>，其實就是在 easing gradient 標準提案時有人做來讓人體驗的，另一個介面比較不 fancy，但是我覺得比較實用的 <a href="http://davidjohnstone.net/pages/lch-lab-colour-gradient-picker">Lch and Lab colour and gradient picker</a>。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000951" baseName="css-properties-sorting-order">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2019-02-24</b:date>
				<b:time>22:21:27</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>CSS 屬性排序</b:title>
			<b:content>
				<b:summary> 上週在弄 Stylelint 的設定，然後理所當然的處理到屬性排序的問題，以前我是用 CSScomb 的 zen 這組設定， 這組排序規則是從 Zen Coding 那邊來的，它的規則其實應該就是 Concentric CSS 的規則，concentric 是同心的的意思，同心圓的那個同心，這組規則的基本原則就是從外到內，從外部的定位、排版方式、到邊距、外框、內距、寬高等 box model 的屬性，然後才到內文的屬性，這組也是我第一次知道的有系統的 CSS 屬性排序規則，而且我覺得這個規則很直覺，而且也是很有邏輯的設計，所以就一直用到現在了。 最近這次要弄 Stylelint 設定時順便又研究了一下現在主流的排序規則，發現現在 lint tool 如果有內建排序規則的話，一定會有的其實是照字母順序排序，我自己是覺得在 CSS 領域照字母排序根本是 anti-pattern 啦，不過一直都有聽說有些大型企業的專案會用這種排序規則。事實上在 CSS-Tricks 的 Poll Results: How do you order your...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/47191821991/" title="CSS Box by othree, on Flickr"><img src="https://farm8.staticflickr.com/7868/47191821991_667bafc814.jpg" intrinsicsize="455x340" width="455" height="340" alt="CSS Box" srcset="https://farm8.staticflickr.com/7868/47191821991_667bafc814.jpg 455w" /></a></p>
<p>上週在弄 <a href="https://stylelint.io/">Stylelint</a> 的設定，然後理所當然的處理到屬性排序的問題，以前我是用 CSScomb 的 <a href="https://github.com/csscomb/csscomb.js/">zen</a> 這組設定， 這組排序規則是從 <a href="https://github.com/pepelsbey/zen-coding-snippets/blob/master/CSS%20Sorting.md">Zen Coding</a> 那邊來的，它的規則其實應該就是 <a href="https://rhodesmill.org/brandon/2011/concentric-css/">Concentric CSS</a> 的規則，concentric 是同心的的意思，同心圓的那個同心，這組規則的基本原則就是從外到內，從外部的定位、排版方式、到邊距、外框、內距、寬高等 box model 的屬性，然後才到內文的屬性，這組也是我第一次知道的有系統的 CSS 屬性排序規則，而且我覺得這個規則很直覺，而且也是很有邏輯的設計，所以就一直用到現在了。</p>
<p>最近這次要弄 Stylelint 設定時順便又研究了一下現在主流的排序規則，發現現在 lint tool 如果有內建排序規則的話，一定會有的其實是照字母順序排序，我自己是覺得在 CSS 領域照字母排序根本是 anti-pattern 啦，不過一直都有聽說有些大型企業的專案會用這種排序規則。事實上在 CSS-Tricks 的 <a href="https://css-tricks.com/poll-results-how-do-you-order-your-css-properties/">Poll Results: How do you order your CSS properties?</a> 的這篇文章，裡面就有 14% 的人是使用字母排序，當年還是 2012，2017 年 SitePoint 的<a href="https://www.sitepoint.com/results-ultimate-css-survey-2017/">調查結果</a> 其實沒有很大改變，變成 13%，所以雖然我覺得 anti-pattern 但其實還是有一定比例的人真的這樣用，其實要說的話也還是有好處啦，因為其它的屬性排序規則都是有個基本原則，實際上要仔細排列所有屬性的時候都還是有可能會有些地方有灰色地帶。</p>
<p>最高比例的排序方法則是照屬性類型分類，照屬性分類其實算是比較籠統的說法，Concentric CSS 的排序規則也算是照屬性分類的，同樣符合這樣條件的另外還有 Nicolas 的 <a href="https://github.com/necolas/idiomatic-css#declaration-order">Idomatic CSS</a> 和 Jonathan Snook 的 <a href="https://smacss.com/book/formatting#grouping">SMACSS</a> 的排序規則，其實這兩種方法的大方向也和 Concentric 的很接近，雖然是分成幾個大類別，但是大類別的排序基本上一樣是從外到內的方向，然後根據 npm 的<a href="https://www.npmjs.com/package/stylelint-config-property-sort-order-smacss">安裝數字</a>，目前使用度最高的應該是 SMACSS 的排序建議了吧，細部的完整排序可以在 Stylelint plugin package 的 <a href="https://github.com/cahamilton/css-property-sort-order-smacss/blob/master/index.js">repo</a> 那邊看到。而除了 Stylelint 之外，PostCSS 也有 plugin 叫 <a href="https://www.npmjs.com/package/css-declaration-sorter">css-declaration-sorter</a> 來幫你排，也內建了 <a href="https://github.com/Siilwyn/css-declaration-sorter/blob/master/orders/concentric-css.json">Concentric CSS</a> 和 <a href="https://github.com/Siilwyn/css-declaration-sorter/blob/master/orders/smacss.json">SMACSS</a>，而且該 plugin 還號稱：</p>
<ul>
<li>Up-to-date CSS properties fetched from the <a href="https://developer.mozilla.org/">MDN Web Platform</a>.</li>
<li>Thought-out sorting orders out of the box, <strong>approved by their authors</strong>.</li>
</ul>
<p>感覺很不錯的樣子，它們的完整排序清單也可以在 repo 內找到：<a href="https://github.com/Siilwyn/css-declaration-sorter/blob/master/orders/smacss.json">SMACSS</a>、<a href="https://github.com/Siilwyn/css-declaration-sorter/blob/master/orders/concentric-css.json">Concentric CSS</a>，不過排序這東西應該還是要在 lint 的時候做啊，PostCSS 的產出物通常是 production 環境用的 code 了，只是 stylelint 那邊用的排序清單和這邊的又不同，不過其實 <a href="https://stylelint.io/user-guide/postcss-plugin/">Stylelint</a> 和 <a href="https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-postcss-sorting">VSCode</a> 都可以拿 PostCSS 的來用的樣子，還沒測試過就是～</p>
<p>最後提兩個 Concentric CSS 灰色地帶的問題：</p>
<ol>
<li>Grid、 column、 flex、 float 這幾個屬性你會怎麼排呢～？</li>
<li>如果 <code>box-sizing: border-box;</code> 設下去後，width/height 要放在 padding 前面還後面呢？</li>
</ol>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000902" baseName="svg">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-07-29</b:date>
				<b:time>11:14:28</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>SVG</b:title>
			<b:content>
				<b:summary> 最近網站的 icon 都盡量改用 SVG 向量檔了，網路上也有不少資源，像是 Material Icons，累積了一些心得可以記錄一下，其實早在 GitHub 開使用 icon font 之前，大部分的瀏覽器就都有支援 SVG 了，只不過當時的支援還不夠完備，會各自有一些問題，這應該也是 Github 當年不先用 SVG，而是用 icon font 先檔了幾年的主因，總之現在比較不用擔心這些問題了，所以 GitHub 又開槍轉用 SVG icon 了。 GitHub 的用法是 inline SVG 為主，我自己則是用 &lt;picture&gt; 比較多： &lt;picture&gt; &lt;source srcset=&quot;/path/to/icon.svg&quot; type=&quot;image/svg+xml&quot;&gt; &lt;img src=&quot;/path/to/icon.png&quot; alt=&quot;&quot;...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35882767130/" title="SVG by othree, on Flickr"><img src="https://farm5.staticflickr.com/4300/35882767130_abb5a7e7b3_b.jpg" width="1024" height="782" alt="SVG" srcset="https://farm5.staticflickr.com/4300/35882767130_2848f09cbc_k.jpg 2x" /></a></p>
<p>最近網站的 icon 都盡量改用 SVG 向量檔了，網路上也有不少資源，像是 <a href="https://material.io/icons/">Material Icons</a>，累積了一些心得可以記錄一下，其實早在 GitHub 開使用 icon font 之前，大部分的瀏覽器就都有支援 SVG 了，只不過當時的支援還不夠完備，會各自有一些<a href="http://voormedia.com/blog/2012/10/creating-svg-vector-graphics-for-maximum-browser-compatibility">問題</a>，這應該也是 Github 當年不先用 SVG，而是用 icon font 先檔了幾年的主因，總之現在比較不用擔心這些問題了，所以 GitHub 又開槍轉用 SVG icon 了。</p>
<p>GitHub 的用法是 inline SVG 為主，我自己則是用 <code>&lt;picture&gt;</code> 比較多：</p>
<pre><code class="language-html">&lt;picture&gt;
  &lt;source srcset=&quot;/path/to/icon.svg&quot; type=&quot;image/svg+xml&quot;&gt;
  &lt;img src=&quot;/path/to/icon.png&quot; alt=&quot;&quot; width=&quot;32&quot; height=&quot;32&quot; /&gt;
&lt;/picture&gt;
</code></pre>
<p>CSS Trick 有一篇文章 <a href="https://css-tricks.com/a-complete-guide-to-svg-fallbacks/">A Complete Guide to SVG Fallbacks</a> 則介紹了各種在網頁內放入 SVG 圖檔的古老方法，用 <code>&lt;picture&gt;</code> 是比較新的，沒列在其中，而我是為了向下相容選擇用 <code>&lt;picture&gt;</code>，因為支援<code>&lt;picture&gt;</code>標籤的瀏覽器都很新了，對於 SVG 的支援度很夠，剩下少數（大概都是 IE）就讓他直接吃 png 之類的（PS: pngquant 處理過的 PNG 很多可以直接在 IE6 上顯示透明色），這樣用起來就像是一般 <code>&lt;img&gt;</code> 一樣，SVG 檔可以先用 <a href="https://github.com/svg/svgo">svgo</a> 工具處理過，除此之外，我通常會先用 Adobe Illustrator 把不必要的圖層階層刪除，圖層在 SVG 原始碼裡面通常是會 <code>&lt;g&gt;</code> 標籤，另外也記得要把圖層名稱（id）改成 ASCII only 的名稱，甚至直接編輯原始碼刪除 id，因為 svgo 不會處理這部分。</p>
<p>用外部 SVG 檔案好處是可以善用 browser cache 減少傳輸量，尤其是大量重複使用的圖片，不過也會犧牲一些 SVG 的特性，例如會因此不能直接用 CSS 來調整樣式，做 transition，做動畫等等，所以有時候也是會用 inline SVG，就可以搭配 CSS、JS 弄出很多不錯的效果（Safari 偶爾還有遇到無解 bug），不過要讓 inline SVG fallback 回一般圖片就比較麻煩些了，在做這件事之前可以先看一下是不是有需要<a href="http://caniuse.com/#feat=svg-html5">支援</a>，以前是 iOS 不支援，現在還有機會碰到的大概還是 IE（6-8）吧，總之，如果有需要的話，就是參考 CSS Trick 的 <a href="https://css-tricks.com/svg-fallbacks/">SVG Fallbacks</a> 這篇文章，使用</p>
<pre><code class="language-html">&lt;svg width=&quot;96&quot; height=&quot;96&quot;&gt;
  &lt;image xlink:href=&quot;svg.svg&quot; src=&quot;svg.png&quot; width=&quot;96&quot; height=&quot;96&quot; /&gt;
&lt;/svg&gt;
</code></pre>
<p>這是個很有趣的技巧，首先 <code>&lt;image&gt;</code> 標籤是<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image">合法的 SVG 元素</a>，所以放在 SVG 不成問題，但是不支援 SVG 的瀏覽器，照理說也不應該認得 <code>&lt;image&gt;</code> 標籤啊，其實，<code>&lt;image&gt;</code> 在很久以前就一直是 <code>&lt;img&gt;</code> 的別名了，甚至在 WHATWG 的 parse HTML 文件的<a href="https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inbody">流程</a>裡都還有提到處理的方式，而經過測試也都證實了以前的瀏覽器確實是這樣的行為，文裡也有各瀏覽器的行為和支援狀況，不支援 inline SVG 的就會顯示替代的 png 或 jpg 。</p>
<p>文章裡面還有提到背景圖使用 SVG 的處理方式，不過因為我沒這樣使用，所以沒什麼實做到，另外最近也有人用外部 SVG 加上 CSS filter 來改變 <a href="https://codepen.io/noahblon/post/coloring-svgs-in-css-background-images">SVG icon 顏色</a>，不過這太技巧太新了，考慮到支援度我也是沒有用過。</p>
<p>親和力問題的部分，一樣 CSS Tricks 有篇文章 <a href="https://css-tricks.com/accessible-svgs/">Accessible SVG</a> 在講相關的作法，像是用 <code>&lt;title&gt;</code> 加替代文字，加上 <code>role=&quot;img&quot;</code> 等；如果要自己編寫 SVG，W3C 還有份 <a href="http://w3c.github.io/svgwg/specs/svg-authoring/">Authering Guide</a> 可以參考，除了親和力相關的資訊外還有不少技巧可以參考。</p>
<p>最後整理一下，拿到 svg 檔案後我的處理過程：</p>
<ol>
<li>用 Adobe Illustrator 先開來整理一下，修改圖層名稱、刪去合併不必要的圖層</li>
<li>輸出成 SVG 和 1x 解析度的 PNG</li>
<li>SVG 檔用 <code>svgo</code> 最佳化、PNG 會用 <code>pngquant</code> 和 <code>zopflipng</code> 處理過</li>
</ol>
<p>使用方式則還是當成一般外部圖片為主，需要動畫效果才會用 inline SVG。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

		<b:entry entryID="000901" baseName="form-practice">
			<b:author>
				<b:authorName>othree</b:authorName>
				<b:authorEmail>othree@gmail.com</b:authorEmail>
				<b:authorUrl></b:authorUrl>
			</b:author>
			<b:datetime>
				<b:date>2017-06-13</b:date>
				<b:time>22:42:42</b:time>
			</b:datetime>
			<b:category>css-html</b:category>
			<b:title>表單 Practice</b:title>
			<b:content>
				<b:summary> 這邊是我最近對於表單的一些作法，因為內化還不夠，每次都會漏掉一些，所以花了些時間整理整理，適合的情境不是 single page application 就是了，比較偏傳統形式網頁的表單，然後可能也包括不少大家早就知道(?)的細節就是了。 首先，我現在偏好不用 JavaScript 做表單檢查，而是先做好最基本的 server side 檢查，然後加上 HTML5 的表單檢查，會這樣決定的主因是： JavaScript 的表單檢查 library 用起來都不太順手，而且不想花時間處理串接，且能少點 library 總是好的； 幾個常用的 type，像是 email, url 比較不需要擔心檢查的 pattern 有不周全的地方，我想很多人都有上網搜尋過這些欄位的 regular expression pettern 的經驗； 支援度已經不是大問題了，事實上我的工作上還需要支援 IE 10, 9 之類的，其實這些非 modern browser 的量都已經非常少了，所以就靠個 server...</b:summary>
				<b:mainContent><p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34947056856/" title="Form Validation by othree, on Flickr"><img src="https://farm5.staticflickr.com/4274/34947056856_e1ae234f6c_b.jpg" width="500" height="270" alt="Form Validation" srcset="https://farm5.staticflickr.com/4274/34947056856_e1ae234f6c_b.jpg 500w" /></a></p>
<p>這邊是我最近對於表單的一些作法，因為內化還不夠，每次都會漏掉一些，所以花了些時間整理整理，適合的情境不是 single page application 就是了，比較偏傳統形式網頁的表單，然後可能也包括不少大家早就知道(?)的細節就是了。</p>
<p>首先，我現在偏好不用 JavaScript 做表單檢查，而是先做好最基本的 server side 檢查，然後加上 <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation">HTML5 的表單檢查</a>，會這樣決定的主因是：</p>
<ol>
<li>JavaScript 的表單檢查 library 用起來都不太順手，而且不想花時間處理串接，且能少點 library 總是好的；</li>
<li>幾個常用的 type，像是 email, url 比較不需要擔心檢查的 pattern 有不周全的地方，我想很多人都有上網搜尋過這些欄位的 regular expression pettern 的經驗；</li>
<li>支援度已經不是大問題了，事實上我的工作上還需要支援 IE 10, 9 之類的，其實這些非 modern browser 的量都已經非常少了，所以就靠個 server side 檢查對付他們就好，使用體驗稍微差一點也還可以接受，這也是種 graceful degradation（優雅降級）；</li>
<li>HTML5 的表單檢查可以說是 web developer 當年對抗網路標準發展遲緩一大勝利指標，當然應該要好好用一下。</li>
</ol>
<p>而用 HTML5 表單檢查還有個意外的好處是基本的錯誤訊息自動有翻譯（看使用者瀏覽器的語言），另外如果有自製的輸入元件，也有 <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validating_forms_using_JavaScript">API</a> 可以串接，當然訊息就要自己提供就是了。</p>
<p>用 HTML5 表單檢查當然也不是完全沒有問題，例如目前 email 欄位還沒有瀏覽器支援 <a href="https://github.com/w3c/html/issues/538">IDN domain 的信箱</a>；另外就是上傳檔案的 file input 的值不能從 server 端直接給，這限制是因為會有安全性問題，而這限制所衍生的問題是：表單送到 server side 檢查後發現有錯誤時（例如 captcha 錯），使用者就一定要重新選取上傳的檔案，對於使用者體驗算是個扣分（而且上傳檔案大的話很花時間，然後另外還有個上傳檔案大小限制、就又是另外一個議題了），要解決這問題一般來說就是靠 JavaScript 做些加強，例如針對 captcha 可以先用 ajax call 檢查 captcha ，正確的話就換個 session token 之類的回來，不過即使這樣，還是逃不了完整的 server side 表單檢查，所以也還要處理 ajax submit 後的表單錯誤訊息顯示。</p>
<p>不管是 server side 檢查後產生的錯誤訊息，還是 ajax call 之前檢查產生的錯誤訊息，理所當然都會放在欄位附近，不過還要讓訊息和欄位之間建立關聯，才好進一步做一些處理，例如使用者有更新欄位值之後會把錯誤訊息隱藏之類的，或許很多人會用父層 DOM 節點加上特殊的 class 包起來找，不過我比較偏好用 <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute"><code>aria-describedby</code></a>，大概會看起像是：</p>
<pre><code class="language-html">&lt;input id=&quot;mail&quot; name=&quot;mail&quot; type=&quot;email&quot; aria-describedby=&quot;mail-field-info&quot; /&gt;
&lt;span id=&quot;mail-field-info&quot;&gt;Required field!&lt;/span&gt;
</code></pre>
<p>這樣只要找的到 <code>#mail</code> 欄位，就可以透過他的 <code>aria-describedby</code> 屬性找到該欄位的相關訊息的 DOM 節點，另外值得注意的是，aria-describedby 值的格式是 <a href="https://www.w3.org/TR/wai-aria/states_and_properties#valuetype_idref_list">IDRefList</a>，不是單一個 ID，而是一個用空白切分的 ID 指標們，所以如果有這種情形，還可以在錯誤訊息的那個 DOM 節點加上  <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role"><code>role=&quot;alert&quot;</code></a> 給它用來辨識，其實就算只有一個 ID 也還是可以加上 role 屬性啦。如果真的需要用透過父層 DOM 節點來找的話，之前研究的結論是可以在預期的父層標籤用 <code>role=&quot;section&quot;</code>來方便定位，用 jQuery 大概會像是：</p>
<pre><code class="language-javascript">$fieldSection = $field.closest('[role=&quot;section&quot;]');
</code></pre>
<p>這個標籤下應該會包括欄位的標籤（label）、欄位的 input element 以及相關的資訊（說明、錯誤訊息）等。</p>
<p>另外還有一點，就是要用 ajax 上傳檔案的話，需要有支援 <a href="http://caniuse.com/#feat=xhr2">FormData</a> 的瀏覽器，並且如果用 jQuery 送 FormData 的話記得要加點設定：</p>
<pre><code class="language-javaascript">contentType: false,
processData: false
</code></pre>
<p>還有就是 ajax 送表單的目標 URL，我目前比較喜歡的作法是讀 <code>&lt;form&gt;</code> 的 <code>action</code> 屬性，也就是和瀏覽器自己送的 URL 一樣，然後透過 HTTP content negotiation 機制來決定回傳的格式，比較正確的作法是看 <code>Accept</code>，以 jQuery 來說，如果要 server 回 JSON 格式的話，可以加上：</p>
<pre><code class="language-javascript">dataType: 'json'
</code></pre>
<p>這樣送出的 request 就會帶上正確的 <code>Accept</code> header，向 server 端要求 <code>application/json</code> ，不過 <code>Accept</code> 的值解析起來比較麻煩些，其實是可以送出說 client 端可以接受多種格式，然後還加上個優先度的，也因此也有很多人是看 <code>X-Requested-With</code>，一般 library 如果是透過 XHR 發的 request 都會有這個 header；還有就是送出的資料格式（Content-Type），即使是 ajax call，我目前也都不用 JSON 了，還是用 <code>application/x-www-form-urlencoded</code> 為主，另外要上傳檔案的話當然一定要用 <code>multipart/form-data</code>，主要是因為：</p>
<ol>
<li>送 JSON 的話就不會是 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Simple_requests">simple request</a> 了，有些時候會比較麻煩，例如 Cross Origin 時會需要發 preflight，然後就可能遇到 AWS 以前不支援 preflight request 的 bug；</li>
<li>用這幾個老的 Content-Type 支援度還是比較高，對於 server 端實做和 client 端實做其實都相對友善一點，例如 jQuery 預設就依然是 form-urlencoded，没特别需求還是用標準一點的格式，特殊需求是例如 GraphQL，不過一般表單發送應該不會走 GraphQL 吧。</li>
</ol>
<p>其實 JSON 雖然已經有 RFC 規範了，不過在 Web 標準的世界還沒相當深入內化，不知道以後有沒有機會更加的內化整合進去。</p>
<p>前面有提到 ajax call 送出的目標 URL 我會偏好從，<code>&lt;form&gt;</code> 裡面讀，不過或許有的情境會讓 ajax call 必須要自己用不一樣的 API URL，這時候我建議還是把 API URL 寫在 <code>&lt;form&gt;</code> 的屬性裡面，這樣可以讓 JavaScript 的邏輯比較乾淨，也不用作什麼 mapping 或是常數來儲存 API 的 URL，維護修改時也不用兩邊檢查，屬性名稱可以用例如：<code>data-action</code> 之類的屬性，<code>data-*</code>屬性正好適合來做這些事情，不但有 DOM API 支援，jQuery 也可以用 <code>.data()</code> method 來讀取，命名上，如果覺得有個標準參考比較好，可以看看 <a href="https://github.com/rails/jquery-ujs">jQuery-ujs</a> 的設計，雖然比較長一點，它用的是：<a href="https://github.com/rails/jquery-ujs/blob/master/src/rails.js#L117"><code>data-ujs:submit-button-formaction</code></a>，我是覺得有些不正確啦，畢竟要送出表單不一定是點擊 submit button。</p>
<p>其實假設送出表單的動作都是滑鼠點擊 submit button 這是個親和力問題，如果只把 ajax call 送的函式 bind 在 submit button 的 click 事件上，這其實是不太好的，因為其實瀏覽器預設的行為是可以在很多地方用鍵盤送出表單，例如在 text input 上按下 Enter 鍵，或是在 submit button 上按下空白鍵之類的，所以針對表單還是要去 bind form submit 事件才是正解，至於 jQuery-ujs，其實也是這樣做的，它是用 delegate event 的形式去監聽傳遞到 document 上的 submit 事件，然後才去做後續的處理，只是命名上讓人覺得不太正確。</p>
<p>最後一項，前面說不用 JavaScript 做表單檢查（不看自訂輸入元件的話），其實有一個例外，就是上傳檔案的大小檢查，因為沒做對使用體驗的影響比較大，然後就是要還要記得針對 ajax call 送表單加上 <a href="https://tools.ietf.org/html/rfc7231#section-6.5.11">HTTP 413</a> Status Code 的錯誤訊息處理。</p>
</b:mainContent>
				<b:extendContent></b:extendContent>
			</b:content>


		</b:entry>

	</b:entries>
</b:blog>
