<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>O3noBLOG - css-html</title>
<link>http://blog.othree.net//log/ css-html/</link>
<description></description>
<copyright>Copyright 2012</copyright>
<lastBuildDate>2012-11-02 11:07</lastBuildDate>
<generator>http://www.movabletype.org/?v=4.38</generator>
<docs>http://blogs.law.harvard.edu/tech/rss</docs> 


<item>
<title>Open Graph Protocol, Twitter Card</title>
<description><![CDATA[<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8146654174/" title="Flickr 上 othree 的 Twitter Card from 影像紀錄區"><img src="http://farm9.staticflickr.com/8332/8146654174_48699279f9.jpg" width="422" height="500" alt="Twitter Card from 影像紀錄區" /></a></p>

<p>大部分人應該都會有注意到，Facebook 上在分享網誌的時候，會顯示出該網頁的文章摘要以及圖片的縮圖，一般的情形，這是 Facebook 的機器人去分析網頁後，抓出來的資訊，不過對於網站主人來說，其實是可以主動提供這些資訊的，也就是說你可以提供不一樣的網頁標題，摘要內容和要顯示的縮圖給 Facebook 的讀者，Facebook 在 2011 年的 F8 中發表了一個新的 <a href="http://ogp.me/">Open Graph Protocol</a>，藉由預先定義好的 meta 標籤來提供這些可以給 Facebook 機器人接收的資訊，使用上很簡單，就是插入一組 meta 標籤在 head 裡面，看起來如下：</p>

<pre><code>&lt;meta property="og:title" content="Device Pixel Ratio" /&gt;
&lt;meta property="og:url" content="http://blog.othree.net/log/2012/10/28/device-pixel-ratio/" /&gt;
&lt;meta property="og:type" content="article" /&gt;
&lt;meta property="og:description" content=" 這兩天又對 blog 做了一些加強..." /&gt;
&lt;meta property="og:image" content="http://farm9.staticflickr.com/8463/8128174518_387a27b3dd.jpg" /&gt;
</code></pre>

<p>這組標籤放在你的 head 裡面，如果有人在分享的 facebook 上分享的話，看起來就如下圖：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8146662104/" title="Flickr 上 othree 的 Facebook Open Graph Protocol"><img src="http://farm9.staticflickr.com/8191/8146662104_50ff447a3b.jpg" width="500" height="183" alt="Facebook Open Graph Protocol" /></a></p>

<p>Open Graph Protocol 定義的標籤很好理解，也沒有複雜的結構，所以對於開發人員是非常友善，不過其實我是不太樂觀其成的，主要原因是我覺得它是個被 Facebook 控制的封閉標準，網路標準的發展最不希望發生的就是某個標準受至於特定的人或公司，不過其實一年過後的今天，我對 Open Graph Protocol 有改觀不少，也讓我願意在自己的網站上加入這樣的標籤，會讓我改觀的原因有兩個，一是雖然 Facebook 沒有明說過，不過 Open Graph Protocol 的網站上其實是一點 Facebook 的色彩都沒有的，如果不知道前因後果的話，其實不容易發現這套格式是由他們家提出，這讓我覺得他們有希望把這個格式推出去，而不是只限於 Facebook 使用，當然這一切可能都是商業陰謀，所以直到 Twitter 推出了 <a href="https://dev.twitter.com/docs/cards">Twitter Cards</a> 之前，我都還是不敢貿然進場。</p>

<p>今年 Twitter 推出一項新的 API 規格，叫做 Twitter Cards，可以把他想成是 Open Graph Protocol 的 Twitter 版，meta 標籤的部分看起來就像：</p>

<pre><code>&lt;meta name="twitter:card" content="summary" /&gt;
&lt;meta name="twitter:title" content="Device Pixel Ratio" /&gt;
&lt;meta name="twitter:url" content="http://blog.othree.net/log/2012/10/28/device-pixel-ratio/" /&gt;
&lt;meta name="twitter:description" content=" 這兩天又對 blog 做了一些加強..." /&gt;
&lt;meta name="twitter:image" content="http://farm9.staticflickr.com/8463/8128174518_387a27b3dd.jpg" /&gt;
</code></pre>

<p>這張 Twitter Card 結果會在 Twitter 呈現成如下圖的樣子：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8146619231/" title="Flickr 上 othree 的 Twitter Card Preview"><img src="http://farm9.staticflickr.com/8193/8146619231_4c368a50d9.jpg" width="464" height="500" alt="Twitter Card Preview" /></a></p>

<p>Twitter Cards 基本上也和 Open Graph Ptotocol 一樣定義了整套相近的標籤屬性，像是 title, desciption, url, image 等就是兩種規格都有的屬性，而最讓我意外的一件事情是，Twitter Card 相容於 Open Graph Protocol，大部分兩種規格都有的屬性，Twitter Cards 都可以支援 Open Graph Protocol 已經寫好的 meta 標籤，所以我如果要同時支援 Twitter 和 Open Graph 不用兩套重複的內容都寫出來，只要先寫 Open Graph Protocol，然後再把 Twitter 不足的部分補上去就可以了：</p>

<pre><code>&lt;meta name="twitter:card" content="summary" /&gt;
&lt;meta property="og:title" content="Device Pixel Ratio" /&gt;
&lt;meta property="og:url" content="http://blog.othree.net/log/2012/10/28/device-pixel-ratio/" /&gt;
&lt;meta property="og:type" content="article" /&gt;
&lt;meta property="og:description" content=" 這兩天又對 blog 做了一些加強..." /&gt;
&lt;meta property="og:image" content="http://farm9.staticflickr.com/8463/8128174518_387a27b3dd.jpg" /&gt;
</code></pre>

<p>其實這樣的相容是可以用語意網的觀念來解釋的，在語意網的世界中，描述事物的框架和事物本身的說明與資訊兩者是分開的，前者基本上是 RDF 標準，在這篇文章的例子就只是簡單的 meta 標籤，而後者也稱為知識本體（ontology），兩者基本上是完全獨立，而知識本體包括了語彙以及語彙之間的關係，在 Open Graph Protocol 中，像是 <em>og:title</em>, <em>og:type</em>, <em>og:decrition</em> 等都是屬於知識本體的語彙，分別有著標題、類別和敘述的意義，而 Twitter Cards 則是瞭解兩者間語彙的關係，建立了像是 <code>og:title = twitter:title</code>, <code>og:description = twitter:description</code> 這樣的關係，因此兩種屬性就是等價的存在。</p>

<p>語意網的部分就先到這部分暫停，下一篇繼續介紹些新東西，回到 Open Graph Protocol，其實我對他有些不滿意的地方，就是 title, description 和 url 這三個屬性，其實在 HTML 裡已經早就有定義好的地方會記錄了，title 當然就是 title 標籤， description 就是 meta description，url 則是 <a href="http://blog.othree.net/log/2011/03/03/canonical-url/">canonical url</a>，不瞭解是什麼原因才讓他們捨棄使用既有的資訊，結果是雖然 Twitter Cards 相容 Open Graph Protocol，但是網頁的 meta data 還是會有重複的資料，實在很可惜，當然我想到一個可能性，就是語意網的支援。</p>

<p>另外一個要提的就是兩個規範都有開發用的預覽工具，分別是 <a href="https://developers.facebook.com/tools/debug">Facebook Object Debugger</a> 和 <a href="https://dev.twitter.com/docs/cards/preview">Twitter Cards Preview Tool</a>，Facebook 對 Open Graph Protocol 的支援是完全開放的，不過 Twitter Cards 目前是白名單機制，似乎是有計畫要完全開放，不過沒有時程，目前是要先申請，台灣我目前只知道 <a href="https://twitter.com/toomore">@Toomore</a> 的 <a href="http://pi.isuphoto.org/">影像紀錄區</a> 申請有過，所以如果有人分享影像紀錄區的作品的話，在 Twitter 上就可以直接預覽到照片了！</p>
]]>
</description>
<link>http://blog.othree.net/log/2012/11/02/opengraph-protocol-twitter-card/</link>
<guid>http://blog.othree.net/log/2012/11/02/opengraph-protocol-twitter-card/</guid>
<category>css-html</category>
<pubDate>2012-11-02 11:07</pubDate>
</item>

<item>
<title>WHATWG and W3C 版 HTML5 分家</title>
<description><![CDATA[<p>WHATWG Blog 兩週前發出的 <a href="http://blog.whatwg.org/html-and-html5">文章</a> 正式宣告 WHATWG 和 W3C 的 HTML5 分家了，主編 Ian Hickson 有在 mainling list 發出一篇比較完整的 <a href="http://lists.w3.org/Archives/Public/public-whatwg-archive/2012Jul/0119.html">說明</a> ，主要還是兩邊方向不一樣，不過這篇文章也把一些過去的事情說的比較清楚，像是 WHATWG 的標準以前正式名稱是 Web Application，HTML5 只是別名，而現在的本版正式名稱則改成 <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/">HTML Living Standard</a> ，還有把裡面一些標準拆分成子標準則是 W3C 那邊這樣做，WHATWG 則是一直維持全部東西塞在一起的作法，而最重要的差異，當然還是 WHATWG 不會讓 HTML 標準穩定下來，未來會有一個確定版本的 HTML5 會是 W3C 的， WHATWG 版的會隨時更新，只要有新需求，有錯誤。</p>
]]>
</description>
<link>http://blog.othree.net/log/2012/08/05/whatwg-and-w3c-html5/</link>
<guid>http://blog.othree.net/log/2012/08/05/whatwg-and-w3c-html5/</guid>
<category>css-html</category>
<pubDate>2012-08-05 10:23</pubDate>
</item>

<item>
<title>WAI-ARIA is More Than Accessibility</title>
<description><![CDATA[<p>
<script async="async" class="speakerdeck-embed" data-id="4e8134522d853c00600030bd" data-ratio="1.3333333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</p>

<p>這次 COSCUP 分享題目的投影片，授權一樣是 CC-BY，有沒有講者心得就看天了。</p>
]]>
</description>
<link>http://blog.othree.net/log/2011/08/26/wai-aria-is-more-than-acc/</link>
<guid>http://blog.othree.net/log/2011/08/26/wai-aria-is-more-than-acc/</guid>
<category>css-html</category>
<pubDate>2011-08-26 01:28</pubDate>
</item>

<item>
<title>Markdown 介紹與文件</title>
<description><![CDATA[<p>之前寫過一篇 <a href="http://blog.othree.net/log/2011/03/08/markdown-syntax/">文章</a> 介紹了一下 Markdown，其實那時候我就已經在翻譯它的 <a href="http://daringfireball.net/projects/markdown/syntax">文件</a> 了（類似 BSD 的 License，所以應該是可以自由翻譯吧:P），最近才差不多完成，除了完整文件外，我還把簡介語法的那篇 <a href="http://daringfireball.net/projects/markdown/basics">文章</a> 也翻譯了，全文就放在繼續閱讀裡，建議大家可以先看看這篇本文再去看完整的中文版文件。</p>

<ul>
<li>Markdown 文件中文版： <a href="http://markdown.tw/">markdown.tw</a> 。</li>
</ul>

<p>喔，對了，現在缺人潤稿，然後東西都放在 <a href="https://github.com/othree/markdown-syntax-zhtw">github</a> 上，如果你有發現什麼問題可以上去開 issue，網頁本身也是用 github pages 來 host ，只有 domain 是我花錢買的:P。</p>
]]><![CDATA[<h4>Markdown 的語法要領</h4>

<p>這頁提供了 Markdown 簡單的概觀給想使用的人， <a href="http://markdown.tw" title="Markdown Syntax">語法說明</a> 頁提供了完整詳細的文件，說明每項功能，但是 Markdown 其實很簡單就可以上手，這頁文件提供了一些範例，並且每個範例都有提供輸出的 HTML 結果。</p>

<p>其實直接試試看也是一個很不錯的方法， <a href="http://daringfireball.net/projects/markdown/dingus" title="Markdown Dingus">Dingus</a> 是一個網頁應用程式，讓你可以把你的 Markdown 文件轉成 XHTML。</p>

<p><strong>Note:</strong> 這份文件本身也是用 Markdown 寫的，你也可以看看 <a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/basics.md">它的原始碼</a></p>

<h4>段落、標題、區塊程式碼</h4>

<p>一個段落是由一個以上的連接的行句組成，而一個以上的空行則會切分出不同的段落（空行的定義是顯示上看起來像是空行，就被視為空行，例如有一行只有空白和 tab，那該行也會被視為空行），一般的段落不需要用空白或斷行縮排。</p>

<p>Markdown 支援兩種標題的語法，[Setext] [1] 和 [atx] [2] 形式。Setext 形式是用底線的形式，利用 <code>=</code> （最高階標題）和 <code>-</code> （第二階標題），Atx 形式在行首插入 1 到 6 個 <code>#</code> ，對應到標題 1 到 6 階。</p>

<p>區塊引言則使用 email 形式的 '<code>&gt;</code>' 角括號。</p>

<p>Markdown:</p>

<pre><code>A First Level Header
====================

A Second Level Header
---------------------

Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.

The quick brown fox jumped over the lazy
dog's back.

### Header 3

&gt; This is a blockquote.
&gt; 
&gt; This is the second paragraph in the blockquote.
&gt;
&gt; ## This is an H2 in a blockquote
</code></pre>

<p>輸出：</p>

<pre><code>&lt;h1&gt;A First Level Header&lt;/h1&gt;

&lt;h2&gt;A Second Level Header&lt;/h2&gt;

&lt;p&gt;Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.&lt;/p&gt;

&lt;p&gt;The quick brown fox jumped over the lazy
dog's back.&lt;/p&gt;

&lt;h3&gt;Header 3&lt;/h3&gt;

&lt;blockquote&gt;
    &lt;p&gt;This is a blockquote.&lt;/p&gt;

    &lt;p&gt;This is the second paragraph in the blockquote.&lt;/p&gt;

    &lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;
&lt;/blockquote&gt;
</code></pre>

<h5>修辭和強調</h5>

<p>Markdown 使用星號和底線來標記需要強調的區段。</p>

<p>Markdown:</p>

<pre><code>Some of these words *are emphasized*.
Some of these words _are emphasized also_.

Use two asterisks for **strong emphasis**.
Or, if you prefer, __use two underscores instead__.
</code></pre>

<p>輸出:</p>

<pre><code>&lt;p&gt;Some of these words &lt;em&gt;are emphasized&lt;/em&gt;.
Some of these words &lt;em&gt;are emphasized also&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Use two asterisks for &lt;strong&gt;strong emphasis&lt;/strong&gt;.
Or, if you prefer, &lt;strong&gt;use two underscores instead&lt;/strong&gt;.&lt;/p&gt;
</code></pre>

<h5>清單</h5>

<p>無序清單使用星號、加號和減號來做為清單的項目標記，這些符號是都可以使用的，使用星號：</p>

<pre><code>*   Candy.
*   Gum.
*   Booze.
</code></pre>

<p>加號：</p>

<pre><code>+   Candy.
+   Gum.
+   Booze.
</code></pre>

<p>和減號</p>

<pre><code>-   Candy.
-   Gum.
-   Booze.
</code></pre>

<p>都會輸出：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;Candy.&lt;/li&gt;
&lt;li&gt;Gum.&lt;/li&gt;
&lt;li&gt;Booze.&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>有序的清單則是使用一般的數字接著一個英文句點作為項目標記：</p>

<pre><code>1.  Red
2.  Green
3.  Blue
</code></pre>

<p>輸出：</p>

<pre><code>&lt;ol&gt;
&lt;li&gt;Red&lt;/li&gt;
&lt;li&gt;Green&lt;/li&gt;
&lt;li&gt;Blue&lt;/li&gt;
&lt;/ol&gt;
</code></pre>

<p>如果你在項目之間插入空行，那項目的內容會備用 <code>&lt;p&gt;</code> 包起來，你也可以在一個項目內放上多個段落，只要在它前面縮排 4 個空白或 1 個 tab 。</p>

<pre><code>*   A list item.

    With multiple paragraphs.

*   Another item in the list.
</code></pre>

<p>輸出：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;
&lt;p&gt;With multiple paragraphs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<h5>連結</h5>

<p>Markdown 支援兩種形式的連結語法： <em>行內</em> 和 <em>參考</em> 兩種形式，兩種都是使用角括號來把文字轉成連結。</p>

<p>行內形式形式是直接在後面用括號直接接上連結：</p>

<pre><code>This is an [example link](http://example.com/).
</code></pre>

<p>輸出：</p>

<pre><code>&lt;p&gt;This is an &lt;a href="http://example.com/"&gt;
example link&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<p>你也可以選擇性的加上 title 屬性：</p>

<pre><code>This is an [example link](http://example.com/ "With a Title").
</code></pre>

<p>輸出：</p>

<pre><code>&lt;p&gt;This is an &lt;a href="http://example.com/" title="With a Title"&gt;
example link&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<p>參考形式的連結讓你可以為連結定一個名稱，之後你可以在文件的其他地方定義該連結的內容：</p>

<pre><code>I get 10 times more traffic from [Google][1] than from
[Yahoo][2] or [MSN][3].

[1]: http://google.com/        "Google"
[2]: http://search.yahoo.com/  "Yahoo Search"
[3]: http://search.msn.com/    "MSN Search"
</code></pre>

<p>輸出：</p>

<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"
title="Google"&gt;Google&lt;/a&gt; than from &lt;a href="http://search.yahoo.com/"
title="Yahoo Search"&gt;Yahoo&lt;/a&gt; or &lt;a href="http://search.msn.com/"
title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<p>title 屬性是選擇性的，連結名稱可以用字母、數字和空格，但是不分大小寫：</p>

<pre><code>I start my morning with a cup of coffee and
[The New York Times][NY Times].

[ny times]: http://www.nytimes.com/
</code></pre>

<p>輸出：</p>

<pre><code>&lt;p&gt;I start my morning with a cup of coffee and
&lt;a href="http://www.nytimes.com/"&gt;The New York Times&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<h5>圖片</h5>

<p>圖片的語法和連結很像。</p>

<p>行內形式（title 是選擇性的）：</p>

<pre><code>![alt text](/path/to/img.jpg "Title")
</code></pre>

<p>參考形式：</p>

<pre><code>![alt text][id]

[id]: /path/to/img.jpg "Title"
</code></pre>

<p>上面兩種方法都會輸出：</p>

<pre><code>&lt;img src="/path/to/img.jpg" alt="alt text" title="Title" /&gt;
</code></pre>

<h5>程式碼</h5>

<p>在一般的段落文字中，你可以使用反引號 <code>`</code> 來標記程式碼區段，區段內的 <code>&amp;</code>、<code>&lt;</code> 和 <code>&gt;</code> 都會被自動的轉換成 HTML 實體，這項特性讓你可以很容易的在程式碼區段內插入 HTML 碼：</p>

<pre><code>I strongly recommend against using any `&lt;blink&gt;` tags.

I wish SmartyPants used named entities like `&amp;mdash;`
instead of decimal-encoded entites like `&amp;#8212;`.
</code></pre>

<p>輸出：</p>

<pre><code>&lt;p&gt;I strongly recommend against using any
&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;I wish SmartyPants used named entities like
&lt;code&gt;&amp;amp;mdash;&lt;/code&gt; instead of decimal-encoded
entites like &lt;code&gt;&amp;amp;#8212;&lt;/code&gt;.&lt;/p&gt;
</code></pre>

<p>如果要建立一個已經格式化好的程式碼區塊，只要每行都縮排 4 個空格或是一個 tab 就可以了，而 <code>&amp;</code>、<code>&lt;</code> 和 <code>&gt;</code> 也一樣會自動轉成 HTML 實體。</p>

<p>Markdown:</p>

<pre><code>If you want your page to validate under XHTML 1.0 Strict,
you've got to put paragraph tags in your blockquotes:

    &lt;blockquote&gt;
        &lt;p&gt;For example.&lt;/p&gt;
    &lt;/blockquote&gt;
</code></pre>

<p>輸出：</p>

<pre><code>&lt;p&gt;If you want your page to validate under XHTML 1.0 Strict,
you've got to put paragraph tags in your blockquotes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;
    &amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre>
]]></description>
<link>http://blog.othree.net/log/2011/04/07/markdown-intro-and-doc/</link>
<guid>http://blog.othree.net/log/2011/04/07/markdown-intro-and-doc/</guid>
<category>css-html</category>
<pubDate>2011-04-07 14:49</pubDate>
</item>

<item>
<title>Markdown</title>
<description><![CDATA[<p>這個部落格最早的文章，我是直接寫原始的 HTML 碼，後來久了也是會嫌煩，就開始用 <a href="http://www.textism.com/tools/textile/">Textile</a> ，功能蠻多，而且還可以寫 id、class 之類的，不過同時，我對另外一個也是類似的 text to HTML 的文件格式 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> 就一直很有印象，不過那時候只覺得他的語法功能比較少，還感覺不出他的特色，直到過了幾年，在學校寫了幾篇論文，有訂閱的 mailing-list，寫作的觀念和態度也被指導教授盯過之後，某一天又再次看到一篇 Markdown 格式的文件，它的連結用的很像是論文的參考文獻的用法，它的程式碼區塊很像我部落格上排版過顯示的樣子，而它的引言看起來和 BBS 的幾乎一樣，每個細節都非常的熟悉，於是再次讓我對它產生了興趣，就開始試著用 Markdown 來寫部落格了，沒想到一試成主顧，因為語法都很熟悉，幾乎是不用再花時間學，而且我覺得更棒的一點是 Markdown 的文件直接閱讀也很方便，它的語法可以讓文章的感覺保持的很好。</p>

<p>Markdown 是  John Gruber 在 2004 年左右推出的，然後他自己提供了 Perl 版的程式碼，當時支援 <a href="http://www.movabletype.org/">MovableType</a> 和 <a href="http://www.blosxom.com/">BLOSXOM</a> 兩個部落格系統，也可以用在命令列直接執行轉換文字檔，而現在使用比例最高的 Wordpress 也有人寫 <a href="http://wordpress.org/extend/plugins/markdown-for-wordpress-and-bbpress/">外掛</a> 讓它支援 ，程式語言的部份除了 Perl 外，還有 <a href="http://michelf.com/projects/php-markdown/">PHP</a>、<a href="http://deveiate.org/projects/BlueCloth/">Ruby</a> 等，在 <a href="http://xbeta.org/wiki/show/Markdown">Markdown Wiki</a> 還有一份更詳細的清單，其實支援很廣泛，可惜的是大部分的 BSP 都沒有提供，目前似乎就只有 <a href="http://www.tumblr.com/">Tumblr</a> 而已，而這幾年在推廣上，我覺得有兩個網站的功勞不小，第一個是 <a href="https://github.com/">github</a> ，因為他支援用 Markdown 寫 README ，其實它還支援很多其他的格式，不過我看到使用最多的還是 Markdown，就這樣，為了寫出可以在 github 上顯示的良好結構的 HTML README 文件，很多人就寫起了 Markdown 文件， github 支援的格式其實是一個修改過的版本，叫做 <a href="http://github.github.com/github-flavored-markdown/">GitHub Flavored Markdown</a> ，稍微有些行為上的不一樣，然後多加了一些方便 Github 使用的功能，不過整體而言其實可以說是一樣的文件格式。</p>

<p>另一個則是 <a href="http://stackoverflow.com/">StackOverflow</a> ，Markdown 是 StackOverflow 發問、回覆所使用的預設格式，而且 StackOverflow 還有即時的預覽功能，實在很棒，我在深入了解之後，才發現 他們用的編輯器還有一段故事。StackOverflow 用的是 <em>John Fraser</em> 的 WMD Editor，他同時也是 JavaScript 版的 Markdown 轉換器，showdown.js 的作者，如果去看現在版本的 WMD Editor 和 showdown.js 的程式碼，都還可以看到他的名字，本來 StackOverflow 和 John 是有合作而不是只是單純拿它的編輯器來用，結果有一天突然就聯絡不上 John 了，就這樣一直無法聯繫上 John <a href="http://blog.stackoverflow.com/2008/12/reverse-engineering-the-wmd-editor/">四個月</a> 後，StackOveflow 的 Jeff Atwood 在網路跟大家說了這件事情，除了持續的想要連絡上 John 或是了解他狀況之外，還發起了一個工作，就是要對 WMD Editor 做反向工程，因為當時他們手上只有最小化過 JavaScript 檔案，裡面的變數名稱什麼的，都已經是失去意義的了，確認過授權沒問題後，一群社群朋友就開始幫忙了，後來他們利用 github 作為協做平台，成果就是現在 StackOverflow 的 <a href="https://github.com/cky/wmd">版本</a> ，至於 John Fraser 到底發生了什麼事，則是到現在也沒人知道。</p>

<p>如果想要看看 Markdown 文件長怎樣，可以看看 <a href="http://daringfireball.net/projects/markdown/basics">Markdown Basics</a> 這篇文章，至於完整的文件，我正找了幾位網友在翻譯中，等全部處理好就會公開了，雖然這樣說，其實東西都在 github 上啦。</p>
]]>
</description>
<link>http://blog.othree.net/log/2011/03/08/markdown-syntax/</link>
<guid>http://blog.othree.net/log/2011/03/08/markdown-syntax/</guid>
<category>css-html</category>
<pubDate>2011-03-08 21:28</pubDate>
</item>

<item>
<title>預設字型樣式</title>
<description><![CDATA[<p>前兩天介紹 TypeHelper.js 時，有提供了我現在用的字型樣式設定， <a href="http://ethantw.net/">Ethan</a> 則提出了它的<a href="http://blog.othree.net/log/2011/03/04/detect-clear-type/#comment111723"> 建議</a> ， Ethan 的建議如下：</p>

<pre><code>html {
    font-family: sans-serif;
}

html.hasFontSmoothing-false {
    font-family: "新細明體", PMingLiU, serif;
}
</code></pre>

<p>Ethan 的想法應該是在確定沒支援 Clear Type 的話，就改用新細明體為預設字型，不然就用系統內建的黑體（sans-serif），他的建議給我不少想法，讓我重新確認了一下我的需求：</p>

<ul>
<li>如果系統支援 Clear Type，那就用微軟正黑體做預設字型（sans-serif）</li>
<li>不支援的話，用新細明體（serif）</li>
<li>假如無法判斷就當成沒有 Clear Type</li>
<li>不支援 JavaScript 的情形當成沒有 Clear Type</li>
</ul>

<p>然後考慮到系統環境，事實上只有 Windows 需要做這個判斷，OSX 不用說自然是都有，Linux 雖然不一定，但是它並沒有新細明體和微軟正黑體的選擇問題，所以只要考慮 Windows 的情形，有沒有 Clear Type 和有沒有安裝微軟正黑體，最後其實只有改一行就是了：</p>

<pre><code>html {
    font-family: serif;
}

html.hasFontSmoothing-true {
    font-family: "微軟正黑體", "Microsoft JhengHei", sans-serif;
}
</code></pre>

<p>我的和 Ethan 的差別在於，分別是對於 JavaScript 有無的像下相容方式和他使用瀏覽器設定的黑體字型，或是強迫指定新細明體，我則是使用瀏覽器預設的明體字型，或是強迫指定微軟正黑體，我想選擇用哪個，就變成是網站主人的決定了。</p>
]]>
</description>
<link>http://blog.othree.net/log/2011/03/06/default-font-style/</link>
<guid>http://blog.othree.net/log/2011/03/06/default-font-style/</guid>
<category>css-html</category>
<pubDate>2011-03-06 11:44</pubDate>
</item>

<item>
<title>RevCanonical and rel-shortlink</title>
<description><![CDATA[<p>前兩天介紹了 <a href="http://blog.othree.net/log/2011/03/03/canonical-url/">Canonical URL</a> ，這篇要介紹的是有點關係的 <a href="http://revcanonical.appspot.com/">RevCanonical</a> ，Chris Shiflett 有寫一篇蠻不錯的 <a href="http://shiflett.org/blog/2009/apr/save-the-internet-with-rev-canonical">介紹</a> ，RevCanonical 是用來記錄自己的短網址的，以 Canonical URL 那篇的 Flickr 網址為例：</p>

<pre><code>http://www.flickr.com/photos/othree/5478867242/
http://flic.kr/p/9m9Cmj
</code></pre>

<p>第二個網址是 Flickr 官方提供的短網址，在繼續往下之前，先來說說為什麼要提供自己的短網址，Chris 那篇文章有列舉幾項：</p>

<ul>
<li>網址是我的，是否正常運作由我負責</li>
<li>網址有其意義，像是 <strong>flic.kr</strong> 這個網域名稱就很明顯可以代表 Flickr</li>
<li>因為訪客可以看的出網址的意義，就不用擔心會跑到奇怪的地方</li>
</ul>

<p>並且，短網址服務被認為是對安全性不好的，所以其實很多短網址服務是有提供 preview 的功能，訪客可以先確認會連到哪裡才確定要不要連結過去，但是這網址要從哪邊取得呢？其實就放在網頁的 HTML 碼裡面：</p>

<pre><code>&lt;link id="shorturl" rev="canonical" type="text/html" href="http://flic.kr/p/9m9Cmj"&gt;
</code></pre>

<p>RevCanonical 就只是這樣而已，非常簡單， 當初會使用這樣的標記，是因為 Kevin Marks 覺得短網址和 Canonical URL 的某種層面的 <a href="http://twitter.com/#!/kevinmarks/status/1448424167">反向關係</a> ，並且提議給 Kellan Elliott-McCrea ，Kellan 當時為了 Flickr 的短網址系統不知道該如何在網頁原始碼內標記而 <a href="http://laughingmeme.org/2009/04/03/url-shortening-hinting/">徵詢意見</a>。</p>

<p>不過其實現在已經不推薦使用 RevCanonical 了， Mark Nottingham 提出了不少它的 <a href="http://www.mnot.net/blog/2009/04/14/rev_canonical_bad">問題</a> ，其中像是 canonical 的語意不正確，rev 屬性已經從 HTML5 中被 <a href="http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2006-July/006888.html">拿掉了</a> ，還好 Microformats 有個 <a href="http://microformats.org/wiki/rel-shortlink">rel-shortlink</a> ，而且是已經成為 Spec 的標準之一，寫起來也是很簡單，範例如下：</p>

<pre><code>&lt;link rel="shortlink" href="http://youtu.be/zJhTLzTjhwM"&gt;
</code></pre>

<p>Microformat 的 wiki 頁面上有列出不少在使用 rel-shortlink 的網站，像是 <a href="http://en.blog.wordpress.com/2009/08/14/shorten/">wordpress.com</a> ，還有 <a href="http://youtube-global.blogspot.com/2009/12/make-way-for-youtube-links.html">YouTube</a> 也是，不過至於 Flickr，現在還是繼續在使用 RevCanonical 就是，希望有天能改掉。</p>
]]>
</description>
<link>http://blog.othree.net/log/2011/03/05/revcanonical-and-relshortlink/</link>
<guid>http://blog.othree.net/log/2011/03/05/revcanonical-and-relshortlink/</guid>
<category>css-html</category>
<pubDate>2011-03-05 22:34</pubDate>
</item>

<item>
<title>HTML5 Web Developer Edition</title>
<description><![CDATA[<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/5498667619/" title="Flickr 上 othree 的 HTML5 -- Edition for Web Developers"><img src="http://farm6.static.flickr.com/5171/5498667619_1817f41fba.jpg" width="500" height="475" alt="HTML5 -- Edition for Web Developers" /></a></p>

<p><a href="http://dev.w3.org/html5/spec/">HTML5 標準的文件</a> 和以前的版本有些地方有很大的不同，像是標籤的語意說明比起以前就詳細很多，還會提出範例，另外也更詳細的規範了瀏覽器應該怎樣實作的細節，也因此整份文件的長度非常驚人，WHATWG 那邊有提供 <a href="http://www.whatwg.org/specs/web-apps/current-work/html-a4.pdf">A4 PDF 的版本</a> ，將近有 800 頁的內容，非常驚人， <a href="http://www.w3.org/TR/html401/html40.pdf.gz">HTML 4</a> 也才接近 400 頁而已，文字量則接近 3 倍，而這麼多的內容其實不是所有人都需要的，例如網頁設計師，它就不需要理解一些 API 的實作細節，他只要知道不同的標籤應該怎樣使用，怎樣編排網頁結構符合語義，因此 <a href="http://germanforblack.com/">Ben Schwars</a> 就做出了一份針對 Web Developer 的 HTML5 文件「<a href="http://developers.whatwg.org/">HTML5 - Edition for Web Developers</a>」，只保留了 Web Developer 需要的資訊，而且還整個把頁面樣式大改，不只是更漂亮而已，還針對可讀性下了不少 <a href="http://www.germanforblack.com/articles/moving-towards-readable-w3c-specs">功夫</a> ，還有搜尋、單一章節的目錄等，閱讀的體驗實在是提昇非常多。</p>

<p>而一如往常的，W3C 那邊也有一份 <a href="http://dev.w3.org/html5/spec-author-view/">HTML5 Edition for Web Authors</a> ，兩份其實是同樣的文件，我在 Ben Schwars 的 <a href="http://www.slideshare.net/benschwarz/building-a-better-web">Building a better web</a> 這份投影片中看到的網址就是 W3C 這邊的，目前的關係大概也只是不同的更新版本吧，我剛發現時幾乎是只有配色不同，現在樣式兩邊就有些差異了，不過章節內容還是差不多，順序有些調動，喔對了，這份投影片第 14 頁還有個不錯 W3C 標誌。</p>

<p>最後要提的是 Ben Schwars 是自己主動建立了這份文件的，他在看 HTML5 標準後受不了，跑去 WHATWG IRC 說他要做這東西，編輯說 ok 後他就開始動手了，他也把這段 <a href="http://germanforblack.com/articles/taking-the-web-back">過程</a> 寫出來，呼籲大家盡量參與標準的發展，不要只是對 W3C 有意見卻不參與不貢獻。</p>
]]>
</description>
<link>http://blog.othree.net/log/2011/03/05/html5-developer-edition/</link>
<guid>http://blog.othree.net/log/2011/03/05/html5-developer-edition/</guid>
<category>css-html</category>
<pubDate>2011-03-05 16:19</pubDate>
</item>

<item>
<title>Canonical URL</title>
<description><![CDATA[<p>我本來以為我應該寫過這東西了，可是剛剛找卻找不到文章，決定就當成沒寫過，介紹一下這個兩年前的東西。Canonical URL 是為了解決網路上很多不同網址可能其實是同樣頁面的問題，例如下面三個網址其實都是同樣的 Amazon 商品：</p>

<pre><code>http://www.amazon.com/gp/product/0596522304/ref=s9_qpp_gw_p14_ir03?pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=center-3&amp;amp;pf_rd_r=0BC0MGCJ16BHCYNY6AYG&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=470938811&amp;amp;pf_rd_i=507846
http://www.amazon.com/Even-Faster-Web-Sites-Performance/dp/0596522304
http://www.amazon.com/dp/0596522304
</code></pre>

<p>但是可能是因為來源不同，Amazon 藉由不同的網址記錄一些行為，像是不同的廣告來源，或是為使用者提供不同的相關訊息等，不過這些網址其實都應該是一樣的，都是代表那本書的頁面，這時就產生個問題了，三個網址在搜尋引擎的紀錄是分開的，頁面整體的影響力也因此被低估，同樣會有這個問題的還有像是 flickr：</p>

<pre><code>http://www.flickr.com/photos/othree/5478867242/in/set-72157626142121334/
http://www.flickr.com/photos/othree/5478867242/in/photostream/
http://www.flickr.com/photos/othree/5478867242/
http://flic.kr/p/9m9Cmj
</code></pre>

<p>或是 T 客邦：</p>

<pre><code>http://www.techbang.com.tw/posts/5033-ios-great-copy-mac-os-x-107-lion-info
http://www.techbang.com.tw/posts/5033
</code></pre>

<p>這些不同長度的網址其實都是一樣的頁面，卻因為被當成不同的頁面而讓分數下降，不只是網站本身的 SEO 問題，對於搜尋引擎來說也是一個會讓搜尋結果排序不好的問題，為解決這個問題，<a href="http://googlewebmastercentral.blogspot.com/2009/02/specify-your-canonical.html">Google</a>、<a href="http://www.bing.com/community/site_blogs/b/webmaster/archive/2009/02/12/partnering-to-help-solve-duplicate-content-issues.aspx">微軟</a>、<a href="http://www.ysearchblog.com/2009/02/12/fighting-duplication-adding-more-arrows-to-your-quiver/">Yahoo!</a>、<a href="http://blog.ask.com/2009/02/ask-is-going-canonical.html">ask.com</a> 等搜尋引擎大廠在 2009 共同合作，制定了 canonical URL 這樣的一個機制，機制很簡單，就是在網頁內加上一個 link 標籤記錄實際上代表的網址，以第一個 Amazon 的網址為例，每個網址開進去看他的原始碼，都可以發現有一個如下的 link 標籤</p>

<pre><code>&lt;link rel="canonical" href="http://www.amazon.com/Even-Faster-Web-Sites-Performance/dp/0596522304" /&gt;
</code></pre>

<p>裡面的 <strong>href</strong> 的值，就是這些網址的實際目標，代表這些網址們實際上的 URL 都是這個實際目標，搜尋引擎看到的話就會把該網址的權重、分數等等算在它上面，也就可以簡單解決上面提到的問題，如果你用 <a href="http://www.google.com.tw/search?hl=zh-TW&amp;q=amazon+even+fast+website&amp;meta=">Google 搜尋 Amazon 上面那本書</a> ，就會發現連結過去的網址就是 canonical 設定的網址了。</p>
]]>
</description>
<link>http://blog.othree.net/log/2011/03/03/canonical-url/</link>
<guid>http://blog.othree.net/log/2011/03/03/canonical-url/</guid>
<category>css-html</category>
<pubDate>2011-03-03 00:57</pubDate>
</item>

<item>
<title>HTML5 近況 </title>
<description><![CDATA[<p>首先是比較多人知道的 <a href="http://www.w3.org/html/logo/">HTML5 官方 logo</a> ，除了大 logo 外，你還可以根據你用到哪些技術來建立屬於自的小貼紙，現在還有賣 T-shirt ，也有免費的貼紙可以索取，logo 設計好壞見仁見智，我是兩種聲音都有聽到，不過已經有不少地方開始拿來使用了，像是 Chrome 馬上就有人寫個 <a href="https://chrome.google.com/webstore/detail/klleofbhhghgacodijohlacbfhfcefom">HTML5 Powered</a> 的小擴充套件，只是在位址列顯示該網站有沒有用 HTML5 而已:P。</p>

<p><img src="http://blog.othree.net/log/2011/01/22/html5-2011-01/HTML5_Logo_256.png" width="256" height="256" alt="HTML5 Logo" /></p>
]]><![CDATA[<p>最近不少新東西，首先是 HTML-WG 在 13 日時更新了大量的文件，除了 HTML5 標準本身外，周邊的一些文件也一起更新了，包括以下這些文件：</p>

<ul>
<li><a href="http://www.w3.org/TR/2011/WD-html5-20110113/">HTML5</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-html5-diff-20110113/">HTML5 differences from HTML4</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-html-markup-20110113/">HTML: The Markup Language</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-rdfa-in-html-20110113/">HTML+RDFa 1.1</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-microdata-20110113/">HTML Microdata</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-2dcontext-20110113/">HTML Canvas 2D Context</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-html-alt-techniques-20110113/">HTML5: Techniques for providing useful text alternatives</a></li>
<li><a href="http://www.w3.org/TR/2011/WD-html-polyglot-20110113/">Polyglot Markup: HTML-Compatible XHTML Documents</a></li>
</ul>

<p>其中 HTML5 標準本身最主要的變動是多了 <a href="http://www.w3.org/TR/2011/WD-html5-20110113/text-level-semantics.html#the-bdi-element">&lt;bdi&gt;</a> 這個標籤，用途是和 i18n 的文字方向相關的，其實文字方向，光只是左右方向就有不少問題要處理，事實上是比想像的複雜許多，而如果加上直排，那還會更加複雜。其他也還有一些新東西，如果想要看每一版差異， <a href="http://www.w3.org/TR/html5-diff/#changelog">HTML5 differences from HTML4</a> 的 changelog 可以參考，雖然不能保證他是照著主要文件在更新的就是。</p>

<p>另外一份值得推薦的文件是 <a href="http://www.w3.org/TR/html-alt-techniques/">HTML5: Techniques for providing useful text alternatives</a> ，內容是如何提供有用的替代文字，包括給圖片、影片等用的。</p>

<p>上面是 W3C 那邊，接下來要說的是 WHATWG 那邊，他們決定現在維護中 <a href="http://blog.whatwg.org/html-is-the-new-html5">HTML5 要改為 HTML</a> ，並且持續開發，不會照 W3C 那邊的發展流程，會有定案不再修改的一天，算是一個方針性的修改，這樣的方式是好是壞現在還難以定論就是，原來 2012 年 HTML5 會進入 PR 的計畫應該是不會變動，只是狀況可能變成 W3C 那邊進入 PR ，功能不再修改，但是 WHATWG 那邊的 HTML 標準還會持續的修改並加新東西進去。</p>

<p>最後是 <a href="http://www.w3.org/TR/2011/CR-wai-aria-20110118/">WAI-ARIA</a> 進入 CR 了，除了文件狀態更新外，其實 HTML5 的發展和 WAI-ARIA 等一些互相支援的標準還蠻密切的，像是 <a href="http://html5.validator.nu/">html5.validator.nu</a> 這個 HTML5 驗證工具就有支援 WAI-ARIA、SVG、MathML 等，甚至你如果是使用 XHTML 的文件，他也可以正確的處理 namespace 的東西。</p>
]]></description>
<link>http://blog.othree.net/log/2011/01/22/html5-2011-01/</link>
<guid>http://blog.othree.net/log/2011/01/22/html5-2011-01/</guid>
<category>css-html</category>
<pubDate>2011-01-22 09:13</pubDate>
</item>

<item>
<title>Mozilla 的 Frontend Code Standard</title>
<description><![CDATA[<p>之前 <a href="http://blog.bobchao.net/">Bob</a> 提到 Mozilla 有 <a href="https://wiki.mozilla.org/WebDev:FrontendCodeStandards">WebDev:FrontendCodeStandards</a> 這份文件，然後我就順手翻了一下，不知道之後會放到哪裡就是，不過本文本來就公開的，所以應該沒差。</p>

<ul>
<li><a href="https://docs.google.com/document/pub?id=1oqDLU-Ya61V4EmVhzbTzxAh6w-neGH_3AjjYxF6O5w0">中文版 WebDev:FrontendCodeStandards</a></li>
</ul>
]]>
</description>
<link>http://blog.othree.net/log/2010/12/12/mozilla_frontend_code_sta/</link>
<guid>http://blog.othree.net/log/2010/12/12/mozilla_frontend_code_sta/</guid>
<category>css-html</category>
<pubDate>2010-12-12 16:54</pubDate>
</item>

<item>
<title>Google Page Speed Module for Apache</title>
<description><![CDATA[<p>Google 推出 <a href="http://code.google.com/intl/zh-TW/speed/page-speed/index.html">Page Speed</a> 很久沒有動作後，今天突然出了 <a href="http://code.google.com/intl/zh-TW/speed/page-speed/docs/module.html">mod_pagespeed</a> ，藉由 Apache Module 的方式來直接實作許多 Page Speed 的建議準則，讓開發者可以減少花費在最佳化網站速度的時間，mod_pagespeed 所做的都是前端的最佳化工作，基本上架構在 rewrite, minify, cache 三件事上，rewrite 是指重寫檔案內容，而不是 mod_rewrite ，根據設定，它可以修改你的網頁原始碼，刪除多餘的空白字元、甚至合併多個 CSS 檔案、最小化 CSS/JS 檔案等，安裝和基本設定都很簡單，不過實際使用時發現如果送出網頁 header 為 application/xhtml+xml 的話就不會動，還有我本來有自己設定 .htaccess 檔案內的 deflate 設定，也造成 mod_pagespeed 不會動，還好目前都有排除解決問題，只剩下 fastcgi 的部份還在測試。</p>

<p>實際佈署的時候還有一些小地方需要注意，像是要合併的 CSS 檔案要在同一個路徑下，不然不會合併（而且其實我目前還沒測試合併成功），JS 如果要用 <a href="http://code.google.com/intl/zh-TW/closure/compiler/">closure compiler</a> 的進階壓縮模式，那還是要自己處理，總之就是，它給了一個不錯的基本加速設定，不過如果你要更進一步強化，那一些東西還是要自己來。</p>

<p>話說 mod_pagespeed 裡面用來 minify JS 檔案用的是 <a href="http://www.crockford.com/javascript/jsmin.html">JSMin</a> ，我想原因可能是他是 C 寫的而且有原始碼吧，不過 <a href="http://code.google.com/intl/zh-TW/closure/compiler/">closure compiler</a> 即使是簡單模式壓縮效果也比較好，所以還是可以自己壓縮。</p>
]]>
</description>
<link>http://blog.othree.net/log/2010/11/04/google-page-speed-module/</link>
<guid>http://blog.othree.net/log/2010/11/04/google-page-speed-module/</guid>
<category>css-html</category>
<pubDate>2010-11-04 14:28</pubDate>
</item>

<item>
<title>WAI-ARIA 介紹之三</title>
<description><![CDATA[<p>這篇文章是翻譯 Dev.Operv 的 <a href="http://dev.opera.com/articles/view/introduction-to-wai-aria/">Introduction to WAI ARIA</a> 這篇文章，分成三篇刊載。由於原文為 <a href="http://creativecommons.org/licenses/by-nc-sa/2.5/deed.zh_TW">CC-BY-NC-SA-2.5</a> 授權，故此篇文章也採用同樣授權方式。系列文章：</p>

<ul>
<li><a href="http://blog.othree.net/log/2010/10/10/introduction-to-wai-aria-1/">WAI-ARIA 介紹之一</a></li>
<li><a href="http://blog.othree.net/log/2010/10/13/introduction-to-wai-aria-2/">WAI-ARIA 介紹之二</a></li>
<li>WAI-ARIA 介紹之三 - 本篇文章</li>
</ul>

<h4>ARIA 可以做什麼用？</h4>

<p>使用 ARIA 並不會有不好的副作用，所以你可以馬上開始使用他，而且主流的四個瀏覽器都已經支援或已經有計劃支援了，Opera 9.5 和 Firefox 1.5 已經有支援 ARIA ， IE8b 也有支援， Safari 所使用的 WebKit 框架也發表說他們將會開始支援 ARIA ， 輔助科技也廣泛的支援 ARIA ，JAWS 7.1、Window-Eyes 5.5+、NVDA、Zoomtext 9+ 和其他輔助科技都有基本的支援，而且還會越來越好。</p>

<h4>現在就參與使用</h4>

<p>由於使用 ARIA 並沒有任何不好的副作用，而且相關的支援都已經到位，現在就參與使用百利而無一害，即使你的網站非常簡單，你也可以使用文件地標讓使用者有更好的導覽系統可以使用。</p>
]]><![CDATA[<h5>使用文件地標</h5>

<p>在我的個人網站，我就使用了 main、navigation、search、secondary 這幾個文件地標，以下面的文件結構為例：</p>

<pre><code>&lt;div id="ads"&gt;
...
&lt;/div&gt;
&lt;div id="nav"&gt;
    &lt;form id="searchform" ...&gt;
    ...
    &lt;/form&gt;
...
&lt;/div&gt;
&lt;div id="content"&gt;
...
&lt;/div&gt;
</code></pre>

<p>我們可以把 role 屬性寫進標記內以加上地標資訊。</p>

<pre><code>&lt;div id="ads" role="banner"&gt;
...
&lt;/div&gt;
&lt;div id="nav" role="navigation"&gt;
    &lt;form id="searchform" role="search" ...&gt;
    ...
    &lt;/form&gt;
...
&lt;/div&gt;
&lt;div id="content" role="main"&gt;
...
&lt;/div&gt;
</code></pre>

<p>大部分的網頁都會有設計好的結構，好方便使用 CSS 做版面配置，而此範例頁就使用到 id，id 還可以簡單的傳給 JavaScript 函數，下面的範例是一個簡單的 JavaScript 函數，它接收的參數是元素的 id 和 role 角色值，會將指定 id 元素的 role 設為指定的值。</p>

<pre><code>function addARIARole(strID, strRole)
{
    // Find the element to add a role property to
    var objElement = document.getElementById(strID);

    if (objElement)
    {
        // Add the role property to the element
        objElement.setAttribute('role', strRole);
    }
}
</code></pre>

<p>接著就可以使用這個函數，傳入文件內元素的 id 和對應的文件地標，而已前面的文件結構來說，我們可以用下面的 JavaScript 來加上地標資訊，而不必直接寫入標籤。</p>

<pre><code>function setupARIA()
{
    // Add ARIA roles to the document
    addARIARole('content', 'main');
    addARIARole('nav', 'navigation');
    addARIARole('searchform', 'search');
    addARIARole('ads', 'banner');
}
window.onload = setupARIA;
</code></pre>

<h5>標出必填欄位</h5>

<p>如果你的表單內有必填欄位，你可以使用 aria-required 屬性，此屬性告訴使用者此欄位在送出前必須要有填值，下面的範例就是有使用 aria-required 的 input 元素。</p>

<pre><code>&lt;label for="contactname"&gt;Name&lt;/label&gt;
&lt;input type="text"
       id="contactname" 
       name="contactname"
       size="30"
       aria-required="true"&gt;
</code></pre>

<p>Wordpress 已經有在迴響表單的必填欄位內加上 aria-required 屬性了。</p>

<h5>加上其他相關屬性</h5>

<p>還有許多 ARIA 屬性可以使用在簡單的網站上，像是 aria-labeledby 和 aria-describerdby，aria-labeledby 是用來定位該元素的標題是哪個或哪些元素裡，aria-describedby 則是用來定位敘述該元素的資訊放在哪。</p>

<pre><code>&lt;h2 id="limg"&gt;Paragliding&lt;/h2&gt;
&lt;p id="dimg"&gt;
A long description of our paragliding trip ...
&lt;/p&gt;
&lt;div&gt;
&lt;img src="takeoff.png"
     alt="Getting ready to take off"
     aria-labelledby="limg"
     aria-describedby="dimg"&gt;
&lt;/div&gt;
</code></pre>

<h5>更高的優先權</h5>

<p>ARIA 的屬性比 HTML 原本的屬性優先權還要高，意思是說 aria-labeledby 和 label 元素的 for一起出現時， aria-labeledby 優先度會較高，不過 label 元素還是可以讓不支援 ARIA 的舊瀏覽器能正確的找出元素間的關係，有個簡單的技巧可以避免衝突，就是用 aria-labeledby 連回 label 元素，不管 ARIA 支援如何，都可以確保 input 元素的標題存在。</p>

<pre><code>&lt;label id="lblef" for="effectiveness"&gt;Effectiveness&lt;/label&gt;
&lt;input type="image"
       role="slider"
       id="effectiveness"
       aria-labelledby="lblef"
       ...&gt;
</code></pre>

<p>看看完整的 ARIA [屬性清單][8] 可以幫助你讓你把網頁內容弄的更具有親和力。</p>

<h4>總結</h4>

<p>HTML 最初不是設計來製作網路應用程式的，但是設計師們還是藉著製作自定的介面元件，並使用 JavaScript 給予它們可以操作互動的能力而拼湊出網路應用程式，而問題是這些元件的角色、狀態和屬性以及網頁內容的更新情形並不會讓輔助科技正確的知道，因此 ARIA 規範藉由讓設計師可以詳細的描述這些介面元件、定義文件結構和即時更新的區域來解決這個問題。</p>

<p>不論你是要開發最新潮複雜的網路應用程式還是你有的只是簡單的 HTML 文件，你都可以使用 ARIA 讓身心障礙人士獲益。</p>

<h4>進階閱讀</h4>

<ul>
<li><a href="http://www.w3.org/TR/wai-aria-practices/">WAI-ARIA Best Practices</a></li>
<li><a href="http://www.marcozehe.de/2008/02/29/easy-aria-tip-1-using-aria-required/">Using aria-required</a></li>
<li><a href="http://www.marcozehe.de/2008/03/23/easy-aria-tip-2-aria-labelledby-and-aria-describedby/">Using aria-labelledby and aria-describedby</a></li>
<li><a href="http://www.marcozehe.de/2008/07/16/easy-aria-tip-3-aria-invalid-and-role-alert/">Using aria-invalid and role alert</a></li>
<li><a href="http://www.paciellogroup.com/blog/?p=53">Tri-State Checkbox Example</a></li>
<li><a href="http://www.paciellogroup.com/blog/?p=68">ARIA Slider Example</a></li>
</ul>
]]></description>
<link>http://blog.othree.net/log/2010/10/17/introduction-to-wai-aria-3/</link>
<guid>http://blog.othree.net/log/2010/10/17/introduction-to-wai-aria-3/</guid>
<category>css-html</category>
<pubDate>2010-10-17 23:46</pubDate>
</item>

<item>
<title>WAI-ARIA 介紹之二</title>
<description><![CDATA[<p>這篇文章是翻譯 Dev.Operv 的 <a href="http://dev.opera.com/articles/view/introduction-to-wai-aria/">Introduction to WAI ARIA</a> 這篇文章，分成三篇刊載。由於原文為 <a href="http://creativecommons.org/licenses/by-nc-sa/2.5/deed.zh_TW">CC-BY-NC-SA-2.5</a> 授權，故此篇文章也採用同樣授權方式。系列文章：</p>

<ul>
<li><a href="http://blog.othree.net/log/2010/10/10/introduction-to-wai-aria-1/">WAI-ARIA 介紹之一</a></li>
<li>WAI-ARIA 介紹之二 - 本篇文章</li>
<li><a href="http://blog.othree.net/log/2010/10/17/introduction-to-wai-aria-3/">WAI-ARIA 介紹之三</a></li>
</ul>

<h4>我是誰？</h4>

<p>ARIA 導入了 role 屬性來幫助定義介面元件和頁面結構，介面元件像是滑動條控制器，頁面結構像是導覽區塊，網路應用程式的一個主要問題是任何 HTML 元素都可以用來製作介面元件，但是 HTML 元素都已經有其定義與角色了。 Role 屬性代表的是該元素是什麼東西，它在整個架構中是什麼角色，例如 heading 標題就是輔助科技所可以了解的角色。當使用既有的元素建置介面元件時，輔助科技會以元素的預設角色和定義來認知該元素，而不是它實際上在介面元件中的角色，例如滑動條控制器中的滑塊使用 img 標籤製作並標上適當的替代文字，螢幕閱讀器會讀出「圖形、滑塊」而不是更有意義的「滑動條控制器、值為百分之16。」</p>

<p><a href="http://www.flickr.com/photos/othree/5067918400/" title="Flickr 上 othree 的 thumb"><img src="http://farm5.static.flickr.com/4128/5067918400_56f38e1a6c_o.gif" width="166" height="81" alt="" /></a> <br />
Figure 3 -- 滑動條控制器上的滑塊</p>
]]><![CDATA[<p>role 所設定的元素角色會蓋過原本元素預設的角色，下面的例子中，有一個 role 屬性為 slider 的 input 元素（其他的屬性將會在後面介紹），因此輔助科技將會將它認為是滑動條控制器(slider) 而不是普通的文字輸入欄位 (input)。</p>

<pre><code>&lt;input type="image"
       src="thumb.gif"
       alt="Effectiveness"
       role="slider"
       aria-valuemin="0"
       aria-valuemax="100"
       aria-valuenow="42"
       aria-valuetext="42 percent" 
       aria-labelledby="leffective"&gt;
</code></pre>

<p>當這個元素被取用時，螢幕閱讀器便可以正確的告訴使用者這個介面元件是什麼。ARIA規格也有維護一份 <a href="http://www.w3.org/TR/wai-aria/roles#role_definitions">role 屬性值的清單</a>。</p>

<h5>文件地標</h5>

<p>Role 屬性除了定義介面元件外，還可以幫助建立文件的結構，<a href="http://www.w3.org/TR/wai-aria/roles#landmark_roles">文件地標</a>是 role 屬性的一個子集，它可以幫助螢幕閱讀器的使用者了解不同 HTML 內部同文件區塊的用途，好快速的定位到想要去的位置。</p>

<p><a href="http://www.flickr.com/photos/othree/5067918418/" title="Flickr 上 othree 的 pagestructure"><img src="http://farm5.static.flickr.com/4153/5067918418_ae41f9b617_o.gif" width="179" height="256" alt="" /></a> <br />
Figure 4 -- 常見的文件結構，有標頭、側邊欄和主要內容</p>

<p>ARIA 規格定義了以下的文件地標。</p>

<dl>
    <dt>article</dt>
    <dd>完整的一段內容，像是完整的一篇部落格文章、一篇迴響或是討論區的亦篇文章等</dd>
    <dt>banner</dt>
    <dd>跨網頁，屬於網站全體層級的內容，像是網站標題或是標誌等</dd>
    <dt>complementary</dt>
    <dd>和 main 內容相關的東西，不過可以獨立於主要內容之外，像是在入口網站提供的天氣資訊</dd>
    <dt>contentinfo</dt>
    <dd>相關資訊，例如註腳、版權宣告、隱私聲明、設定連結等</dd>
    <dt>main</dt>
    <dd>文件主要內容</dd>
    <dt>navigation</dt>
    <dd>內含本身以及相關文件導覽連結的部份</dd>
    <dt>search</dt>
    <dd>站內搜尋的表單區塊</dd>
</dl>

<p>下面的例子使用了文件地標指定了圖四文件中的 banner, navigation 和 main 三個區塊。</p>

<pre><code>&lt;div role="banner"&gt;
...
&lt;/div&gt;
&lt;div role="navigation"&gt;
...
&lt;/div&gt;
&lt;div role="main"&gt;
...
&lt;/div&gt;
</code></pre>

<h4>ARIA 狀態與屬性</h4>

<p>ARIA <a href="http://www.w3.org/TR/wai-aria/states_and_properties">狀態和屬性</a> 讓輔助科技可以得到介面元件的更多資訊幫助使用者了解如何操作這些介面元件，狀態是用來指定物件的某個特定資訊，例如 aria-checked 有三種狀態值， true, false 和 mixed 。而前面介紹的滑動條控制器，也有數個 aria 屬性可以幫助輔助科技描述這個元件。</p>

<dl>
    <dt>aria-valuemin</dt>
    <dd>儲存可接受數值的最小值</dd>
    <dt>aria-valuemax</dt>
    <dd>儲存可接受數值的最大值</dd>
    <dt>aria-valuenow</dt>
    <dd>儲存現在介面元件的值</dd>
    <dt>aria-valuetext</dt>
    <dd>儲存方便使用者理解接現在數值的文字，例如：30塊錢</dd>
    <dt>aria-labelledy</dt>
    <dd>儲存描述此介面元件的元素的 id 值</dd>
</dl>

<p>部分屬性可能會被 script 程式改變，例如 aria-valuenow 和 aria-valuetext 就應該在滑塊移動時跟著改變。</p>

<pre><code>// Set the ARIA property values when the thumb is 
// moved on the slider
objThumb.setAttribute('aria-valuenow', iValue);
objThumb.setAttribute('aria-valuetext', iValue + ' %');
</code></pre>

<p>網頁加上 role 屬性和 ARIA 屬性會讓文件無法通過標準檢測，但沒關係，讓 ARIA 支援古老標準的相關的工作也正在進行，像是有一個可以讓 <a href="http://www.w3.org/WAI/PF/adaptable/StatesAndProperties-20051106.HTML">模組化 XML 使用的文件類型定義(DTD)</a>，XHTML 1.1 就是一種模組化 XML 文件格式，有一份完整的 <a href="http://www.w3.org/TR/wai-aria/states_and_properties">狀態和屬性清單</a> ，可以幫助建立具親和力的介面元件。</p>

<h4>即時區塊</h4>

<p>即時區塊讓 HTML 元素在內容有更新時會通知使用者，而不會忽略掉最新的狀況，這意味著使用者可以不用離開他現在的游標位置也可以收到最新的更新內容，例如聊天室可以讓使用者接收到其他人的回覆，而不用離開文字輸入框，中斷正在輸入的訊息。</p>

<h5>aria-live</h5>

<p>無法發現網頁內容的更新是螢幕閱讀器使用者一直以來最大的障礙，ARIA 提供了 aria-live 這個屬性來設定網頁區塊更新時通知該如何通知使用者，下面是三種可以使用的設定。</p>

<dl>
    <dt>off</dt>
    <dd>預設值，區塊的更新不會通知輔助科技
    <pre><code>
        &lt;ul aria-live="off"&gt;
    </code></pre></dd>
    <dt>polite</dt>
    <dd>這是適用於大部分 live 區塊的設定， polite 區塊將會在使用者完成正在進行的動作後才會通知輔助科技
    <pre><code>
        &lt;ul aria-live="polite"&gt;
    </code></pre></dd>
    <dt>assertive</dt>
    <dd>這個值比一般的情形更為優先，但不會打斷使用者的動作。
    <pre><code>
        &lt;ul aria-live="assertive"&gt;
    </code></pre></dd>
</dl>

<p>其他還有一些重要的屬性可以幫助設定即時區塊，下面接著介紹。</p>

<h5>aria-atomic 屬性</h5>

<p>aria-atomic 是即時區塊的非必要的屬性，它的值可以是 true 或 false (預設是無指定)，當即時區塊更新時，aria-atomic 屬性是用來決定輔助科技是否要把整個區塊的內容都通報給使用者，如果設為 true，輔助科技就會把整個即時區塊的內容都通報出去，不然就只通報更改的部份。</p>

<p>下面的例子中，所有在此非排序清單中的元素都會被完整的念出，除非 aria-atomic 屬性被覆蓋。</p>

<pre><code>&lt;ul aria-atomic="true"
    aria-live="polite"&gt;
</code></pre>

<h5>aria-busy 屬性</h5>

<p>aria-busy 屬性也是非必要屬性，值可以為 true 或 false （預設為無指定），如果即時區塊內有多個地方都需要更改，之後才需要通知使用者的話，那就可以先將 aria-busy 設為 true 
，等到在內容都更新完後再把 aria-busy 設為 false，這個屬性可以避免輔助科技在即時區的內容更新完成之前就通知使用者。</p>

<pre><code>&lt;ul aria-atomic="true"
    aria-busy="true"   aria-live="polite"&gt;
</code></pre>

<h5>aria-relevant 屬性</h5>

<p>aria-relevant 屬性也是非必要屬性，是用來表示即時區塊的資訊更新要對哪些變化做出反應，此屬性接受以下的值，並可以用空白分開不同的值。</p>

<dl>
    <dt>additions</dt>
    <dd>即時區塊內有新增 DOM 節點</dd>
    <dt>removals</dt>
    <dd>即時區塊內有減少 DOM 節點</dd>
    <dt>text</dt>
    <dd>即時區塊內的文字有變化</dd>
    <dt>all</dt>
    <dd>上面所有的變化都有發生</dd>
</dl>

<p>如果沒有設定 aria-relevant 的話，預設會認為是文字變化與新增內容(aria-relevant="text additions")，下面的範例中的即時區塊，只會在區塊內有增加節點時，輔助科技才會告知使用者，如果是移除節點或是文字內容的變化，輔助科技都不會告知使用者。</p>

<pre><code>&lt;ul aria-relevant="additions" 
    aria-atomic="true"   aria-live="polite"&gt;
</code></pre>
]]></description>
<link>http://blog.othree.net/log/2010/10/13/introduction-to-wai-aria-2/</link>
<guid>http://blog.othree.net/log/2010/10/13/introduction-to-wai-aria-2/</guid>
<category>css-html</category>
<pubDate>2010-10-13 23:08</pubDate>
</item>

<item>
<title>WAI-ARIA 介紹之一</title>
<description><![CDATA[<p>這篇文章是翻譯 Dev.Operv 的 <a href="http://dev.opera.com/articles/view/introduction-to-wai-aria/">Introduction to WAI ARIA</a> 這篇文章，會分成三篇刊載。由於原文為 <a href="http://creativecommons.org/licenses/by-nc-sa/2.5/deed.zh_TW">CC-BY-NC-SA-2.5</a> 授權，故此篇文章也採用同樣授權方式。系列文章：</p>

<ul>
<li>WAI-ARIA 介紹之一 - 本篇文章</li>
<li><a href="http://blog.othree.net/log/2010/10/13/introduction-to-wai-aria-2/">WAI-ARIA 介紹之二</a></li>
<li><a href="http://blog.othree.net/log/2010/10/17/introduction-to-wai-aria-3/">WAI-ARIA 介紹之三</a></li>
</ul>

<h4>引言</h4>

<p>HTML最初並不是被設計來製作網路應用程式的，所以它所有的控制介面非常少，而且受限至於 client-server 的通訊模式，然後開發者們使用 JavaScript 突破了這層限制，並建置了各式各樣的介面元件。</p>

<p>然而不幸的是，這些突破 HTML 限制的技術通常也不具備親和力，即使這些介面元件看起來用起來都和一般的桌面應用程式沒什麼不同，但是像 screen reader 這些輔助科技並沒辦法存取到這些介面元件的角色(role，這個元件是什麼東西)、狀態(特有的設定，如 checked)和其他重要的資訊，這狀況就如同只是調整樣式讓一段文字看起來像標題，卻不使用正確的標題標籤，造成各種輔助科技並無法知道這段文字是標題一樣。</p>

<p>使用輔助科技的訪客通常不會注意到網頁動態更新的內容，輔助科技通常會認為只有在導航事件，例如開啟連結或是送出表單時，網頁的內容才會變動。網路應用程式使用AJAX這類新技術，會在背後默默的更新網頁的內容，即使輔助科技會去助益網頁內容的更改，使用者仍然可能不會注意到內容有更新，或是不知道如何移動到更新的位置。</p>

<p><a href="http://www.w3.org/WAI/intro/aria">WAI-ARIA</a>為這些介面元件提供了角色(role)定義，以及各種角色狀態和屬性的規格，使用輔助科技的訪客便可以理解並使用這些資訊，除此之外，WAI-ARIA還提供了一種機制以確保訪客不會錯過資訊的更新。</p>
]]><![CDATA[<h4>HTML簡史</h4>

<p>HTML 最初設計是用來作為超文字文件的，初期的 HTML 草稿規範的標籤有標題、段落、清單和連結等，<a href="http://www.w3.org/MarkUp/draft-ietf-iiir-html-01.txt">第一分由 IETF 制定的 HTML 草案</a>還包括了可以在行內顯示圖片的 img 標籤，而第一份較正式的 HTML 規格是 <a href="http://tools.ietf.org/html/rfc1866">HTML 2</a> ，基於初期的 HTML 草稿，這個版本還導入了網頁表單和一小部分的控制介面元件包括文字輸入欄位、按鈕、單選選項、勾選框和下拉式選單，然而 HTML 2 所定義的這些控制元件和現在主要使用的 <a href="http://www.w3.org/TR/html401/">HTML 4</a> 的版本相比，並沒有什麼變化。</p>

<p>HTML 所使用的溝通模式事蹟於主從式架構，主從式架構的流程為，客戶端送出請求到伺服端，並等待接收回應，伺服端則是一直在等待客戶端的請求，收到後進行處理並回覆給客戶端，由於 HTML 並沒有行為層，所有的溝通都是單線性的－客戶端向伺服端送出請求，伺服端對請求做出處理並傳回一個網頁給客戶端。</p>

<h4>網路應用程式</h4>

<p>網路應用程式試著去模擬一般的桌面應用程式，不過有個主要的差異在網路應用程式是在瀏覽器裡面執行的，除此之外，網路應用程式和桌面應用程式還有兩個根本性的差異：</p>

<ul>
<li>一般桌面應用程式有一行為層，而不用對伺服端做溝通</li>
<li>一般桌面應用程式有更多樣的介面控制元件</li>
</ul>

<h4>模擬一般桌面應用程式</h4>

<h5>背景資料傳輸</h5>

<p>為了模擬一般桌面應用程式，網路應用程式使用 JavaScript 去增加網頁的行為，例如使用 JavaScript 讓使用者可以展開或關閉選單項目。網路應用程式有時會需要跟伺服器要些資料，可能是要伺服器上資料庫內的資料來更新頁面內容，當網路應用程式需要和伺服器溝通時，這時候多會使用 AJAX 或是 IFRAME 的技術來在背景溝通。 </p>

<h5>模擬多樣化的元件</h5>

<p>由於 HTML 只有非常少的介面元件，網路應用程式有時就會需要自己創造更複雜的介面元件，像是三種狀態的勾選框或是滑動條控制器，這些介面元件通常是圖形化顯示給使用者，而它們的行為則是由另外的 script 來實作。</p>

<p><a href="http://www.flickr.com/photos/othree/5067306375/" title="Flickr 上 othree 的 tristate"><img src="http://farm5.static.flickr.com/4132/5067306375_94123b07bc_o.gif" width="228" height="171" alt="" /></a> <br />
圖一 -- 三種狀態的勾選框</p>

<p><a href="http://www.flickr.com/photos/othree/5067918384/" title="Flickr 上 othree 的 slider"><img src="http://farm5.static.flickr.com/4105/5067918384_d4b9079419_o.gif" width="358" height="65" alt="" /></a> <br />
圖二 -- 一個滑動條控制器，可能用來調整服務品質</p>

<h4>視覺與感官模擬的親和力問題</h4>

<p>從視覺上模擬各種介面元件，對伺服器進行背景的溝通都可以讓使用者有更好的使用經驗，但是不幸的是，這些都造成了親和力問題，對於使用輔助科技的使用者都產非常不好：</p>

<ul>
<li>只有圖形化顯示的介面元件通常鍵盤無法控制</li>
<li>這些介面元件的角色定義、用途等，輔助科技都無從得知</li>
<li>這需介面元件的狀態和屬性資料，輔助科技也無法得知</li>
<li>頁面的更新也沒有通知這些輔助科技</li>
</ul>

<h4>救星是 WAI-ARIA</h4>

<p>幸好，列出的這些問題都可以靠 Web Accessibility Initiative's Accessible Rich Internet Applications 來解決，ARIA 是一個正面的技術，而不是跟開發人員說什麼不能做，ARIA 讓開發人員可以製作豐富的網路應用程式，而且它也很簡單就可以上手。</p>

<h4>鍵盤導覽</h4>

<p>替非文字物件提供替代文字和讓介面元件可以用鍵盤控制都是非常基本的親和力規定，知道親和力相關議題的開發人員可能會讓他所製作的介面元件是可以用鍵盤取用並操作的，像是使用 <code>&lt;input type="image"&gt;</code> ，不過大部分的介面元件都不是以這種方式製作，而會使用像是 img 這種無法使用鍵盤取用的元素，或是複雜的元件可能會使用 div 來做為外層包覆的元素，一樣也是無法使用鍵盤取用。</p>

<p>HTML 4 開始有了 tabindex，可以用於 a、area、button、input、object、select、textarea 這幾個元素上，tabindex的值是介於 1～32767 的正整數，導覽會從數字小的開始，直到數字最大的元素，有設定 tabindex 的元素會以設定的值排入導覽順序，不過如果網頁的內容有好的邏輯結構，tabindex 就可以不必設定，介面元件會自己依序排入 tab 鍵導覽的順序中。</p>

<p>ARIA <a href="http://www.w3.org/TR/wai-aria/#tabindex">擴充了 tabindex 屬性</a>，讓他可以出現在所有可見的元素中，除此之外，還允許使用負值讓元素不在 tab 鍵導覽的順序中出現，但還是可以用 script 程式取用它，不過由於負值的大小並不重要，所以通常是使用 -1。</p>

<h5>加入預設 Tab 導覽順序</h5>

<p>下面的範例使用 tabindex 讓 div 元素可以照文件結構排入 tab 鍵導覽的順序之中，因此該元素是可以使用鍵盤取用的。</p>

<pre><code>&lt;div tabindex="0"&gt;
...
&lt;/div&gt;
</code></pre>

<h5>負的 tabindex</h5>

<p>下面的範例則是使用負值設定tabindex，因此該元素只能經由 script 取用</p>

<pre><code>&lt;div id="progaccess" tabindex="-1"&gt;
...
&lt;/div&gt;
</code></pre>

<p>在這個範例中，div 元素不會排進 Tab 導覽的順序之中,但是由於它有 tabindex 屬性，且其值為 -1 ，表示說該元素還是可以透過程式取用，下面這段程式碼會選用上面所定義的元素，並且使用 focus 函式來取用該元素。</p>

<pre><code>var objDiv = document.getElementById('progaccess');
\\ Focus on the element
objDiv.focus();
</code></pre>
]]></description>
<link>http://blog.othree.net/log/2010/10/10/introduction-to-wai-aria-1/</link>
<guid>http://blog.othree.net/log/2010/10/10/introduction-to-wai-aria-1/</guid>
<category>css-html</category>
<pubDate>2010-10-10 22:06</pubDate>
</item>


</channel>
</rss>