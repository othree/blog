<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>O3noBLOG - css-html</title>
<link>https://blog.othree.net//log/ css-html/</link>
<description></description>
<copyright>Copyright 2016</copyright>
<lastBuildDate>2016-02-28 14:34</lastBuildDate>
<generator>http://www.movabletype.org/?v=4.381</generator>
<docs>http://blogs.law.harvard.edu/tech/rss</docs> 


<item>
<title>Device Pixel Ratio Header</title>
<description><![CDATA[<p>之前<a href="https://blog.othree.net/log/2012/10/28/device-pixel-ratio/">文章</a>有介紹過 DPR（Device Pixel Ratio），不過當時只能透過 JavaScript 在 client 端存取，如果 server 端要知道 client 端的 DPR 至少得要來回交換一次資訊，在那個時候就有想過應該之後會有新的標準來負責處理這個問題，而最近終於看到標準的草案了，叫做 <a href="http://httpwg.org/http-extensions/client-hints.html">HTTP Client Hints</a>，照字面的意思，這個 HTTP 擴充標準不是只有 DPR，而是提供 client 端的一些資訊，目前包括了：</p>

<ul>
<li>DPR</li>
<li>width</li>
<li>viewport-width</li>
<li>downlink</li>
</ul>

<p>其中 <code>DPR</code> 就是 device pixel ratio；<code>viewport-width</code> 就和以前介紹過的 viewport width 一樣；<code>width</code> 比較特別，是實際希望的 resource 寬度，而不是真的屬於 device 的資訊，例如圖片在網頁內是 160px，裝置的 DPR 是 2，<code>width</code> 就是 160×2 = 320px；最後一個 <code>downlink</code> 則是以前一直很難取得的網路速度，以前最大的限制在於不管是 client 端還是 server 端都很難取得實際的網路速度，雖然可以用 JavaScript 下載檔案算時間來取得素質，但是這樣的作法其實有個兩難的問題，一方面問題是如果檔案大小，那取得的數字會很不準確，另一方面問題是如果檔案太大，那必然就是浪費時間和網路頻寬，更不用說很多地方沒有吃到飽方案可以用，這樣的作法應該不會太受歡迎，甚至如果不測速度，搞不好都已經把網頁讀好了。現在把這個資訊的提供者更往上一層，改成由瀏覽器提供，瀏覽器就可以跟作業系統作溝通，就比較有機會不用先測速就拿到可以參考的網路速度。這些 Header 傳輸的時候都不用附上單位，只有數字，其中 downlink 的單位是 Mbps，而規範所希望瀏覽器提供的 downlink 數字是參考 <a href="https://w3c.github.io/netinfo/#downlinkmax-attribute">Network Information API</a> 這份 API 裡面整理的，主要連線方法的理論速度上限，例如 GSM 就是 0.01、LTE 是 100﹑wifi 802.11g 是 54，本來是想說這個數字是看瀏覽器自己決定，不只根據連線的方式，還會看實際的傳輸數字或是使用者偏好，例如他可能使用 LTE 但是因為不是吃到飽，所以希望把速度報低一點之類的。</p>

<p>Downlink 其實會比預期的還要有用，除了可以根據網路速度決定回傳的圖片大小外，還可以根據 downlink 大小來決定要回傳的 CSS，實際上使用可能像是，網路慢的時候就給出比較輕量的 CSS 回去給 client 端，用不一樣的版面呈現給使用者，有點像是 Google 的 <a href="https://www.ampproject.org/">Accelerated Mobile Pages Project</a>  所做的。</p>

<p>Client hint header 是個需要 opt-in 的擴充功能，就是預設是沒開的，那要怎麼開啟呢，就是在網頁 document 的 header 加上 <code>Accept-CH</code>：</p>

<pre><code>Accept-CH: "DPR, Downlink"
</code></pre>

<p>或是加上 meta tag</p>

<pre><code>&lt;meta http-equiv="Accept-CH" content="DPR, Width, Viewport-Width"&gt;
</code></pre>

<p>其中 equiv 是 equivalent 意思，就是和 HTTP header 等效的意思，透過這個 header 跟瀏覽器說 server 端可以接收 client hint 資訊，然後支援的瀏覽器就會在後續，這個網頁所需要用到的其它資源，像是 js, css, 圖片等等的 request 都加上這些資訊，這個溝通過程其實就是使用已經很久的機制： <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation">HTTP content negotiation</a>，用的 header 也是 <code>Accept</code> 開頭的，目前已經支援的還只有 Chrome，而且要 46 版以後，其他幾個瀏覽器大多都還在討論要不要支援，Firefox 是有一些<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=935216">進度</a>。</p>

<p>這樣的設計其實有點先進，不完全是褒意，因為這意味著要 server 端，負責提供圖片的服務器，收到 request 後去看 DPR 或是 width 之類的資訊再來挑選要回傳哪一張圖片回去，而通常提供圖片靜態檔案的服務都不太有邏輯處理，大部分就是簡單的 HTTP server，只看靜態檔案，有就傳檔案回去，沒有就回傳 404，相信之後是會有些 module 或是設定的方法讓 HTTP server 可以把這部分直接處理掉，不過一些規模比較大的網站，如果有用上 CDN 的，可能就沒法直接用上這功能，還要等看有沒有 CDN 廠商支援。</p>

<p>Client hint 目前看來會是 responsive image 未來的一個主要解法，和 media query 相比其實有兩個很大的差異，第一個是 media query 是馬上（且隨時）發生效果，和 HTTP request 是無關的，所以一開始下載下來的網頁就會發生效果，但是 client hint 要透過第一個 HTML document 本身的 request 進行溝通，意味著 HTML document 本身的 request 是不會收到 client hint。第二個就是 media query 是隨時發生作用的，即使在網頁完整讀取下來後，還是有可能因為使用者造成的 client 環境變化，而讓瀏覽器去多下載一份檔案，最常見的情形就是調整視窗大小，在手機上可能就是轉直轉橫造成 viewport 寬度變化，甚至在 Mac 如果外接普通螢幕，拖拉瀏覽器視窗到不同螢幕也會造成影響，如果這些變化剛好符合設定的 media query，DPR 從 1 變成 2，就會讓瀏覽器又去下載了一張 DPR 不同的圖片，這類狀況在網路頻寬有限的環境下實在不是好事，而用 client hint header 的話就完全不會有這種狀況了，就只會有一開始帶著 Client Hint 去抓下來的那個檔案。</p>

<p>不過 Client Hint 也不是完全沒有副作用，目前最大的問題就是這幾個新 header 都不列在 <a href="https://fetch.spec.whatwg.org/#simple-header">simple headers</a> 裡面，所以在做 CORS request 的時候，本來不用 preflight request 的都會變成需要 preflight request 了，這個問題其實現在還在討論，因為其實有很多類似的新 header 都會造成一樣的問題，像是 CSP、Server-Sent Events 裡面的 Event-ID，主要是這麼多 Header 進去，就不 simple 了，而且照最近標準發展的狀況來看，這份 simple headers 的清單很難固定不變，有興趣的可以跟一下<a href="https://github.com/whatwg/fetch/issues/52">討論</a>。</p>
]]>
</description>
<link>https://blog.othree.net/log/2016/02/28/device-pixel-ratio-header/</link>
<guid>https://blog.othree.net/log/2016/02/28/device-pixel-ratio-header/</guid>
<category>css-html</category>
<pubDate>2016-02-28 14:34</pubDate>
</item>

<item>
<title>srcset</title>
<description><![CDATA[<p>Responsive Image 大概定案成 <code>srcset</code> 和 <code>&lt;picture&gt;</code> 都有了，src-N 已經消失，雖然我還蠻喜歡，不過總之最近發現 <code>srcset</code> 和我當初<a href="https://blog.othree.net/log/2012/12/02/srcset/">介紹</a>時已經差蠻多，中文資源有找到 Zhusee 有另外一篇<a href="http://blog.zhusee.in/post/248199/basic-responsive-image-with-srcset-property">介紹</a>，不過其實我去看現在的 spec 的時候發現，又有些修改了！最早 srcset 後面是用類似 media query 的設計，後來改成對圖片的 metadata，spec 裡面稱為 descriptor，分別有 width descriptor 用 <code>w</code> 和 density descriptor 用 <code>x</code>，而且限制 srcset 裡面只能用同一種 descriptor，例如全部用 <code>x</code> 或是全部用 <code>w</code>，所以：</p>

<ol>
<li>不能在一張圖片裡面同時有 <code>w</code> 和 <code>x</code></li>
<li>全部都用 <code>w</code> 或是全部都用 <code>x</code></li>
<li>不可有相同的數值，例如兩個 <code>1x</code> 或是兩個 <code>760w</code> </li>
<li>Descriptor 可以算是該圖片的資訊</li>
</ol>
]]><![CDATA[<p>不過最新的 spec 裡面少了第二點的限制，所以會有一組 srceset 混和 width descriptor 和 density descriptor 的情形，然後怎麼挑選圖片的<a href="https://html.spec.whatwg.org/multipage/embedded-content.html#select-an-image-source">地方</a>寫說：</p>

<blockquote>
  <p>In a user agent-specific manner, choose one image source from source set. Let this be selected source.</p>
</blockquote>

<p>就是叫瀏覽器自己想辦法的意思，我就很好奇，如果我想設定一組規則，要分成四個組合：</p>

<ul>
<li>小螢幕低密度</li>
<li>小螢幕高密度</li>
<li>大螢幕低密度</li>
<li>大螢幕高密度</li>
</ul>

<p>的話，我要怎樣設定 srcset 才能達到目標，因為現在已經不是用 media query 來寫 srcset 了，不能直接寫這樣四組，所以我就去找了 Firefox 和 Chromium 的原始碼來看看他們怎麼做的，Firefox 的找沒多久就<a href="https://dxr.mozilla.org/mozilla-central/source/dom/base/ResponsiveImageSelector.cpp#274">找到</a>了，因為他們有 <a href="https://github.com/mozilla/dxr">dxr</a> 專案用來方便找程式碼，實際用過覺得真的好用，至於 Chromium 就找比較久了，後來是在 <a href="https://github.com/WebKit/webkit/blob/master/Source/WebCore/html/parser/HTMLSrcsetParser.cpp#L232">WebKit 裡面</a>有找到，然後發現兩個瀏覽器的原理其實都一樣，要處理同時有 width descriptor 和 density descriptor 的狀況，基本上就是都轉成 density 然後來挑最適合的，作法大致如下，細節可能有誤：</p>

<ol>
<li>先對圖片標籤排版，這邊可能會用到 <code>sizes</code> 屬性，不過 CSS 還是優先，然後會得到圖片在頁面上的寬度，稱為 computed width</li>
<li>對每張候選圖片計算 effective pixel density，算法是： <code>圖片寬度 / computed width</code>，圖片寬度可以是 width descriptor 來的或是圖片的實際寬度，如果 descriptor 是 density descriptor 的話就不用計算，直接拿來用</li>
<li>比對 effective pixel density 和現在 device 螢幕的 density，取最接近的</li>
</ol>

<p>其中第三步驟的比較，大概是考慮效能和記憶體問題，兩個瀏覽器都沒真的做很嚴謹，都是照順序跑過一遍而已，所以在寫 srcset 的時候建議也要照圖片的大小排，至於要大的先還是小的先，就看開發者希望是 density 略大的優先還是略小的優先了，所以如果我寫：</p>

<pre><code>srcset="aaa.jpg 1x, bbb.jpg 1.4x, ccc.jpg 1.6x, ddd.jpg 2x"
</code></pre>

<p>然後我現在圖片需要 <code>1.5x</code> 的話，應該就會拿到 1.4x 的 <code>bbb.jpg</code>，而如果我偏好用 1.6x <code>ccc.jpg</code> 的話，就要改成：</p>

<pre><code>srcset="ddd.jpg 2x, ccc.jpg 1.6x, bbb.jpg 1.4x, aaa.jpg 1x"
</code></pre>

<p>後來發現這個挑選圖片的原則，其實在 WHATWG 的 <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#embedded-content">HTML Spec 裡面有寫</a>，不過是 non-normative 的段落，就是說這不是一定要遵守，只是建議，而且前面也有提到 spec 內是寫說挑選的原則是瀏覽器自己處理，而會這樣設計相信是為了像 mobile device 之類的裝置，網路速度如果比較慢，或是需要節省流量時，就可以挑選比較小的檔案，而不一定是挑出顯示上最好的那張圖片。</p>

<p>最後，其實 descriptor 除了 density 和 width 兩種之外，還有一種 height descriptor，不過目前只是保留可能性，spec 還沒定義要怎樣處理，其實還蠻能理解目前會以寬度為主的狀況，在 Matt Brubeck 的 Let's build a browser engine! 系列文章中的第六篇「<a href="http://limpet.net/mbrubeck/2014/09/17/toy-layout-engine-6-block.html">Block layout</a>」這篇文章有介紹到一般瀏覽器是怎樣排版畫 layout 的，而其處理的原則就是先從左上角開始把東西往右排，所以寬度一定先決定，然後才決定高度，相信這也是垂直置中搞這麼多年的原因吧。</p>
]]></description>
<link>https://blog.othree.net/log/2015/04/08/more-on-srcset/</link>
<guid>https://blog.othree.net/log/2015/04/08/more-on-srcset/</guid>
<category>css-html</category>
<pubDate>2015-04-08 00:53</pubDate>
</item>

<item>
<title>Resource Hints</title>
<description><![CDATA[<p><a href="www.w3.org/TR/2014/WD-resource-hints-20141021/">Resource Hints</a> 是最近剛公開的一個 W3C Working Draft，目前看作者都是 Google 的人，Resource Hints 是依附在 <code>&lt;link&gt;</code> 標籤或是 header 下的，用來告訴瀏覽器有哪些資源可以先讀好的一個慣例語法，範例如下：</p>

<pre><code>&lt;link rel="preconnect" href="//example.com"&gt;
&lt;link rel="preconnect" href="//cdn.example.com"&gt;
&lt;link rel="preload" href="/assets/font.woff" as="font" loadpolicy="next"&gt;
&lt;link rel="preload" href="/assets/logo.webp" as="image" loadpolicy="next inert"&gt;
</code></pre>

<p>可以發現有兩種 hint，分別是 <code>preconnect</code> 和 <code>preload</code>，當然就照字面上的意思就可以理解了，<code>preconnect</code> 就是先建立好連線，像是 HTTPS 連線就需要先做 handshake 交換好加解密用的 key，影響比較直接，<code>preload</code> 當然就是先把特定的檔案拉下來，而且還可以指定要不要先做處理，像是 decode jpg 圖檔之類的動作可以推遲到真的需要圖片時才做。</p>

<p>目前看起來是不適合大量的檔案，應該還是要用來指派較關鍵的一些檔案，像是主要背景、大圖、字形之類的，而且因為可以根據設定 block onload event，拿來讀字形似乎可以避免 FOUT 的狀況，感覺是個看似簡單，但是功能其實還蠻多的新東西。</p>
]]>
</description>
<link>https://blog.othree.net/log/2014/10/23/resource-hints/</link>
<guid>https://blog.othree.net/log/2014/10/23/resource-hints/</guid>
<category>css-html</category>
<pubDate>2014-10-23 14:18</pubDate>
</item>

<item>
<title>RGBA_ 控字慾</title>
<description><![CDATA[<p>昨天去參加了 RGBA 很久沒辦的活動，這次主題是字體，剛好是我很有興趣的議題，所以從一開始就很想參與，結果報名時竟然忘記，而且還連續兩次都忘記了，想不到活動當天 hlb 沒辦法過去，我就順利的接手他的票了，然後覺得應該分享一下，所以就有了這篇文章。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/14345683145/" title="RGBA_ 控字慾 by othree, on Flickr"><img src="//farm6.staticflickr.com/5591/14345683145_0f9d9383c8_b.jpg" width="1024" height="683" alt="RGBA_ 控字慾" src-1="(max-width: 768px)  //farm6.staticflickr.com/5591/14345683145_0f9d9383c8.jpg 1x, //farm6.staticflickr.com/5591/14345683145_0f9d9383c8_b.jpg 2x" src-2="//farm6.staticflickr.com/5591/14345683145_2d460ebe22_k.jpg 2x" /></a></p>

<p>一開始是由 Jason 的手寫西文毛筆字開始，我有拍些照片也錄了一段影片：</p>

<div class="embed_16_9">
<iframe width="853" height="480" src="//www.youtube.com/embed/55-x6DcKyQc" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>

<p>一直覺得寫這種字體用的筆很有趣，根本就是一片鐵片，要控制的好讓出墨平均應該需要不少練習吧，</p>

<p>接著就是 Even 介紹他挑選字形的方法，因為他基本上都是挑選黑體來用比較多，不過黑體也分很多種，所以先介紹了不同黑體的差異，基本上就是黑體字並不是所有都侷限現在框框內的，筆劃也不是都方方正正的，例如蒙納黑和 Arial Unicode MS 的底就不平，所以字體本身可能是有點歪斜的。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/14352869974/" title="喇叭口 by othree, on Flickr"><img src="//farm3.staticflickr.com/2911/14352869974_632f9dfaab_b.jpg" width="1024" height="1024" alt="喇叭口" src-1="(max-width: 768px)  //farm3.staticflickr.com/2911/14352869974_632f9dfaab.jpg 1x, //farm3.staticflickr.com/2911/14352869974_632f9dfaab_b.jpg 2x"  /></a></p>

<p>另外一種變化可以稱為喇叭口，也就是上圖那樣，在筆劃末端會放大，這種黑體比較適合小字使用，喇叭口可以讓視覺上感覺筆會比較粗，但是又不會影響整體的灰度，例如 Hiragino 這個 OSX 內建的日文字體。如果不要喇叭口的話可以選華康黑，華康黑又有一個特別的地方是他的一些筆劃是有裝飾的，我本來以為黑體就是不會有這些裝飾元素的，真是沒想到啊。最後講到信黑體，信黑體就是非常標準，文字侷限在方框內，灰度平均，沒有裝飾的黑體。然後 Even 還有用 <a href="http://fontshop.com">fontshop</a> 這個網站和 <a href="http://bohemiancoding.com/sketch/">Sketch</a> 示範一下不同字重的搭配。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/14159167097/" title="RGBA_ 控字慾 by othree, on Flickr"><img src="//farm3.staticflickr.com/2934/14159167097_81c5f90da1_b.jpg" width="1024" height="683" alt="RGBA_ 控字慾" src-1="(max-width: 768px)  //farm3.staticflickr.com/2934/14159167097_81c5f90da1.jpg 1x, //farm3.staticflickr.com/2934/14159167097_81c5f90da1_b.jpg 2x" src-2="//farm3.staticflickr.com/2934/14159167097_f6ac61344f_k.jpg 2x" /></a></p>

<p>接下來聽的是 but 介紹 OpenType 特殊功能和他做的一些實驗，OpenType 的規範有定義一些在西文排版上已經存在很久的功能，例如連字 Ligatures。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/diegoiaconelli/4904028989/" title="Ligatures by dotcx, on Flickr"><img src="//farm5.staticflickr.com/4075/4904028989_0f6974d4ec_b.jpg" width="1024" height="765" alt="Ligatures" src-1="(max-width: 768px)  //farm5.staticflickr.com/4075/4904028989_0f6974d4ec.jpg 1x, //farm5.staticflickr.com/4075/4904028989_0f6974d4ec_b.jpg 2x"  /></a></p>

<p>OpenType 有的功能時很很多，微軟有份<a href="http://www.microsoft.com/typography/otspec/featurelist.htm">文件</a>有列出，據 but 說，OpenType 是<a href="http://www.microsoft.com/typography/otspec/default.htm">微軟</a>和 <a href="http://www.adobe.com/products/type/opentype.html">Adobe</a> 合作產出的，我後來搜尋一些相關資料時發現微軟有不少文件，可惜 IE 對於 OpenType feature 的支援卻落後不少，Firefox 和 Chrome 都已經支援一陣子了，雖然目前都還算是實驗中的功能， but 有用這些功能和他自己製作的字形弄了兩個實驗網站，兩個其實都是用連字辦到的，<a href="http://but.tw/font/">第一個</a>是完全用文字把日本的火車時刻表做出來，這樣做除了畫面呈現上可以和紙本一樣，SEO 也會表現的比插入 icon 來的好，當然親和力也自動跟著提昇，<a href="http://but.tw/font/bpmfpy.html">第二個</a>則是注音字形，可以邊打拼音邊顯示你輸入的注音符號，然後另外還做一個反向的，可以打注音拼音，兩個 demo 都蠻有趣的，而且可以在頁面上玩玩看連字。</p>

<p>另外因為有提到 emoji，因為 emoji 是彩色的，目前各家實做不一樣，蘋果是塞圖進字形、Firefox 我忘了，然後微軟是用多個圖層來處理多色的問題，所以我問了一下去年看過的 SVG in OpenType 的相關資訊，可惜 but 沒接觸過，後來我去搜尋看看到底這神秘的東西是誰推出來的，因為把 SVG 放進去字形裡面不是單純只是向量的彩色圖片，所有 SVG 可以做的事情都可以辦到，例如動畫之類的。總之發現是 Mozilla 開始這計畫的，在 W3C 有 <a href="http://www.w3.org/community/svgopentype/">community</a>，Adobe 的網站也有介紹過，應該不會是個孤兒格式才是，目前好像轉轉進到 MPEG 組織下維護了，Open Type 有個很神秘的地方是它現在是由 MPEG 組織來維護，屬於 <a href="http://www.adobe.com/aboutadobe/pressroom/pressreleases/200508/081505OpenTypeISO.html">MPEG-4</a> 檔案格式的一部分，真是令不解的狀況啊～</p>

<p>最後比較可惜的是 Vertical Rhyme 沒聽到，不知道之後會不會放出投影片（but 的投影片也想要啊），主要想聽的主題就差那個而已，有一些特別去聽的就是之前已經在別的場合聽過了，整體來說這次收穫算是很多的，最後還是要感謝一下辦活動的 Even 和突然沒辦法去的布丁了，然後就看一下當天的盛況吧。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/14365818033/" title="RGBA_ 控字慾 by othree, on Flickr"><img src="//farm4.staticflickr.com/3859/14365818033_7ca0693d4d_b.jpg" width="1024" height="683" alt="RGBA_ 控字慾" src-1="(max-width: 768px)  //farm4.staticflickr.com/3859/14365818033_7ca0693d4d.jpg 1x, //farm4.staticflickr.com/3859/14365818033_7ca0693d4d_b.jpg 2x" src-2="//farm4.staticflickr.com/3859/14365818033_69f198a9da_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/14345645395/" title="RGBA_ 控字慾 by othree, on Flickr"><img src="//farm6.staticflickr.com/5547/14345645395_a2e651b466_b.jpg" width="1024" height="683" alt="RGBA_ 控字慾" src-1="(max-width: 768px)  //farm6.staticflickr.com/5547/14345645395_a2e651b466.jpg 1x, //farm6.staticflickr.com/5547/14345645395_a2e651b466_b.jpg 2x" src-2="//farm6.staticflickr.com/5547/14345645395_9bf280927c_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/14365860773/" title="RGBA_ 控字慾 by othree, on Flickr"><img src="//farm6.staticflickr.com/5154/14365860773_4a33f5f37b_b.jpg" width="1024" height="683" alt="RGBA_ 控字慾" src-1="(max-width: 768px)  //farm6.staticflickr.com/5154/14365860773_4a33f5f37b.jpg 1x, //farm6.staticflickr.com/5154/14365860773_4a33f5f37b_b.jpg 2x" src-2="//farm6.staticflickr.com/5154/14365860773_f616405d5d_k.jpg 2x" /></a></p>
]]>
</description>
<link>https://blog.othree.net/log/2014/06/06/rgba/</link>
<guid>https://blog.othree.net/log/2014/06/06/rgba/</guid>
<category>css-html</category>
<pubDate>2014-06-06 14:47</pubDate>
</item>

<item>
<title>object-fit</title>
<description><![CDATA[<p>在一些情境下，網站的圖片來源可能無法和版面很契合，例如新聞網站，新聞的照片可能有直的橫的，甚至有不同的寬高比，但是網站的版面配置不可能配合所有的可能性，如果想要有個封面故事，又要個滿版的照片，又或者是提供給 Facebook 的照片，它的縮圖都是正方形的，但是大部分的時候，文章的照片都不會是這種比例，最理想是有個 server 端的程式可以幫忙把圖片轉成想要的大小，例如 Facebook 其實是有個程式來作這件事，包括調整大小、重新壓縮、快取，大概連雲端分散式儲存的部份等等問題都一口氣處理掉了。</p>

<p>如果要純前端處理，其實目前最好用的作法是用 <a href="http://www.w3.org/TR/css3-background/#the-background-size">CSS3 Background</a> 的 <code>background-size: cover;</code>，這個樣式會讓標籤的背景圖調整成剛好可以填滿元素大小的程度，當然也考慮好寬高比了，這個方法最主要的缺點在於把圖片從 HTML 文件中抽掉了，在語意上不太好，像是搜尋引擎之類的，對於 <code>&lt;img&gt;</code> 和 CSS 背景的處理應該還是會有差異的，例如 Google 圖片搜尋我就沒印象有找到 CSS 的背景圖過。</p>

<p>要維持 <code>&lt;img&gt;</code> 標籤的存在，又要不管大小和寬高比都可以滿版，在現在是只能用 JavaScript 來輔助，實際上的邏輯也不會太複雜，其實就是比較一下版面的寬高比和圖片的寬高比，然後決定用外框的寬還是高當基準，接著維持圖片的寬高比縮放到計算的大小，定位到讓圖片置中，寫成 jQuery plugin 大概像是下面這樣：</p>

<pre><code>$.fn.cover = (selector) -&gt;
  $(@).each -&gt;
    $outer = $(@)
    ow = $outer.width()
    oh = $outer.height()
    or = ow / oh
    $outer.find(selector).each -&gt;
      $item = $(@)
      iw = $item.width()
      ih = $item.height()
      ir = iw / ih
      if ir &lt; or
        w = ow
        h = ow / ir
        l = 0
        t = (oh - h) / 2
      else
        h = oh
        w = oh * ir
        t = 0
        l = (ow - w) / 2

      $item.css(width: w, height: h, top: t, left: l)
</code></pre>

<p>使用範例：</p>

<pre><code>$('.cell').cover('img')
</code></pre>

<p>不過實際上還要考慮的問題不少，像是執行的時間點，上面這個範例可以運作的時間不只要圖片讀好，有正確的寬高之外，<code>.cell</code> 或是說 <code>$outer</code> 也要在頁面上顯示，有 render 過，才能夠取得它的寬高，整個函式才能夠正確的運作，結果就是訪客其實會看到一瞬間圖片調整好大小位置前的樣子。</p>

<p>用 JavaScript 加上 <code>&lt;img&gt;</code> 這個方案的缺點除了上面說的之外，還有一個是會需要多一層的標籤，不過目前還是很多人會使用這個方案，也有不少 Library 在處理這個問題，像是 <a href="http://soulwire.github.io/fit.js/">fit.js</a>。</p>

<p>這個問題，其實在未來就不存在了，CSS3 Image 裡面有個新的樣式定義就是為了處理這個問題，叫做 <a href="http://dev.w3.org/csswg/css-images-3/#object-fit">object-fit</a>，可以想像成讓 <code>&lt;img&gt;</code> 標籤可以用 background-image 的方式來操控裡面的圖面了，而對應 <code>background-size</code> 的，就是 <code>object-fit</code> 了，未來可以這樣寫 HTML：</p>

<pre><code>&lt;img src="http://blah.com/blah.png" class="cover" width="300" height="300" /&gt;
</code></pre>

<p>配上 CSS：</p>

<pre><code>img.cover {
  object-fit: cover;
}
</code></pre>

<p>就可以同時達到不用多一層標籤，又有實際的 <code>&lt;img&gt;</code>，加上不用 JavaScript，不用考慮 resize 圖片的時機，非常的完美，不過這個新標準目前實作的瀏覽器不多，只有 Chrome 和換成 WebKit 前的 Opera，Opera 的 blog 也有發表過一篇文章介紹這個新屬性：<a href="http://dev.opera.com/articles/view/css3-object-fit-object-position/">CSS3 Object Fit Object Position</a>，裡面也有不少範例可以用 Chrome 開來試試看。</p>

<p>要說有什麼缺點的話，其實還是有的，就是這個 object-fit 不是排版用的，只能用在圖片上，不像 JavaScript library 基本上是什麼元素都可以調整，沒有受限。</p>
]]>
</description>
<link>https://blog.othree.net/log/2014/01/28/object-fit/</link>
<guid>https://blog.othree.net/log/2014/01/28/object-fit/</guid>
<category>css-html</category>
<pubDate>2014-01-28 22:32</pubDate>
</item>

<item>
<title>More Twitter Cards</title>
<description><![CDATA[<p>進入本題前，先岔題到 open graph 一下，就是前兩天才注意到要用 <a href="http://opengraphprotocol.org/">Open Graph protocol</a> 的話，其實在 html 裡面要加上 <code>prefix="og: http://ogp.me/ns#"</code> 的屬性和值：</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html
    xmlns="http://www.w3.org/1999/xhtml"
    lang="zh-tw"
    prefix="og: http://ogp.me/ns#"
&gt;
</code></pre>

<p>這個 prefix 屬性其實是 <a href="http://www.w3.org/TR/rdfa-syntax/#s_syntax">RDFa</a> 來的，所以其實 Open Graph Protocol 也是走 RDFa 系統，Twitter Card 就比較沒走的這麼語意網了。</p>

<p>這篇其實是要說 Twitter Card 的更新，首先是卡片的種類變多了，在一開始只有 Photo、Summary 和 Player 三種，現在則又多了 App、Product、Gallery 和 Summary Large Image 四種。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11754350766/" title="Twitter Card by othree, on Flickr"><img src="//farm4.staticflickr.com/3755/11754350766_84fd72a647_b.jpg" width="853" height="1024" alt="Twitter Card" src-1="(max-width: 768px)  //farm4.staticflickr.com/3755/11754350766_84fd72a647.jpg 1x, //farm4.staticflickr.com/3755/11754350766_84fd72a647_b.jpg 2x"  /></a></p>

<p>其中 App 還蠻早就有了，以前如果貼 iTunes Store 連結的話就可以看到，只是一開始沒開放申請的樣子，新的幾種卡片我最想要的其實是 Summary Large Image，這個其實就是最早的 Photo 卡片的樣子，和 Photo 其實只差 description，我一開始會偷用 Photo 卡片來讓文章的圖片比較大，只是他們後來改成不會顯示我提供的文章摘要，直到前幾天才發現有新的 Summary Large Image，完全就是當初的 Photo 卡啊，所以看到就立馬申請下去。</p>

<p>申請的過程和以前也不一樣了，現在是在卡片<a href="https://dev.twitter.com/docs/cards/validation/validator">測試工具</a>那邊先測試，如果驗證格式沒問題就會出現黃色的通知和申請鈕可以按下去，如果是已經申請通過的話就會是綠色的。還有就是測試工具也多了組出 sample code 的功能，還算蠻不錯的，有些比較複雜的卡片格式就可以利用這個工具來搞清楚。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11754351616/" title="Twitter Card by othree, on Flickr"><img src="//farm3.staticflickr.com/2806/11754351616_f76fa313e2_b.jpg" width="1024" height="694" alt="Twitter Card" src-1="(max-width: 768px)  //farm3.staticflickr.com/2806/11754351616_f76fa313e2.jpg 1x, //farm3.staticflickr.com/2806/11754351616_f76fa313e2_b.jpg 2x" src-2="//farm3.staticflickr.com/2806/11754351616_4d814b31d0_k.jpg 2x" /></a></p>
]]>
</description>
<link>https://blog.othree.net/log/2014/01/05/more-twitter-cards/</link>
<guid>https://blog.othree.net/log/2014/01/05/more-twitter-cards/</guid>
<category>css-html</category>
<pubDate>2014-01-05 00:34</pubDate>
</item>

<item>
<title>Scrolling Performance</title>
<description><![CDATA[<p>元旦就是要來發篇技術文章的啦。</p>

<p>一直覺得我的 blog 在 scroll 的時候好像不是很順暢，把之前亂加的 parallax 特效拿掉也沒什麼改善，於是週末花了些時間研究了一下，其實要改進捲動時效能可以作的事情大概就是那些，<a href="http://kristerkari.github.io/adventures-in-webkit-land/blog/2013/08/30/fixing-a-parallax-scrolling-website-to-run-in-60-fps/">Fixing a parallax scrolling website to run in 60 FPS</a> 這篇文章有整理成條目：</p>

<ol>
<li>Resize、scroll 事件不要在迴圈內綁</li>
<li>Resize、scroll 事件的 handler 用 requestAnimationFrame 來執行</li>
<li>避免 resize 大張圖片</li>
<li>避免 background-size</li>
</ol>

<p>HTML5 Rocks 的 <a href="http://www.html5rocks.com/en/tutorials/speed/scrolling/">Scrolling Performance</a> 這篇文章則是介紹如何分析網站捲動的效能，也有提到一些上面那篇文章沒講到的項目，像是避免 repaint，避免一些計算比較昂貴的 style 等。另外最近還有一個很有名的 <a href="http://www.thecssninja.com/javascript/pointer-events-60fps">hack</a>，是在捲動時，使用 <code>pointer-events: none;</code> 來避免元件產生 hover 的特效結果增加畫面 painting 的運算。</p>

<p>在講我遇到的問題前想先來說一下下面這張圖怎麼看：</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11624929755/" title="Scroll cause image resize by othree, on Flickr"><img src="//farm4.staticflickr.com/3780/11624929755_c33c8aa3f0_b.jpg" width="1024" height="750" alt="Scroll cause image resize" src-1="(max-width: 768px)  //farm4.staticflickr.com/3780/11624929755_c33c8aa3f0.jpg 1x, //farm4.staticflickr.com/3780/11624929755_c33c8aa3f0_b.jpg 2x"  /></a></p>

<p>這張圖是 Chrome 的內建開發工具，目前要作 performance tuning 最好的工具還是 Chrome 開發工具的這個 Timeline 和 Profile，網路上找的到的相關資源也是以 Chrome 為主。這張圖的上半是 framerate 的狀態表示，上面的綠色 bar 代表的是生成畫面前運算執行的時間，所以是越短越好，可以看到那個區塊有兩條橫線，右邊寫了 30fps 和 60fps，意思是執行時間只要能壓在那條線下面，就可以讓頁面有該 frame rate 的表現。下半部就可以拉近去細看不同時間點做了哪些事情，像是圖片 decode、resize、事件的 callback 執行等等都可以分辨。</p>

<p>使用這個開發工具來看到底是那邊計算很花時間，結果發現一直有 image resize 的運算在發生，即使我的圖片都已經全部讀好，頁面從頭卷到尾過，只要從新捲動就會發現 Chrome 又重新把 resize 過的 image 再 resize 一次，後來同事 <a href="http://blog.linmic.net/">Linmic</a> 寫了 test case 來測試各種定義圖片寬高的方法：</p>

<ul>
<li><code>&lt;img&gt;</code> width/height 屬性</li>
<li>CSS 相對長度定義（百分比、em）</li>
<li>CSS 絕對長對定義（px）</li>
<li>CSS 背景圖 + background-size</li>
</ul>

<p>等等，結果發現只有第一個方法圖片不會因為頁面捲動而需要重新 resize，簡單說就是，如果圖片的寬高是用到 CSS 的定義來決定的話，那在 Chrome 下就會有個 bug 是，頁面捲動時，即使圖片尺寸沒有變過，Chrome 還是會重新去 resize。根據目測，這問題在 Firefox 和 Safari 上是沒有的樣子，Chrome 的差距比較大，而且現在因為 responsive design 的關係，文章內的插圖很多寬高都是相對的寬高，像是很多人用的 <a href="http://getbootstrap.com/">Bootstrap</a> 就是這樣，其實影響的範圍蠻廣的，而且找不到方法可以避開，搜尋一下看起來是有一張 <a href="https://code.google.com/p/chromium/issues/detail?id=162514">issue</a>，希望能夠早點修復啊。</p>
]]>
</description>
<link>https://blog.othree.net/log/2014/01/01/scrolling-performance/</link>
<guid>https://blog.othree.net/log/2014/01/01/scrolling-performance/</guid>
<category>css-html</category>
<pubDate>2014-01-01 01:49</pubDate>
</item>

<item>
<title>W3C Validator Suite</title>
<description><![CDATA[<p>W3C 不知道何時推出了 <a href="https://validator-suite.w3.org/">Validator Suite</a>，有別於 <a href="http://validator.w3.org/">Markup Validator</a>，這次是個收費服務，目前註冊帳號會送 20 個使用額度，收費也是買使用額度，而不是算時間的，Validator Suite，是基於 Markup Validator 而發展的，本身是 close source，兩者最主要的差別在於 Validator Suite 是可以一口氣檢查大量網頁的，你丟網址給它，它可以一直往下深入檢查每個子頁面，Markup Validator 則是一次只有一頁，這樣設計的目標對象其實應該是商業網站之類的，至於 W3C 的 Markup Validator 則是 open source 的，這幾年也一直有更新，整個進步很多，很多新標準的支援都很快，像是 itemprop、itemscope 之類的屬性都能真正的判斷是否有正確使用，而不只是單純的判斷是不是個合法的屬性。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11547188533/" title="W3C Validator Suite by othree, on Flickr"><img src="//farm8.staticflickr.com/7397/11547188533_3c7063ebd6_b.jpg" width="1024" height="759" alt="W3C Validator Suite" src-1="(max-width: 768px)  //farm8.staticflickr.com/7397/11547188533_3c7063ebd6.jpg 1x, //farm8.staticflickr.com/7397/11547188533_3c7063ebd6_b.jpg 2x"  /></a></p>
]]><![CDATA[<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11547188043/" title="W3C Validator Suite by othree, on Flickr"><img src="//farm8.staticflickr.com/7429/11547188043_349956d8f8_b.jpg" width="1024" height="759" alt="W3C Validator Suite" src-1="(max-width: 768px)  //farm8.staticflickr.com/7429/11547188043_349956d8f8.jpg 1x, //farm8.staticflickr.com/7429/11547188043_349956d8f8_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11547187753/" title="W3C Validator Suite by othree, on Flickr"><img src="//farm8.staticflickr.com/7375/11547187753_caccfa7ac7_b.jpg" width="1024" height="759" alt="W3C Validator Suite" src-1="(max-width: 768px)  //farm8.staticflickr.com/7375/11547187753_caccfa7ac7.jpg 1x, //farm8.staticflickr.com/7375/11547187753_caccfa7ac7_b.jpg 2x"  /></a></p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11547187353/" title="W3C Validator Suite by othree, on Flickr"><img src="//farm8.staticflickr.com/7344/11547187353_5f87f77d7d_b.jpg" width="1024" height="759" alt="W3C Validator Suite" src-1="(max-width: 768px)  //farm8.staticflickr.com/7344/11547187353_5f87f77d7d.jpg 1x, //farm8.staticflickr.com/7344/11547187353_5f87f77d7d_b.jpg 2x"  /></a></p>
]]></description>
<link>https://blog.othree.net/log/2013/12/25/w3c-validator-suite/</link>
<guid>https://blog.othree.net/log/2013/12/25/w3c-validator-suite/</guid>
<category>css-html</category>
<pubDate>2013-12-25 22:13</pubDate>
</item>

<item>
<title>Resoponsive Image 新標準：src-N</title>
<description><![CDATA[<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/11132191124/" title="Mozilla l10n Workshop by othree, on Flickr"><img src="//farm8.staticflickr.com/7448/11132191124_748877076f_b.jpg" width="1024" height="683" alt="Mozilla l10n Workshop" src-1="(max-width: 768px)  //farm8.staticflickr.com/7448/11132191124_748877076f.jpg 1x, //farm8.staticflickr.com/7448/11132191124_748877076f_b.jpg 2x" src-2="//farm8.staticflickr.com/7448/11132191124_c3e64f78a7_k.jpg 2x" /></a></p>

<p>上週看到 <a href="http://html5doctor.com/responsive-images-end-of-year-report/">Responsive images - end of year report</a> 這篇文章，才驚覺到現在 resoponsive image 的競爭者們，srcset 和 &lt;picture&gt; 都已經落伍了，現在呼聲最高的是 <a href="http://tabatkins.github.io/specs/respimg/Overview.html#syntax">src-N</a> 屬性。</p>

<p>src-N 的 N 是正整數，所以就是 <code>src-1</code>、<code>src-2</code>、<code>src-3</code> 這樣的形式，其實我覺得這個命名模式蠻有趣的，很像是程式設計師在程式寫一半，突然發現已經弄一半的系統中，某個變數突然有複數的值時，會在變數名稱後面加上 '1'、'2'、'3' 那樣，所以 src-N 就有 src 用了一陣子之後，突然發現有需要其他的圖片 src，所以就用 src-1、src-2、src-3 來當名稱。規範對於 N 的範圍沒有定義，然後照字面上來看是可以有空號的，不過 parse 時會照數字順序處理，如果全部處理完沒找到 match 的圖片可以用的話，就會拿 src 的值當成預設的圖片。</p>

<p>src-N 屬性的內容和 srcset 的內容規則不太一樣，而且有兩種格式，首先第一種比較簡單，就是寫多個 src-N 屬性，然後每個給他一個 media query 作 prefix，之後只給針對解析度分開的 srcset 值，例如：</p>

<pre><code>src-1="(max-width: 768px) //farm4.staticflickr.com/3820/11153957705_50c0f5a7d8.jpg 1x, //farm4.staticflickr.com/3820/11153957705_50c0f5a7d8_b.jpg 2x"
src-2="//farm4.staticflickr.com/3820/11153957705_eafe482d62_k.jpg 2x"
</code></pre>

<p>當然解析度是可選的，所以也可以一個 media query 只配一張圖片：</p>

<pre><code>src-1="(max-width: 768px) //farm4.staticflickr.com/3820/11153957705_50c0f5a7d8.jpg"
src-2="(max-width: 2560px) //farm4.staticflickr.com/3820/11153957705_50c0f5a7d8_b.jpg"
src-3="(max-width: 3840px) //farm4.staticflickr.com/3820/11153957705_eafe482d62_k.jpg"
</code></pre>

<p>這種寫法是比較簡單好懂得，第二種寫法是只提供一個 src-N 屬性，然後告訴瀏覽器你想要的 Resoponsive Design 的 media query 的中間點和圖片想要的寬度，然後把所有可以提供的圖片和他的大小都提供出來，瀏覽器會根據實際的 device 來計算找到最適合的圖片，拿標準上的範例來說明：</p>

<pre><code>&lt;img src-1="100% (30em) 50% (50em) calc(33% - 100px);
            pic100.png 100, pic200.png 200, pic400.png 400,
            pic800.png 800, pic1600.png 1600, pic3200.png 3200"&gt;
</code></pre>

<p>首先，<code>;</code> 前面那串稱為 size viewport list，理論上都會是單數個值，會是圖片寬度、viewport 中間點、圖片寬度、中間點這樣的循環，所以上面的 <code>(30em)</code> 和 <code>(50em)</code> 就是你的 responsive design layout 的不同 layout 切換的條件，另外三個值則是圖片在那個 layout 下希望的寬度。也就是螢幕寬度小於 30em 時，你這個版面這張圖片寬度會是 100%，如果螢幕介於 30-50em，那圖片寬度會是 50%，如果螢幕大於 50em，那圖片寬度就是 33%-100px。接著的 <code>;</code> 後面的內容則是你提供的各種大小的圖片和他的寬度，然後接著神奇的事情就發生了，瀏覽器會根據你的螢幕寬度決定要取哪個 layout，用那個 layout 的圖片寬度去計算實際上圖片大約的大小，乘上解析度，然後自己去後面那堆候選的圖片檔案找最適合的來用。</p>

<p>第二種語法的缺點就是不能忽略 device pixel ratio，不然在大部分情形是方便簡單很多的。回頭看目前出現過的三種語法，目前我是最喜歡 src-N 的，雖然我是覺的一致性、整齊性比 srcset 還要差，不過比起 &lt;picture&gt; 實在都好很多，只是目前依然也還沒有瀏覽器支援，其實 srcset 之前也都沒人支援，webkit 的支援在發布前被檔下了，後來的討路就產生了現在的 src-N，目前看起來也沒其他候選標準，或許過陣子就會有瀏覽器開始支援這種寫法了吧。 </p>
]]>
</description>
<link>https://blog.othree.net/log/2013/12/02/src-n/</link>
<guid>https://blog.othree.net/log/2013/12/02/src-n/</guid>
<category>css-html</category>
<pubDate>2013-12-02 21:45</pubDate>
</item>

<item>
<title>Transition 之惡</title>
<description><![CDATA[<p>好像很久之前有在 Facebook 上說過我對 CSS transition 語法的不滿，因為不是三言兩語可以解釋的，所以一直沒講清楚，之後忙了一陣子之後，今天終於有時間整理一下了。</p>

<p>問題可以說是因為不管有多少 CSS 屬性要 transition 效果，都要寫在同一個 transition 屬性之下造成的，這樣的設計不是不好，但是他產生了兩個問題沒有解決：第一個是如果我有不同的狀態，要的 transition 屬性不一樣的話，唯一的作法就是把全部需要的屬性都重寫，不能只改單一屬性的 transition：</p>

<pre><code>.case1.active {
    transition: top 1s ease, height 1s ease, left 1s ease, width 1s ease, opacity 1s ease;
}

.case2.active {
    transition: top 1s ease, height 1s ease, left 1s ease, width 1s ease;
}
</code></pre>

<p>這樣寫的產生的影響有二，一是造成 code 重複，維護不易，二是重複 code 會增加傳輸量，降低網站的速度。第二個問題是，當我在定義 transition 時，規範要求我將所有 transition 視為一體，但是 transitionend 事件卻是每個屬性分開觸發，我覺得這根本是陷阱，例如上面的 case1 會有 5 個 transitionend 事件一起觸發，如果沒注意到這點的話，你的 transitionend callback 就會每次都多執行了四次，如果我去檢查到底是哪個屬性的 transitionend 事件來決定要不要作 callback 的話，一是程式碼不漂亮，硬是多了個 if 判斷，二是我該選哪個屬性來作代表？會有語意不對的情形，語意不對就會有維護問題，要是未來改了 transition 的定義，剛好被我選上的代表屬性被拿掉了，callback 就不會執行了。</p>

<p>當然我不認為 transitionend 事件應該不分屬性只發生一次，畢竟有要詳細複雜的效果還是要能知道到各別屬性的轉換結束時機。其實這個問題也很難有好方法，提案修改 spec 影響很大，新增東西還比較有機會，我自己是希望要碼就可以完全拆開看，不然就是兩邊都可以視為一體來看，和 transition 比起來，animation 的問題就小一點，因為 animation 整個是被當一體，animation 事件可以用 animationName 來確定沒跑錯 callback，只要 name 沒變，動畫內容怎麼改都沒關係，animationend 事件也不會每個屬性都觸發一次，而是真的動畫結束才被呼叫，不過兩份文件的編輯幾乎一樣....</p>

<p>最後隨便講個 transition 另外的問題吧，就是 Firefox 下，一些屬性，例如高度好了，如果用百分比之類的，或是 auto 這種，不是太明確的值的話，會無法跑出 transition 效果，有點麻煩，尤其是要做全螢幕置中的效果的時候。</p>
]]>
</description>
<link>https://blog.othree.net/log/2013/11/05/bad-part-of-css-transition/</link>
<guid>https://blog.othree.net/log/2013/11/05/bad-part-of-css-transition/</guid>
<category>css-html</category>
<pubDate>2013-11-05 15:59</pubDate>
</item>

<item>
<title>消失的 video</title>
<description><![CDATA[<p>最近遇到一個 CSS bug，主要是在 Chrome 上發生，一開始是有些元素在做 CSS Transition 時會不見，而且有時候 transition 結束還是看不到，要隨便作一些事情觸發瀏覽器 redraw 東西才會回來，作什麼事情又很不一定，而且去 access clientWidth 之類的屬性來想要叫瀏覽器重新畫在這個 bug 上是無效的，後來在網路上找到避開的作法：</p>

<pre><code>-webkit-backface-visibility: hidden;
-webkit-transform: translateZ(0);
</code></pre>

<p>加上這兩個 CSS 屬性就可以讓會消失的元件不要消失了，後來才知道之前也有同事處理過一樣的問題。然後，接著又遇到另外一個神秘的現象，因為做的東西有投影片播放，動畫 transition 換頁和 video，加起來就是要作一個 transition 讓 video 進入頁面，然後自動播放的機制，結果就發生怪事了，如果 video 沒播過，還沒有 cache 的話，會發生 video 消失的狀況，一開始以為是抓檔案 loading 到真的開始播放之中間的這段時間，Chrome 實作不好，會讓影片節點變成透明的，然後因為其他的問題讓影片卡在那個狀況，所以就變成一直看不到。</p>

<p>後來花了很多時間測試，最後發現影片根本就有在播，只是東西都看不到，進一步發現根本和上面講的是同一個 bug，加上同樣的 style 後，影片就不再消失了，而且連那開始 loading 到開始播放間的那段時間，畫面也完全不會消失了，就從原來給它的 poster 接到真的影片，一切都很順暢。</p>

<p>至於什麼情況下會有這個 bug 出現，目前只知道是 <code>position: absolute;</code> 的元件加上 transition 後有發生的機會。</p>

<p>Ref: <a href="http://help.dimsemenov.com/discussions/problems/858-weird-bug-in-chrome">Element disappearing during transition in Chrome</a></p>
]]>
</description>
<link>https://blog.othree.net/log/2013/08/26/blinked-video/</link>
<guid>https://blog.othree.net/log/2013/08/26/blinked-video/</guid>
<category>css-html</category>
<pubDate>2013-08-26 18:17</pubDate>
</item>

<item>
<title>Main</title>
<description><![CDATA[<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/9515736753/" title="Happy Designer Mini #3 by othree, on Flickr"><img src="//farm8.staticflickr.com/7356/9515736753_8fc717d9c0_b.jpg" width="1024" height="683" alt="Happy Designer Mini #3" srcset="//farm8.staticflickr.com/7356/9515736753_8fc717d9c0.jpg 768w, //farm8.staticflickr.com/7356/9515736753_8fc717d9c0_b.jpg 768w 2x, //farm8.staticflickr.com/7356/9515736753_683add3095_k.jpg 2x" /></a></p>

<p>昨天參加 Happy Designer Mini #3，有人介紹了 <a href="http://lungo.tapquo.com/">lungo</a> 這個 framework，說到裡面一些 convention，可以用 <code>&lt;header&gt;</code> 就產生頁首，<code>&lt;footer&gt;</code> 就是頁尾，然後主要內容就是 article，不過對於 article 的使用其實我算蠻有意見的。畢竟 article 的語意還是比較偏文章，對於應用程式來說，主要的區塊應該要用 <a href="http://www.w3.org/TR/wai-aria/roles#main">WAI-ARIA</a> 的 <code>role="main"</code> 才是，不過其實這篇文章想要說的是 HTML 5.1 的 Draft 其實已經提出了 <code>&lt;main&gt;</code> 這個<a href="http://www.w3.org/html/wg/drafts/html/master/grouping-content.html#the-main-element">標籤</a>，用途就和 <code>role="main"</code> 一樣。</p>

<p>而除了 <code>&lt;main&gt;</code> 之外，其實還有一個新的 <code>&lt;data&gt;</code> <a href="http://www.w3.org/html/wg/drafts/html/master/text-level-semantics.html#the-data-element">標籤</a>，這個標籤是用來代替以前在使用 microdata、microformat 之類的格式化資料時，為了寫機器讀取用資料時，在行內加上的 <code>&lt;span&gt;</code> 標籤的，<code>&lt;data&gt;</code> 本身歸類在 Phrasing content，可以想成是 <code>display: inline;</code> 的使用方式，雖然第一眼看起很像是區塊等級的就是了。</p>

<p>至於我為什麼會注意到有這些新標籤呢，其實我也沒閒閒沒事去關注 HTML 5.1 Draft 更新啦，是因為 <a href="https://github.com/othree/html5.vim">html5.vim</a> 會有人來報說有新東西要加，意外的好處～</p>
]]>
</description>
<link>https://blog.othree.net/log/2013/08/17/main/</link>
<guid>https://blog.othree.net/log/2013/08/17/main/</guid>
<category>css-html</category>
<pubDate>2013-08-17 00:22</pubDate>
</item>

<item>
<title>WebConf 2013 talk</title>
<description><![CDATA[<p>題目是： Web Developer Tools in Modern Browsers</p>

<p>這次時間塞的很滿，投影片在下面，不過投影片不是本 Talk 重點，重點還是在 Demo 部分每個 Panel 的簡介，錄影不知道要等到何時，總之投影片的部分先放出了。</p>

<p>
<script async="async" class="speakerdeck-embed" data-id="cbfcdc603ee201304c57123138154bc3" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
</p>
]]>
</description>
<link>https://blog.othree.net/log/2013/01/12/webconf-2013-talk/</link>
<guid>https://blog.othree.net/log/2013/01/12/webconf-2013-talk/</guid>
<category>css-html</category>
<pubDate>2013-01-12 20:40</pubDate>
</item>

<item>
<title>WebSite Improvent</title>
<description><![CDATA[<p>這篇文章整理一下這次改版大概是做了哪些東西，其實一開始的目標很簡單，就是對以前的樣式不滿很久了，想要一個簡潔，沒有多餘東西的版面，不過實際上讓我動手的原因其實是我開始有 Responsive Web Site 的需求了，我想很多人都知道，現在全世界可以上網的設備，手持裝置的數量已經和電腦不相上下了，以前我想說要看文章應該不會想在手機上看，可是後來我慢慢瞭解，有很多時候可能是點到朋友在 Twitter 上的分享，所以訪客才會用手機打開你的網頁，如果訪客這時候點開的網頁有支援行動裝置的低解析度，那使用者體驗會好很多。總之，我就想要讓我的部落格也有支援就是，一開始只是想要套用 Twitter Bootstrap，不過之後又陸續加上不少東西，整理如下：</p>

<h5>Bootstrap</h5>

<p>這次使用 Bootstrap 的 CSS Framework 來支援不同解析度的瀏覽介面，套用起來很簡單，預設的樣式就很不錯，像是表單之類的元件我就不用另外費心思來處理，主要是調整行高之類的改善排版，讓中文文章的閱讀更輕鬆些，顏色和背景則是從 <a href="http://blog.othree.net/log/2012/11/22/nippon-colors/">日本的傳統色</a> 那裡挑來的，目前是還沒考慮到配色的協調，應該還會再調整。</p>

<h5>Web Fonts</h5>

<p>用了 <a href="http://www.google.com/webfonts">Google Web fonts</a>，分別在頁首 logo 和程式碼區塊，範例：</p>

<pre><code>@media (-webkit-min-device-pixel-ratio: 2),
       (min--moz-device-pixel-ratio: 2),
       (min-resolution: 2dppx)
</code></pre>

<p>Logo 部分當然就是要讓它比較不一樣些，所以找了個很特別的 8bit 風格字體，至於程式碼區塊，有一個基本要求是要是等寬字形，不然程式碼每個字元垂直對不齊會超難受的，後來用的是設計給 Android 手機的 Droid Sans，Google Web Fonts 有個好處是完全照標準 CSS 的用法，而且免費。</p>

<h5>DevicePixelRatio Support</h5>

<p>這也是之前 <a href="http://blog.othree.net/log/2012/10/28/device-pixel-ratio/">介紹</a> 過，讓高解析度螢幕的環境可以使用比較大張的圖片，配合 flickr 的命名規則作的，自己用 iPad 看起來是蠻漂亮的啦。</p>

<h5>Default sans-serif font</h5>

<p>以前有介紹過判斷訪客瀏覽器是否支援字體渲染的 <a href="http://blog.othree.net/log/2011/03/06/default-font-style/">方法</a>，當時我給 Windows 的預設是不支援，不過時代在改變，所以現在預設的字型都是黑體了，如果瀏覽器判斷出來不支援字體渲染，那會改用系統預設字形，通常會是新細明體，會做這樣的改變事我自己有時候會看到切換字型那瞬間的跳動，老實說一直跳是不太舒服啦，所以我想讓看到的人盡量減少，考量到現在數據上訪客用 Windows 7 的使用者已經大於其他所有的 Windows 的使用者的總和，所以我就這樣改了。</p>

<h5>Twitter Cards and Open Graph Protocol</h5>

<p>接下來的改造則是社群網路的結合，這部分是以前完全沒弄過的部分，主要的原因是太多社群網路了，但是每個社群網路間都有堵 <a href="http://www.w3.org/2010/Talks/0303-socialcloud-tbl/">高牆</a>，使用者要跨越這些高牆非常困難，一個只用 Facebook 的人無法和只用 Twitter 的人從社群網路上有太多互動，就像是陷入飛彈發射井一樣。</p>

<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8215041817/" title="Flickr 上 othree 的 Social Network Silos"><img src="//farm9.staticflickr.com/8489/8215041817_a15170fb3d_b.jpg" width="1024" height="845" alt="Social Network Silos" srcset="//farm9.staticflickr.com/8489/8215041817_a15170fb3d.jpg 768w, //farm9.staticflickr.com/8489/8215041817_a15170fb3d_b.jpg 768w 2x" /></a></p>

<p>從網站開發者這端來看，要減少這個社群網路的壟斷，基本上就是增加支援不同的社群網路，不過社群網站太多了，簡單 Google 一下 <a href="https://www.google.com.tw/search?num=10&amp;hl=zh-TW&amp;site=imghp&amp;tbm=isch&amp;source=hp&amp;q=social+network+buttons&amp;oq=social+network+buttons">Social Network Buttons</a> 就可以看到一大堆按鈕，要公平的對待每個社群網路，那就是每個都支援，可以想像要是每篇文章都這麼多按鈕要加，那是會多可怕的畫面，所以現狀雖然很殘酷，不過網際網路目前確實是被社群網路控制著的，最大的就是 Facebook 和 Twitter 兩家。</p>

<p>不過先不看社群網路的壟斷問題，資訊在網路上傳播的方式已經從最早的入口網站、搜尋網站這種使用者主動尋找的模式，經過 RSS 訂閱機制這種半被動方式，到現在透過社群網路分享，使用者只要做這那邊等朋友們分享的資訊，看似被動模式，不過其實是角色之間界線的消失了，在社群網路內的每個人都可能是資訊的提供者、傳播者或接收者。</p>

<p>話題有點扯遠了，總之社群網站礙於使用性我不可能全部支援，所以就挑最大的三家支援，Facebook、Twitter、Google+，而第一步就是 <a href="http://blog.othree.net/log/2012/11/02/opengraph-protocol-twitter-card/">Twitter Cards 和 Open Graph Protocol</a>，其中 Twitter Cards 目前需要申請，而且我自己測試過，個人網站也是會通過的。</p>

<h5>Twitter Feed</h5>

<p>第二步就是讓新文章能主動發佈到社群網站上，這邊是使用 <a href="http://twitterfeed.com/">twitter feed</a> 這個服務，目前由於 Google+ 沒有開放 API，所以只支援 Twitter 和 Facebook，只要給該服務你網站內容的 RSS 並透過社群網站的授權機制授權給它發文，它就會在 RSS 有更新時，自動用你的帳號在你的 timeline 貼連結，不過這個服務其實是 <a href="https://bitly.com/">bit.ly</a> 的相關服務，所以貼過去的連結其實是 bit.ly 短網址，好處是會有 bit.ly 的統計資料，而且也不影響 Twitter Card 的功能。</p>

<h5>Social Network Buttons</h5>

<p>最後一個社群網站相關的修改是加上這三個社群網站的分享按鈕，也是很基本就照文件說明，不過比較麻煩的是按鈕樣式的選擇，本來是想要放最小的，20px 高的那種，可是因為寬度問題，由於都是用 iframe 實做，iframe 裡不同網域的程式碼無法動到 iframe 本身的大小，結果就是會讓這些按鈕後面需要預留空間，當多個按鈕要放一起時，就會出現間距不相同的情形。後來我就改成現在的形式，好處是寬高固定，比較可以控制位置，不過我發現三家社群網路的類似形式的按鈕還是故意有些不相容，眼尖的人可以能會發現他們高度不一樣，分別有 59px、60px、61px，如果把 Pinterest 也算上來，那還有 57px，還真是不知道該說什麼...</p>

<h5>HTTPS</h5>

<p>最後還有一個比較不重要，純粹是自爽的，就是現在本 blog 支援 HTTPS 連線了，一開始的動機只是因為看到 Chrome 會說網站尚未驗證身份，所以就一不做二不休，弄到有綠色鎖頭出現，不過目前還有一些問題需要處理，所以沒有弄成強制轉成 HTTPS，像是 Twitter Card 白名單好像有分，還有提交給搜尋引擎的 sitemap.xml，還有 canonical url 等都要統一，其實還很多細節要處理就是。</p>

<p>這一兩個月大概就是做了這些改進，斷斷續續的修改，看到什麼就修什麼，其實沒有先列清單，其實還有剛完成的 <a href="http://blog.othree.net/log/2012/12/02/srcset/">srcset</a> 支援的東西就是。</p>
]]>
</description>
<link>https://blog.othree.net/log/2012/12/04/website-improvent/</link>
<guid>https://blog.othree.net/log/2012/12/04/website-improvent/</guid>
<category>css-html</category>
<pubDate>2012-12-04 23:06</pubDate>
</item>

<item>
<title>srcset 支援</title>
<description><![CDATA[<p><a class="thumbnail" href="http://www.flickr.com/photos/othree/8229879792/" title="Flickr 上 othree 的 Large"><img src="//farm9.staticflickr.com/8202/8229879792_f364c8645f_b.jpg" width="1024" height="768" alt="Large" srcset="//farm9.staticflickr.com/8202/8229879792_f364c8645f.jpg 768w, //farm9.staticflickr.com/8202/8229879792_f364c8645f_b.jpg 768w 2x, //farm9.staticflickr.com/8202/8229879792_eba1553052_k.jpg 2x" /></a></p>

<p>之前的 <a href="http://blog.othree.net/log/2012/10/28/device-pixel-ratio/">Device Pixel Ratio</a> 支援過後，繼續花了時間研究目前的 responsive image spec，目前大概就是 <a href="http://picture.responsiveimages.org/">picture</a> 標籤和 <a href="http://dev.w3.org/html5/srcset/">srcset</a> 屬性兩種，好像是會兩種併行，picture 標籤的話看起來就像：</p>

<pre><code>&lt;picture&gt;
  &lt;source media="(min-width: 40em)" srcset="big.jpg 1x, big-hd.jpg 2x"&gt;
  &lt;source srcset="small.jpg 1x, small-hd.jpg 2x"&gt;
  &lt;img src="fallback.jpg" alt=""&gt;
&lt;/picture&gt;
</code></pre>

<p>至於 srcset 就長的像：</p>

<pre><code>&lt;img src="fallback.jpg" alt="" srcset="small.jpg 640w 1x, small-hd.jpg 640w 2x, med.jpg 1x, med-hd.jpg 2x "&gt;
</code></pre>

<p>基本上差異就是，picture 標籤內可以用 <a href="http://www.w3.org/TR/css3-mediaqueries/">media-query</a>，而 srcset 裡面的寬高則是代表最大值，也就是等價於 max-width 和 max-height，而不能設定 min-width 或 min-height，目前這兩份標準都是由 <a href="http://responsiveimages.org/">Responsive Images Community Group</a>(RICG) 來制訂，這個 Community Group(CG) 我覺得還蠻特別的，因為他們有自己的 domain，自己的網站，還有 <a href="https://twitter.com/respimg">twitter 帳號</a>、<a href="https://github.com/responsiveimagescg">Github 帳號</a>，和以往的標準 CG 比起來實在差蠻多，不知道組成成員是哪些，都用些很新世代的服務。</p>

<p>我自己是比較喜歡 srcset 這個作法，簡潔很多，不過相對的也就沒有 picture 那樣結構化，不過兩者都有正確的 fallback 機制，所以不管選那個方法，目前的瀏覽器至少都還是可以顯示圖片。現在由於還沒有任何一個瀏覽器開始支援，所以要能實現 responsive image，要碼就是用 javascript library 來實做，要碼就是在 server 端做這件事，RICG 他們推薦的 polyfill library 是 <a href="https://github.com/scottjehl/picturefill">picturefill</a> 這套，不過我不太喜歡，因為它不是用 picture 標籤，而是自定義了一組用 div 和 data attribute 的寫法：</p>

<pre><code>&lt;div data-picture data-alt="A giant stone face at The Bayon temple in Angkor Thom, Cambodia"&gt;
    &lt;div data-src="small.jpg"&gt;&lt;/div&gt;
    &lt;div data-src="medium.jpg"     data-media="(min-width: 400px)"&gt;&lt;/div&gt;
    &lt;div data-src="large.jpg"      data-media="(min-width: 800px)"&gt;&lt;/div&gt;
    &lt;div data-src="extralarge.jpg" data-media="(min-width: 1000px)"&gt;&lt;/div&gt;

    &lt;!-- Fallback content for non-JS browsers. Same img src as the initial, unqualified source element. --&gt;
    &lt;noscript&gt;
        &lt;img src="external/imgs/small.jpg" alt="A giant stone face at The Bayon temple in Angkor Thom, Cambodia"&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
</code></pre>

<p>目前 <a href="http://dribbble.com/">dribbble</a> 是使用這套，另外有一套實做 srcset 的 library 叫 <a href="https://github.com/borismus/srcset-polyfill">srcset-polyfill</a>，這套就是完全照 spec 草稿下去寫的，不過我自己是沒用過，因為我自己是能少用 polyfill 就少用的那種，剛好我的 blog 架構有多一層 XSLT，所以我就把支援做在那層了。我的作法就是 server 端想辦法判斷應該要給瀏覽器哪張圖片，然後 parse 網頁內容後，對有 srcset 的圖片作處理，把原來的 src 替換成適合的圖片位置，做在 XSLT 端的好處是反正那邊本來就要處理網頁的 DOM tree 了，用專門 XML parser 來做這件事情比較不會發生意外這樣，不過基本上就是個 server 端實做，也沒很特別，倒是判斷依據和規則想比較久。</p>

<pre><code>&lt;a class="thumbnail" href="http://www.flickr.com/photos/othree/7877215448/" title="Flickr 上 othree 的 花蓮"&gt;
    &lt;img src="//farm9.staticflickr.com/8431/7877215448_1d8dcf278c_b.jpg" width="1024" height="683" alt="花蓮" 
        srcset="//farm9.staticflickr.com/8431/7877215448_1d8dcf278c.jpg 768w,
            //farm9.staticflickr.com/8431/7877215448_1d8dcf278c_b.jpg 768w 2x,
            //farm9.staticflickr.com/8431/7877215448_9a51e0f42a_k.jpg 2x" /&gt;
&lt;/a&gt;
</code></pre>

<p>目前我會在 srcset 裡面放三張圖，寬度分別是 500px、1024px 和 2048px 的，500px 那張的主要目標是給手機，1024px 那張是一般電腦，2048px 則是要給螢幕夠大且支援 HiDPI 的設備，像是 MBPR 和 iPad 3，基本上和 Device Pixel Ratio 的方法一樣，第一次來的訪客會寫入 cookie，記錄寬高最短邊的長度，只要最短邊小於 768 就給他最小張的寬 500px 的圖，剩下的情形就看 Dvice Pixel Ratio 決定要給哪張。不過光是這樣的規則其實還有些問題，就是頻寬的問題，像是用手機的人用 3G 網路加上螢幕不大，即使只是第一次來也很不需要抓 1024px 的圖片，所以第一次來的訪客我還會用 <a href="https://github.com/serbanghita/Mobile-Detect">Mobile_Detect</a> 來判斷，如果發現是手機的話第一次就會給 500px 的小圖。</p>

<p>目前用 Android Chrome、iPad Safari 還有桌上型電腦測過都有符合預期目標，目前也還沒想到其他改進的方向，可能等市面上的裝置分布有改變的話再調整了吧，不過如果瀏覽器直接支援 srcset 的話，那是最好，我也不需要在修改了:P。</p>
]]>
</description>
<link>https://blog.othree.net/log/2012/12/02/srcset/</link>
<guid>https://blog.othree.net/log/2012/12/02/srcset/</guid>
<category>css-html</category>
<pubDate>2012-12-02 17:52</pubDate>
</item>


</channel>
</rss>