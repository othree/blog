<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>O3noBLOG</title>
<link>https://blog.othree.net/</link>
<description></description>
<copyright>Copyright 2016</copyright>
<lastBuildDate>Fri, 01 Jul 2016 17:05:37 +0800</lastBuildDate>
<generator>http://www.movabletype.org/?v=4.381</generator>
<docs>http://blogs.law.harvard.edu/tech/rss</docs> 


<item>
<title>YAJS.vim and Vim Syntax Highlight</title>
<description><![CDATA[<p>上個週末在<a href="https://2016.opensource.hk/">香港 Open Source Conference</a> 分享的主題，第一次使用英文分享，結果表現不太好，不知道上場前喝點啤酒會不會比較好就是...</p>

<p>這個主題本來是想要投 COSCUP 的，主要是想介紹一下之前在做 <a href="https://github.com/othree/yajs.vim">yajs.vim</a> 時遇到的比較有印象的問題，在這之前先介紹一下 Vim Syntax Highlight 的機制，因為這些問題很多都和 Vim 的 Syntax Highlight 機制的設計關係很大，然後最後就是有一個還沒辦法解的問題，這個問題就是 yajs.vim 目前還沒辦法完美的 highlight 有 default parameter 的 arrow function。</p>

<script async="async" class="speakerdeck-embed" data-id="3294147a503d4079a6238296fc991a76" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
]]>
</description>
<link>https://blog.othree.net/log/2016/07/01/yajs-and-vim-syntax-highlight/</link>
<guid>https://blog.othree.net/log/2016/07/01/yajs-and-vim-syntax-highlight/</guid>
<category>vim</category>
<pubDate>Fri, 01 Jul 2016 17:05:37 +0800</pubDate>
</item>

<item>
<title>nginx &amp; fcgiwrap</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23099768130/" title="菲貓 by othree, on Flickr"><img src="https://farm1.staticflickr.com/621/23099768130_3caf60c59d_b.jpg" width="1024" height="683" alt="菲貓, " srcset="https://farm1.staticflickr.com/621/23099768130_3caf60c59d_b.jpg 1024w, https://farm1.staticflickr.com/621/23099768130_d3a13dc95b_h.jpg 1600w" /></a></p>

<p>雖然很久以前就想換到 nginx 試試看，不過直到最近這次更新才換成功，最早單純只是想要輕量一點的 HTTP server，後來則是因為和 Apache 相比，nginx 明顯開發更新比較快，最近有很多想要嘗試各種新功能都是 nginx 先做，像是 HTTP/2，還有最近這次的 brotli 支援，而以前沒辦法換過去的最主要原因，其實是 nginx 沒有 CGI 的支援，跑 MovableType 會有困難，雖然 MovableType 可以用 FastCGI，不過很難設定，我安裝過 n 次大概也只有成功過一兩次，所以其實一直都不太考慮這個選項。</p>

<p>不過認真研究了一下，終於發現其實可以透過 <a href="https://github.com/gnosek/fcgiwrap">FCGI Wrap</a> 這個工具來達成 nginx 對 CGI script 的支援，它的作法其實就是一個中間人，把 FCGI 介面轉到 CGI 介面過去，我大概設定了一下跑 MovableType 的 nginx conf 如下：</p>

<pre><code>location ~ ^/path/to/mt/mt.*\.cgi {
    gzip off;
    fastcgi_index index.cgi;
    fastcgi_split_path_info ^(.+?\.cgi)(/.*)$;
    if (!-e $document_root$fastcgi_script_name) {
        return 404;
    }
    include fastcgi.conf;

    ## MT-related
    fastcgi_param PERL5LIB $document_root/mt/lib;
    fastcgi_param MT_HOME $document_root/mt/;
    fastcgi_param MT_CONFIG $document_root/mt/mt-config.cgi;

    fastcgi_param PATH_INFO $fastcgi_path_info;
    fastcgi_param PATH_TRANSLATED $fastcgi_path_info;
    fastcgi_pass unix:/var/run/fcgiwrap.sock;
}
</code></pre>

<p>然後主機上要開好 FCGI Wrap 的服務，我是用 ArchLinux 的 pacman 直接裝套件，然後參考<a href="https://wiki.archlinux.org/index.php/nginx#fcgiwrap">官方文件</a>，有寫說設定檔位置 <code>/usr/lib/systemd/system/fcgiwrap.socket</code> ，cat 出來就可以看到 UNIX Socket 檔案位置 <code>ListenStream=/run/fcgiwrap.sock</code> ，這個路徑的位置其實就指到上面設定最後一行的 <code>/var/run/fcgiwrap.sock</code>，<code>/run</code> 和 <code>/var/run</code> 兩邊其實有 Symbolic Link 起來，所以兩個 sock 檔案其實是同一個。</p>

<p>最後要說一下 conf 裡的這行：</p>

<pre><code>    include fastcgi.conf;
</code></pre>

<p>這個 <code>fastcgi.conf</code> 檔案其實是 nginx 內建好方便大家使用的，內容如下：</p>

<pre><code>fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
fastcgi_param  QUERY_STRING       $query_string;
fastcgi_param  REQUEST_METHOD     $request_method;
fastcgi_param  CONTENT_TYPE       $content_type;
fastcgi_param  CONTENT_LENGTH     $content_length;

fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
fastcgi_param  REQUEST_URI        $request_uri;
fastcgi_param  DOCUMENT_URI       $document_uri;
fastcgi_param  DOCUMENT_ROOT      $document_root;
fastcgi_param  SERVER_PROTOCOL    $server_protocol;
fastcgi_param  REQUEST_SCHEME     $scheme;
fastcgi_param  HTTPS              $https if_not_empty;

fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;

fastcgi_param  REMOTE_ADDR        $remote_addr;
fastcgi_param  REMOTE_PORT        $remote_port;
fastcgi_param  SERVER_ADDR        $server_addr;
fastcgi_param  SERVER_PORT        $server_port;
fastcgi_param  SERVER_NAME        $server_name;

# PHP only, required if PHP was built with --enable-force-cgi-redirect
fastcgi_param  REDIRECT_STATUS    200;
</code></pre>

<p>可以看到其實這個檔案就是把直接走 FCGI 時會遺失的環境變數補回去用的，nginx 還提供很多這類<a href="https://github.com/nginx/nginx/tree/master/conf">檔案</a>，以前都不太清楚怎麼剛裝好的 nginx 會附上一堆沒有用到的 conf 檔，直到這次才瞭解它們其實都很有用啊。</p>
]]>
</description>
<link>https://blog.othree.net/log/2016/04/22/nginx-fcgiwrap/</link>
<guid>https://blog.othree.net/log/2016/04/22/nginx-fcgiwrap/</guid>
<category>server</category>
<pubDate>Fri, 22 Apr 2016 21:52:05 +0800</pubDate>
</item>

<item>
<title>360 Test</title>
<description><![CDATA[<p><a data-flickr-embed="true" data-vr="true"  href="https://www.flickr.com/photos/othree/25933704672/in/dateposted-public/" title="摩茲工寮"><img src="https://farm2.staticflickr.com/1478/25933704672_4e4641723f_b.jpg" width="1024" height="512" alt="摩茲工寮" /></a></p>
]]>
</description>
<link>https://blog.othree.net/log/2016/04/10/360-test/</link>
<guid>https://blog.othree.net/log/2016/04/10/360-test/</guid>
<category>diary</category>
<pubDate>Sun, 10 Apr 2016 19:21:34 +0800</pubDate>
</item>

<item>
<title>Pure.css</title>
<description><![CDATA[<p>最近做的修改還有一個就是把 <a href="http://getbootstrap.com/">Bootstrap</a> 換掉，因為我覺得它實在是太大了，包進很多我沒用到的東西，即使是壓縮過的版本也要上百 KB，其實我只需要一部份的元件，像是圖片、引言、程式碼和 grid layout 等，但是這些部分的 CSS 所佔的比例其實超級少，所以我決定找一個新的 framework 把它換掉，結果我挑的是 Yahoo 已經沒有繼續更新的專案 <a href="http://purecss.io/">Pure.css</a>。</p>

<p>Pure.css 檔案大小比起 Bootstrap 實在小很多，最小化過的版本只有約 17KB，不過 responsive grid layout 的部分是獨立的，該模組的大小約是 9.57KB，和原來使用 Bootstrap 相比，總共大概是只有原來的四分之一（當然 gzip 後沒差這麼多），不過檔案小這麼多一定有所犧牲，Pure.css 提供的元件比起 Bootstrap 來少很多，而且提供的我幾乎都沒用到，最後我只用到 menu 和 grid layout 兩個部分而已，所以又從 Bootstrap 那邊把我要的元件手工複製出來使用，最後整理出來的 CSS 是 36.15KB，gzip 後是 7.3KB，brotli 壓縮過後是 6.34KB，傳輸前的資料量和原來相比大約是三分之一至四分之一，使用 gzip 壓縮傳輸的資料量則是三分之一左右（相較於原本的 18.97KB），整體來說成效不錯，其實 Framework 的部分還是佔了很大的比例，所以下一步就是把整個 CSS Framework 拿掉了，我推估實際上我需要的這些 CSS 大概 3KB 的資料量就夠了。</p>

<p>不過 Pure.css 是個已經沒在維護的專案了，Github 上已經超過一年沒有動靜，再加它其實沒 Bootstrap 那樣簡單用，有很多細節都還是要自己處理，就連它們首頁應該都是加工不少才出來的，所以要用這套 CSS Framework 的人還是要三思啊。</p>
]]>
</description>
<link>https://blog.othree.net/log/2016/04/08/purecss/</link>
<guid>https://blog.othree.net/log/2016/04/08/purecss/</guid>
<category>css-html</category>
<pubDate>Fri, 08 Apr 2016 22:48:28 +0800</pubDate>
</item>

<item>
<title>SSH Agent Forward</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26226715966/" title="少年バット by othree, on Flickr"><img src="https://farm2.staticflickr.com/1544/26226715966_bcd656f05b_b.jpg" width="1024" height="576" alt="少年バット" srcset="https://farm2.staticflickr.com/1544/26226715966_bcd656f05b_b.jpg 1024w, https://farm2.staticflickr.com/1544/26226715966_1afbf9905d_h.jpg 1600w" /></a></p>

<p>最近對於 blog 的另外一個改動就是檔案權限的修改，我用的 Blog 系統是 MovableType，它的其中一個特色就是會產生好靜態的檔案，而這些檔案其實我都有丟上 Github 和 Bitbucket 備份，以前我基本上都用 root 來做這些事情，所以沒有權限問題，不過這次重灌後想順便把這問題處理一下，所以做了一番研究，首先在 ArchLinux 上，預設給 HTTP 等相關服務例如 nginx、php 等用的帳號是 <strong>http</strong>，所以我希望讓這些檔案的 owner 就是 http，一來可以確保所有的網路服務需要這些檔案時，都可以正確的存取，因為我嘗試過用 group 來設定權限共有，不過結果不太順利；二來 MovableType 產生的檔案 owner 也都是 http，可以保持一致性，也不用常常在那邊改檔案的 owner。</p>
]]><![CDATA[<p>不過 http 這個帳號是沒有 shell 的，也就是不可以用這個帳號登入，當然會這樣預設也是安全性的考量，我並不想改掉他，所以第一個遇到的問題就是，我要怎樣用 http 帳號來執行指令，像是 <code>git commit</code> 之類的，研究一陣子之後，發現可以用 <code>sudo</code> 來辦到：</p>

<pre><code>sudo -u http -s /bin/sh -c "git commit"
</code></pre>

<p>其中 <code>-u</code> 是設定要換到那個帳號， <code>-s</code> 就是關鍵的指定 shell 了，最後的 <code>-c</code> 則是要執行的指令，如果加上這個設定則不會真的換過去該帳號，而是只是用該帳號執行一次指令而已，解決第一個問題後，馬上來的就是第二個問題了，要 <code>git push</code> 時，要怎麼使用有權限的 ssh private key，最簡單的方法就是丟到 http 帳號的 home 目錄下，不過我覺得這不太安全，所以想著要用其他方法來把 key 傳過去，當然把其他帳號的 key 的檔案權限調寬鬆並不可行，權限不對的 key 會無法使用，找到唯一比較接近的設計就是 <a href="https://ihower.tw/blog/archives/7837">SSH Agent Forward</a> 了，可以把本機的 ssh key pair 帶上遠端主機，然後就可以從遠端主機利用這個帶上去的 key 連線到其他地方，使用方法很簡單，只要在連上遠端主機的時候，多加一個 <code>-A</code> 的參數就可以了：</p>

<pre><code>ssh -A user@othree.net
</code></pre>

<p>或是修改 <code>.ssh/config</code> 的設定：</p>

<pre><code>Host othree
  HostName othree.net
  ForwardAgent yes
</code></pre>

<p>不過可能會需要先把 key 加進去可以 forward 的清單中：</p>

<pre><code>ssh-add
</code></pre>

<p>然後連上遠端主機之後，遠端的 login session 就會多一個環境變數 <code>$SSH_AUTH_SOCK</code>，印出來看內容會像是：</p>

<pre><code> /tmp/ssh-7UJdnvSdy0/agent.18493
</code></pre>

<p>實際上是個檔案路徑，指到一個 unix socket 檔案，理論上 ssh 在連線時會去這邊找 key pair 然後用來做認證，不過我看 <code>ssh -vvv</code> 的時候是沒有相關訊息出現，連線是可以正確建立就是，透過 agent forward，的機制，我就可以達成某種程度的 key 共用，不過在遠端主機上要使用的帳號是個沒有 shell 也沒有密碼可以登入的帳號，這就成了另外一個問題，遠端能拿到 key 的帳號不是我要用的帳號，所以第三個問題就是我要如何讓這個 key 能夠轉移到 http 帳號下可用的狀態。</p>

<p>這個問題的<a href="http://serverfault.com/questions/442048/accessing-ssh-auth-sock-from-another-non-root-user">解決方法</a>是在 StackOverflow 上找到的，用的其實是 <a href="http://linux.vbird.org/linux_basic/0410accountmanager.php#acl_talk">ACL</a> 這套比較新的檔案權限管理機制，指令大致如下，先把 unix socket 的檔案權限用 ACL 開給 http 帳號：</p>

<pre><code>setfacl -m u:http:rw $SSH_AUTH_SOCK
setfacl -m u:http:x $(dirname $SSH_AUTH_SOCK)
</code></pre>

<p>然後 sudo 時把 <code>$SSH_AUTH_SOCK</code> 帶過去：</p>

<pre><code>sudo -u http env SSH_AUTH_SOCK=$SSH_AUTH_SOCK
</code></pre>

<p>因為 http 帳號沒有 shell，所以實際上指令會變成：</p>

<pre><code> sudo -u http -s /bin/sh -c "env SSH_AUTH_SOCK=$SSH_AUTH_SOCK git pull"
</code></pre>

<p>不過這樣執行起來有點麻煩，其實 sudo 可以設定要帶哪些環境變數過去，所以可以去修改 <code>/etc/sudoers</code> 加上一行：</p>

<pre><code>Defaults    env_keep+=SSH_AUTH_SOCK
</code></pre>

<p>然後在遠端 <strong>user</strong> 帳號下的 <code>~/.ssh/rc</code> 檔案裡面加上 facl 那兩行指令（尚未確認可行性），加上本機端設定好自動 ForwardAgent，整個流程中比較麻煩一點的就只有 sudo 那行指令而已：</p>

<pre><code> sudo -u http -s /bin/sh
</code></pre>

<p>就結果而言，這個作法的安全性反而比我本來的預期更進一步，因為我的 ssh key 就不用放上遠端主機，只要在本機端有一份就好了。</p>
]]></description>
<link>https://blog.othree.net/log/2016/04/05/ssh-agent-forward/</link>
<guid>https://blog.othree.net/log/2016/04/05/ssh-agent-forward/</guid>
<category>server</category>
<pubDate>Tue, 05 Apr 2016 22:22:39 +0800</pubDate>
</item>

<item>
<title>九州鐵道</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23906413032/" title="九洲JR by othree, on Flickr"><img src="https://farm2.staticflickr.com/1631/23906413032_de2b68a752_b.jpg" width="1024" height="683" alt="九洲JR" srcset="https://farm2.staticflickr.com/1631/23906413032_de2b68a752_b.jpg 1024w, https://farm2.staticflickr.com/1631/23906413032_280443efa8_h.jpg 1600w" /></a></p>

<p>之前去了一趟九州，順便觀察了一下聽說很厲害的九州鐵道（不只是 JR），覺得果然名不虛傳，整個就是設計的比較有質感，不論是普通車還是特急列車都感覺的出來比其他地區的還要搶眼些，這次搭到比較特別的列車是特急KAMOME（特急かもめ），從博多到長崎，還有由布院之森（ゆふいんの森），從久留米到由步院，首先就來看一下特急KAMOME（以下圖多）。</p>
]]><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23718944270/" title="九洲JR 特急かもめ by othree, on Flickr"><img src="https://farm6.staticflickr.com/5780/23718944270_beb002c64b_b.jpg" width="1024" height="683" alt="九洲JR 特急かもめ" srcset="https://farm6.staticflickr.com/5780/23718944270_beb002c64b_b.jpg 1024w, https://farm6.staticflickr.com/5780/23718944270_74413e4a22_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23906393962/" title="九洲JR 特急かもめ by othree, on Flickr"><img src="https://farm6.staticflickr.com/5827/23906393962_9997bb3aa2_b.jpg" width="1024" height="683" alt="九洲JR 特急かもめ" srcset="https://farm6.staticflickr.com/5827/23906393962_9997bb3aa2_b.jpg 1024w, https://farm6.staticflickr.com/5827/23906393962_06e25b4cd5_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23906401312/" title="九洲JR 特急かもめ by othree, on Flickr"><img src="https://farm2.staticflickr.com/1641/23906401312_b20d4571b3_b.jpg" width="1024" height="683" alt="九洲JR 特急かもめ" srcset="https://farm2.staticflickr.com/1641/23906401312_b20d4571b3_b.jpg 1024w, https://farm2.staticflickr.com/1641/23906401312_bf8ec24ae4_h.jpg 1600w" /></a></p>

<p>特急KAMOME外觀就是以白色為主，非常有現代感，在各個地方出現的印字讓我一直有某種非常熟悉的感覺，想了很久才想到在哪裡看過這種設計。特急KAMOME我們是搭來回兩趟，其中第一趟搭的車內的椅子寫的是 SONIC，不知道為什麼就是。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23646781379/" title="九洲JR 特急かもめ by othree, on Flickr"><img src="https://farm2.staticflickr.com/1640/23646781379_393da49365_b.jpg" width="1024" height="683" alt="九洲JR 特急かもめ" srcset="https://farm2.staticflickr.com/1640/23646781379_393da49365_b.jpg 1024w, https://farm2.staticflickr.com/1640/23646781379_0420cb3b4b_h.jpg 1600w" /></a></p>

<p>車子內裝雖然有點陳舊，不過都是真材實料的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23988553226/" title="九洲JR 特急かもめ by othree, on Flickr"><img src="https://farm6.staticflickr.com/5639/23988553226_ea044aa6d7_b.jpg" width="1024" height="683" alt="九洲JR 特急かもめ" srcset="https://farm6.staticflickr.com/5639/23988553226_ea044aa6d7_b.jpg 1024w, https://farm6.staticflickr.com/5639/23988553226_319be88a0f_h.jpg 1600w" /></a></p>

<p>真皮座椅：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24058322106/" title="九州 長崎本線 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5638/24058322106_63dbf8c8a4_b.jpg" width="1024" height="683" alt="九州 長崎本線" srcset="https://farm6.staticflickr.com/5638/24058322106_63dbf8c8a4_b.jpg 1024w, https://farm6.staticflickr.com/5638/24058322106_d0ff9c533e_h.jpg 1600w" /></a></p>

<p>木地板：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23906410602/" title="九洲JR 特急かもめ by othree, on Flickr"><img src="https://farm2.staticflickr.com/1678/23906410602_16226592ba_b.jpg" width="683" height="1024" alt="九洲JR 特急かもめ" srcset="https://farm2.staticflickr.com/1678/23906410602_16226592ba_b.jpg 683w, https://farm2.staticflickr.com/1678/23906410602_d90d448247_h.jpg 1067w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24014645915/" title="九洲JR 特急かもめ by othree, on Flickr"><img src="https://farm2.staticflickr.com/1631/24014645915_da336a3051_b.jpg" width="1024" height="683" alt="九洲JR 特急かもめ" srcset="https://farm2.staticflickr.com/1631/24014645915_da336a3051_b.jpg 1024w, https://farm2.staticflickr.com/1631/24014645915_a3e485e7cf_h.jpg 1600w" /></a></p>

<p>另外長崎本線有一段是靠海的，往長崎方向是左邊，往博多則是右邊，有機會可以順便看看海景：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23456159344/" title="九州 長崎本線 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1458/23456159344_8c6158660f_b.jpg" width="1024" height="683" alt="九州 長崎本線" srcset="https://farm2.staticflickr.com/1458/23456159344_8c6158660f_b.jpg 1024w, https://farm2.staticflickr.com/1458/23456159344_33243744e9_h.jpg 1600w" /></a></p>

<p>九州新幹線，布座椅配上綠色內裝，比較特別的是座椅上還有盲人點字的設計，方便視障朋友找座位，之前倒是沒看過這個設計，覺得這個位置挑的很棒。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23788722920/" title="九州 新幹線 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5692/23788722920_3cde4f90cf_b.jpg" width="1024" height="683" alt="九州 新幹線" srcset="https://farm6.staticflickr.com/5692/23788722920_3cde4f90cf_b.jpg 1024w, https://farm6.staticflickr.com/5692/23788722920_63a175f794_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24058308566/" title="九州 新幹線 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5697/24058308566_22615f8195_b.jpg" width="1024" height="683" alt="九州 新幹線" srcset="https://farm6.staticflickr.com/5697/24058308566_22615f8195_b.jpg 1024w, https://farm6.staticflickr.com/5697/24058308566_c0dee8c1f8_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23457601623/" title="九州 新幹線 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1448/23457601623_206bdb70bd_b.jpg" width="1024" height="683" alt="九州 新幹線" srcset="https://farm2.staticflickr.com/1448/23457601623_206bdb70bd_b.jpg 1024w, https://farm2.staticflickr.com/1448/23457601623_25f74d39c1_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23457600323/" title="九州 新幹線 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5816/23457600323_c31211338e_b.jpg" width="1024" height="683" alt="九州 新幹線" srcset="https://farm6.staticflickr.com/5816/23457600323_c31211338e_b.jpg 1024w, https://farm6.staticflickr.com/5816/23457600323_8bbbceb5f3_h.jpg 1600w" /></a></p>

<p>除了 JR 的部分，九州還有為數不少的路面電車，這次去的長崎和熊本都有</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24008994426/" title="長崎 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1554/24008994426_4b877cdfa0_b.jpg" width="1024" height="683" alt="長崎" srcset="https://farm2.staticflickr.com/1554/24008994426_4b877cdfa0_b.jpg 1024w, https://farm2.staticflickr.com/1554/24008994426_410b41f87d_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23952525871/" title="長崎 路面電車 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5730/23952525871_c42c6232e7_b.jpg" width="1024" height="683" alt="長崎 路面電車" srcset="https://farm6.staticflickr.com/5730/23952525871_c42c6232e7_b.jpg 1024w, https://farm6.staticflickr.com/5730/23952525871_5062eacc1d_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23788692160/" title="九州 熊本 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5703/23788692160_e190c2b75c_b.jpg" width="1024" height="683" alt="九州 熊本" srcset="https://farm6.staticflickr.com/5703/23788692160_e190c2b75c_b.jpg 1024w, https://farm6.staticflickr.com/5703/23788692160_b43fc5642c_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24084357925/" title="九州 熊本 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1703/24084357925_56b4d5433b_b.jpg" width="1024" height="683" alt="九州 熊本" srcset="https://farm2.staticflickr.com/1703/24084357925_56b4d5433b_b.jpg 1024w, https://farm2.staticflickr.com/1703/24084357925_360dcc09c7_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24084356355/" title="九州 熊本 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1710/24084356355_54eb2c173e_b.jpg" width="1024" height="683" alt="九州 熊本" srcset="https://farm2.staticflickr.com/1710/24084356355_54eb2c173e_b.jpg 1024w, https://farm2.staticflickr.com/1710/24084356355_93b3839502_h.jpg 1600w" /></a></p>

<p>其中熊本的列車變化比較大，每一台的個性也比較鮮明，有一些就像上面那台一樣很新很漂亮，有些則是超舊的車體，甚至還有陳年木地板的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23718117279/" title="九州 熊本 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1703/23718117279_ee4b6870fc_b.jpg" width="1024" height="683" alt="九州 熊本" srcset="https://farm2.staticflickr.com/1703/23718117279_ee4b6870fc_b.jpg 1024w, https://farm2.staticflickr.com/1703/23718117279_29b5afda2f_h.jpg 1600w" /></a></p>

<p>最後就要來介紹由布院之森，這台列車則是觀光列車，和前面介紹的特急KAMOME有著根本上的用途差異，特急KAMOME畢竟還是通勤列車，由布院之森則是以觀光休閒為目的的，所以整台車從外觀就和常見的火車造型差異不小。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23987196642/" title="九州 由布院之森 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5754/23987196642_220dc2b279_b.jpg" width="1024" height="683" alt="九州 由布院之森" srcset="https://farm6.staticflickr.com/5754/23987196642_220dc2b279_b.jpg 1024w, https://farm6.staticflickr.com/5754/23987196642_bf7fa6af17_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24012702821/" title="九州 由布院之森 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5754/24012702821_5594b7d6b0_b.jpg" width="1024" height="683" alt="九州 由布院之森" srcset="https://farm6.staticflickr.com/5754/24012702821_5594b7d6b0_b.jpg 1024w, https://farm6.staticflickr.com/5754/24012702821_bdf13d82ca_h.jpg 1600w" /></a></p>

<p>車內空間很特別。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23799654450/" title="九州 由布院之森 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5749/23799654450_b1b73e9547_b.jpg" width="1024" height="683" alt="九州 由布院之森" srcset="https://farm6.staticflickr.com/5749/23799654450_b1b73e9547_b.jpg 1024w, https://farm6.staticflickr.com/5749/23799654450_48b6882f10_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23987232252/" title="九州 由布院之森 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1509/23987232252_7e2b7e5035_b.jpg" width="1024" height="683" alt="九州 由布院之森" srcset="https://farm2.staticflickr.com/1509/23987232252_7e2b7e5035_b.jpg 1024w, https://farm2.staticflickr.com/1509/23987232252_09825bf3f3_h.jpg 1600w" /></a></p>

<p>還有賣店，有不少土特產可以買，還有紀念章可以蓋：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24012722431/" title="九州 由布院之森 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1605/24012722431_79ba0f25a1_b.jpg" width="1024" height="683" alt="九州 由布院之森, " srcset="https://farm2.staticflickr.com/1605/24012722431_79ba0f25a1_b.jpg 1024w, https://farm2.staticflickr.com/1605/24012722431_1df0a49769_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24069223656/" title="九州 由布院之森 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1521/24069223656_f2b13327f4_b.jpg" width="683" height="1024" alt="九州 由布院之森" srcset="https://farm2.staticflickr.com/1521/24069223656_f2b13327f4_b.jpg 683w, https://farm2.staticflickr.com/1521/24069223656_bc8e098ad2_h.jpg 1067w" /></a></p>

<p>然後其實由布院之森不只一種車型，總共有六台，基本上有兩種車型，而且內裝也有不一樣的版本。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24095321785/" title="九州 由布院之森 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5724/24095321785_6fd9cd73a1_b.jpg" width="1024" height="683" alt="九州 由布院之森, " srcset="https://farm6.staticflickr.com/5724/24095321785_6fd9cd73a1_b.jpg 1024w, https://farm6.staticflickr.com/5724/24095321785_e4c39ffda1_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24095322415/" title="九州 由布院之森 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1587/24095322415_4abaaeaeeb_b.jpg" width="1024" height="683" alt="九州 由布院之森, " srcset="https://farm2.staticflickr.com/1587/24095322415_4abaaeaeeb_b.jpg 1024w, https://farm2.staticflickr.com/1587/24095322415_a5ea0d25b8_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24008890372/" title="九州 由布院之森 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5784/24008890372_f189e97802_b.jpg" width="1024" height="683" alt="九州 由布院之森" srcset="https://farm6.staticflickr.com/5784/24008890372_f189e97802_b.jpg 1024w, https://farm6.staticflickr.com/5784/24008890372_a113e25f93_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23749193849/" title="九州 由布院之森 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5739/23749193849_d1b53ec5a2_b.jpg" width="1024" height="683" alt="九州 由布院之森" srcset="https://farm6.staticflickr.com/5739/23749193849_d1b53ec5a2_b.jpg 1024w, https://farm6.staticflickr.com/5739/23749193849_a77eadabca_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24034370801/" title="九州 由布院之森 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5659/24034370801_68f1077939_b.jpg" width="1024" height="683" alt="九州 由布院之森" srcset="https://farm6.staticflickr.com/5659/24034370801_68f1077939_b.jpg 1024w, https://farm6.staticflickr.com/5659/24034370801_301fee0208_h.jpg 1600w" /></a></p>

<p>另外附贈一下目前最高等級的九州七星號列車的專屬車站。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23467059704/" title="九州 由布院之森 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5799/23467059704_8f5a0f5d87_b.jpg" width="1024" height="683" alt="九州 由布院之森" srcset="https://farm6.staticflickr.com/5799/23467059704_8f5a0f5d87_b.jpg 1024w, https://farm6.staticflickr.com/5799/23467059704_b6b747371a_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24095295965/" title="九州 由布院之森 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5669/24095295965_bb64de8432_b.jpg" width="1024" height="683" alt="九州 由布院之森" srcset="https://farm6.staticflickr.com/5669/24095295965_bb64de8432_b.jpg 1024w, https://farm6.staticflickr.com/5669/24095295965_61b44d82eb_h.jpg 1600w" /></a></p>

<p>前面有提到，九州 JR 的列車一些設計讓我覺得很熟悉，其實連一些普通車也是，想了很久，才終於想到，原來是 GUNPLA 水貼貼好後所呈現的風格，順便提供一張範例：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/78411572@N03/8331709839/" title="RX-93 ν-Gundam　Ver.Ka by Tehu O (てふ男), on Flickr"><img src="https://farm9.staticflickr.com/8362/8331709839_77cbde26f6_b.jpg" width="1024" height="683" alt="RX-93 ν-Gundam　Ver.Ka, " srcset="https://farm9.staticflickr.com/8362/8331709839_77cbde26f6_b.jpg 1024w" /></a></p>

<p>後來經朋友告知才知道九州 JR 主要的設計顧問是水戸岡鋭治，於是我就苦苦搜尋他是否有喜歡 GUNDAM 或是 GUNPLA 的訊息，結果意外的困難，顯然是個隱性阿宅，不過我最後還是找到一條有利的線索：</p>

<blockquote class="twitter-tweet" data-lang="zh-tw"><p lang="ja" dir="ltr">超潜入リアルスコープで鉄道デザイナーの水戸岡鋭治氏がデザインしたラッピング新幹線の紹介がされていました　しかし、水戸岡氏の事務所にあった等身大ガンダムの方が気になる・・・</p>-- Q10＠はぐれメタル (@Q_points) <a href="https://twitter.com/Q_points/status/452408891175751680">2014年4月5日</a></blockquote>

<script async="async" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>大概簡單翻譯一下就是這位仁兄去了一趟水戸岡鋭治的事務所，發現有台等身大鋼彈，讓他好不在意～～</p>

<p>最後的最後就附上九州 JR 的吉祥物 KURO 吧。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24034362611/" title="九州 JR KURO by othree, on Flickr"><img src="https://farm2.staticflickr.com/1591/24034362611_2564c66b8a_b.jpg" width="1024" height="683" alt="九州 JR KURO" srcset="https://farm2.staticflickr.com/1591/24034362611_2564c66b8a_b.jpg 1024w, https://farm2.staticflickr.com/1591/24034362611_582caa91f6_h.jpg 1600w" /></a></p>
]]></description>
<link>https://blog.othree.net/log/2016/04/05/kyushu-rail/</link>
<guid>https://blog.othree.net/log/2016/04/05/kyushu-rail/</guid>
<category>diary</category>
<pubDate>Tue, 05 Apr 2016 10:26:33 +0800</pubDate>
</item>

<item>
<title>brotli, gzip 的替代格式</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23998562432/" title="湯布院 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1692/23998562432_ec46795cd9_b.jpg" width="1024" height="683" alt="湯布院, " srcset="https://farm2.staticflickr.com/1692/23998562432_ec46795cd9_b.jpg 1024w, https://farm2.staticflickr.com/1692/23998562432_d3f328fdaf_h.jpg 1600w" /></a></p>

<p>最近幫 blog 做了不少的調整，最近會慢慢整理放上來，其中的第一個修改就是支援 <a href="https://github.com/google/brotli">brotli</a> 了，brotli 是 Google 繼 <a href="https://github.com/google/zopfli">Zopfli</a> 之後，又一個針對網路傳輸做的貢獻，兩者都是用瑞士的麵包來命名，Zopfli 是 <a href="http://google-opensource.blogspot.tw/2013/02/compress-data-more-densely-with-zopfli.html">2013 年 2 月發佈</a>，Brotli 是在 <a href="http://google-opensource.blogspot.tw/2015/09/introducing-brotli-new-compression.html">2015 年 9 月發佈</a>的，不過直到最近才有瀏覽器支援，最先支援的是 Firefox，接著才是 Google 的 Chrome，預計版本號 50 時會支援，brotli 在發表時就同時發表一份<a href="http://www.gstatic.com/b/brotlidocs/brotli-2015-09-22.pdf">測試數據</a>了，顯示出它可以讓文件檔案更小約 20%，但是加解密的速度還是和 gzip 差不多，相信對於行動裝置的耗能也不會差異太大，不過對大檔案的壓縮效率就不一定比較好了，基本上非常適合拿來壓縮一般網站傳輸的 HTML/CSS/JS 之類的檔案。</p>
]]><![CDATA[<p>支援 brotli 格式的瀏覽器會使用 HTTP 協定跟 server 端溝通，送出的 header 會有：</p>

<pre><code>Accept-Encoding: br
</code></pre>

<p>一般瀏覽器都已經支援 gzip 和 deflate 很久了，所以像是 Firefox 會送出：</p>

<pre><code>Accept-Encoding: gzip, deflate, br
</code></pre>

<p>Server 端基本上會自動針對這些資訊作判斷來決定要回傳用什麼格式壓縮的內容，也可以不壓縮，例如已經最佳化過的圖片，通常就不會再次壓縮，因為壓縮效益會很差，反而還要多花 CPU 去解壓縮，得不償失，以前 Apache2 在支援 deflate 格式的時候，用的是內建的 <a href="http://httpd.apache.org/docs/2.0/mod/mod_deflate.html">mod_deflate</a>，只要在設定寫好哪些檔案要用 deflate 壓縮，Apache 就會自己處理好跟瀏覽器溝通的部分，不過目前並沒有 mod_brotli 之類的東西可以用，所以 Apache2 要全面支援還有些問題，其中目前比較可行的是採用預先壓縮好的靜態檔案加上 rewrite 來<a href="https://lyncd.com/2015/11/brotli-support-apache/">支援</a>：</p>

<pre><code>&lt;Files *.js.br&gt;
  AddType "text/javascript" .br
  AddEncoding br .br
&lt;/Files&gt;
&lt;Files *.css.br&gt;
  AddType "text/css" .br
  AddEncoding br .br
&lt;/Files&gt;

RewriteEngine On

RewriteCond %{HTTP:Accept-Encoding} br
RewriteCond %{REQUEST_FILENAME}.br -f
RewriteRule ^(.*)$ $1.br [L]

RewriteCond %{HTTP:Accept-Encoding} gzip
RewriteCond %{REQUEST_FILENAME}.gz -f
RewriteRule ^(.*)$ $1.gz [L]
</code></pre>

<p>當然這種方法就只能針對純靜態檔案，對於 PHP 之類動態產生的內容就無法處理，可喜的是我有看到 Jim Jagielski 有打算 <a href="http://mail-archives.apache.org/mod_mbox/httpd-users/201601.mbox/%3C549EBED9-2E3F-43CC-BDED-198B8ED4E257@jaguNET.com%3E">實做</a> Apache 支援了，只可惜我等不下去，就把我的 web server 重灌（brotli 需要 64 位元作業系統）順便把 Apache 換成 nginx，nginx 上目前有兩個 brotli module，一個是 <a href="https://github.com/google/ngx_brotli">Google 的</a>，另外一個是 <a href="https://github.com/cloudflare/ngx_brotli_module">CloudFlare 的</a>，我挑的是 Google 的，不過現在覺得應該先試試看 CloudFlare 的才對，Google 的 ngx_brotli 是 depend on <a href="https://github.com/bagder/libbrotli">libbrotli</a> 的，libbrotli 很有趣，他是 cURL 的作者 <a href="https://daniel.haxx.se/">Daniel Stenberg</a> 去弄起來的，同時也是 Mozilla 的員工（不是 Google），然後 Google 的 ngx_brotli 卻是引用他的 lib，而不是去找自己的 brotli 專案下手，不知道這中間到底是怎麼回事，不過現在應該是快要<a href="https://github.com/google/brotli/issues/326">整</a><a href="https://github.com/google/brotli/issues/332">併</a>起來了。</p>

<p>CloudFlare 的 <a href="https://github.com/cloudflare/ngx_brotli_module">ngx_brotli_module</a> 則是直接把 brotli encoder 的程式碼放進去，不用 libbrotli，不過也不是沒有缺點，首先就是它只有 encoder，不能解壓 brotli 格式的 request body，再來是支援的設定比較少，Google 的可以設定的項目比較多，和 gzip 的相當接近，而且提供了 <code>brotli_static</code> 這個設定可以讓 nginx 自己去找看看有沒有預先壓縮好的 <code>br</code> 檔案，就像是上面 Apache 用的設定做的事情。我目前對於一般靜態的 css, js 檔案也有使用這個方法來節省 CPU 和降低 request 的反應時間。</p>

<p>結果當然是蠻不錯的，這邊之前是用 bootstrap 這個 css framework，壓縮前的 <code>bootstrap.min.css</code> 有 98.9KB，gzip 後是 19.9KB，用 zopfli 約是 15KB，用 brotli 可以再降低到 14.68KB，用的都是預設的壓縮密度，目前改用 Yahoo 的 <a href="http://purecss.io/">pure.css</a>，單看某一頁的 HTML + CSS + JS，資料量總共約 57.8 KB，使用 brotli 後，和 gzip(zopfli) 比可以再節省傳輸量到 25% 左右。</p>

<p>最後補充一下 <a href="https://www.iispeed.com/pagespeed/products/iisbrotli">IIS 也有支援</a> 了，這篇文章還有 Alexa 前一萬名網站的檔案下去用 brotli 壓縮的結果比較。</p>
]]></description>
<link>https://blog.othree.net/log/2016/03/21/brotli-gzip-alt/</link>
<guid>https://blog.othree.net/log/2016/03/21/brotli-gzip-alt/</guid>
<category>server</category>
<pubDate>Mon, 21 Mar 2016 13:43:51 +0800</pubDate>
</item>

<item>
<title>Device Pixel Ratio Header</title>
<description><![CDATA[<p>之前<a href="https://blog.othree.net/log/2012/10/28/device-pixel-ratio/">文章</a>有介紹過 DPR（Device Pixel Ratio），不過當時只能透過 JavaScript 在 client 端存取，如果 server 端要知道 client 端的 DPR 至少得要來回交換一次資訊，在那個時候就有想過應該之後會有新的標準來負責處理這個問題，而最近終於看到標準的草案了，叫做 <a href="http://httpwg.org/http-extensions/client-hints.html">HTTP Client Hints</a>，照字面的意思，這個 HTTP 擴充標準不是只有 DPR，而是提供 client 端的一些資訊，目前包括了：</p>

<ul>
<li>DPR</li>
<li>width</li>
<li>viewport-width</li>
<li>downlink</li>
</ul>

<p>其中 <code>DPR</code> 就是 device pixel ratio；<code>viewport-width</code> 就和以前介紹過的 viewport width 一樣；<code>width</code> 比較特別，是實際希望的 resource 寬度，而不是真的屬於 device 的資訊，例如圖片在網頁內是 160px，裝置的 DPR 是 2，<code>width</code> 就是 160×2 = 320px；最後一個 <code>downlink</code> 則是以前一直很難取得的網路速度，以前最大的限制在於不管是 client 端還是 server 端都很難取得實際的網路速度，雖然可以用 JavaScript 下載檔案算時間來取得素質，但是這樣的作法其實有個兩難的問題，一方面問題是如果檔案大小，那取得的數字會很不準確，另一方面問題是如果檔案太大，那必然就是浪費時間和網路頻寬，更不用說很多地方沒有吃到飽方案可以用，這樣的作法應該不會太受歡迎，甚至如果不測速度，搞不好都已經把網頁讀好了。現在把這個資訊的提供者更往上一層，改成由瀏覽器提供，瀏覽器就可以跟作業系統作溝通，就比較有機會不用先測速就拿到可以參考的網路速度。這些 Header 傳輸的時候都不用附上單位，只有數字，其中 downlink 的單位是 Mbps，而規範所希望瀏覽器提供的 downlink 數字是參考 <a href="https://w3c.github.io/netinfo/#downlinkmax-attribute">Network Information API</a> 這份 API 裡面整理的，主要連線方法的理論速度上限，例如 GSM 就是 0.01、LTE 是 100﹑wifi 802.11g 是 54，本來是想說這個數字是看瀏覽器自己決定，不只根據連線的方式，還會看實際的傳輸數字或是使用者偏好，例如他可能使用 LTE 但是因為不是吃到飽，所以希望把速度報低一點之類的。</p>

<p>Downlink 其實會比預期的還要有用，除了可以根據網路速度決定回傳的圖片大小外，還可以根據 downlink 大小來決定要回傳的 CSS，實際上使用可能像是，網路慢的時候就給出比較輕量的 CSS 回去給 client 端，用不一樣的版面呈現給使用者，有點像是 Google 的 <a href="https://www.ampproject.org/">Accelerated Mobile Pages Project</a>  所做的。</p>

<p>Client hint header 是個需要 opt-in 的擴充功能，就是預設是沒開的，那要怎麼開啟呢，就是在網頁 document 的 header 加上 <code>Accept-CH</code>：</p>

<pre><code>Accept-CH: "DPR, Downlink"
</code></pre>

<p>或是加上 meta tag</p>

<pre><code>&lt;meta http-equiv="Accept-CH" content="DPR, Width, Viewport-Width"&gt;
</code></pre>

<p>其中 equiv 是 equivalent 意思，就是和 HTTP header 等效的意思，透過這個 header 跟瀏覽器說 server 端可以接收 client hint 資訊，然後支援的瀏覽器就會在後續，這個網頁所需要用到的其它資源，像是 js, css, 圖片等等的 request 都加上這些資訊，這個溝通過程其實就是使用已經很久的機制： <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation">HTTP content negotiation</a>，用的 header 也是 <code>Accept</code> 開頭的，目前已經支援的還只有 Chrome，而且要 46 版以後，其他幾個瀏覽器大多都還在討論要不要支援，Firefox 是有一些<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=935216">進度</a>。</p>

<p>這樣的設計其實有點先進，不完全是褒意，因為這意味著要 server 端，負責提供圖片的服務器，收到 request 後去看 DPR 或是 width 之類的資訊再來挑選要回傳哪一張圖片回去，而通常提供圖片靜態檔案的服務都不太有邏輯處理，大部分就是簡單的 HTTP server，只看靜態檔案，有就傳檔案回去，沒有就回傳 404，相信之後是會有些 module 或是設定的方法讓 HTTP server 可以把這部分直接處理掉，不過一些規模比較大的網站，如果有用上 CDN 的，可能就沒法直接用上這功能，還要等看有沒有 CDN 廠商支援。</p>

<p>Client hint 目前看來會是 responsive image 未來的一個主要解法，和 media query 相比其實有兩個很大的差異，第一個是 media query 是馬上（且隨時）發生效果，和 HTTP request 是無關的，所以一開始下載下來的網頁就會發生效果，但是 client hint 要透過第一個 HTML document 本身的 request 進行溝通，意味著 HTML document 本身的 request 是不會收到 client hint。第二個就是 media query 是隨時發生作用的，即使在網頁完整讀取下來後，還是有可能因為使用者造成的 client 環境變化，而讓瀏覽器去多下載一份檔案，最常見的情形就是調整視窗大小，在手機上可能就是轉直轉橫造成 viewport 寬度變化，甚至在 Mac 如果外接普通螢幕，拖拉瀏覽器視窗到不同螢幕也會造成影響，如果這些變化剛好符合設定的 media query，DPR 從 1 變成 2，就會讓瀏覽器又去下載了一張 DPR 不同的圖片，這類狀況在網路頻寬有限的環境下實在不是好事，而用 client hint header 的話就完全不會有這種狀況了，就只會有一開始帶著 Client Hint 去抓下來的那個檔案。</p>

<p>不過 Client Hint 也不是完全沒有副作用，目前最大的問題就是這幾個新 header 都不列在 <a href="https://fetch.spec.whatwg.org/#simple-header">simple headers</a> 裡面，所以在做 CORS request 的時候，本來不用 preflight request 的都會變成需要 preflight request 了，這個問題其實現在還在討論，因為其實有很多類似的新 header 都會造成一樣的問題，像是 CSP、Server-Sent Events 裡面的 Event-ID，主要是這麼多 Header 進去，就不 simple 了，而且照最近標準發展的狀況來看，這份 simple headers 的清單很難固定不變，有興趣的可以跟一下<a href="https://github.com/whatwg/fetch/issues/52">討論</a>。</p>
]]>
</description>
<link>https://blog.othree.net/log/2016/02/28/device-pixel-ratio-header/</link>
<guid>https://blog.othree.net/log/2016/02/28/device-pixel-ratio-header/</guid>
<category>css-html</category>
<pubDate>Sun, 28 Feb 2016 14:34:04 +0800</pubDate>
</item>

<item>
<title>How to Reduce PDF Size and Keep Text</title>
<description><![CDATA[<h4>Requirement</h4>

<p>Small size of PDF file generated from PSD, with real text(for accessibility) and good image quality.</p>

<h4>Expect</h4>

<p>Expect the PDF file size is a little bit larger than JPG file.</p>

<h4>Issue</h4>

<p>Use <strong>save as</strong> and choose <strong>Photoshop PDF</strong> will generate large PDF. But save as JPG/PNG is much smaller. Test file spec:</p>

<ul>
<li>Page Size: 210mm*297mm (A4)</li>
<li>Resolution: 1240px*1754px</li>
<li>Fonts: 2 English font</li>
</ul>

<p>Sizes:</p>

<table>
<thead>
  <tr>
    <th>Format</th>
    <th>Option</th>
    <th>Size</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>PSD</td>
    <td></td>
    <td>79.7MB</td>
  </tr>
  <tr>
    <td>PNG</td>
    <td></td>
    <td>&#160;1.2MB</td>
  </tr>
  <tr>
    <td>JPG</td>
    <td>q: 100</td>
    <td>&#160;0.6MB</td>
  </tr>
  <tr>
    <td>PDF</td>
    <td>default</td>
    <td>&#160;7.0MB</td>
  </tr>
</tbody>
</table>

<p>File transformed on Adobe CC 2016 Jan </p>

<p>Tried several methods to reduce the file size includes:</p>

<ul>
<li>Remove unused layers</li>
<li>Merge and flatten all layers</li>
<li>Use lower jpeg compression quality</li>
<li>Not save meta data</li>
<li>Not preserve Photoshop editing capability</li>
<li>Use Photoshop autotool > PDF presentation</li>
<li>Use Illustrator</li>
<li>Use Acrobat Pro to optimize PDF</li>
</ul>

<p>But none of them can really make the PDF file as small as expected.</p>

<h4>Solution</h4>

<p>Separate the text and image. Also create a clean PSD file. Steps:</p>

<ol>
<li>Hide all text layers</li>
<li>Save as PNG file</li>
<li>Open PNG file in Photoshop</li>
<li>Unhide text layers and copy text layers to PNG file (should place at right place)</li>
<li>Save as Photoshop PDF file</li>
</ol>

<h5>Result</h5>

<table>
<thead>
  <tr>
    <th>Format</th>
    <th>Option</th>
    <th>Size</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>JPG</td>
    <td>q: 100</td>
    <td style="text-align: right">618.0KB</td>
  </tr>
  <tr>
    <td>PDF</td>
    <td>default</td>
    <td style="text-align: right">624.0KB</td>
  </tr>
</tbody>
</table>

<p>PS. I think other vector object can also use this method to keep their quality and maintain PDF in small size. But not tested.</p>
]]>
</description>
<link>https://blog.othree.net/log/2016/02/06/how-to-reduce-pdf-size/</link>
<guid>https://blog.othree.net/log/2016/02/06/how-to-reduce-pdf-size/</guid>
<category>software</category>
<pubDate>Sat, 06 Feb 2016 10:10:15 +0800</pubDate>
</item>

<item>
<title>JSON Universe</title>
<description><![CDATA[<p><a href="http://json.org/">JSON</a> 在這幾年不但<a href="https://www.ietf.org/rfc/rfc4627.txt">標準化</a>，還開始漸漸的取代了 XML，成為網路上主要的資料交換格式，我認為主要的原因在於他相對於 XML 簡單好懂好用很多，另外一個優點就是他格式很簡單好懂，學起來很快，而相較於更傳統的 Form URL encode 的資料傳輸格式，我覺得最大的優點是他多了 Data Type，而且也可以一口氣送出結構化的資料，傳統的 Form URL encode 雖然有 key value pair，也可以用 <code>[]</code> 模仿出陣列，不過他的所有的 value 都是字串，在 server 端都還要自己判斷欄位，手動做一次型別轉換。只是雖然 JSON 很好上手，還是有幾個地雷容易踩到，如果是會寫 JavaScript 的人更容易中招，大概列舉一下：</p>

<ul>
<li>不支援註解</li>
<li>物件的 key 一定要用字串型式，就是一定要用引號框起來</li>
<li>字串一定要用雙引號，不能用單引號</li>
<li>陣列或物件的最後一個元素後面不能加逗點（ES5 允許）</li>
</ul>

<p>當然要避免這些問題，最保險就是用各個語言已經有人實做好的函示庫來處理，而不要自己用組字串的方式來產生 JSON string。不過這篇文章不是要講這些，其實會想寫這篇文章是從 <a href="https://blog.othree.net/log/2015/12/25/jsx-e4x/">E4X</a> 那篇文章開始來的，那篇文章有提到 E4X 已經被棄用了，而 Mozilla 建議的替代方案是一個叫 JXON 的東西，名字看起來和 JSON 很像，而事實上除了 JXON，還有一堆名稱和 JSON 很相近的相關技術，像是 JSONH、BSON、LJSON ...等等，不過其實我找不太到有人去收集這些東西，所以就決定自己來整理一下，這篇文章就是要來介紹一下這堆 JSON 衍生出來的東西，以下沒照特定排序。</p>
]]><![CDATA[<h4>JXON</h4>

<p>第一個要介紹的就是剛剛提到的 <a href="https://developer.mozilla.org/en-US/docs/JXON">JXON</a>，JXON 全名是 lossless JavaScript XML Object Notation，是使用 JavaScript 語言的 syntax 來表示 XML 文件的資料，可以達到完整無失真的呈現，就是說可以還原成一模一樣的 XML，不過其實 JXON 並不是真的有個明確的標準，並沒有一個組織或單位來制訂，雖然如此，還是可以找到有人有<a href="https://github.com/tyrasd/jxon">實做</a>。</p>

<h4>JSONx</h4>

<p>第二個要介紹的是 <a href="https://www-01.ibm.com/support/knowledgecenter/SS9H2Y_7.1.0/com.ibm.dp.doc/json_jsonx.html">JSONx</a>，這是 IBM 推出的一種 XML 文件格式，目的非常有趣，和 JXON 剛好相反，是用 XML 文件來表示 JSON 文件的資料，namespace 是 <code>http://www.ibm.com/xmlns/prod/2009/jsonx</code>，講真的我想不到到底有誰會有需求使用到這個標準，隨便看個範例文件吧：</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;json:object xsi:schemaLocation="http://www.datapower.com/schemas/json jsonx.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:json="http://www.ibm.com/xmlns/prod/2009/jsonx"&gt;
  &lt;json:string name="name"&gt;John Smith&lt;/json:string&gt;
  &lt;json:object name="address"&gt;
    &lt;json:string name="streetAddress"&gt;21 2nd Street&lt;/json:string&gt;
    &lt;json:string name="city"&gt;New York&lt;/json:string&gt;
    &lt;json:string name="state"&gt;NY&lt;/json:string&gt;
    &lt;json:number name="postalCode"&gt;10021&lt;/json:number&gt;
  &lt;/json:object&gt;
  &lt;json:array name="phoneNumbers"&gt;
    &lt;json:string&gt;212 555-1111&lt;/json:string&gt;
    &lt;json:string&gt;212 555-2222&lt;/json:string&gt;
  &lt;/json:array&gt;
  &lt;json:null name="additionalInfo" /&gt;
  &lt;json:boolean name="remote"&gt;false&lt;/json:boolean&gt;
  &lt;json:number name="height"&gt;62.4&lt;/json:number&gt;
  &lt;json:string name="ficoScore"&gt; &gt; 640&lt;/json:string&gt;
&lt;/json:object&gt;
</code></pre>

<h4>MessagePack</h4>

<p><a href="http://msgpack.org/">MessagePack</a> 是一個類似 Protocol Buffer 的 Binary 資料交換格式，不過其資料的構成很 JSON，官網上的測試頁面就可以讓你直接輸入 JSON 資料，然後它會轉成 MessagePack 的格式。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24129761021/" title="MessagePack Try by othree, on Flickr"><img src="https://farm2.staticflickr.com/1543/24129761021_bf896219e8_c.jpg" width="840" height="289" alt="MessagePack Try" srcset="https://farm2.staticflickr.com/1543/24129761021_bf896219e8_c.jpg 768w, https://farm2.staticflickr.com/1543/24129761021_02e672ba3d_h.jpg 1600w" /></a></p>

<p>MessagePack 相較於下面介紹的其他幾個 Binary 格式是比較好懂些，也有比較完整的實做和支援，是目前比較多人使用的 binary JSON 格式，也有一些商業網站採用，像是 Pinterest、fluentd。這類的 binary 資料格式蠻常被拿來和 Google 的 <a href="https://developers.google.com/protocol-buffers/">Protocol Buffer</a> 來做比較，當然相較於 Protocol Buffer 來說，JSON 型式的資料結構其特色就是 schema free，不用事先定義好傳輸資料內部的結構。</p>

<h4>BSON, BJSON</h4>

<p><a href="http://bsonspec.org/">BSON</a>、<a href="http://bjson.org/">BJSON</a> 也都是 Binary 的 JSON 表現格式，不過這兩個規格都不完全相容於 JSON，有多一些自定義的資料型態，像是 regular expression，然後大部分人都只有談到 BSON，不太有人講到 BJSON 的樣子。</p>

<h4>UBJSON, Smile</h4>

<p><a href="http://ubjson.org/">UBJSON</a>(Universal Binary JSON) 和 <a href="http://wiki.fasterxml.com/SmileFormatSpec">Smile</a> 也和上面幾個一樣是 Binary 的資料格式，和 BSON 比起來則是差在這兩個格式完全相容於 JSON，意思就是可以做到 <code>UBJSON -&gt; JSON -&gt; UBJSON</code> 這樣的資料轉而完全不會遺失資訊。</p>

<p>Binanry 的 JSON 表現格式其實還有一個叫 <a href="https://componentality.com/xjson/">xJSON</a> 的比較沒知名度這樣。</p>

<h4>Hjson</h4>

<p><a href="http://hjson.org/">Hjson</a> 全名是 the Human JSON，顧名思義就是更人性化的 JSON 格式，是一個比 JSON 寬鬆的規範，例如允許註解，不用 <code>,</code> 改成用換行也可以分開不同元素：</p>

<pre><code>[
  1
  2
  3
]
</code></pre>

<p>物件的 key 不需要字串的引號：</p>

<pre><code>{ foo: 123 }
</code></pre>

<p>等等很多方便的語法，不過其實如果要用機器產生這些寬鬆的資料是不太好，比較適合的場合還是用人工維護的 JSON 檔案。</p>

<h4>rson</h4>

<p><a href="https://code.google.com/p/rson/">rson</a> 是一個 JSON 的 superset，和 Hjson 的目標有些接近，不過 rson 的一些新語法更接近 <a href="http://www.yaml.org/">YAML</a> 格式，專案是放在 Google Code 上，而且似乎已經沒維護了，是個總有一天會消失在網路上的東西吧。</p>

<h4>LJSON</h4>

<p><a href="https://github.com/MaiaVictor/LJSON">LJSON</a> 的 L 應該是 lambda 的意思，也是個 JSON 的擴充格式，改變只有一個，就是多了可以儲存 pure function 的能力，儲存 function 的形式是很像 ES6 arrow function 的樣子：</p>

<pre><code>(v0)=&gt;({"author":"John","message":v0})
</code></pre>

<p>最大的差別在於 <code>=&gt;</code> 後面是接 <code>()</code>，並且還有個特色是它會想辦法最佳化，會有像是 dead code removal 的效果。如果要自己做到用 JSON 儲存 function 的話，一般是可以先用 <code>toString</code> 來輸出 function 的原始碼，要還原時再用 <code>new Function</code> 來還原，不過如果不是 pure function，例如有用到 closure 變數的話，就一定會失去這些 reference 到的變數了。</p>

<p>另外還有一個 <a href="https://github.com/daviddengcn/ljson">LJSON</a> 是叫做 Loose JSON，就和上面介紹的 Hjson 目標差不多，就不再多介紹了。</p>

<h4>JSON Lines</h4>

<p><a href="http://jsonlines.org/">JSON Lines</a> 也是有點接近上面介紹的幾個東西，其實是個很簡單的東西，就是把多個 JSON 資料用換行接在同一個文件檔案內，例如：</p>

<pre><code>[1,2,3]
[4,5,6]
[7,8,9]
</code></pre>

<p>三個 JSON 陣列接在一起，不是一個合法的 JSON string，一般 JSON Parser 都會說 Syntax Error，不過支援 JSON Lines 的環境下就可以把這串字串切開，分成三個陣列，支援的環境中我看到比較有名的大概就是 <a href="https://github.com/maxogden/dat/">dat</a> 了，這是一個蠻厲害的資料分享的工具，其中的串流模式傳輸資料就是用到 JSON Lines 格式（其實就是一個一個 JSON 資料輪流輸出）。</p>

<h4>JSONH</h4>

<p><a href="https://github.com/WebReflection/JSONH">JSONH</a> 就不是一個 JSON 的擴充格式了，它事實上是用來壓縮 JSON 的，特別適用於物件的陣列的資料集，像是：</p>

<pre><code>[
  {
    "name": "John",
    "gender": "Male",
    "country": "USA"
  },
  {
    "name": "Smith",
    "gender": "Male",
    "country": "Canada"
  }
]
</code></pre>

<p>透過用 JSONH 壓縮就會變成：</p>

<pre><code>[3, "name", "gender", "country", "John", "Male", "USA", "Smith", "Male", "Canada"]
</code></pre>

<p>最主要節省的就是大量重複的屬性名稱，如果屬性名稱長，陣列又長，這樣壓縮前後的資料量大小差距就會很明顯，不過如果資料階層比較複雜的話，沒辦法整理得這麼漂亮，壓縮效果就會打折了。</p>

<h4>Jsonnet</h4>

<p><a href="http://jsonnet.org/">Jsonnet</a> 是 Google 所推出，帶著一點程式語言特性的 JSON 文件格式，例如多了個 <code>self</code>：</p>

<pre><code>{
    person1: {
        name: "Alice",
        welcome: "Hello " + self.name + "!",
    },
    person2: self.person1 { name: "Bob" },
}
</code></pre>

<p>還有 tempalte string：</p>

<pre><code>{
    fmt2: "The word %(wd)s has %(le)d letters.  Go %(wd)s!"
        % {wd: $.word, le: std.length($.word)},
}
</code></pre>

<p>Array comprehension：</p>

<pre><code>{
    foo: [1, 2, 3],
    bar: [x * x for x in self.foo if x &gt;= 2],
    baz: { ["field" + x]: x for x in self.foo },
    obj: { ["foo" + "bar"]: 3 },
}
</code></pre>

<p>除了這些程式語法的特性之外， Jsonnet 還有像是 Hjson 的一些比較人性化的語法的支援，官網上則自稱是是一種 data template language，而不是單純的資料而已。</p>

<h4>JSON3</h4>

<p><a href="http://bestiejs.github.io/json3/">JSON3</a> 其實不是一個新版本的 JSON，而是一個更加穩健的 JavaScript 的 JSON 實做，多處理了一些不同瀏覽器的差異問題，3 的由來其實是相對於 Douglas 的 <a href="https://github.com/douglascrockford/JSON-js">json2.js</a>，這個 json2.js 是整個 JSON 進 ECMAScript 標準時最主要的依據，包括 Global Varibale 的名稱，API 的設計都是從這邊來的，至於這個 json2.js 的 2 的意思其實就是這是 Douglas 實做的第二版 JSON library。</p>

<h4>JSONP</h4>

<p><a href="https://zh.wikipedia.org/wiki/JSONP">JSONP</a> 其實不是一個標準，最早出處也不詳，不過早一點在 CORS 普及前就開始寫 Ajax 的人應該是很熟悉的東西，瀏覽器為了安全性問題，雖然可以跨直接用 XHR 做出 HTTP request，但是會限制跨 domain 的連線，現在有 CORS 可以讓網站所有者提供允許的白名單，但是在 CORS 普及前，基本上是完全被禁止的，不過有個方法就是插入 <code>&lt;script&gt;</code> 標籤去執行遠端的 js 檔案，這個方法的缺點就是只能執行，不能讀取檔案內容，JSONP 就是在這個限制下所設計出來可以用來跟遠端要資料的方法，基本上實做的方法就是在本地先產生好一個暫時的 callback function：</p>

<pre><code>window.cb123456 = function (data) {
  window.cb123456 = null; //clean up

  //do something with data      
};
</code></pre>

<p>然後把遠端資源加上參數指定 callback 名稱：</p>

<pre><code>&lt;script type="text/javascript"
     src="http://server2.example.com/RetrieveUser?UserId=1823&amp;jsonp=cb123456"&gt;
&lt;/script&gt;
</code></pre>

<p>遠端收到 Request 後產生特別的 response，本來要回傳的資料如下：</p>

<pre><code>{
  "name": "John",
  "gender": "Male",
  "country": "USA"
}
</code></pre>

<p>現在會變成一段 JavaScript 程式碼：</p>

<pre><code>cb1231465({
  "name": "John",
  "gender": "Male",
  "country": "USA"
});
</code></pre>

<h4>JSON Schema</h4>

<p>JSON 本身是很自由的資料格式，不過開發比較大型的應用程式，或是要做一些測試的時候，太過自由就不一定是優點了，所以很合理的就會有個來定義資料內容結構的描述語言出現，<a href="http://json-schema.org/">JSON Schema</a> 就是一個，而且似乎很合理的 JSON Schema 也是 JSON 文件：</p>

<pre><code>{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Product",
    "description": "A product from Acme's catalog",
    "type": "object",
    "properties": {
        "id": {
            "description": "The unique identifier for a product",
            "type": "integer"
        }
    },
    "required": ["id"]
}
</code></pre>

<p>這個文件格式也有在 <a href="http://raml.org/">RAML</a> 中被使用到，RAML 是個 RESTful API 的定義文件，如果 API 傳輸的資料是 JSON 的話，就可以內嵌 JSON Schema，都定義完整就可以用自動化工具來做一些測試了，或是也可以產生一些方便閱讀的文件等等。</p>

<h4>JSON-LD</h4>

<p><a href="http://json-ld.org/">JSON-LD</a> 是 JSON for Linked Data，所謂 Linked Data 其實就是語意網的一部分，基本上還是遵照 <a href="http://www.w3.org/RDF/">RDF</a> 架構去設計出來的文件，目前也很多網路服務都支援，像是 Google、Facebook 等等，甚至 Gmail 的一些特殊能力也是透過在信件內插入 JSON-LD 格式的資料才得以實現。</p>

<h4>JSON-RPC</h4>

<p><a href="http://json-rpc.org/">JSON-RPC</a> 基本上就是 XML-RPC 的 JSON 版本這樣，其實我也不知道有沒有人真的拿來應用就是，倒是 XML-RPC 現在還不少老東西有支援。</p>

<h4>GeoJSON</h4>

<p><a href="http://geojson.org/">GeoJSON</a> 則是針對地理資訊的 JSON 資料格式，基本上就是點線面，然後座標用經緯度，再加上 meta 資訊這樣，不會很複雜，GitHub 也支援 <a href="https://github.com/blog/1541-geojson-rendering-improvements">直接預覽</a> 的功能，<a href="http://g0v.tw/zh-TW/index.html">g0v</a> 上其實有不少專案都有用到 geojson 資料，還有個 <a href="https://github.com/g0v/twgeojson">twgeojson</a> 的基礎建設，最新版的檔案有點大，不過可以看看舊版本的<a href="https://github.com/g0v/twgeojson/blob/master/legacy/twTown1982.json">檔案</a>：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/24218757206/" title="twgeojson g0v by othree, on Flickr"><img src="https://farm2.staticflickr.com/1657/24218757206_9c6e578f87_b.jpg" width="1024" height="707" alt="twgeojson g0v, " srcset="https://farm2.staticflickr.com/1657/24218757206_9c6e578f87_b.jpg 1024w, https://farm2.staticflickr.com/1657/24218757206_6834908581_h.jpg 1600w" /></a></p>

<p>GeoJSON 還有一個擴充版的文件格式叫做 <a href="https://github.com/mbostock/topojson">TopoJSON</a>，相較於 GeoJSON 比較適合用在 topology 上（可以想像你只要台灣地圖，但是不用放在世界地圖上），整體檔案大小也因此可以小很多。</p>

<h4>JSON-stat</h4>

<p><a href="http://json-stat.org/">JSON-stat</a> 是個把二維統計資訊表格用 JSON 表現的格式，而且不是只能夠處理兩個維度的資料而已，事實上可以儲存更多維度，JSON-stat 在儲存 raw data 的部分是用打平的一維陣列來儲存，所以也不用擔心太多層太過複雜的狀況，想詳細瞭解一點的可以參考官網右上角的投影片看看。</p>

<h4>JSON Graph</h4>

<p><a href="http://netflix.github.io/falcor/documentation/jsongraph.html">JSON Graph</a> 是 Netflix 推出的 <a href="http://netflix.github.io/falcor/">Falcor</a> 裡面用到的，Falcor 是一種用來取代 RESTful API 的新的前後端之間的溝通方式，這種方法和 RESTful 相比最大的差異就是不再是對單一的資源（resource）做操作，而是整個應用程式會用到的東西都組織定義好，放到一個大的 resource 內，然後再對這個大的資源做操作，而這個大的 resource 就是所謂的 JSON Graph 物件，Falcor 的出現是為了解決一些把 RESTful 用到很透徹時會出現的問題，不過真的要想用這套方法在自己的服務上其實是有些難度，因為要實做一個 Falcor Server，官方也只有提供 Node 版的。</p>

<h4>JSONPath</h4>

<p><a href="http://goessner.net/articles/JsonPath/">JSONPath</a> 是一個 JSON 的 query 語言，像是 <a href="https://developer.mozilla.org/en-US/docs/Web/XPath">XPath</a> 之於 XML，語法 syntax 其實和普通 JavaScript 程式碼很像，不會太難理解，一些範例：</p>

<pre><code>$.store.*
$.store.book[*].author
$.store..price
</code></pre>

<p>不過這些可不是程式碼，而是單純的字串，丟進 JSONPath 引擎再給它相對應的物件（不是 JSON 字串），就可以把目標位置的資料取出來。</p>

<h4>JSONiq</h4>

<p><a href="http://jsoniq.org/">JSONiq</a> 也是個用來 query JSON 資料用的語言，不過和上面的 JSONPath 不一樣，比較像是 SQL 那樣有點程式化，而且語法偏 functional programming，例如：</p>

<pre><code>for $sarah in collection("users"),
    $friend in collection("users")
where $sarah.name eq "Sarah"
      and
      (some $name in $sarah.friends[]
       satisfies $friend.name eq $name)
return $friend
</code></pre>

<h4>JSON Pointer</h4>

<p><a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> 是一個 2013 的 RFC 標準(RFC-6901)，用途和 JSON Path 有點像，也是用來取出 JSON 文件中的一部份資料，不過最主要的差異在於 JSON Pointer 一定是只能指向到一個節點，只能拿到一個 value，不像 JSONPath 或是 JSONip 可以一次 query 很多節點，然後用陣列的形式傳回值；另外還有一個和 JSONPath 的差異是 JSON Pointer 和 XPath 的語法很接近：</p>

<pre><code>/foo/0
/actors/4/name
</code></pre>

<h4>JSON Patch</h4>

<p><a href="https://tools.ietf.org/html/rfc6902">JSON Patch</a> 是一個另 RFC 標準(RFC-6902)，緊接在 JSON Pointer 之後，這兩個標準都是都是在 <a href="https://blog.gslin.org/archives/2014/02/15/4261/json-patch/">gslin</a> 那邊看到的，JSON Patch 主要是定義了一組標準的對 JSON 的操作(operation)，提供了 add, remove, replace, move, copy, test 幾個操作，基本上看起來如下：</p>

<pre><code>{"op": "add", "path": "/pets/0", "value": "dog"}
</code></pre>

<p>這行的意思是要在 pets 下的第一個元素的位置加上一個值，字串 "dog"，JSON Patch 基本上是設計來和 HTTP Patch 配合的，以前如果要用 Patch 修改某個特定網路 reource 的話，一定要把整個完整的，更新過後的 JSON 資料傳一次，但是如果用 JSON Patch 就可以只傳要做怎樣的更新就可以了，可以節省很多資料的傳輸量，而且還可以先用 test 做測試，然後也可以一次做一連串的修改動作：</p>

<pre><code>[
  { "op": "replace", "path": "/baz", "value": "boo" },
  { "op": "add", "path": "/hello", "value": ["world"] },
  { "op": "remove", "path": "/foo"}
]
</code></pre>

<h4>JSONDiffPatch</h4>

<p><a href="http://benjamine.github.io/jsondiffpatch/demo/index.html">JSONDiffPatch</a> 是本來文章發出後才看到的 JSON 文件的 diff, patch 工具，網站上的 demo 還有視覺化的顯示，感覺很華麗：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23699590343/" title="JSONDiffPatch by othree, on Flickr"><img src="https://farm2.staticflickr.com/1507/23699590343_c3d5b0dd16_b.jpg" width="425" height="654" alt="JSONDiffPatch, " srcset="https://farm2.staticflickr.com/1507/23699590343_c3d5b0dd16_b.jpg 665w" /></a></p>

<p>雖然用的格式不是 JSON Patch，而是自己有定義他的 <a href="https://github.com/benjamine/jsondiffpatch/blob/master/docs/deltas.md">delta format</a>，不過基本上作的事情很接近，另外他還可以 undo patch，也有 plugin 可以外掛，還算蠻完整的。</p>

<h4>JSONLint</h4>

<p><a href="http://jsonlint.com">JSONLint</a> 是 JSON 的文件格式檢查工具，不過實際上大部分人在命令列用的通常是 npm 裝的<a href="https://github.com/zaach/jsonlint">版本</a>，這版是 Mozilla 的 Zach Carter 用 JavaScript 實做的，我自己還蠻常用一個線上服務：<a href="https://jsonformatter.curiousconcept.com/">JSON Formatter</a>，除了可以做語法檢查，還可以用可以收展開的樹狀檢視模式來看 JSON 資料。</p>

<h4>?JSON</h4>

<p>最後，JSON 的相關應用和各種 library 真的是不少，其實 JSON 前面加上 26 個英文字母的任意一個，只有 <code>ojson</code> 沒有東西而已，其他 25 個名稱都有人用，不過大部分都是特定語言的 JSON library 實做就是了。然後相信我這篇文章列出來的不是全部，如果有人知道什麼特別的變化或應用也歡迎提供～</p>
]]></description>
<link>https://blog.othree.net/log/2016/01/11/json-universe/</link>
<guid>https://blog.othree.net/log/2016/01/11/json-universe/</guid>
<category>script</category>
<pubDate>Mon, 11 Jan 2016 22:38:31 +0800</pubDate>
</item>

<item>
<title>2015</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16140518847/" title="武廟碳烤土司 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7492/16140518847_59717232dc_b.jpg" width="1024" height="683" alt="武廟碳烤土司" srcset="https://farm8.staticflickr.com/7492/16140518847_59717232dc_b.jpg 1024w, https://farm8.staticflickr.com/7492/16140518847_245a05da67_h.jpg 1600w" /></a></p>

<p>又到了一年一度的照片回顧了，今年因為比較多事情，竟然有一個月沒有照片（除了開箱以外），所以就另外多挑了一張照片出來這樣。首先是一月在台南武廟前面碳烤吐司那邊拍的，台南的大大小小寺廟真的很多，隨便一條巷子進去就有間小廟。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16456098101/" title="HTC 2014 Year End Party by othree, on Flickr"><img src="https://farm8.staticflickr.com/7322/16456098101_3302c040ba_b.jpg" width="1024" height="683" alt="HTC 2014 Year End Party" srcset="https://farm8.staticflickr.com/7322/16456098101_3302c040ba_b.jpg 1024w, https://farm8.staticflickr.com/7322/16456098101_bc349f389d_h.jpg 1600w" /></a></p>

<p>二月是最後一次五月天到HTC的尾牙了，今年聽說五月天沒有要唱尾牙場這樣。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16535116467/" title="Kano 小朋友的電腦自己動手作工作坊 by othree, on Flickr"><img src="https://farm9.staticflickr.com/8602/16535116467_1e42f2e043_b.jpg" width="1024" height="683" alt="Kano 小朋友的電腦自己動手作工作坊" srcset="https://farm9.staticflickr.com/8602/16535116467_1e42f2e043_b.jpg 1024w, https://farm9.staticflickr.com/8602/16535116467_26174e67bb_h.jpg 1600w" /></a></p>

<p>三月的是在摩茲工寮拍的，是 Kano 的 workshop，Kano 是讓小朋友能自己從硬體組裝電腦的一個 kit，之前和朋友湊團買了不少台，達到可以請官方支援開一場 workshop 的目標，所以就辦了一場，也是我難得有機會拍小孩子的照片。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/17133378048/" title="台南凰商號、鳳梨冰茶 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7669/17133378048_014e3ee6f2_b.jpg" width="1024" height="683" alt="台南凰商號、鳳梨冰茶" srcset="https://farm8.staticflickr.com/7669/17133378048_014e3ee6f2_b.jpg 1024w, https://farm8.staticflickr.com/7669/17133378048_dede7ec4d4_h.jpg 1600w" /></a></p>

<p>四月是我今年印象最深刻的一杯飲料，台南凰商號的鳳梨冰茶。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/18732255206/" title="頤和園 by othree, on Flickr"><img src="https://farm9.staticflickr.com/8873/18732255206_de78be9257_b.jpg" width="683" height="1024" alt="頤和園" srcset="https://farm9.staticflickr.com/8873/18732255206_de78be9257_b.jpg 683w, https://farm9.staticflickr.com/8873/18732255206_ecfa09195b_h.jpg 1067w" /></a></p>

<p>五月的時候去了北京一趟，趁著有一天假日去觀光一下，其中頤和園還蠻不錯的，這張照片是園內的麒麟，做工精細，光是台座就很華麗，然後這尊我都稱他為標準麒麟，感覺是有人要畫麒麟時可以來參考用的標準版。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/19502074628/" title="HITCON GIRLS 7月讀書會 by othree, on Flickr"><img src="https://farm1.staticflickr.com/413/19502074628_f5bd2785a1_b.jpg" width="1024" height="683" alt="HITCON GIRLS 7月讀書會" srcset="https://farm1.staticflickr.com/413/19502074628_f5bd2785a1_b.jpg 1024w, https://farm1.staticflickr.com/413/19502074628_6009dd3e0a_h.jpg 1600w" /></a></p>

<p>六月就是都沒照片可以挑，所以跳到七月，今年幫 HITCON 記錄了不少活動，最主力參與的就是 HITCON 本番活動的四天研討會加前面兩天 Training 了，然後拍完我就感冒接著一直咳嗽到11月底，明年大概不能這樣從頭參加到尾了，挑的這張是 HITCON Girls 的讀書會的照片，其實 HITCON Girls 的難易度對我來說好像還蠻剛好的(?)。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21691691725/" title="COSCUP 2015 Day 2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/732/21691691725_0158744a48_b.jpg" width="1024" height="683" alt="COSCUP 2015 Day 2" srcset="https://farm1.staticflickr.com/732/21691691725_0158744a48_b.jpg 1024w, https://farm1.staticflickr.com/732/21691691725_78680cc694_h.jpg 1600w" /></a></p>

<p>八月是慣例的 COSCUP，這張是 Jserv 講完他封麥演講後拍的，因為覺得他神情不太一般就拍下來了，後來看他的一些心情抒發才知道是怎麼回事。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21588592452/" title="SOTM Taiwan 2015 Day 2 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5666/21588592452_42ba1e0687_b.jpg" width="1024" height="683" alt="SOTM Taiwan 2015 Day 2" srcset="https://farm6.staticflickr.com/5666/21588592452_42ba1e0687_b.jpg 1024w, https://farm6.staticflickr.com/5666/21588592452_7c2e08433b_h.jpg 1600w" /></a></p>

<p>九月去幫忙拍了 Open Street Map 的研討會（State of The Map），規模不大，不過是我拍的蠻開心的一場活動，就是一種小而美的 fu。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21840706024/" title="信義區 by othree, on Flickr"><img src="https://farm1.staticflickr.com/774/21840706024_a5df54ab4a_b.jpg" width="1024" height="683" alt="信義區" srcset="https://farm1.staticflickr.com/774/21840706024_a5df54ab4a_b.jpg 1024w, https://farm1.staticflickr.com/774/21840706024_dd9bbe8e4a_h.jpg 1600w" /></a></p>

<p>十月其實也沒拍什麼照片，這張是某天下班時在信義區空橋拍的簡單夜景。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23369387526/" title="菲貓 by othree, on Flickr"><img src="https://farm1.staticflickr.com/666/23369387526_c49aaa7eeb_b.jpg" width="1024" height="683" alt="菲貓" srcset="https://farm1.staticflickr.com/666/23369387526_c49aaa7eeb_b.jpg 1024w, https://farm1.staticflickr.com/666/23369387526_cb6c4f9d2f_h.jpg 1600w" /></a></p>

<p>十一月底幫家裡貓咪穿上正式服裝時拍的照片。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23459263613/" title="Kumamon Square by othree, on Flickr"><img src="https://farm6.staticflickr.com/5771/23459263613_d450468173_b.jpg" width="1024" height="683" alt="Kumamon Square" srcset="https://farm6.staticflickr.com/5771/23459263613_d450468173_b.jpg 1024w, https://farm6.staticflickr.com/5771/23459263613_20f8262b93_h.jpg 1600w" /></a></p>

<p>十二月去了一趟九州，還專程去拜訪了 Kumamon ，熊本真的是很多 Kumamon，去熊本的行程就是拜訪熊本熊、熊本城、吃豬排、吃燒肉，熊本城其實是重建的，然後現在還是有城主，用的是一口城主制度，簡單說就是有捐錢幫忙維護熊本城就能當城主。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/16222124870/" title="FF25 Cosplay by othree, on Flickr"><img src="https://farm8.staticflickr.com/7352/16222124870_39dd508f76_b.jpg" width="1024" height="683" alt="FF25 Cosplay" srcset="https://farm8.staticflickr.com/7352/16222124870_39dd508f76_b.jpg 1024w, https://farm8.staticflickr.com/7352/16222124870_7d47d8872c_h.jpg 1600w" /></a></p>

<p>最後補一張 cosplay 的照片，今年後半年都沒有拍相關的活動，剛好上面也都沒挑到這個主題的照片，最近 FF 開始移師到花博園區，那邊腹地比較廣大，比較不會有在台大的的種種問題，不過還搞不太清楚要在哪裡找人拍照就是。</p>
]]>
</description>
<link>https://blog.othree.net/log/2016/01/03/2015/</link>
<guid>https://blog.othree.net/log/2016/01/03/2015/</guid>
<category>diary</category>
<pubDate>Sun, 03 Jan 2016 15:20:10 +0800</pubDate>
</item>

<item>
<title>JSX 的前世</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/23319631253/" title="ECMA-357 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5679/23319631253_52dfbeb5c0_b.jpg" width="723" height="1024" alt="ECMA-357" srcset="https://farm6.staticflickr.com/5679/23319631253_52dfbeb5c0_b.jpg 723w, https://farm6.staticflickr.com/5679/23319631253_54870a2279_h.jpg 1130w" /></a></p>

<p>React 的主要創新在於 Virtual DOM，而伴隨著 Virtual DOM 而來的，就是 Virtual DOM 的操作，由於 JavaScript 語言限制的關係，要產生一個簡單的 <code>&lt;div&gt;</code> 標籤就要寫成：</p>

<pre><code>var divNode = React.DOM.div({attr1:"value"});
</code></pre>

<p>如果還要加上子元素，像是一個 list：</p>

<pre><code>&lt;ol&gt;
  &lt;li&gt;Item A&lt;/li&gt;
  &lt;li&gt;Item B&lt;/li&gt;
  &lt;li&gt;Item C&lt;/li&gt;
  &lt;li&gt;Item D&lt;/li&gt;
&lt;/ol&gt;
</code></pre>

<p>就要寫成：</p>

<pre><code>var listNode = React.DOM.div({},
  React.DOM.li({}, "Item A"),
  React.DOM.li({}, "Item B"),
  React.DOM.li({}, "Item C"),
  React.DOM.li({}, "Item D")
);
</code></pre>

<p>雖然比起純 DOM 的語法要簡單很多了，不過其實類似這種寫法來快速產生文件樹節點的 library 已經早就有了，像是 <a href="https://github.com/eneko/mooml">Mooml</a>、<a href="https://github.com/dominictarr/hyperscript">hyperscript</a>（thanks WM），如果 React 當初就直接這樣子推出，大家會想嘗試的意願應該會低很多，Facebook 的工程師應該也知道這樣和直接寫 DOM 或是其他 library 的感覺差異不大，所以他們解決的方法就是建立了一個新的 syntax，看起來就像是讓 DOM 變成像是原生的資料型態一樣，也就是現在的 JSX syntax，然後當然要讓這種語法可以在瀏覽器執行，所以官方有提供了 transpiler，不過其實這個把 XML DOM 當成 JS 語言中的原生資料型態的想法不是第一次出現了，早在好幾年前，就有一個 ECMA-357，又稱為 <a href="https://developer.mozilla.org/zh-TW/docs/E4X/%E4%BD%BF%E7%94%A8_E4X_%E8%99%95%E7%90%86_XML">E4X</a> 的標準是在做這件事的，全名則是 ECMAScript for XML，早期的 Mozilla SpiderMonkey 是有支援的，約是在 2006 年的 JavaScript 1.6 中推出，不過到 Firefox 21 的時候已經完全移除了，所以現在基本上是已經無法體會到這套 JS 擴充的語法，不過其實這套語法還蠻不錯的，有類似 template string 的寫法：</p>

<pre><code>var doc = &lt;{h}&gt;&lt;body&gt;{text}&lt;/body&gt;&lt;/{h}&gt;;
</code></pre>

<p>React 則因為同時導入了 immutable 的概念，所以其 Virtual DOM 設計上只有產生文件樹結構的部分，沒有刪除修改，相較於 JSX 只有建置（create）的語法，E4X 則是有更完整的 CRUD 操作（就像是操作 JS 資料一樣），另外還多了用來尋找目標節點的 selector syntax：</p>

<pre><code>languages.lang[1]
person..*
people.person.(name == "Joe").age
</code></pre>

<p>而且目標對像是 XML，所以對於 namespace 的處理也都有，整體而言算是很完整的 XML 操作方案，使用起來也比 DOM 簡潔很多，可惜後來被放棄，我推測大概幾個原因：</p>

<ol>
<li>使用 XML 的應用越來越少</li>
<li>實做 E4X 會增加 JS 引擎的複雜度</li>
<li>相較於 DOM 不依存於單一程式語言，E4X 則是 JS extension</li>
<li>用 E4X 產生的節點不是 DOM 物件，不直接相容</li>
</ol>

<p>沒想到後來會在 Facebook 的手上，把這個概念單存的套用在 HTML 文件樹之上而重生。</p>
]]>
</description>
<link>https://blog.othree.net/log/2015/12/25/jsx-e4x/</link>
<guid>https://blog.othree.net/log/2015/12/25/jsx-e4x/</guid>
<category>script</category>
<pubDate>Fri, 25 Dec 2015 09:36:53 +0800</pubDate>
</item>

<item>
<title>ULA 雨傘</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22276626569/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/698/22276626569_c47da2bce3_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/698/22276626569_c47da2bce3_b.jpg 1024w, https://farm1.staticflickr.com/698/22276626569_950a01861f_h.jpg 1600w" /></a></p>

<p>前陣子因緣際會有朋友去香港，就請他幫忙買了隻香港有名（？）的 <a href="http://www.ula-umbrella.com/">ULA</a> 雨傘，收到之後覺得驚為天人，幾乎是我用折傘以來的遇到的各種小問題在 ULA 雨傘上都有處理，這篇文章就來介紹一下他們做了什麼處理，解決了什麼問題。</p>
]]><![CDATA[<p>首先第一印像是，雨傘綁起來時很緊，幾乎所有其它的雨傘都是，在我辛苦的把傘面整理好之後，要綁起來時，卻發現因為魔鬼沾或鈕釦的位置，綁起來會鬆鬆的，沒辦法綁緊，結果本來弄得很緊實的傘布就變的鬆鬆垮垮的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22275767928/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/571/22275767928_6ee17966fd_b.jpg" width="683" height="1024" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/571/22275767928_6ee17966fd_b.jpg 683w, https://farm1.staticflickr.com/571/22275767928_37ff7c4854_h.jpg 1067w" /></a></p>

<p>第二個是則是雨傘套的部分，其它雨傘幾乎都沒有考慮要撐傘時，隨附的雨傘套要放在哪的問題，以前我最常做的方法就是把他綁在手把的繩圈上，不過這個方法久了傘套的布就會變的很皺，ULA 則是設計了一個鈕釦在手把繩圈那邊，可以固定拿下來的傘套。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21842288193/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/724/21842288193_3484a9d9c9_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/724/21842288193_3484a9d9c9_b.jpg 1024w, https://farm1.staticflickr.com/724/21842288193_5d827d7d55_h.jpg 1600w" /></a></p>

<p>第三個則是雨傘開關的地方，有一整塊軟橡膠墊讓手指不會因為要用力壓金屬片卡吮而不舒服，而且很顯眼，有畫龍點睛的效果，雖然都是素色的雨傘，不過整體設計是蠻好看的。另外一點和開關相關的特色，就是開關很好操作，不太會有力量出不去卡卡的狀況。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21842283173/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/771/21842283173_7e44d94c85_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/771/21842283173_7e44d94c85_b.jpg 1024w, https://farm1.staticflickr.com/771/21842283173_c9e0f7f1b7_h.jpg 1600w" /></a></p>

<p>第四個則是收傘容易，雨傘支架末端都有設計過，配合頭蠻大的握把，很容易就把所有支架末端收好固定到握把內，再也不用一直橋來橋去的收傘了。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22275764628/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/716/22275764628_1c69194dd2_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/716/22275764628_1c69194dd2_b.jpg 1024w, https://farm1.staticflickr.com/716/22275764628_812ee5b6a3_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/21840724334/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/773/21840724334_cd305357d7_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/773/21840724334_cd305357d7_b.jpg 1024w, https://farm1.staticflickr.com/773/21840724334_12b245f622_h.jpg 1600w" /></a></p>

<p>另外雨傘握把雖然不長，但是形狀也是設計過的，握起來感覺不會太差，</p>

<p>而除了以上的特色之外，還有一個設計很不錯的是手把的繩圈其實是可以拆開套到其它東西上的，用的雖然是鈕釦不過可靠度蠻高的。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22474404621/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5702/22474404621_b7e797e13f_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm6.staticflickr.com/5702/22474404621_b7e797e13f_b.jpg 1024w, https://farm6.staticflickr.com/5702/22474404621_69bec2f2ba_h.jpg 1600w" /></a></p>

<p>最後要講的是耐用度，相信一定有人會有疑問，總之我覺得耐用度也不差，我現在手上這隻有經歷過一次颱風的攻擊，整個被吹翻，傘沒散掉，唯一的受損是有兩根拉桿有一點彎曲，不過我試著要彎回來才發現這拉桿其實很堅固，和一般折傘的拉桿比起來差蠻多，另外就是固定拉桿的方式好很多，我上一隻國產某算是名牌的雨傘後來固定拉桿的地方就常常脫落，要一直回去修理（不過最後是忘在電影院不見了）。傘布本身的防水性目前也都表現很不錯。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22450098812/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5633/22450098812_01311ee804_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm6.staticflickr.com/5633/22450098812_01311ee804_b.jpg 1024w, https://farm6.staticflickr.com/5633/22450098812_c8f1c37936_h.jpg 1600w" /></a></p>

<p>ULA 雨傘的包裝如下，在香港地鐵有販賣機在賣，要用八達通卡購買，而且不同站點還有各自的限定色，是蠻有趣的銷售方式，當然也有實體店面，價錢大約台幣三四百，如果有去香港的推薦可以買一隻回來試試，要送人的話，就要三思了～～</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22525750458/" title="ula 雨傘 by othree, on Flickr"><img src="https://farm1.staticflickr.com/710/22525750458_8719d1e5e0_b.jpg" width="1024" height="683" alt="ula 雨傘" srcset="https://farm1.staticflickr.com/710/22525750458_8719d1e5e0_b.jpg 1024w, https://farm1.staticflickr.com/710/22525750458_d47b6011e5_h.jpg 1600w" /></a></p>
]]></description>
<link>https://blog.othree.net/log/2015/11/19/ula-umbrella/</link>
<guid>https://blog.othree.net/log/2015/11/19/ula-umbrella/</guid>
<category>buy</category>
<pubDate>Thu, 19 Nov 2015 22:14:02 +0800</pubDate>
</item>

<item>
<title>Apache2 and HTTP/2</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22116841470/" title="Apache HTTP/2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/660/22116841470_3998a7318f_c.jpg" width="570" height="427" alt="Apache HTTP/2" srcset="https://farm1.staticflickr.com/660/22116841470_3998a7318f_c.jpg 768w" /></a></p>

<p>最近 Apache HTTPD 2.4.17 出了，內建 HTTP/2 的支援，不免俗的要來測試一下，在 Ubuntu 14.04 LTS 下安裝其實也是蠻辛苦的，最主要的問題是 <a href="https://www.openssl.org/">OpenSSL</a> 內建的是 1.0.1，但是要完整支援 HTTP/2 ，還需要 TLS 的 <a href="https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation">ALPN</a> ，然後就會需要 OpenSSL 1.0.2，因此第一件事情就是下載編譯安裝 OpenSSL，目前最新的是 1.0.2d，如果是 15.10 就是內建 1.0.2 的，問題會少很多，總之先自己下載解壓縮然後編譯：</p>

<pre><code>./config
make
sudo make install
</code></pre>

<p>會把檔案裝到 <code>/usr/local/ssl</code> 這個位置，大概是因為 OpenSSL 影響比較大所以預設沒有裝到平常的 <code>/usr/local</code> 下面，不過也因此造就後續比較麻煩的地方。</p>

<p>Apache 的部分比較麻煩，要分兩個部分，第一個部分是先把 APR 部分的程式碼和 HTTPD 的部分拉下來放一起，這邊參考 <a href="http://d.hatena.ne.jp/ASnoKaze/20151016/1445011720">あすのかぜ</a> 上的指令：</p>

<pre><code>wget http://ftp.jaist.ac.jp/pub/apache//httpd/httpd-2.4.17.tar.gz
tar zxvf ./httpd-2.4.17.tar.gz

wget http://ftp.yz.yamagata-u.ac.jp/pub/network/apache//apr/apr-1.5.2.tar.gz
tar zxvf ./apr-util-1.5.4.tar.gz
mv ./apr-1.5.2 ./httpd-2.4.17/srclib/apr

wget http://ftp.yz.yamagata-u.ac.jp/pub/network/apache//apr/apr-util-1.5.4.tar.gz
ar zxvf ./apr-util-1.5.4.tar.gz 
mv ./apr-util-1.5.4 ./httpd-2.4.17/srclib/apr-util
</code></pre>

<p>然後進去 <code>httpd-2.4.17</code> 目錄下指令編譯安裝：</p>

<pre><code>env PKG_CONFIG_PATH=/usr/local/ssl/lib/pkgconfig ./configure --enable-http2
make
sudo make install
</code></pre>

<p>執行的時候也需要注意，需要帶個環境變數，不然他找不到 <code>/usr/local/ssl/</code> 下的 Library：</p>

<pre><code>env LD_LIBRARY_PATH=/usr/local/ssl/lib /usr/local/apache2/bin/httpd
</code></pre>

<p>或是：</p>

<pre><code>env LD_LIBRARY_PATH=/usr/local/ssl/lib /usr/local/apache2/bin/apachectl start
</code></pre>

<p>不過其實執行前還需要先修改一下設定，我是加在 VirtualHost 裡面：</p>

<pre><code>&lt;VirtualHost *:80&gt;
    Protocols h2c http/1.1
    ServerName blog.othree.net
    ServerAdmin othree@gmail.com
</code></pre>

<p>還有</p>

<pre><code>&lt;VirtualHost *:443&gt;
    Protocols h2 http/1.1
    ServerName blog.othree.net
    ServerAdmin othree@gmail.com
</code></pre>

<p>重點是 <code>Protocols</code> 那行，<code>h2</code> 指的是 HTTPS(TLS) 下的 HTTP/2 連線，<code>h2c</code> 則是 HTTP 下的，在其他地方還會看到 <code>h-15</code>、<code>h-17</code> 之類的，那些其實是之前草稿的版本，無視就好，另外還有一個地方需要設定的是加密用的 CipherSuite 和溝通協定，可以參考 <a href="https://icing.github.io/mod_h2/howto.html#https">How to h2 in apache</a> 提供的設定：</p>

<pre><code>SSLCipherSuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK
SSLProtocol All -SSLv2 -SSLv3
</code></pre>

<p>不確定 CipherSuite 的選擇影響多大，不過我猜主要是要把 SSL 全部關掉吧，然後其實這組設定就是 Mozilla 推薦的 SSL 設定的 <a href="https://wiki.mozilla.org/Security/Server_Side_TLS">Modern</a> 那組，等於是要放棄很多舊瀏覽器了，支援的瀏覽器最低版本如下：</p>

<ul>
<li>Firefox 27</li>
<li>Chrome 22</li>
<li>IE 11</li>
<li>Opera 14</li>
<li>Safari 7</li>
<li>Android 4.4</li>
<li>Java 8 </li>
</ul>

<p>都弄好開啟 Apache 就可以了，不過記得如果之前是用 apt 裝的 Apache 的話，設定要自己搬過來。</p>

<p>驗證工具可以用 Curl 或是 nghttp，我是在 OSX 上用 brew 裝的，Curl 比較麻煩，不過可以看到一開始溝通的部分：</p>

<pre><code>brew install curl --with-nghttp2
brew link curl

/usr/local/bin/curl -v --http2 https://othree.net
</code></pre>

<p>然後就會出現最上面那張圖那樣的資訊，可以看到有 ALPN 的選項出現，另外一個工具是 nghttp，其實 Curl 的 http2 支援就是用這套 library：</p>

<pre><code>brew install nghttp2

nghttp -uv https://othree.net
</code></pre>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22118020729/" title="Apache HTTP/2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/565/22118020729_9fea221124_c.jpg" width="570" height="427" alt="Apache HTTP/2" srcset="https://farm1.staticflickr.com/565/22118020729_9fea221124_c.jpg 768w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/22278832416/" title="Apache HTTP/2 by othree, on Flickr"><img src="https://farm1.staticflickr.com/771/22278832416_26528e86cf_c.jpg" width="570" height="427" alt="Apache HTTP/2" srcset="https://farm1.staticflickr.com/771/22278832416_26528e86cf_c.jpg 768w" /></a></p>

<p>可以看到上色整理得很漂亮的資訊，另外用瀏覽器也可以判斷，Firefox 的話會寫上 HTTP 版本號，Chrome 我測試是要 Canary 才支援，然後我網站連線的 SSL 握手那段花的時間反而更多，不過還是比較快全部下載完，只是 render 畫面影響的還有其他檔案，雖然大部分檔案都提早開始下載，不過也同時開始下載重要度比較低的圖形檔案，結果反而 DOM ready 的時間點更晚~~~，下圖是 HTTP/1.1 的時候：</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/22305448445/" title="http1.1-1 by othree, on Flickr"><img src="https://farm1.staticflickr.com/707/22305448445_12074cd1b8_b.jpg" width="1024" height="531" alt="http1.1-1" srcset="https://farm1.staticflickr.com/707/22305448445_12074cd1b8_b.jpg 1024w, https://farm1.staticflickr.com/707/22305448445_7da40d9f50_h.jpg 1600w" /></a></p>

<p>然後是 2.0：</p>

<p><a data-flickr-embed="true" class="thumbnail" href="https://www.flickr.com/photos/othree/21684413063/" title="http2-1 by othree, on Flickr"><img src="https://farm1.staticflickr.com/756/21684413063_2aca17abfd_b.jpg" width="1024" height="531" alt="http2-1" srcset="https://farm1.staticflickr.com/756/21684413063_2aca17abfd_b.jpg 1024w, https://farm1.staticflickr.com/756/21684413063_dbab9bbafb_h.jpg 1600w" /></a></p>

<p>最後就是還不支援 Server Push，這個東西其實技術上不難，可是和 Cache 搞在一起就變很複雜了，目前好像還沒有比較好的解法出現，也只有一些非開源的系統支援的樣子。</p>
]]>
</description>
<link>https://blog.othree.net/log/2015/10/19/apache2-http2/</link>
<guid>https://blog.othree.net/log/2015/10/19/apache2-http2/</guid>
<category>server</category>
<pubDate>Mon, 19 Oct 2015 23:04:03 +0800</pubDate>
</item>

<item>
<title>前端測試入門</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/dopey/123646856/" title="Test Well by ~db~, on Flickr"><img src="https://farm1.staticflickr.com/35/123646856_89367fecab_z.jpg" width="640" height="640" alt="Test Well" srcset="https://farm1.staticflickr.com/35/123646856_89367fecab_z.jpg 768w" /></a></p>

<p>這篇也是之前花一些時間搞清楚的觀念，想著要記錄下來一陣子了，不過最近很忙碌，一直到這幾個連假才有時間寫下來。</p>

<p>其實身為工程師，我一直沒什麼寫測試，只有在少數幾個工具的 library 中有加上 unit test，大概的原因是因為前端的測試沒這麼好做起來，如果是單一 JavaScript 模組的單元測試還好，不過要做整合測試，或是在瀏覽器上真的測試就麻煩很多了，總之前陣子一方面為了工作需要，一方面幫 Moztw 做了<a href="https://github.com/othree/moztw-download-validation">下載檔案的自動檢查</a>，就順便把相關的名詞和觀念弄清楚。</p>

<p>之前最搞不清楚的其實就是 <a href="https://mochajs.org/">Mocha</a>（摩卡咖啡） 和 <a href="http://chaijs.com/">Chai</a>（印度拉茶） 到底分別是什麼定位，後來終於弄清楚了，Chai 只是提供 BDD 語法的測試用的 <strong>斷言</strong> 函數庫（assert library），什麼是斷言呢，英文是 assert，例如明確知道某個函數的結果是什麼，把他說出來，就是斷言，如果結果和說的不一樣，就是測試到錯誤，一般的情形，這些 assert library 就會 throw error，至於 Mocha 則是 Test Framework，用來組織和管理你的測試的程式碼，Mocha 本身的設計是不含 assert library，所以可以自己挑選喜歡的 assert library，只要它在出錯誤時會 throw error 就好，Mocha 網站上就列出了四套 assert library 供大家選擇，除此之外，像我之前在介紹 TypeScript 時提過的 <a href="http://angular.github.io/assert/">assert.js</a> 也可以使用，不過 assert.js 只能檢查型別就是。至於要挑選哪套 assert library 就看各人喜好了，主要是看要怎麼寫斷言，像我挑選 Chai 的原因是他的語法，支援 BDD ，可以寫的看起來很像一句英語：</p>

<pre><code>foo.should.be.a('string');
foo.should.equal('bar');
foo.should.have.length(3);
tea.should.have.property('flavors').with.length(3);
</code></pre>

<p>很容易就知道是什麼意思，而且自由度還蠻大的。另外一個原因則是他有支援 Promise，就是所謂的 <a href="https://github.com/domenic/chai-as-promised/">chai-as-promised</a>，為什麼這個很重要呢，因為 JS 很常遇到需要非同步的操作流程，如果沒有支援，Test Framework 當下把他的 function 跑完，沒有 catch 到 error 就認為沒有錯誤了，當然像 mocha 是有支援非同步的，內建有個等待的機制，<code>done</code>：</p>

<pre><code>describe('User', function() {
  describe('#save()', function() {
    it('should save without error', function(done) {
      var user = new User('Luna');
      user.save(function(err) {
        if (err) throw err;
        done();
      });
    });
  });
});
</code></pre>

<p>就是每個 <code>it</code> 區塊裡面，其實都會收到一個函數 <code>done</code>，如果有要測試非同步的程式，可以在非同步的部分測試完後，才執行 <code>done()</code>，這樣 Mocha 才有機會知道你的測試是不是有非同步的部分，還有什麼時候才是測試完成，不過 Chai 是 BDD，不會容許這樣不直觀的寫法的，所以 Domenic Denicola 開發了 <a href="https://github.com/domenic/chai-as-promised/">chai-as-promised</a>：</p>

<pre><code>promise.should.be.fulfilled;
promise.should.eventually.deep.equal("foo");
promise.should.become("foo"); // same as `.eventually.deep.equal`
promise.should.be.rejected;
</code></pre>

<p>只是要這樣簡潔的寫法，還需要先設定一下：</p>

<pre><code>var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");

chai.use(chaiAsPromised);
</code></pre>

<p>其實 chai-as-promised 是 chai 的 plugin，然後用 <code>chai.use</code> 來使用它，底層怎樣運作我還沒深入研究，覺得還有點 magic，不過還算是想的到怎樣實做出來的程度，猜測可能有用到 function 的 <code>toString</code> 來判斷有沒有引用 <code>next</code> 參數。</p>

<p>再來，測試蠻常會用到的假物件，mock 和 stub，兩者的差異其實蠻多文章有說明了，我個人覺得簡單分法就是 stub 沒有副作用，mock 則是有副作用的假物件，至於要說要用哪種物件來完成測試的話，基本上就是 stub 可以達成你的測試需求的話就用 stub，在 JavaScript 的測試環境下，好像只有看到 <a href="http://sinonjs.org/">Sinon.js</a> 這套比較多人用，去查了一下名稱典故，覺得一個比較可能的來源是特洛伊木馬故事中，騙特洛伊人把木馬搬進去城裡的那位（Mocha 和 Chai 的名稱應該是互相影響的，不過不確定誰先出來的）。另外還有個角色和 mock、stub 很常一起提到的叫 spy（常見用複數形 spies），最常用來當 callback 之類的，在非同步測試案例中，可以用來確保 callback 有被執行到，甚至可以偷看（spy）被執行了幾次，收到什麼參數等等，總之就是個可以測試函數被執行的次數和方式的物件。</p>

<p>最後要說的則是 e2e test，因為 JS 很多時候都是用來在瀏覽器端實做 UI 和使用者行為的 handler，其實要做完整整合的測試不太容易，e2e 指的是 End to End，端點到端點，通常是說一個流程的起點到終點的意思，例如上網站註冊帳號，這樣算是一個流程，或是上網登入購買東西到結帳完成，這樣也是一個流程，由於 Web App 的環境下，跑 JS 的是瀏覽器，沒辦法簡單的介入，所以以往真的要做 e2e 測試幾乎都是要靠人工，後來有了 <a href="http://www.seleniumhq.org/">Selenium</a> 和 WebDriver，才開始可以讓這些測試自動化。</p>

<p>以前的 Selenium 要控制瀏覽器靠的是 <a href="http://www.seleniumhq.org/projects/remote-control/">Selenium RC</a>，用比較暴力的方式介入瀏覽器，不過現在的 Selenium 2 則是透過 <a href="http://www.w3.org/TR/webdriver/">WebDriver</a> 這個 API 來操作，WebDriver 能進 W3C 標準化其實也是 Selenium 貢獻者的努力，背後也是有些大公司的影子在，目前主流的瀏覽器包括微軟最新的 Edge 也都支援，不過其實 Selenium 因為是 Java 寫的，雖然控制瀏覽器的 script 沒有限制要用 Java，我還是一直不太習慣，所以都沒深入，直到前陣子開始看到 Paul 在 Facebook 上<a href="https://www.facebook.com/notes/paul-li/protractor-%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A%E7%AF%87/10152948608982211">連載</a>介紹 <a href="https://angular.github.io/protractor/#/">Protractor</a>，才又開始有想嘗試的動力，Protractor 的名稱由來也還蠻有趣的，意思是量角器，而 AngularJS 則有諧音 angle 的感覺在，當初出來也是為了要測試 AngularJS 的，Github 上 Protractor 是 AngularJS 下的一個專案，Protractor 和 Selenium 的差別就在於，Protractor 是一個 test framework，然後建好了 WebDriver binding，可以直接透過 WebDriver 來跟瀏覽器溝通，不再需要 Selenium 介面那塊了。</p>

<p>後來 Carl 跟我說到有 <a href="http://webdriver.io/">WebdriverIO</a> 這個專案，是只有 WebDriver 介面的部分，可以寫 node script 來叫瀏覽器做事，當然也可以做測試，可以挑自己喜歡的 test framework 和 assert library 來搭配使用，於是我就做了一個可以去 moztw.org 下載安裝檔回來驗證正確性的<a href="https://github.com/othree/moztw-download-validation">專案</a>，在這個專案中，還用了一個特殊的寫法：</p>

<pre><code>it('Download OSX Installer', function* () {
  var data = yield hashes;
  ...
</code></pre>

<p>其實就是 async function 加上 <code>yield</code> 來代替 ES2016 的 <code>await</code>，要達成這樣的效果其實會需要一個 async function runner，不是 node 可以直接跑起來的，實際測試過也是跑不起來，所以就只能 WebdriverIO 提供的 <code>wdio</code> 執行檔來執行。</p>

<p>這篇還差一點東西沒講到，就是 test coverage，JS 這邊比較常看到的是 <a href="https://gotwarlost.github.io/istanbul/">istanbul.js</a>，名稱的來源是 carpet coverage，然後 Istanbul 是個生產優質地毯的地方～</p>
]]>
</description>
<link>https://blog.othree.net/log/2015/10/17/f2e-test/</link>
<guid>https://blog.othree.net/log/2015/10/17/f2e-test/</guid>
<category>script</category>
<pubDate>Sat, 17 Oct 2015 20:06:44 +0800</pubDate>
</item>


</channel>
</rss>