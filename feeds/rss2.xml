<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>O3noBLOG</title>
<link>https://blog.othree.net/</link>
<description></description>
<copyright>Copyright 2023</copyright>
<lastBuildDate>Fri, 15 Sep 2023 11:41:56 +0800</lastBuildDate>
<generator>http://www.movabletype.org/?v=4.381</generator>
<docs>http://blogs.law.harvard.edu/tech/rss</docs> 


<item>
<title>digital envelope routines::unsupported</title>
<description><![CDATA[<p>Node.js 16 LTS 已經結束維護，所以手上的東西就開始需要升級升級，然後就必須要來正面面對這個我逃避已久的錯誤訊息：</p>
<pre><code>digital envelope routines::unsupported
</code></pre>
<p>這錯誤基本上就是發生在幾個網站的專案，尤其是 build 專案時特別會容易看到，而且這個錯誤其實和一般看到的 JS 錯誤長得不太一樣，全貌其實是這樣：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53186660279/" title="digital envelope routines::unsupported by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53186660279_4f2b82bbbc_b.jpg" width="1024" height="738" alt="digital envelope routines::unsupported" srcset="https://live.staticflickr.com/65535/53186660279_a5cd706923_k.jpg 2x" /></a></p>
<pre><code>Error: error:0308010C:digital envelope routines::unsupported
</code></pre>
<p>首先是錯誤訊息，前面有一些 hex 值，不知道是什麼，然後下面 trace 的地方，可以看到幾乎都是 node_module 內的東西，不是因為我們自己的 code 造成的，所以就很讓人困惑，想說是不是什麼系統問題、還是有什麼偷用非公開 API 造成不相容的狀況。總之以前就是遇到這個問題就是又降版回來，沒有仔細深究，這次終於要來認真處理，不過搜尋結果，幾乎都是說加一個 <code>--openssl-legacy-provider</code> flag，都沒人說到底是什麼問題，尋找許久，終於在 StackOverflow 找到一則<a href="https://stackoverflow.com/a/73027407/443051">最正確的答案</a>，沒想到和 OpenSSL 1.x 的生命已經到盡頭有關。</p>
<p>結果這個錯誤，其實是因為 Node.js 17 開始，從 OpenSSL 1.x 換到 3.x，然後 OpenSSL 3.x 不是向下相容的，所以有些東西有機會出錯，這邊爛掉的，其實是一些 legacy 的 hash method 預設是拿掉的，而 Webpack 在建立 bundle 檔案時，如果檔名有用到 hash 的話，預設的 hash method 用的就是已經被淘汰的 <a href="https://www.openssl.org/docs/man3.1/man3/MD4.html">md4</a>，然後 md4 是用 Node.js 的 <a href="https://nodejs.org/docs/latest-v20.x/api/crypto.html#cryptocreatehashalgorithm-options">crypto</a> 來呼叫 OpenSSL 做事，Node.js 的文件也有提到支援的演算法是依據你的 OpenSSL 版本和系統而定，所以其實並沒有保證 <strong>md4</strong> 一定可以用，而如果使用了 OpenSSL 不支援的演算法，跑出來的錯誤訊息就是像上面截圖一樣特別了，然後我還特別去用 OpenSSL 3 cli 跑跑看，結果出來的錯誤訊息真的就是差不多：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53188641438/" title="OpenSSL 3 error by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53188641438_3493041848_b.jpg" width="512" height="341" alt="OpenSSL 3 error" srcset="" /></a></p>
<p>使用 flag 開啟舊演算法的支援其實我覺得還算可以接受，畢竟是 build 而已，不是拿來跑服務，不過這個 flag 似乎有點特殊，似乎不能直接放在 <code>NODE_OPTIONS</code> 裡面，而且同個程式庫要是拿到舊版 Node.js 環境去跑，加這個 flag 反而跑不起來，所以最理想還是把問題解決掉。</p>
<p>那這個問題應該怎麼處理呢？其實簡單說就是把套件升級升級就好了，因為現在的套件新版本都有處理這個問題，不過走上升級這條路之前可以先試試看 StackOverflow 上的解法（有可能讓你專案爛掉，請先備份）：</p>
<pre><code class="language-bash">npm audit fix --force 
</code></pre>
<p>如果你用的是 yarn，沒有 <code>audit fix</code> 可用，但是也有人提供用 npm 來修理的<a href="https://stackoverflow.com/questions/51732435/is-there-a-yarn-alternative-for-npm-audit/60878037#60878037">流程</a>，不過我是沒試過這個流程，我自己有一個專案是靠 <code>yarn upgrade</code> 升級後解決問題的（實際上是把所有有用到的 <a href="https://github.com/webpack/loader-utils/releases/tag/v2.0.1"><strong>loader-utils</strong> 都升級到 2.0.4</a>，本來有個套件用到 2.0.0），剩下的還是無法修好的就要靠手工了，然後因為我處理的網站只有 Gatsby 和 CRE(Create React App) 兩種，所以以下就是只有說明這兩個系統的為主，兩者其實都是使用 Webpack 作打包工具的，而 <a href="https://github.com/webpack/webpack/releases/tag/v5.61.0">Webpack</a> 是從 v5.61.0 開始保證支援 Node.js 17 的，我稍微查了一下 Gatsby 是從 <a href="https://github.com/gatsbyjs/gatsby/releases/tag/gatsby%404.2.0">4.2.0</a>，而 CRA 的則是要最新版 react-script <a href="https://github.com/facebook/create-react-app/releases/tag/v5.0.1">5.0.1</a> 才保證支援，為什麼說是保證呢？因為 <code>^</code> 的 semver range 的關係，例如要是你的 react-script 是 5.0.0，那你本地可能會是裝到 Webpack v5.60.0，那就不支援 Node.js 17 了，像我就是有 Gatsby 3.x 的我升級到 4.x 就沒事了。</p>
<p>Gatsby 和 CRA 其實都還好，最慘的是 eject 過的 CRA 了，只能手工升級，基本上就是去 <a href="https://github.com/facebook/create-react-app/tree/main/packages/react-scripts">react-script</a> 那邊，複製需要的檔案回到你的專案複概過去，最主要的是 <code>scripts/</code> 和 <code>config/</code> 下的檔案，然後根據自己的修改紀錄把自己作過的修改改回去，接著更新 <code>package.json</code> 裡面的 dependencies，版本號就是參照 react-script 那邊的 <a href="https://github.com/facebook/create-react-app/blob/main/packages/react-scripts/package.json#L30-L78">package.json</a>，最主要的就是 <code>webpack</code> 相關的，接著安裝套件後重新 build，要是還有一樣的錯誤，就看 trace 看看是哪個相依套件，看有沒有新版有修正就更新試試看，大概就是這樣，很容易漏東西所以會一直重複測試，蠻花時間的，不過最後 build 成功還是有成就感的。</p>
<p>PS. 還要小心其他升級的後遺症，如果是 app 最好要測試過各種行為，像我遇到 Webpack 5 不支援 polyfill Buffer 的問題，剛好那個錯誤又被 catch 掉，所以我 build 是沒問題的，就是測試跑不過，後來參考網路上的<a href="https://viglucci.io/articles/how-to-polyfill-buffer-with-webpack-5">文章</a>處理。</p>
]]></description>
<link>https://blog.othree.net/log/2023/09/15/digital-envelope-routines-unsupported/</link>
<guid>https://blog.othree.net/log/2023/09/15/digital-envelope-routines-unsupported/</guid>
<category>script</category>
<pubDate>Fri, 15 Sep 2023 11:41:56 +0800</pubDate>
</item>

<item>
<title>Vim License 的故事（下）</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177611514/" title="Vim License on choosealicense by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177611514_6232063ea9_b.jpg" width="1024" height="684" alt="Vim License on choosealicense" srcset="https://live.staticflickr.com/65535/53177611514_69382dace8_k.jpg 2x" /></a></p>
<p>接續<a href="https://blog.othree.net/log/2023/09/10/vim-license-1/">前一篇</a>。</p>
<p>Mike 在 SPDX License List 這邊提出的問題則是，為什麼會有 Vim 要替換，但是 Vim Maintainer 不要替換這樣特別的情形，所以我就是認真的解釋，並且說明這是跟原作者 Bram 確認過的細節並附上討論，還有舉我前面提過那個最極端的例子，然後我猜最重要的是現實世界有沒有人這樣使用過，還好我還真的找到幾個專案有認真的把條款內的 Vim 替換掉（當然是連 Vim Maintainer 也換掉了），像是 <a href="https://github.com/preservim/tagbar/blob/master/LICENSE">Tagbar</a>；我的 PR 是 2019/07/11 提的，然後一直來回到 9/25 回了最後一個回應之後就沒人回我了，之後到了 10/19 就突然被合併了（其實 SPDX 有定期的會議，應該是在其中有討論過要不要合併這個 PR 吧），接著等到 2020 一月我發了 PR 到 choosealicense 把 vim.txt 加進去，這次就蠻順利就合併了。</p>
]]><![CDATA[<p>解決了上游問題，回到 Licensee 偵測的問題，我本來的 PR 沒被合併，而是 Mike 另外弄了一個比較通用的解法，是根據條款文本內的替換字串來動態調整差異的容許範圍，然後接著 2020/03/13，Licensee 9.13.1 作為第一版支援 Vim License 的 Licensee 發佈了，接下來，我理論上就只要等 GitHub 更新 Licensee 的版本就好了，這我倒是不太擔心，我是有種感覺 GitHub 是有在認真更新這些東西的，然後，時間快轉到三個月後，這段期間其實我都有偶爾上去 GitHub 看一下 Vim License 有沒有被偵測出來，想著要是終於完成的話就可以投個稿了，當時的時間大概是搞了三年這樣，總之因為過有點久了，我又去拉了最新版 Licensee 來測試，結果讓我嚇了一跳，竟然偵測不出來了！</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177845605/" title="Licensee 9.13.1 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177845605_dbd6f40e06_b.jpg" width="1024" height="684" alt="Licensee 9.13.1" srcset="https://live.staticflickr.com/65535/53177845605_169f7db9ba_k.jpg 2x" /></a></p>
<p>所以我又花時間下去查原因，結果是 2020/05/12 的 9.14 開始爛掉的，Mike 在 9.14 有修改一部分的演算法，在比對兩份文件時，因為有替換字串的關係，不可能用完全比對的方式，所以在有替換字串時，文件的長度差異會影響相似度，有個動態的 <code>max_delta</code>，如果替換字串後長度差異太大超過 <code>max_delta</code> 的話，就會被判定為不同的文件，在 9.14 則是把這個機制拿掉，直接把替換字串的影響弄進相似度之中，不過其中長度差異的懲罰太大，結果造成 Vim 專案本身的判斷失準，發現原因之後，我就發了 PR 調整懲罰的參數，讓 Vim 剛好可以過關這樣，結果我發 PR 時 Mike 早已經發現這個問題，也已經修改好開了 PR 只是還在 review，而該 PR 的方法是則是動態的根據替換字串的數量來調整文件長度差異的值，除此之外，Vim License 還被加到測試之中，所以以後應該不會再發生這種問題了。</p>
<p>然後，我就等這個 PR merge 等了三個月，不過還好 merge 後馬上就發佈 9.14.1 了，接著又回到等 GitHub 更新的時間了，我就一直等，一直等，偶爾上去 GitHub 的 Vim repo 確認一下，2021 年初我還寫信去 GitHub Support 問他們當時使用的版本是哪一版，Support 還有認真去幫我確認是沒更新，然後就這樣一直等一直等到 2022 年初，有天在用 GitHub 的搜尋功能時，突然發現到，可以用條件設定搜尋特定授權條款的專案，然後我就想說可以來試試看 Vim License：<code>license:vim</code>，結果竟然有<a href="https://github.com/search?q=license%3Avim&amp;type=repositories">符合條件的專案</a>出現！讓我大吃一驚！原來不知何時 GitHub 已經偵測的到 Vim License 了，可是 Vim 那個 repo 結果卻還是不正確，深入了解一下，推測應該是 GitHub 有 cache 機制，找了一下文件發現到有提到說如果有發現專案的授權條款標示不正確，可以聯絡 support，於是我就發了 support request，這次很快就收到回應，然後在 2022/01/12 這天，確認了 GitHub 上的 Vim 專案有正確的顯示為 Vim License 了，歷時將近五年，那天我還發推慶祝了一下。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177410816/" title="Search result of Vim Licensed repo by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177410816_564bde201f_b.jpg" width="1024" height="684" alt="Search result of Vim Licensed repo" srcset="https://live.staticflickr.com/65535/53177410816_1f295d5269_k.jpg 2x" /></a></p>
<blockquote class="twitter-tweet"><p lang="zh" dir="ltr">自己挖了將近五年的坑今天終於填平了，今年終於可以投個稿</p>-- othree (@othree) <a href="https://twitter.com/othree/status/1481290722368458757?ref_src=twsrc%5Etfw">January 12, 2022</a></blockquote> <script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>之後，終於可以準備投稿，然後順利投上 2022 年的 COSCUP，題目是「<a href="https://coscup.org/2022/zh-TW/session/ESQUUF">歷時五年的開源貢獻，GitHub 支援 Vim License 的故事</a>」（<a href="https://www.youtube.com/watch?v=YM7RHRwIrKU">影片</a>、<a href="https://speakerdeck.com/othree/how-github-supports-vim-license-detection-the-five-years-journey">投影片</a>），在準備分享的過程也是遭受很多的<del>電玩干擾</del>阻力，分享過程還算順利，自己有點小不滿意不過還算可以接受，不滿意的地方是有些我一開始有想要分享的點忘了說，不過也是在這篇文章有補齊了。</p>
<p>其實在初期那段等待的時間之間，我還開了一個小專案 <a href="https://vim-license.dev/">Vim License Gen</a>，用來幫人產生自己的專案/軟體用的 Vim License 文件，為什麼要有這個工具是因為以前的純文字文件，每行的寬度大概都在 80 個字元以內，但是每個專案的名稱都不一樣，如果直接做替換，有可能會破版，所以這個工具一是會保持版面，二是它可以正確的只替換需要替換的部分，然後這個專案就是用 Vim License 開源，並且是用自己產生 Vim License 文件，然後我也把他列為使用 Vim License 的三個專案之一（另外兩個分別是 Vim 和 vim-pathogen），這也是個 self-hosting 的實現。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177408966/" title="Vim License Gen by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177408966_62bd21b8ab_b.jpg" width="1024" height="684" alt="Vim License Gen" srcset="https://live.staticflickr.com/65535/53177408966_c7baf853ea_k.jpg 2x" /></a></p>
<p>故事並沒有到這邊就結束，COSCUP 分享之後的目標就是把這篇文章寫下來了，不過一拖再拖，其中一個主因是以前我是先把文章寫好順便作整理，但是這次因為準備時間不夠，無法在分享前先把文章寫好，變成後寫，沒了趕稿壓力，加上又有像是王國之淚等讓人分心的東西，就一直無限期拖搞，直到今年 2023/08/05 傳出了 Vim 的作者 Bram Moolenaar 於八月三日因病過世的消息了。</p>
<p>Bram 過世之後，除了緬懷之外，大家也會擔心起 Vim 的後續誰維護的問題，還好 Vim GitHub 組織內還有另外兩位成員，其中 Christian Brabandt 算是接起主持人的角色，他同時也是我用很久的 vim-airline 的作者，然後很快的也發了 PR 做了一些相關的修改，像是在 doc 裡面緬懷 Bram、更新檔案內的維護者資訊等，只不過其中一項修改，改到了 LICENSE 檔案！改的地方當然就是那個高度耦合的 Vim Maintainer 的部分：</p>
<blockquote>
<p>The current maintainer is Bram Moolenaar <a href="mailto:Bram@vim.org">Bram@vim.org</a>.</p>
</blockquote>
<p>改成</p>
<blockquote>
<p>The current maintainers are listed here: https://github.com/orgs/vim/people.</p>
</blockquote>
<p>然後我還是被 ping 了才知道這 PR 已經合併，這下我可緊張了，其實我本來也是有在想 Vim License 的問題，只不過想說 Bram 才剛過世，可以晚點再提出，當時有想了幾個方案，理想上要能同時繼續支援現有的使用 Vim License 的專案、然後也要能讓授權條款內的文字正確的更新，不過當時不管哪個方案，都無法保證兩全齊美，當時想的方案為：</p>
<ul>
<li>方案一：更改條款內文並且發布新版，可能是叫 Vim License 1.1 之類的，缺點是可能需要重新提交提交新版的條款到 choosealicense，但是現況來看幾乎不可能符合提交的一千個專案的條件；</li>
<li>方案二：更改條款內文，繼續用一樣的條款名，不推修改到 choosealicense，缺點是 Licensee 可能辨認不出來，結果就是 Vim 專案自己無法被辨識為使用 Vim License；</li>
<li>方案三：同二，但是該推送修改的地方如 SPDX License List 和 choosealicense 都送，缺點是使用舊版授權條款文字的可能都再也辨認不出來，另一個問題是這樣的變化 Mike 是否會接受？</li>
</ul>
<p>就之前的紀錄，當時版本偵測出來的相似度也只有 98.45%，這樣一改下去，會不會就爆炸又偵測不出來了呢，於是我趕快找了個時間拉最新版的 Vim 和 Licnesee 下來測試，結果，竟然還是 98.45%，這結果又讓我驚呆了，直覺是因為 Licensee 的演算法改的更好了，一查下去，原來剛好在今年初的 Licensee 9.16.0 其中的一項修改就是針對替換字串提供更高的差異容許範圍，所以舊版 Vim License 下去比對會有 99.12% 的相似度，剛好足夠新版修改後的差異，而這結果就剛好克服了方案三的缺點，所以接下來應該就是會朝這個方向進行，先提交新版的文字給 SPDX License List，然後再更新 choosealicense 內的範本吧。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53176812027/" title="Vim License detection by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53176812027_c95d17b663_b.jpg" width="1024" height="666" alt="Vim License detection" srcset="" /></a></p>
<p>以上，就是到目前為主的故事了，最後想來作一個總結，也就是談談當初為什麼想在 COSCUP 分享這個呢？其實我當初假想的聽眾是開源的新手，我想分享的其中一點是，對於開源專案的貢獻，我完全是照自己的步調，也不給任何一邊壓力，所有的等待過程我都沒去催促過任何人，不過標題的「五年」或許造成反效果也說不定，投稿時 Rock 有建議過我可以調整一下標題，不過我實在是想不到什麼其他好標題，結果就都沒改，後來，當天在我的前一場是 Max 的「<a href="https://coscup.org/2022/zh-TW/session/99GBZC">開源軟體與社群 - 參與國際社群經驗談</a>」（<a href="https://www.youtube.com/watch?v=OxuQ1sdLhks">影片</a>），就有提到這點，可以選擇你最舒服的方式參與，不用害怕參與；第二點想分享的東西則是關於在這個過程中學到的東西，像是 Licensee 的判斷原理，SPDX 相關的東西，和各個群體溝通的過程，很多東西都是我之前並不清楚的，像是我以前知道有個 SPDX License Indentifier，但是並不清楚 SPDX 是搞什麼用的，然後它們有維護 License List，甚至授權條款文本裡面可以有替換字串等，我覺得這些都是蠻有趣的知識；最後一點則是分享這一整個過程，中間一波三折，坑坑相連到天邊的轉折，我自己都覺得很有趣。</p>
<p>以下列出我一路以來開過的 PR、Issue 和討論:</p>
<ul>
<li><a href="https://github.com/github/choosealicense.com/issues/498">choosealicense.com/issues/498</a> 最初的 issue</li>
<li><a href="https://groups.google.com/g/vim_dev/c/DlTVMew1ZSo/m/b9QCTlXgEAAJ">vim_dev: A Questions about Vim License</a> 跟 Bram 詢問　Vim License 的細節</li>
<li><a href="https://github.com/licensee/licensee/issues/385">licensee/issues/385</a> 提出 Vim License 偵測的問題</li>
<li><a href="https://github.com/spdx/license-list-XML/pull/901">license-list-XML/pull/901</a> 幫 SPDX License List 裡面的 Vim License 加上替換字串</li>
<li><a href="https://github.com/vim/vim/pull/5458">vim/pull/5458</a> 幫 Vim 加入　LICENSE 檔案</li>
<li><a href="https://github.com/tpope/vim-pathogen/pull/210">vim-pathogen/pull/210</a> 幫 vim-pathogen 加入 LICENSE 檔案</li>
<li><a href="https://github.com/github/choosealicense.com/pull/717">choosealicense.com/pull/717</a> 最重要的那個 PR，加 vim.txt 到 choosealicense</li>
<li><a href="https://github.com/licensee/licensee/pull/445">licensee/pull/445</a> 修改新版 Licensee 的問題</li>
<li><a href="https://github.com/othree/vim-license/issues/2">vim-license/issues/2</a> Vim License Gen 紀錄各個連結用的 issue</li>
</ul>
<p>最後的最後就來個簡單的 timeline 吧：</p>
<pre><code>- 2013/07/15 Choose a license released
- 2016/09/21 Display/detect the license
- 2017/03/26 Open issue to choosealicense
- 2018/06/15 First issue closed
- 2019/06/23 Discuss the License text with Bram
- 2019/06/27 Issue about Vim License detection
- 2019/07/11 SPDX PR
- 2019/09/25 Last comment of the SPDX PR
- 2019/10/19 SPDX PR merged
- 2020/01/08 PR add License to Vim
- 2020/01/18 PR add License to vim-pathogen
- 2020/01/21 PR add vim.txt to choosealicense
- 2020/03/13 Licensee 9.13.1 released, Vim added
- 2020/05/12 Licensee 9.14 release, Vim detection failed
- 2020/07/04 PR to fix detection issue
- 2020/10/14 Issue fix merged v9.14.1
- 2021/02/05 Contact GitHub support 1st time
- 2022/01/12 Contact GitHub support 2nd time, 確認上線
- 2022/05/22 投稿、開始寫文章
- 2022/07/29 COSCUP 2022
- 2023/08/03 Bram Passed away
- 2023/08/13 Vim License file updated
- 2023/09/04 再次開始寫文章
- 2023/09/12 發表文章
</code></pre>
]]></description>
<link>https://blog.othree.net/log/2023/09/11/vim-license-2/</link>
<guid>https://blog.othree.net/log/2023/09/11/vim-license-2/</guid>
<category>vim</category>
<pubDate>Mon, 11 Sep 2023 17:27:11 +0800</pubDate>
</item>

<item>
<title>Vim License 的故事（上）</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177898493/" title="‎vim-license-slide.‎001 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177898493_0143b6204a_b.jpg" width="1024" height="576" alt="‎vim-license-slide.‎001" srcset="https://live.staticflickr.com/65535/53177898493_530da1ec12_k.jpg 2x" /></a></p>
<p>這篇是我<a href="https://blog.othree.net/log/2022/07/31/coscup-2022/">去年 COSCUP</a> 分享的文字版，拖稿許久終於寫出來了，以下正文開始。</p>
<p>Open Source Software 一直是 GitHub 的心頭肉(?)，也因此 GitHub 一直都有在各方面協助 OSS 開發者，其中也包括了對 Open Source License（開源授權）相關的協助。在 2013 年，GitHub <a href="https://github.blog/2013-07-15-choosing-an-open-source-license/">發佈了一個小網站</a> 叫 <a href="https://choosealicense.com/">choosealicense.com</a>，用簡單的條列介紹不開源授權條款的特色，並且藉由一些問答互動來幫助開發者挑選開源軟體授權條款。</p>
<p>而到了 2016 年，GitHub 更進一步提供了<a href="https://github.blog/2016-09-21-license-now-displayed-on-repository-overview/">授權條款的偵測功能</a>，只要你的程式庫裡面有正確的授權條款資訊（像是 LICENSE 檔案），然後使用的條款也在偵測的範圍內，那在 GitHub 上就會顯示該專案所使用的授權條款，也會同時提供該授權條款的特色給訪客參考，不過這個偵測功能，能偵測到的授權條款只有一些，更精確的說，就是只有 choosealicense 網站上的那些。</p>
<p>在 GitHub 推出授權條款偵測功能後沒多久，我就發現到 Vim 所使用的 Vim License 並不在偵測的範圍內。Vim License 是一個很特別的授權條款，是 Vim 的作者 Bram Moolenaar 專為 Vim 使用而寫的，雖然內文是針對 Vim 本身寫的，不過其實有很多的 Vim Script 也是標注使用 Vim License，甚至常常是寫 &quot;Same as Vim&quot;，所以實際上使用的專案並不少，所以我就一直想著，是不是有可能讓 GitHub 可以支援偵測 Vim License 呢？</p>
]]><![CDATA[<p>我一直把這念頭放在心裡，後來終於有一天有時間有衝動，認真去研究要怎樣新增支援的授權條款，簡單來說，GitHub 用來偵測專案所使用的授權條款的工具，是一套用 Ruby 寫的，叫做 <a href="https://licensee.github.io/licensee/">Licensee</a>（我都當成 license + see）的工具，而這個工具所使用來參考比對的條款文本，則是從 choosealicense 專案來的（使用 git submodule 引入），如果要加新的授權條款到 choosealicense 裡面，有些<a href="https://github.com/github/choosealicense.com/blob/gh-pages/CONTRIBUTING.md#adding-a-license">條件</a>要先達到：</p>
<ul>
<li>要有 SPDX License Identifier</li>
<li>要名列在幾個主要的開源授權清單中</li>
<li>至少要有一千個專案使用它</li>
<li>要列舉三個使用該授權條款的有名的專案（作為網站上的範例）</li>
</ul>
<p>我研究了一會兒，大部分條件沒問題，就是那個一千個專案的需求我也不是很確定，根據搜尋結果可以保證有數百個，但是有沒有一千個實在無法保證，不過我還是去開了個 <a href="https://github.com/github/choosealicense.com/issues/498">issue</a> 建議說要加入 Vim License，其中一千個專案那個條件的部分則是提供我的所知（各種搜尋結果和 Vim 生態的狀態，推論應該會有達標），時間是 2017/03/26，當時我想的是 Vim 這麼有名，應該開個需求就會有人處理了吧，然後 choosealicense 的主要貢獻者之一 Mike Linksvayer，跟我來往幾次討論之後，我就放置在那幾乎忘了他，結果過了一年後，那個 issue 就因沒有動靜被關掉了！</p>
<p>我開的第一張 issue 被關掉的當下當然是有點震驚的，直白一點的說我心中的想法大概是：「原來 Vim 這麼有名也是沒有特權的啊！」總之之後我還是繼續放著，直到大概又過了一年，到了 2019 年六月，我才又開始重新投入到這件事情，既然開 issue 沒人做，那就只好改開 PR 了，於是我才開始認真的研究，目標當然就是把 Vim License 推進 choosealicense 裡面，所以就是先認真的要提供的文本檔案的格式，首先我發現的是，授權條款的文本裡面，除了那些 metadata 之外，文本本身是可以有替換字串（substitution）的，像是常見的年份、名稱等：</p>
<pre><code>MIT License

Copyright (c) [year] [fullname]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

...
</code></pre>
<p>其中，用 <code>[]</code> 包起來的像是 <code>[year]</code>、<code>[fullname]</code> 就是要替換掉的字串，發現這點之後，我也覺得需要重新檢視 Vim License 的文字是不是也有這種地方，然而一旦認真看待這點，便發現問題不小，而這個問題就是 Vim License 不是 context free 的，而是高度和 Vim 耦合在一起的，一般而言，開源授權都是 context free 的，怎樣算是 context free 的授權條款呢？就是那個條款文字要拿去哪個專案，都可以直接用，不需要去修改文字內容，頂多是修改頭尾的名稱、年份和所有權人的資訊，但是 Vim License 不是，光是 <strong>Vim</strong> 這個單字，就在文本內出現了 29 次，而這些 Vim 單字，大部分時候代表的是使用這個授權的軟體的名稱，所以假設我今天是 vim-pathogen 要使用 Vim License，那就應該要在 LICENSE 文件內把 Vim 單字都換成 pathogen.vim 才對，不過在這堆 Vim 之中，還有一些地方是代表不一樣的意義，這些地方就是在作為 <strong>Vim Maintainer</strong> 的時候，所以到底，這麼多的 Vim 都應該要改為替換的字串嗎？為此我就去問了 Vim 的作者，當然同時也是 Vim License 的作者 Bram Moolenaar，其實我蠻快就<a href="https://groups.google.com/g/vim_dev/c/DlTVMew1ZSo/m/b9QCTlXgEAAJ">得到答案</a>了，結論就是，Vim Maintainer 需要保留原樣，但是其他時候在作為代表使用該授權的軟體時，<strong>Vim</strong> 應該要改為該軟體的名稱。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177608139/" title="Discuss Vim License with Bram by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177608139_7e1d12cf42_b.jpg" width="1024" height="684" alt="Discuss Vim License with Bram" srcset="https://live.staticflickr.com/65535/53177608139_fd6999e91a_k.jpg 2x" /></a></p>
<p>那麼為什麼會出現 Vim Maintainer 呢？這邊就要來介紹一下 Vim License 的內容了，條款內容簡單翻譯（非正式翻譯，請勿用於法律用途）如下：</p>
<ol>
<li>可以自由任意的散佈未修改過的 Vim；</li>
<li>如果要散佈修改過的 Vim，需要符合以下條件之一；
<ol>
<li>發佈時同時提供聯絡方式，當 Vim Maintainer 向你索取你的修改，你必須無償提供，並且 Vim Maintainer 保留把你的修改加進官方版本 Vim 的權力；</li>
<li>如果你取得經由前一條所述方式散佈的 Vim，你可以不受限制的散佈該版本，如果有新的修改，則需依照相同的方式散佈；</li>
<li>發佈時同時提供和原始版本的原始碼差異；</li>
<li>使用前一條的方式發佈時，符合以下所有條件時可以不用提供原始碼；
<ul>
<li>你所使用的授權條款不會讓 Vim Maintainer 無法免費取得你修改的內容；</li>
<li>你必須保留你修改的內容（原始碼的差異）至少三年，如果使用者或是 Vim Maintainer 在這段時間內跟你索取修改的內容，你必須要提供；</li>
<li>你必須確保你所提供的聯絡方式在三年內是有效的。</li>
</ul>
</li>
<li>如果你的修改使用 GPL，你可以使用 GPLv2 發佈你修改過的版本。</li>
</ol>
</li>
<li>如果你發佈修改過的 Vim，強烈建議你使用 Vim License 並把修改的原始碼提供給 Vim Maintainer；</li>
<li>不可把授權條款移除。</li>
</ol>
<p>仔細看下來，其實這份文件，主要目標就是在確保 Vim Maintainer 能取得其他人的修改，如果不是 Vim 使用這份授權條款的話，不管你使用這份條款的軟體是什麼，有修改再發佈的話，你都必須要讓 Vim Maintainer 可以無償取得你的軟體原始碼，並且 Vim Maintainer 可以決定是否要給原軟體使用，而這也造成了 Vim License 成為了少見的，不是 context free 的開源授權，而這個細節我相信是在我跟 Bram 的討論後才是第一次闡明，當時討論時我有舉了一個極端的例子來確認：假設我有一個軟體 X，使用 Vim License 授權，後來有人修改我的 X 後改為 Y 發佈但是沒有開源，有權力去取得 Y 的修改內容並決定要不要給 X 的，其實是 Vim Maintainer，而不是我（X 的作者）。</p>
<p>知道哪些地方才是可以替換掉之後就簡單了，我快速的準備好要用來發 PR 的 vim.txt 檔案，然後想說先來測試一下，結果，偵測竟然失敗了！研究再三，發現偵測出來的相似度只有 97.x%，而 Licensee 設定的閾值是 98%，至於會造成相似度這麼低的原因，其實是因為文本內有太多的替換字串了，當時的 Licensee 對於替換字串的比對處理的不太好，替換前後文字的長短差異也會有影響，知道原因後我就在想要來怎麼處理，當然最簡單的方法就是用特例處理，我當時的作法就是如果是在偵測 Vim License 的話，就會降低判斷用的閾值，本地測試沒問題後，就準備提交回去給 Licensee 了，不過因為我還不確定這樣的作法好不好，所以我先開了個 issue，解釋了前因後果然後附上我目前的修改，想說問問看負責的人的想法，如果他們覺得可以接受我再發 PR，結果，Mike Linksvayer 又出現了！我才發現 choosealicense 和 Licensee 他都是主要貢獻者！至於知道他的經歷則是在 COSCUP 分享後才聽 Bobchao 說的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177406736/" title="vim.txt in Licensee by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177406736_71659e1fd6_b.jpg" width="1024" height="684" alt="vim.txt in Licensee" srcset="https://live.staticflickr.com/65535/53177406736_7ce7bb487f_k.jpg 2x" /></a></p>
<p><a href="https://en.wikipedia.org/wiki/Mike_Linksvayer">Mike Linksvayer</a> 當時是 GitHub 的 Policy Director 專門負責公共相關的事務，而在之前則是當過 CC 的 CTO 和 VP，也曾擔任過數個不同組織的董事會成員，像是 OpenHatch、Software Freedom Conservancy 和 Open Definition Advisory Council，所以可以說是已經在自由開源領域活躍已久，甚至是特長於授權條款相關的領域。不過其實當時我不知道，也沒想說要去了解，主要對他的印象是頭像看起來有點嚴肅，一直給我 T1000 的感覺，加上我後來就是幾乎都是跟他往來為主（應該說我提交的貢獻就是他在把關的），所以某些層面上來看我其實是對他有點心生畏懼的。</p>
<p>Mike 在 Licensee 這邊提出的問題是，我在 Vim License 裡面定的那些替換字串，並沒有出現在 <a href="https://spdx.org/licenses/Vim.html">SPDX License List</a> 那邊，SPDX 全名是 Software Package Data Exchange，其實這是屬於一般開發者比較少接觸的到的東西，目前最常看到的應用扣除 License List 之外，應該是軟體供應鍊相關的東西，不過其實他們所維護的 <a href="https://spdx.org/licenses/">SPDX License List</a> 幾乎已經成為業界標準，尤其是那個 license 的 identifier 更是到處都看得到，像是 npm 的 <a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-json#license">package.json</a> 裡面就是使用它。然後其實 SPDX License List 這邊的檔案格式（自訂的 XML）和 Licensee 用的檔案格式（自訂的純文字）不一樣，不過由於 SPDX License List 已經是一個大家都會當作參考索引的資料源頭，所以也自然的成為 choosealicense 的上游（upstream），這次經驗我也讓我了解到開源的圈子真的是蠻重視 upstream 的，之前我也在 neovim 遇過類似的情形，總之也因此我應該要先去提交 PR 修改 SPDX License List，然後才發 PR 給 choosealicense，所以我就整理整理後去那邊發了 PR 加上這些替換字串，然後，<strong>Mike Linksvayer</strong> 又出現了！他也是 SPDX License List 的貢獻者之一！</p>
<p>接<a href="https://blog.othree.net/log/2023/09/11/vim-license-2/">下一篇</a>。</p>
]]></description>
<link>https://blog.othree.net/log/2023/09/10/vim-license-1/</link>
<guid>https://blog.othree.net/log/2023/09/10/vim-license-1/</guid>
<category>vim</category>
<pubDate>Sun, 10 Sep 2023 23:32:05 +0800</pubDate>
</item>

<item>
<title>Remove Disqus</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53136393026/" title="EFF Privacy Badger by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53136393026_ffc28f0f35_c.jpg" width="400" height="280" alt="EFF Privacy Badger" /></a></p>
<p>前陣子有整理了一下部落格的東西，大致上作的事情是：</p>
<ul>
<li>拿掉 Google Analytic</li>
<li>拿掉所有的 SNS 按鈕</li>
<li>拿掉 Disqus</li>
<li>換 web font 服務</li>
</ul>
<p>首先是拿掉 Google Analytic 這件事，其實我已經想很久了，一部分原因是不想餵資料資料給 Google，另一個原因則是剛好現在舊的 Universal Analytic 已經停用了，一定要改成用 GA4，所以趁這個機會就乾脆的拿掉了，不過還是會好奇哪些內容比較有人看，所以又花了點時間研究了 <a href="https://en.wikipedia.org/wiki/List_of_web_analytics_software">web log 分析軟體</a>，因為不想多架服務，老牌的 AWStats 介面現在實在是無法接受，所以現在選的是 <a href="https://goaccess.io/">goaccess</a> 當成 terminal 工具來用，不過它其實還蠻強的，選項很多，要當成服務跑也可以。另外就是如果還是偏好前端的追蹤， Twitter(現在的X) 上也有<a href="https://twitter.com/hsins_/status/1690038318732611584">朋友</a>推薦了 <a href="https://www.goatcounter.com/">GoatCounter</a> 和 <a href="https://umami.is/">umami</a>，分別是 golang 和 js 寫的服務，有開源也有線上的服務，有限度的服務使用額度，當然自架的話也可以，不意外的都需要資料庫。</p>
<p>第二個是 SNS 按鈕，其實以前有三個按鈕，分別是 Google+、Facebook 和 Twitter，然後我都是用 iframe 掛上按鈕的，這樣比較不用擔心直接掛第三方 js 的各種問題（隱私、安全），不過 Google+ 收掉了，FB 按鈕因為 Firefox container 的關係我其實也都看不到，後來忘了什麼原因也拿掉了，最後只剩下 Twitter 的，結果最近發現我掛按鈕使用的那個 <a href="https://developer.twitter.com/en/docs/twitter-for-websites/web-intents/overview">Web Intent</a> 也被改的無法在 iframe 內顯示按鈕了，所以就乾脆的剩下的全拿掉，最後只留下一個用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Share_API">Web Share API</a> 的按鈕。</p>
<p>然後是 Disqus，其實留言系統原理簡單不難，但是真的要做的話也是很麻煩，一來要有資料庫，這樣現在很多的靜態網頁產生工具就先死一票了、二來還要有能檔 spam 的能力，所以 Disqus 的出現真的是補了一個很大的缺口，我以前是很喜歡 Disqus 的，畢竟它是這種需求數一數二的先行者，該公司的工程師也很認真的研究 3rd party script 的技巧，我現在工作也有一部分是在寫 3rd party script，對此有興趣之餘，也對於這東西的麻煩之處很有感，不過現實就是開公司就是還是要賺錢，所以慢慢的它也是走向我比較不喜歡的方向，開始大量收集資料，然後甚至有人說開始有插入廣告了，不過除此之外，更大的一個原因是在我這邊的使用率實在太低，如果都沒人用的話，一直掛著也只是訪客被收集資料而已，於是我決定把整個迴響區塊都拔掉，帶來的副作用當然就是以前一些少數的留言也都消失了。</p>
<p>我在拿掉迴響後沒兩天，就剛好看到 HackMD 也拿掉 Disqus 的<a href="https://twitter.com/hackmdio/status/1692158313704910982">消息</a>，跟著原推文下去找其實也有不少的替代方案，像是 <a href="https://cusdis.com/">cusdis</a>、用 GitHub 的 <a href="https://giscus.app/">giscus</a> 和 <a href="https://utteranc.es/">utterances</a> 等，其實 <a href="https://www.wappalyzer.com/technologies/comment-systems/">Wappalyzer</a> 上也有些替代方案（然後也可以看到 Disqus 佔有率目前還很高）。</p>
<p>其實還有另外一種類型的替代方案，就是去支援新的 protocol，像是 <a href="https://activitypub.rocks/">ActivityPub</a> 和 <a href="https://indieweb.org/Webmention">Webmention</a> ，第一次看到 ActivityPub 加上靜態網站產生器的方案時，我就想起以前消失在 spam 的洪流之中的 trackback 機制，不過靜態網站產生器和 ActivityHub 相性不是那麼好，它其實也是和留言系統一樣，需要有 API endpoint 和資料庫，所以有辦法做到支援的選擇也沒很多，相關的服務和專案也相對不成熟，還需要不少<a href="https://paul.kinlan.me/adding-activity-pub-to-your-static-site/">手工</a>；另外一個選擇 Webmention，則可以參考 Jason 的「<a href="https://jason-memo.dev/posts/webmention/">透過 webmention 來搜集 blog 的社群迴響</a>」，基本上是可以透過第三方服務來弄成純前端的方案。</p>
<p>最後一個就是 web font 了，其實本來沒有要調整這塊，只是上面幾項改完，發現網站幾乎要沒有追蹤器了，只剩下 Google Fonts 相關的 request，Google Fonts 一直是被歸類為潛在的追蹤器，實際上到底有沒有被偷偷用來當做追蹤器也無法證實，總之我就試著尋找替代方案，一開始想的是自己放檔案，因為我只有用到兩個英文字型，不過結果大小差了 10 倍，不進一步調整不行，就在這時候看到了 <a href="https://twitter.com/littlegoodjack/status/1691699453877682247">Laravel 因為 GDPR 的關係改用</a> <a href="https://fonts.bunny.net/">Bunny Fonts</a> 了，大概研究了一下，bunny.net 本身是 CDN 服務商，而 Bunny Fonts 就是主打無追蹤，所以 GDPR 沒問題，另一個特點就是介面和 Google Fonts 相容，也就是說只要把 domain name 換掉就好（我的狀況是還有 CSP 要修改）。</p>
<p>然後最後的結果就是如文章上面的圖片一樣，現在大部分頁面，<a href="https://www.eff.org/pages/privacy-badger">EFF Privacy Badger</a> 的檢查結果已經是沒有需要阻擋的東西了，只有部分文章有內嵌 Tweet 或 YouTube 影片的，就還是會顯示有潛在的追蹤器。</p>
]]></description>
<link>https://blog.othree.net/log/2023/08/23/remove-disqus/</link>
<guid>https://blog.othree.net/log/2023/08/23/remove-disqus/</guid>
<category>about</category>
<pubDate>Wed, 23 Aug 2023 23:03:25 +0800</pubDate>
</item>

<item>
<title>Common Log Format</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53115754953/" title="Common Log File Format by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53115754953_56deb9d603_b.jpg" width="512" height="380" alt="Common Log File Format" /></a></p>
<p>這篇算是一篇軟體的考古文吧，最近對部落格做了些調整，其中一個改變就是把 Google Analytic 拿掉了，一部分是因為現在已經不能用 UA 而要改用 GA4 了，然後其實我也想拿掉很久了，這次就順便把它移除，不過我還是有興趣想知道不同文章大家感興趣的程度差異，所以就又研究起以前那種根據 HTTP server log 來整理網站統計資訊的工具，其實以前一直沒成功拿掉 GA 的原因之一就是找不到好的替代工具，一直以來我比較有印象的就是 <a href="https://www.awstats.org/">AWStats</a>，只是那個介面我實在是受不了，然後搜尋其他替代工具的過程也不太順利，直到這次重新研究之後，發現到一個關鍵字 <strong>Common Log Format</strong>，這聽起來很一般的詞，在軟體工程界其實已經變成是一個專有名詞了。</p>
<p><a href="https://en.wikipedia.org/wiki/Common_Log_Format">Common Log Format 的 Wikipedia 條目</a> 寫著這是一種 HTTP server log 的標準格式，不過我覺得應該只能算是 de facto standard（業界標準），因為沒有任何機構真的定義並作為標準發布過，現在網路上可以找到 W3C 的一份格式說明，但是那其實是 CERN 時代的 <a href="https://www.w3.org/Daemon/">httpd</a> 這個軟體的說明文件，趁這個機會，我就想著要來搞清楚幾個我一直很疑惑的幾個和 log 相關的單字，分別就是一開始說到的 <strong>common</strong>，然後就是 <strong>combined</strong> 和 <strong>extended</strong>，這幾個關鍵字都是我以前在設定 Apache HTTPD 的時後常常會看到的，甚至其它的 web server 也有用到，但是一直沒有搞的很清楚，而且使用的字我也覺得很奇怪，像是 combined 是在 combine 什麼。</p>
<p>結果就是，這些問題的答案，幾乎都在 NCSA(National Center for Supercomputing Applications、美國國家超級電腦應用中心) 開發的 HTTPd 軟體文件中，NCSA HTTPd 也就是最早提出這種 log format 的 HTTP server，而 NCSA HTTPd 的 log，其實預設下是有三個的，分別是：</p>
<ul>
<li><a href="https://web.archive.org/web/20090124003443/http://hoohoo.ncsa.uiuc.edu/docs/setup/httpd/TransferLog.html">TransferLog</a></li>
<li><a href="https://web.archive.org/web/20090130083429/http://hoohoo.ncsa.uiuc.edu/docs/setup/httpd/RefererLog.html">RefererLog</a></li>
<li><a href="https://web.archive.org/web/20090130083423/http://hoohoo.ncsa.uiuc.edu/docs/setup/httpd/AgentLog.html">AgentLog</a></li>
</ul>
<p>TransferLog 其實就是現在大家說的 access log，格式就是所謂的 CLF，不過其實當時是寫作 <strong>Common Log File(CLF) Format</strong>，紀錄的資料格式就是：</p>
<pre><code>host rfc931 authuser [DD/Mon/YYYY:hh:mm:ss] &quot;request&quot; ddd bbbb

- host: Either the DNS name or the IP number of the remote client
- rfc931: Any information returned by identd for this person, - otherwise.
- authuser: If user sent a userid for authentication, the user name, - otherwise.
- DD: Day
- Mon: Month (calendar name)
- YYYY: Year
- hh: hour (24-hour format, the machine's timezone)
- mm: minutes
- ss: seconds
- request: The first line of the HTTP request as sent by the client.
- ddd: the status code returned by the server, - if not available.
- bbbb: the total number of bytes sent, *not including the HTTP/1.0 header*, - if not available
</code></pre>
<p>然後文件還有定義了一個可擴充版的 <strong>Extended CLF Format</strong>，允許在這些 log 的末端加上其他的資料，如果 <a href="https://web.archive.org/web/20090124003443/http://hoohoo.ncsa.uiuc.edu/docs/setup/httpd/LogOptions.html"><code>LogOptions</code></a> 設定為 <code>Combined</code> 的話，三種 log 會 combine 在一起，使用 Extended CLF Format，多加上了 referrer 和 user-agent 資訊，這也就是 Combined 這個格式名稱的由來，而這邊有另外一個容易混淆的東西，就是 W3C 有一份很古老的 <a href="https://www.w3.org/TR/WD-logfile">Extended Log File Format 的 Working Draft</a>，這份文件定義的格式和 CLF 其實是沒關係的，所以看文件時，有比較仔細的文件就會寫到是 W3C 的 extended 還是 NCSA 的。</p>
<p>雖然我沒仔細查先後關係，不過 CERN 版的 HTTPd 應該是後來才實作了 NCSA 版的 log format，文件內則是稱為 <strong>Common Logfile Format</strong>，簡稱也是 CLF，不過單字有一點點不一樣就是，當然格式是一樣的，然後其實它也保留了 CERN HTTPd 的舊版 log，格式是：</p>
<pre><code>time remotehost request 
</code></pre>
<p>實作是：</p>
<pre><code>fprintf(log, &quot;%24.24s %s %s\n&quot;,
		asctime(gorl), HTClientHost, n_noth(HTReqLine));
</code></pre>
<p>其中的 <code>%24.24s</code> 我還是<a href="https://en.cppreference.com/w/c/io/fprintf">研究</a>了好一陣子才看懂第一個 24 是最短長度，資料不夠長時會加上空白，然後 <code>.</code> 後面的是精確度，遇到字串時則會變成最長長度，超過的就會不輸出，<a href="https://cplusplus.com/reference/ctime/asctime/"><code>asctime</code></a> 則是一個內建函數可以把時間轉成字串，格式是：</p>
<pre><code>Www Mmm dd hh:mm:ss yyyy
</code></pre>
<p>長度剛好是 24 個字元，至於那個變數名稱 <code>gorl</code> 則是我花最多時間才參透的，它的意思是：「GMT time or Local time」，但是它不是 indicator 那種二元值，而是變數本身就是那個時間，而那個時間可能是 GMT 時區時間也可能是本地時間。</p>
<p>這樣，其實很多細節的小疑問都有了解答，像是以前看 log 常常看到兩個 <code>-</code> 接連出現，其實代表的是連續兩個沒有值的欄位，其中一個是現在已經幾乎沒用到的 Identification Protocol（<a href="https://www.rfc-editor.org/rfc/rfc1413">RFC1413</a>），也是個古早的東西，我稍微看了一下好像 IRC 有用到；然後因為其實沒有標準，所以以前和現在的日期格式用的已經不一樣了，現在是普遍有加上時區，當時 NCSA 的和後來 CERN 實做的都沒有時區資訊；另外就是 <a href="https://httpd.apache.org/docs/current/mod/mod_log_config.html#examples">Apache HTTPD 文件</a> 的範例也有提到 RefererLog 和 AgentLog，我當時看到時就想說怎麼會有人只要這兩種資訊的 log；發現 CLF 這個專有名詞後，我也循線找到更多的 <a href="https://en.wikipedia.org/wiki/List_of_web_analytics_software">web log 分析工具</a>了，目前我是先挑了 goaccess 來用。</p>
<p>最後整理一下，這三個關鍵字在 web log 的情境下時：</p>
<ul>
<li>Common 格式，通常指的是 Common Log File(CLF) Format；</li>
<li>Extended，不考慮 W3C 的版本的話，這邊指的是 NCSA Extended CLF Foramt，如果 CLF Format 定義的欄位不夠用，需要更多資訊時，就可以使用這種格式，多的資訊是加在 log 尾端；</li>
<li>Combined 格式，多加了 referrer 和 user-agent 的 web log，使用 NCSA 版 Extended CLF Foramt 的格式，combine 指的是合併 TransferLog、RefererLog 和 AgentLog 三種 log。</li>
</ul>
<p>實際上 NCSA HTTPd 就不只 Common 和 Combined 兩種，還有 ServerName 可以加上，當然也是使用 Extended 格式，不過目前流傳下來，最常見的就是這兩種了。</p>
]]></description>
<link>https://blog.othree.net/log/2023/08/14/common-log-format/</link>
<guid>https://blog.othree.net/log/2023/08/14/common-log-format/</guid>
<category>unix</category>
<pubDate>Mon, 14 Aug 2023 21:29:05 +0800</pubDate>
</item>

<item>
<title>Vim Boss Passed Away</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53108661434/" title="Vim by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53108661434_38230541b1_b.jpg" width="1024" height="684" alt="Vim" srcset="https://live.staticflickr.com/65535/53108661434_6c5922f3cf_k.jpg 2x" /></a></p>
<p>Vim 的作者 Bram Moolenaar 在<a href="https://groups.google.com/g/vim_announce/c/tWahca9zkt4">月初過世</a>，消息出來至今大約已經過了一週，<a href="https://www.vim.org/">Vim 官網</a>也在兩天前有了正式公告，現在除了各方的緬懷之外，Vim 的未來也是令人非常在意，這陣子也都大概有些<a href="https://github.com/vim/vim/discussions/12736">方向</a>了，目前狀況是 Vim 的另外一位維護者 Christian Brabandt 在負責，包括了維護 Vim 本身、網站主機和網站修改、各種使用到的服務的統整（像是 binary 放哪）、未來捐款的處理方式等等，其實事情很多，而我這篇文章則是要紀錄一些這幾天看到的東西。</p>
<p>Bram Moolenaar 之前其實在 Google 工作了很久，到 2021 年十月才退休，在 <a href="https://www.theregister.com/2023/08/07/bram_moolenaar_obituary/">The Register 的報導</a>中，有當時的訪談的部分內容，只不過當時因為種種原因沒有成為一篇報導刊出，其實看內容也感覺的出來他當時還有些退休計畫，然後接著一年後，2022 年十月，Bram 有在 mailing-group 裡面提到自己有<a href="https://groups.google.com/g/vim_dev/c/ivkq22t3LQM">健康問題</a>，當時就已經有中斷 Vim 的維護工作了，然後就是今年過世的消息了，講真的，措手不及，而且 Bram 也才 62 歲，歐洲國家的預期壽命其實都有七八十的。</p>
<p>回到我與 Vim 之間的關係，除了我早期花很多心力在 html5.vim 之外，其實我目前還是 runtime 裡面 <code>csscomplete.vim</code> 的維護者，剛剛查一下才發現我也好久沒更新了，然後就是去年 COSCUP 我分享的 <a href="https://www.youtube.com/watch?v=YM7RHRwIrKU&amp;themeRefresh=1">Vim License 的事情</a>了，在 <a href="https://github.com/vim/vim/blob/master/LICENSE">Vim License</a> 的文本裡面的那一個特別的條文，就是開源與否的爭議是交給 Vim 的維護者決定，文本內還直接寫了現在的維護者是 Bram，然後現在就有個問題是這個條文需不需要修改，除此之外還有一個就是 vim.org 的 mail server 不知道有沒有辦法轉移，不然 maintainer@vim.org 也會無法繼續使用；其實就我所知，那個條文好像沒有真的發揮效用過，我覺得未來會用上它的機會應該也是很小，而且未來也不知道會不會有單一的 maintainer，我自己判斷社群應該會傾向維持條文不動吧。</p>
<p>最後就是，其實 Git 的每個 commit 的作者（author）和提交者（committer）可以是不同人的，而 Vim 早期，一直走的是老派的發 email 提交 Patch 給 Bram，然後由 Bram commit 進去 repository 裡面的流程，我當年想要用 Gmail 提交還發生過檔案內容太長，Gmail 無法發送這種信件的問題，後來是用 cli 的工具來發信，後來才開始有收 GitHub PR，但是 Bram 並不是直接用上面的功能來 merge，而是一樣拉 patch 下來，保留 author 資訊後 commit 進 repository，所以以前在 GitHub 上就很容易看到文章一開始那張圖那樣，全部都是 Bram 頭像的樣子，現在新的 commit 也開始進來了，所以最新的地方已經看不到這個樣子了。</p>
]]></description>
<link>https://blog.othree.net/log/2023/08/11/vim-boss-passed-away/</link>
<guid>https://blog.othree.net/log/2023/08/11/vim-boss-passed-away/</guid>
<category>vim</category>
<pubDate>Fri, 11 Aug 2023 20:16:47 +0800</pubDate>
</item>

<item>
<title>比宇宙更遠的地方</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53088711466/" title="宇宙よりも遠い場所 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53088711466_b346a743d6_b.jpg" width="600" height="787" alt="宇宙よりも遠い場所" srcset="" /></a></p>
<p>在剛進入串流時代之時，我想著以後不太需要買什麼 DVD/BD 之類的了，因為想看的東西應該以後網路上都可以看的到，不過過了幾年下來，我的想法又慢慢的改變了，因為這些作品的授權都有個期限，過期之後不一定會重新上架，甚至連自家的原創作品都可能會下架，所以我慢慢的心中開始有了幾部作品，是覺得應該收藏一份實體版下來，其中的評斷標準算是我個人主觀，不過有一個條件倒是比較明確，就是希望讓我兒子長大後能看的，其實在這清單之中也沒幾個作品，而且很少有新增，不過就在最近新增了一部：「<a href="https://ani.gamer.com.tw/animeVideo.php?sn=16507">比宇宙更遠的地方</a>」，簡稱為<strong>よりもい</strong>（yorimoi）。</p>
<p>這部我一直都有聽到不錯的評價，第一印象是屬於那種「一群女孩去完成一件事」的日常系作品，其實我在看之前也沒有深入了解，本來以為就是一群女高中生因為對南極的憧憬，想方設法去南極旅遊的過程吧，畢竟這種類型作品很多是流水帳般將主角們有趣的生活演出來，這樣的日常系作品雖然也是會很有趣，但是就比較會變成打發時間用的，可能看過一陣子就會慢慢淡忘。</p>
<p>結果，看完よりもい之後我第一個感想就是：「真是太好我有看到這部作品了。」我也實在是非常幸運能在作品出來將近五年後還能在沒被捏他到的情況下看完這部作品。其實這陣子因為小孩去過暑假，所以我多了很多時間可以補看之前沒空看的東西，看了很多不錯的作品，也在推特上紀錄了一些心得，不過よりもい是第一部我特別想寫一篇文章紀錄的，因為他帶給我的不是風景多漂亮、劇情多有趣，而是更深刻的，故事中幾位角色的成長與自我突破。</p>
<p>以下有劇情，沒看過的話建議迴避，或是可以轉去看看 YouTube，匯雨有一個比較沒劇透的<a href="https://www.youtube.com/watch?v=O8qowhGwjyc">推坑影片</a>。</p>
]]><![CDATA[<p>防雷保護<br />
防雷保護<br />
防雷保護</p>
<p>雖然劇情主軸是前往南極，不過故事的核心其實是成長，而且每個角色都有一個明確的成長目標，不是什麼不著邊際的東西，所以每當有人有了自我突破，觀眾都能確實的感受到：小決（キマリ、kimari）想要能夠更獨立，不再依賴親友惠；報瀬（しらせ、shirase）則是需要走出母親過世的心理陰影(?)；日向的部分我就先跳過，她的部分來的又急又快，雖然前面早有鋪陳，但是我一直沒放在心上，後來覺得根本是編劇給觀眾的一場襲擊，但是還好有這段，讓這個角色的一切行為變得合理許多；結月則是想要交朋友，但是她其實連怎樣算是朋友也不知道，而在這邊，小決藉由 Line 來形容她心中的朋友這段我也是很喜歡。</p>
<p>故事的最高潮當然就是從一開始就一心只想去南極的報瀬的部分了，她的母親三年前在南極失蹤（沒找到屍體、不過可以說等於死亡了），因為南極任務一去就是幾個月，所以她本來就已經是和外祖母一起生活邊等媽媽回來，母親失蹤，她的生活也沒什麼變化，結果讓她沒有母親已經過世的實感，所以她一直想去南極確認母親是不是真的不在了，在劇中她也還時不時的寄信給媽媽，最後，他們終於到了內陸的基地，小決他們在基地中找到報瀬媽媽的筆電，報瀬打開電腦，收信軟體跟著啟動和收信，包括了她寄給母親的信，隨著未讀信件的增加，報瀬終於體認到母親過世的事實，大哭了一場。</p>
<p>其實小時候，我都會覺得什麼婚禮喪禮這些儀式很麻煩，不過長大後，我的想法跟著我的經歷有了變化，我發現儀式這些東西其實是為了人心而存在的，因為人心有慣性，生命中的重要的東西的喪失，人是可以一直逃避假裝沒有發生一樣，所以才會有這些儀式存在的必要，藉由這些儀式的突兀感，讓人真真正正的體認到接下來不一樣了，不論是生命中少了些存在，或是多了重要的人都是，而對於報瀬來說，在那個時候，才真的是她跟媽媽道別的儀式吧。</p>
<p>故事中還有很多我很喜歡的小細節，像是<strong>キマリ</strong>這個暱稱的由來，然後這個暱稱卻又和她的個性不合；報瀬（しらせ）的發音其實和破冰船的船名白瀨（劇中退役前和現實世界）一樣，而那個昭和基地和白瀨號破冰船其實是日本現在都還在用的，而且兩個都長得和真的一樣，去到日本<a href="https://www.nipr.ac.jp/antarctic/">極地研究所的網站</a>一開始就可以看到基地的空拍；還有像是去到內陸為什麼比較冷雖然沒明說，不過想在那邊建立天文台，應該是海拔高很多位置，日本其實有在富士冰穹建立過一個基地作科學研究，那邊海拔 3810 公尺，距離昭和基地一千公里，氣溫也低上非常多；白瀨號和昭和基地內的郵筒，現在都還有在運作，特別的郵戳也一直都有，還有相關的<a href="https://allabout.co.jp/gm/gc/463441/">報導</a>，好像有一直更新，不確定是不是每年換新圖案，我還有找到去年日本郵局的特別郵戳<a href="https://www.post.japanpost.jp/notification/pressrelease/2021/03_tokyo/1022_01_01.pdf">公告</a>；最後我還查了那幾年的觀測隊員同行者，沒有發現看起來和動畫製作有關係的人，極地研究所應該是提供照片給動畫公司吧。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53088845553/" title="昭和基地 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53088845553_516dcd996d_b.jpg" width="1024" height="576" alt="昭和基地" srcset="" /></a></p>
<p>其他我還有查到一些有趣的資料，日本的南極觀測船總共有四艘：</p>
<ul>
<li>初代：<a href="https://ja.wikipedia.org/wiki/%E5%AE%97%E8%B0%B7_(%E8%88%B9)">宗谷</a></li>
<li>2代：<a href="https://ja.wikipedia.org/wiki/%E3%81%B5%E3%81%98_(%E7%A0%95%E6%B0%B7%E8%89%A6)" title="ふじ (砕氷艦)">ふじ</a></li>
<li>3代：<a href="https://ja.wikipedia.org/wiki/%E3%81%97%E3%82%89%E3%81%9B_(%E7%A0%95%E6%B0%B7%E8%89%A6%E3%83%BB%E5%88%9D%E4%BB%A3)" title="しらせ (砕氷艦・初代)">しらせ（初代）</a></li>
<li>4代：<a href="https://ja.wikipedia.org/wiki/%E3%81%97%E3%82%89%E3%81%9B_(%E7%A0%95%E6%B0%B7%E8%89%A6%E3%83%BB2%E4%BB%A3)" title="しらせ (砕氷艦・2代)">しらせ（2代目）</a></li>
</ul>
<p>其實我一開始覺得有點奇怪，為什麼四代目還是叫しらせ而不換名字呢？後來才發現，日本首位的南極探險家就叫做<a href="https://zh.wikipedia.org/wiki/%E7%99%BD%E7%80%A8%E7%9F%97">白瀬矗</a>（Shirase Nobu），所以しらせ這個名字的傳承其實比我一開始想的還要久遠。</p>
<p>另外一個是日本南極觀測隊確實有人<a href="https://ja.wikipedia.org/wiki/%E7%A6%8F%E5%B3%B6%E7%B4%B3">罹難</a>過，而且遺體是八年後才發現。可以想見那邊的地域是多麼艱險，然後我才想起幾年前去過紐西蘭的南極中心，裡面就有一個設施是可以讓人體驗暴風雪，雖然有提供超厚的防寒服，不過氣溫極低，風一直在吹的情況下，體感溫度還是降的很快的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/25482185598/" title="International Antarctic Centre by othree, on Flickr"><img src="https://live.staticflickr.com/4644/25482185598_59dec02bcf_b.jpg" width="1024" height="683" alt="International Antarctic Centre" srcset="https://live.staticflickr.com/4644/25482185598_41ae37af4a_k.jpg 2x" /></a></p>
<p>最後附上一些其他人的文章：</p>
<ul>
<li>hinac 的<a href="https://talk.ltn.com.tw/article/breakingnews/2901936">聖地巡禮</a> <a href="https://talk.ltn.com.tw/article/breakingnews/2908856">之二</a></li>
<li><a href="https://medium.com/allen365/a-place-further-than-the-universe-88f042f36a1b">艾倫蘋果的感想</a></li>
</ul>
]]></description>
<link>https://blog.othree.net/log/2023/08/02/yorimoi/</link>
<guid>https://blog.othree.net/log/2023/08/02/yorimoi/</guid>
<category>acg</category>
<pubDate>Wed, 02 Aug 2023 19:46:42 +0800</pubDate>
</item>

<item>
<title>新加坡 2022</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582537844/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582537844_f258048019_b.jpg" width="1024" height="768" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582537844_ff3392033d_k.jpg 2x" /></a></p>
<p>去年因緣際會去了一趟新加坡，是我第一次去新加坡，看到不少建築覺得實在很厲害，想說紀錄一下。</p>
<p>這趟行程中，我看到覺得很厲害特別想介紹的建築有三個，首先第一個是聖陶沙上的 Resort World，規模超大，有飯店商場賭場等等，環球影城也是其中的一部分，不過只是這樣還不會到讓我覺得超厲害，最讓我驚艷的其實是它的地下車道，我不確定他是往下挖還是往上蓋（應該是往上蓋比較簡單），不過整個 Resort World 人行的地方，那些商店廣場的下面其實都是空的：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582514829/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582514829_83d43f970d_b.jpg" width="1024" height="350" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582514829_89c9ed9983_k.jpg 2x" /></a></p>
<p>我只有拍這張照片，不過就是你仔細看你會發現對面深不見底，是不可思議的大的地下空間，裡面有錯綜複雜的車道、接送區、巴士站、停車場、甚至還有卡丁車賽車場，這個是屬於理論上做的出這種東西，技術上應該也沒太大困難，只是我沒想到會有人做出這麼大規模的地下車道系統。</p>
<p>第二個是彰宜機場的 JEWEL 的中間的那一區，就是有很多植物和中間一個瀑布（不知道該不該稱為瀑布，其實它叫 Rain Vortex）的那一區，那一區其實叫 Forest Valley。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52581818242/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52581818242_688d196a1f_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52581818242_5829768040_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582796203/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582796203_5607541fbc_b.jpg" width="1024" height="768" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582796203_bcea3340df_k.jpg 2x" /></a></p>
<p>這區我覺得讓我感到覺得驚豔的地方有兩個，第一個是那個瀑布，要怎樣能讓他不漏水。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582719915/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582719915_136a013e3c_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582719915_c9f07b8487_k.jpg 2x" /></a></p>
<p>這個瀑布水流到 B2 那層時，是一整圈透明的牆（我不確定材質）圍起來，不知道要怎樣能確保水不會滲漏，我有直接摸摸看，也找不到接縫，該不會是整塊玻璃一體成形吧。</p>
<p>PS. 我後來找到 News Asia 的<a href="https://infographics.channelnewsasia.com/jewel-changi-airport/index.html">專題</a>，那塊是壓克力的，不過我還是不知道是怎樣可以弄成無縫的這麼大一塊，然後這個專題對於那個瀑布的介紹是聚焦在水流怎樣下來又上去的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52870391415/" title="Changi Jewel B2 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52870391415_9e06be9147_b.jpg" width="1024" height="684" alt="Changi Jewel B2" srcset="https://live.staticflickr.com/65535/52870391415_7cc90e6f6c_k.jpg 2x" /></a></p>
<p>當時很趕時間沒拍照，還好 Google 街景有。</p>
<p>除了瀑布的漏水問題外，這區還有非常多的植物，而且不是小顆的花花草草，也有比較高大的樹木，置身在其中會覺得非常難以想像有人會放這麼多的植物在室內空間（請見<a href="https://flickr.com/photos/othree/52871953754/">影片</a>），然後我就又想到他們的樹根會一直成長變長，不知道要如何確保數十年後，這些樹木的下面，通常是商店的地方，不會有漏水的問題出現...</p>
<p>最後一個要介紹的，是金沙酒店（Marina Bay Sands）的 Apple Store：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582539949/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582539949_df324fb346_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582539949_1e3709311d_k.jpg 2x" /></a></p>
<p>其實本來也沒特別有安排要去金沙酒店，後來也是最後一晚了不知道要幹嘛就跑去看水舞光雕表演，然後才發現這個 Apple Store，遠遠看到的時候就覺得：「不可能吧！」真的走到旁邊看的時候就覺得非常誇張，怎麼這麼有錢有閒弄一個浮在水中間的球。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582713440/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582713440_3590a10a6e_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582713440_95c1473d95_k.jpg 2x" /></a></p>
<p>裡面往上看圓頂。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582717675/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582717675_9d8da122ac_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582717675_3f955709d9_k.jpg 2x" /></a></p>
<p>圓弧形自動門，等很久都等不到全關，一直有人進出。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582276986/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582276986_abd01e3106_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582276986_25de161fc6_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582711635/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582711635_e4f494b6d6_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582711635_5d7eb3dd6f_k.jpg 2x" /></a></p>
<p>不意外的對得很齊，甚至對齊到地板的金屬飾板（請見<a href="https://www.flickr.com/photos/othree/52871206437/in/dateposted-public/">影片</a>）。</p>
<p>逛一逛意外的發現有電扶梯通往樓下，覺得不是獨立在水上的一顆球嗎，怎麼還有地下室，然後又想到，那行動不便的怎麼辦，蘋果不可能沒考慮到吧，尋找一陣子之後，發現了一個鏡面的圓柱體（請見<a href="https://www.flickr.com/photos/othree/52872219398/in/dateposted-public/">影片</a>），裡面就藏著電梯，然後下到樓下走一走，才發現是有通道金沙酒店商場內的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582719930/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582719930_a96637b686_b.jpg" width="1024" height="457" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582719930_5b235277c7_k.jpg 2x" /></a></p>
<p>我只能說這個建築設計真的是讓我當場覺得驚呆了，當時我以為這個 Apple Store 是一開始在蓋金沙酒店時就一起設計進去的，結果回來研究一下資料發現不是，這個 Apple Store 是後蓋的，努力搜尋一番有找到篇文章有些施工當時的照片。</p>
<ul>
<li><a href="https://www.archigardener.com/2020/01/is-this-apples-coolest-new-store.html">Is this Apple's Coolest new Store?</a></li>
</ul>
<p>基本上就是圍了一塊範圍把水排掉後把它蓋起來，是可以想像得到的工法，只是想不到會有人這樣設計（<a href="https://www.fosterandpartners.com/projects/apple-marina-bay-sands">Foster + Partners</a> 設計的），而且真的願意這樣施工，然後不免俗的，我又擔心起會不會漏水的問題了，不過後來想一想如果認真要處理防水應該不是問題吧，實在是被台灣的房子會漏水的觀念荼毒太久了。</p>
<p>新加坡整體而言，城市的魅力還是蠻高的，尤其是這些建築的設計更是讓我驚艷，光是來看看這些建築我就覺得蠻不錯的，不過物價實在是很高，然後天氣也是蠻熱的，有機會的話我是會願意再來一次去看看這次沒見到的地方，像是植物園那邊，金沙酒店這次也沒仔細逛（金沙酒店本身也是很厲害，商場裡面還有人工河和瀑布）。</p>
]]></description>
<link>https://blog.othree.net/log/2023/05/12/singapore-2022/</link>
<guid>https://blog.othree.net/log/2023/05/12/singapore-2022/</guid>
<category>diary</category>
<pubDate>Fri, 12 May 2023 21:03:03 +0800</pubDate>
</item>

<item>
<title>大宮鐵道博物館</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855334718/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855334718_f9d565503c_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52855334718_f0185f6ce7_k.jpg 2x" /></a></p>
<p><a href="https://www.railway-museum.jp/">大宮鐵道博物館</a>（簡稱鐵博）也是知名景點了，網路上一堆介紹，所以這篇除了我們的遊記之外，還會有些博物館本身以外的內容。</p>
]]><![CDATA[<p>大宮鐵道博物館基本上就是 JR 東日本的博物館，其實東京市區還有一些其他公司的博物館，像是 Tokyo Metro 有一間<a href="https://www.chikahaku.jp/">地下鉄博物館</a>、東武也有自己的<a href="https://www.tobu.co.jp/museum/">東武博物館</a>，不過對 JR 還是乘載比較多數人的回憶，加上還有新幹線的加持，大宮鐵道博物館對我們來說還是參觀的首選，不過既然是 JR 東日本的博物館，我在查詢交通時，就出現一個問號，為什麼要到大宮站後，搭乘另外一個非 JR 的 <a href="https://www.new-shuttle.jp/">New Shuttle（伊奈線）</a> 才能到鐵道博物館呢？</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854309317/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854309317_3253e3b70b_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52854309317_3f48aeffa3_k.jpg 2x" /></a></p>
<p>New Shuttle 列車駕駛室，車到站時還有特別的進站音樂，好像是銀河鐵道 999 的主題曲。</p>
<p>我當初還研究地圖許久，覺得其實好像是走的到的距離，不過還好我當天沒真的去用走的，實際上距離超遠，千萬不要用走的！不過如果你真的想用走的，其實路邊有放一台<a href="https://goo.gl/maps/xkvrwsc3H8pM49yq7">蒸気機関車D51 187号機</a>可以看，似乎是大宮工廠生產的第一號火車頭。</p>
<p>New Shuttle 的軌道很特別，似乎是加掛在 JR 的高架鐵道兩邊的，回來台灣我才開始研究，發現其實 New Shuttle 是埼玉和 JR 東日本為主合資的地方線路，因為是大股東了，所以名正言順的拿鐵道博物館來作宣傳也完全不是問題，官網首頁圖片就是新幹線、New Shuttle 和鐵道博物館一起入框。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52866711619/" title="New Shuttle by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52866711619_b84f06f897_b.jpg" width="1024" height="684" alt="New Shuttle" srcset="https://live.staticflickr.com/65535/52866711619_697c94d98f_k.jpg 2x" /></a></p>
<p>從 Google 街景上可以看到，New Shuttle 軌道看起來是另外加掛在 JR 軌道主結構旁邊。</p>
<p>從大宮搭一站就可以到達<strong>鉄道博物館</strong>站，這一站裡面有很多很多的轉蛋機，都是以鐵道為主的，有興趣的可以在這邊好好的轉一轉，出站後直走就是鐵道博物館方向，應該沒人會走錯。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854309247/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854309247_3be068bfd9_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52854309247_bcefaa4dd7_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855281925/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855281925_3a15c22943_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52855281925_bf2f79a815_k.jpg 2x" /></a></p>
<p>現在門票都要先買好（便利商店機台買），現場不賣，日本越來越多地方是用這種售票機制，可以順便控制人流，另外當日票是會比較貴的。進到鐵道博物館後，第一個映入眼簾的就是天皇專用列車的機關車了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854309142/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854309142_20e5791c7e_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52854309142_fa40568a7c_k.jpg 2x" /></a></p>
<p>然後這邊開始分成左右兩邊，簡單說明一下，進館後左邊是往北館方向，基本上就是去小孩區，往右邊是往南就是網路上很多照片的車輛展示區。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854890236/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854890236_3951bbe36d_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52854890236_fe54cdd001_k.jpg 2x" /></a></p>
<p>展示區展示很多車輛，我就不一一介紹，不過特別想說的是，這區走到底可以走出去，外面有一個火車便當攤，那邊還有一台在戶外的已經退役的 Max 號新幹線，家裡有小朋友有買大科學的話應該很熟悉。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854307132/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854307132_4b36a2674f_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52854307132_794a55d335_k.jpg 2x" /></a></p>
<p>然後其實這個戶外區繼續走下走，可以到南館，有一些體驗活動是在這邊之外，這裡還有 400 系和 E5 系的新幹線列車，這些都是現役的車型，我們沒注意到錯過了這區有點可惜，除了這幾台新幹線，其實初代那個圓頭藍白配色的新幹線也是有獨立一個區域給它（台灣也有一台，但是保存和展示就...）。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855283190/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855283190_6909e726e1_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52855283190_2a88d1d97d_k.jpg 2x" /></a></p>
<p>然後說到便當攤，其實博物館內有兩個，分別在往南館和往北館方向的戶外，我們那天先經過南館方向的沒開，以為現在沒有賣火車便當就跑去二樓的餐廳吃，結果其實當天北館方向的有開。</p>
<p>我們因為小孩還小，所以這天不是很深入的行程，屬於走馬看花的方式，主要是因為很多要抽選體驗的設施，都是要小學以上，所以我們逛的區域就是車輛展示區、二樓的日本食堂餐廳午餐、火車模型區、科學區和迷你運轉列車（可以大人開小孩搭），這樣隨意逛一逛也是到下午兩點多了，回程不免俗的要逛一下紀念品商店，當時還有日本全國 IC 連通十週年紀念特區。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855062919/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855062919_8368233e8e_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52855062919_aeb6a6231b_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854306637/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854306637_3fafc086b8_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52854306637_a5173be9e6_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854889616/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854889616_f9e9e83d28_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52854889616_3226c02453_k.jpg 2x" /></a></p>
<p>科學區很像是科教館那樣，有很多和火車有關係的物理現象的介紹。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854306357/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854306357_3ea09ea57b_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52854306357_4e848d6bf4_k.jpg 2x" /></a></p>
<p>特別可以買到各家吉祥物的機會。</p>
<p>我是沒在這邊買紀念品，反而在回到 JR 大宮站時，在站內發現另外一間小小的鐵道商品店，結果反而在這邊買了一些磁鐵，然後這邊還有特別展示了一款結合日本傳統技藝製作的 Suica 企鵝商品，看起來很吸引人，不過上面貼著完售，所以我只有大概記一下，想說之後再查查看。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857683998/" title="JR 磁鐵 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857683998_51192b4c37_b.jpg" width="1024" height="683" alt="JR 磁鐵" srcset="https://live.staticflickr.com/65535/52857683998_6196516a1d_k.jpg 2x" /></a></p>
<p>回來之後我就開始想要找到當時看到的那樣商品，一開始是了解到，博物館裡面的紀念品商店是 <a href="https://twitter.com/trainiart">TRAINIART</a>，這間商店的商品是比較貼近生活一點，和我在大宮站看到那間店不太一樣，於是又搜尋好一會兒，才找到大宮站裡面的紀念品商店是 <a href="https://twitter.com/gs_railyard">Railyard</a>，這間的商品就比較沒有設計和加工過，像我買的磁鐵就是那些牌子原原本本的樣子拿來用，不過找到這兩間商店，上他們在 JRE Mall 的<a href="https://www.jreastmall.com/shop/c/c08/">網路商店</a>找，也找不到我想要找的那樣商品，倒是意外看到一個很好笑的紀念品：</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">こんな商品あったんだ<a href="https://twitter.com/hashtag/TRAINIART?src=hash&amp;ref_src=twsrc%5Etfw">#TRAINIART</a> では、どこかでみたことある！？面白い商品を販売中！<br /><br />その名も・・・<br />【駅構内にあるゴミ箱マルチポーチ（ＪＲ東日本編）】です<br /><br />ぜひホンモノのゴミ箱と見比べてみてください <a href="https://t.co/lhHoi300no">pic.twitter.com/lhHoi300no</a></p>-- TRAINIART（トレニアート）【公式】 (@trainiart) <a href="https://twitter.com/trainiart/status/1644914122952409088?ref_src=twsrc%5Etfw">April 9, 2023</a></blockquote> <script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>沒錯，就是大家曾經都非常熟悉的那個 JR 月台的超大垃圾桶，這次去搭 JR 幾趟其實我都沒看到了，事實上這兩年這些超大垃圾桶一直在減少，連鐵道博物館內都有展示出來了，不知道是本來就有還是是因為快要變成歷史痕跡之一了呢。</p>
<p>PS. 日本這幾年比較有為了環保改變一些東西，像是有很多購物提袋已經變要付錢了</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855283245/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855283245_1363caedb5_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52855283245_e6a7bcc2f0_k.jpg 2x" /></a></p>
<p>回到鐵道商品，這兩間商店都和 JR 關係不小，除了大宮之外，TRAINIART 在東京車站還有分店，而 Railyard 則是在秋葉原站，如果想要逛逛但是沒要到鐵博也是可以在都內解決。至於我一直很想找到的那樣商品到底如何了呢？後來我終於用圖片搜尋找到了，是印傳屋的合作商品：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52869325771/in/dateposted-public/" title="Suica 印傳屋"><img src="https://live.staticflickr.com/65535/52869325771_9d1d0c2f11_z.jpg" width="640" height="640" alt="Suica 印傳屋"/></a></p>
<p><a href="http://www.jizaingxinden.com/product/suica.html">http://www.jizaingxinden.com/product/suica.html</a></p>
<p>在東京車站那邊有專賣的店，線上也有一些商品，不過也已經沒黑皮黑漆的款式了（我在大宮站看到說完售的款式）。</p>
<p>而除了鐵道商品專門店外，東京蠻多分店的百元商店 <a href="https://www.seria-group.com/">Seria</a>，也有出 JR 貨櫃款的小鐵盒，有兩種尺寸各三種顏色，我這次只有看到比較小的款式：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857632415/" title="Seria JR Container by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857632415_ebe954b612_b.jpg" width="1024" height="683" alt="Seria JR Container" srcset="https://live.staticflickr.com/65535/52857632415_059da6b976_k.jpg 2x" /></a></p>
<p>這其實是<a href="http://www.yamadakagaku.co.jp/">山田化學</a>的產品，山田化學有不少塑膠生活製品，品質也不差，像我以前就買了好幾個 SIKIRI 10 號收納盒裝摩比人，這個貨櫃小鐵盒也是，只不過 JR 款是和 Seria 合作的商品，只有 Seria 賣。</p>
<p>文章最後，想說一下我出發前心中關於鐵博的兩個疑問，其中第一個是 New Shuttle 是哪來的，是不是一定要搭它，在前面已經提過了，第二個問題則是，為什麼在大宮？這個問題的答案也是在到現場後有了一些概念，在搭乘 New Shuttle 從大宮到鐵博時，經過的那段路就可以看到整片都是 JR 的廠房，回來仔細研究一下，才了解大宮那邊以前是大宮工廠，是生產車輛的地方，現在則是車輛整備中心，鐵博那塊地以前則是車輛解體工廠，而大宮市還是曾經官方認定的12個鐵道都市之一（因鐵道而發展起來的）。</p>
]]></description>
<link>https://blog.othree.net/log/2023/05/04/the-railroad-museum/</link>
<guid>https://blog.othree.net/log/2023/05/04/the-railroad-museum/</guid>
<category>diary</category>
<pubDate>Thu, 04 May 2023 17:03:45 +0800</pubDate>
</item>

<item>
<title>荒川線（Sakura Tram）一日遊</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857686013/" title="都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857686013_ddac4c75dd_b.jpg" width="1024" height="683" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52857686013_e476726098_k.jpg 2x" /></a></p>
<p>續前一篇，這次東京自由行最後一個整天我們因為所以然後選擇了荒川線一日遊，結果而言蠻不錯的，網路上介紹過荒川線一日遊的文章其實也不少，所以這篇就來紀錄我們去的地方就好。</p>
]]><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52856666477/" title="都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52856666477_2e6f28dd7b_b.jpg" width="1024" height="683" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52856666477_9c73201d12_k.jpg 2x" /></a></p>
<p>會選擇這條路線除了因為鬧區人太多很可怕之外，還有一個原因是我們剛好住在東池袋，然後荒川線有一站就是東池袋四丁目，走路就可以到，我們的行程就是先搭到最後一站<a href="https://www.kotsu.metro.tokyo.jp/toden/kanren/omoidekan.html"><strong>三ノ輪橋</strong></a>，然後慢慢往回走，回到池袋。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857247291/" title="三ノ輪橋 都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857247291_851b9cbb68_b.jpg" width="1024" height="683" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52857247291_53a1cbec16_k.jpg 2x" /></a></p>
<p>三ノ輪橋那邊有一個<a href="https://www.kotsu.metro.tokyo.jp/toden/kanren/omoidekan.html">三ノ輪橋おもいで館</a>（回憶館）是都營交通的設施，裡面有相關的紀念品在販售，還有放一點古老的紀念物，還有大張的紙本路線圖可以拿，不過我更想要以前那種 Tokyo Metro 的路線圖小卡啊。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857636335/" title="都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857636335_a7e65bb8a8_b.jpg" width="1024" height="683" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52857636335_d5feb019d2_k.jpg 2x" /></a></p>
<p>三ノ輪橋的商店街是比較不熱鬧，我們在這邊就是隨意逛逛而已，有很多比較老式的商店，像是日式肉店、味噌店、蔬菜店等。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857636175/" title="都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857636175_cc8d47438b_b.jpg" width="1024" height="683" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52857636175_d0221c8832_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857412774/" title="都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857412774_1f23829df0_b.jpg" width="1024" height="683" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52857412774_453dffa7ba_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857412809/" title="都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857412809_1626d9c2e2_b.jpg" width="1024" height="683" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52857412809_33b12ca88a_k.jpg 2x" /></a></p>
<p>我們在其中一間とりふじ（鳥富士）賣熟食的買了一些串燒填肚子。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52856666837/" title="都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52856666837_4b7327d371_b.jpg" width="683" height="1024" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52856666837_1f5c65ec62_k.jpg 2x" /></a></p>
<p>接著就往回搭車去到<strong>荒川二丁目</strong>，據說這邊可以拍到荒川線電車和天空樹的合影，找了幾個路口才找到比較好的位置，結果其實比較靠近<strong>荒川区役所前</strong>了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857246556/" title="都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857246556_2e3824eaf4_b.jpg" width="683" height="1024" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52857246556_92e520b2f0_k.jpg 2x" /></a></p>
<p>拍完天空樹後就繼續搭車到<strong>荒川車庫前</strong>，這一站其實就是荒川線的基地，除了車庫之外，還有<strong>荒川電車営業所</strong>也在這，司機也是在這邊交班，來這站的主要目的是來旁邊的都電おもいで広場（Toden Memorial Square）玩，這邊有放兩台很老的都電列車，還有展示一些歷史資料和物件。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52856665422/" title="Toden Memorial Square 都電おもいで広場 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52856665422_a98219ef22_b.jpg" width="1024" height="683" alt="Toden Memorial Square 都電おもいで広場" srcset="https://live.staticflickr.com/65535/52856665422_f9fc7ec95a_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857684203/" title="Toden Memorial Square 都電おもいで広場 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857684203_399672697c_b.jpg" width="1024" height="683" alt="Toden Memorial Square 都電おもいで広場" srcset="https://live.staticflickr.com/65535/52857684203_d9f4f456bf_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52856665952/" title="Toden Memorial Square 都電おもいで広場 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52856665952_b73fc8e04c_b.jpg" width="1024" height="683" alt="Toden Memorial Square 都電おもいで広場" srcset="https://live.staticflickr.com/65535/52856665952_077861485f_k.jpg 2x" /></a></p>
<p>操縱席可以隨便小朋友玩。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52856665027/" title="都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52856665027_fc7bc2ffca_b.jpg" width="1024" height="683" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52856665027_6ffbfe3e3c_k.jpg 2x" /></a></p>
<p>一個設計得很巧妙的模擬裝置，拿來讓小朋友玩倒是很不錯，我就不說穿其中秘密了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857246036/" title="Toden Memorial Square 都電おもいで広場 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857246036_a0bc5c9943_b.jpg" width="1024" height="683" alt="Toden Memorial Square 都電おもいで広場" srcset="https://live.staticflickr.com/65535/52857246036_b73724db3b_k.jpg 2x" /></a></p>
<p>古早的都電路線圖，在轉變成地鐵為主之前，路上電車的線路其實是很多的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857245821/" title="Toden Memorial Square 都電おもいで広場 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857245821_eaebf3b0fd_b.jpg" width="683" height="1024" alt="Toden Memorial Square 都電おもいで広場" srcset="https://live.staticflickr.com/65535/52857245821_1ed8a271d4_k.jpg 2x" /></a></p>
<p>除了車庫之外，供電的主線路也在這邊。</p>
<p>因為小朋友玩的很高興，在這邊停留許久後，才繼續前往下一站<strong>庚申塚</strong>，這一站可以通到巢鴨商店街，也算是有點名氣的地方，其實這條商店街的全名是：<a href="https://sugamo.or.jp/"><strong>巣鴨地蔵通り商店街</strong></a>。</p>
<p>巢鴨商店街真的很好逛，我們一路上買了<a href="https://sugamo.or.jp/shop/tobiyasu/">飛安商店</a>的鯛魚燒（有上過電視，Tabelog 上好像也是很高分，真的蠻好吃，回來才發現完全沒拍照就吃光光了，而且我們回程還買了第二次也沒拍到照片）、まる天花枝串、鹽大福、杉養蜂園的霜淇淋等一堆東西吃，那邊有名的雜貨店マルジ也是超好逛，有超多婆婆媽媽會喜歡的商品，然後還有超便宜的 OS Drug，我一路上看到最便宜的合力他命就是在這邊看到的，含稅比別人未稅還要便宜，店內也一直是滿滿的結帳人潮，如果時間夠多我們大概還會在這邊找間咖啡廳吃個點心休息一下吧，這邊也有幾間咖啡廳，還有不少的餐廳，三大便利商店和 Aeon 小超市，生活機能也很強。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857633705/" title="巢鴨地藏通商店街 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857633705_8dae169da0_b.jpg" width="1024" height="683" alt="巢鴨地藏通商店街" srcset="https://live.staticflickr.com/65535/52857633705_d88a65a430_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52856664457/" title="巢鴨地藏通商店街 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52856664457_fb6e14003d_b.jpg" width="1024" height="683" alt="巢鴨地藏通商店街" srcset="https://live.staticflickr.com/65535/52856664457_f1272017de_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857633595/" title="巢鴨地藏通商店街 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857633595_07e0e2693e_b.jpg" width="1024" height="683" alt="巢鴨地藏通商店街" srcset="https://live.staticflickr.com/65535/52857633595_3b5046e852_k.jpg 2x" /></a></p>
<p>郵局的郵筒上還有他們的吉祥物。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857632080/" title="巢鴨地藏通商店街 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857632080_0cd7e7db59_b.jpg" width="1024" height="683" alt="巢鴨地藏通商店街" srcset="https://live.staticflickr.com/65535/52857632080_18e194756a_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857244761/" title="巢鴨地藏通商店街 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857244761_9e5a59fce0_b.jpg" width="1024" height="683" alt="巢鴨地藏通商店街" srcset="https://live.staticflickr.com/65535/52857244761_5119665b8b_k.jpg 2x" /></a></p>
<p>マルジ還有一間專賣紅內褲的分店也很有名。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857414419/" title="巢鴨地藏通商店街 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857414419_7f83aae010_b.jpg" width="1024" height="683" alt="巢鴨地藏通商店街" srcset="https://live.staticflickr.com/65535/52857414419_3bd75bf5d7_k.jpg 2x" /></a></p>
<p>隨處可見他們的吉祥物，商店街的向心力感覺很高，這理也是這整趟行程中我最喜歡的商店街了。</p>
<p>走到另外一頭，靠近 JR 巢鴨站那邊才發現那一側其實也很熱鬧，查了一下還有不少的住宿可以選擇，像是位置最顯眼的 APA Hotel 看起來就有很多房間，或許以後也可以考慮住在這塊，交通上有山手線可以搭，而且也有一條地鐵，雖然那條好像對於觀光客不是那麼有機會用到的路線。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857633360/" title="巢鴨地藏通商店街 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857633360_3e62772029_b.jpg" width="683" height="1024" alt="巢鴨地藏通商店街" srcset="https://live.staticflickr.com/65535/52857633360_fb9aeab48e_k.jpg 2x" /></a></p>
<p>逛完巢鴨商店街後，我們就搭車回東池袋四丁目了，因為已經快要晚餐時間，而且有預約的餐廳了，我們就沒有往另外一個方向去逛了，其實另外一個方向也還有想去的站，其中最想去的就是<strong>鬼子母神前</strong>了吧。</p>
<p>文章最後，其實有一個站我特別想介紹，就是<strong>大塚駅前</strong>了，要是沒有帶小孩出們我這站一定會特別下車拍照，這個站特別的地方是在路上電車的軌道有開過 JR 大塚站的正前方，結果呈現一個很特別的，路上電車跑在車站的正前方的畫面，可惜我只能找 Google 地圖街景來給大家看看想像一下而已，這邊是行人要過軌道要等電車過去，看起來就像是普通行人紅綠燈而已，可惜沒有平交道的竿子，要是整個長得更像鐵路平交道，那這邊的街貌就會更特別了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52864829396/" title="大塚駅前 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52864829396_21f10296bc_b.jpg" width="1024" height="684" alt="大塚駅前" srcset="https://live.staticflickr.com/65535/52864829396_4a77bb8c63_k.jpg 2x" /></a></p>
]]></description>
<link>https://blog.othree.net/log/2023/05/03/sakura-tram/</link>
<guid>https://blog.othree.net/log/2023/05/03/sakura-tram/</guid>
<category>diary</category>
<pubDate>Wed, 03 May 2023 10:56:12 +0800</pubDate>
</item>

<item>
<title>2023 Tokyo</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52852893699/" title="東京 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52852893699_3827342974_b.jpg" width="1024" height="683" alt="東京" srcset="https://live.staticflickr.com/65535/52852893699_6f3f08c711_k.jpg 2x" /></a></p>
<p>睽違三年，終於又去了日本了，這次因為太久沒去所以排比較多天，來回共十一天，從週五跨一個週間到週一，這篇想紀錄一下這次的行程規劃、後來實際進行的狀況以及覺得有點缺憾錯過的東西。</p>
<p>這趟的主行程其實是三年前本來要去的，結果遇到疫情爆發，當時想的就是帶小朋友去迪士尼玩和順便去看富士山泡溫泉，所以這次行程規劃也就把那次的缺憾放進來，不過我們決定的有點晚，加上日本最近一直有國內旅遊補助，所以安排住宿的時候一直蠻困擾的，最後基本上規劃成：</p>
<pre><code>4/14 入境、上野採買
4/15 銀座採買
4/16 淺草、台場
4/17 迪士尼
4/18 迪士尼
4/19 富士山
4/20 富士山
4/21 大宮鐵道博物館
4/22 隨意
4/23 隨意
4/24 出境
</code></pre>
<p>在帶著一個拖油瓶的情況下，入住的飯店一共換了四間其實有點多，前三天住上野御徒町，然後迪士尼樂園大飯店，大倉東京灣酒店，然後河口湖，最後在池袋王子住四天，這樣安排主要是迪士尼本家飯店一來比較貴，二來也很難同一間連住兩天，本來是想說第二天玩完回去市區住，方便隔天搭巴士去河口湖，本來預期的兩大挑戰是：</p>
<ol>
<li>從上野到迪士尼，需要轉車加上搬運大量行李</li>
<li>從迪士尼往富士山，需要去東京車站轉巴士，還要寄送行李到最後的住宿地：池袋王子大飯店</li>
</ol>
<p>這兩個路程我都有仔細研究過，轉車要去哪一站，搭車要搭哪個位置上車比較好，還有怎樣的路線才有電梯等等，不過最後都沒派上用場，首先是從迪士尼離開去河口湖這段，我在出發前就決定改成租車去，這樣雖然有比較貴，但是好處多很多，最棒的就是我時間變多所以還多去了木更津的三井 outlet，以及穿越東京灣的 Aqualine 和海中間的水上螢火蟲休息站（本來是想繞東京灣一圈的，結果發現要兩個小時），尤其是後者我實在蠻有興趣，但是作為觀光客實在很難有機會，所以我的規劃就是一早搭 Disney Resort Line 單軌去舞濱站轉公車，不用跑去其他地方，直接在車站前面的公車站等公車，搭到<strong>猫実</strong>站（念作 Nekozane 四個音，我一時以為是三個音，還好司機聽得出來）然後走到 Toyota 租車<strong>浦安やなぎ通り店</strong>，接著開車回去大倉裝行李。</p>
<p>PS. 我蠻喜歡這間 Toyota 租車的，還有飲料可以給你外帶上車，包括咖啡、果汁、紅茶花傳無糖紅茶，相較於後來還車的東池袋店真是差很多。</p>
<p>至於第一個挑戰，其實本來還沒打算花錢解決，後來因為第一天光是從機場到飯店帶著拖油瓶就累死了，我們帶了兩個大行李箱、小孩有給他推車坐，雖然基本上是都找的到斜坡和無障礙的路線，但是常常需要一直繞路，並且有些路段也不是很好推，體力消耗不小，加上第三天招待我們的朋友也覺得花錢解決比較好，而且前兩天採買過後行李已經變多，所以那天變成直接用 uber 叫大車子來去迪士尼樂園大飯店，意外的很好叫。</p>
]]><![CDATA[<p>回來介紹一下實際的行程吧：</p>
<p>第一天到羽田、搭單軌去轉 Tokyo Metro 到上野御徒町，住在 hotel MONday Ueno Okachimachi，這間我蠻推薦的，我有在 FB 上寫下<a href="https://www.facebook.com/groups/jptraveladdicted/posts/6032100613583377/">推薦的原因</a>，有興趣的可以去參考看看，辦理入住後然後直接在上野商圈買藥粧和電器，電器這次目標其實只有兩台吹風機，其中一台是 Panasonic 的最新款吹風機 EH-NA0J，我現在正在用的是 NA96，用快八年了，其實一直有想升級，但是一直換不下手，直到今年機器造型改很大，我才決定要買下去，而且那時候在日本便宜蠻多的（台灣有代理這台），我是在多慶屋買，有 10% 退稅 + 2% off 然後再加上 JCB 的回饋 10% off，然後信用卡自己的回饋又有 3-5% off，加總起來至少是 25% off 的折扣。這天的晚餐是上野的山家豬排，其實本來沒特別指定要吃這家的，只是走到一半小孩開始耍賴，然後剛好就在這家附近，也快開門了，我也有印象是也算有名的店所以就決定吃他，店面非常傳統，只收現金。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52852136742/" title="上野 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52852136742_74ceba2b07_b.jpg" width="1024" height="683" alt="上野" srcset="https://live.staticflickr.com/65535/52852136742_bc234bfaa2_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52852895789/" title="多慶屋 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52852895789_06793d7da7_b.jpg" width="1024" height="683" alt="多慶屋" srcset="https://live.staticflickr.com/65535/52852895789_7187ce848f_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52861185712/" title="山家 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52861185712_32580c2161_b.jpg" width="1024" height="768" alt="山家" srcset="https://live.staticflickr.com/65535/52861185712_e869580c65_k.jpg 2x" /></a></p>
<p>第二天早上去 PARCO_ya 和松坂屋百貨亂逛，中午吃 HARBS，下午就去銀座逛街，晚上則在東京車站，本來要去一番街找吃的結果跑到丸之內，亂走跑到 KITTE，想說去看東京車站，可惜這天雨下的很大，小孩也不好顧，還是放棄拍完全完工後的東京車站正面照了，只能期待下次來東京了。其實理想上我們有換飯店，購物應該放到後面，不過因為 JCB 回饋 10% 活動實在太香了，然後又剛好只到這天結束，所以只好改成先購物的行程，光這兩天買的東西就多一個登機箱了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52852136202/" title="東京車站 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52852136202_a9964713dd_b.jpg" width="1024" height="683" alt="東京車站" srcset="https://live.staticflickr.com/65535/52852136202_667d959d24_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857460291/" title="東京 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857460291_eb03a11c8f_b.jpg" width="1024" height="444" alt="東京" srcset="https://live.staticflickr.com/65535/52857460291_9b4df652cc_k.jpg 2x" /></a></p>
<p>第三天天氣很好，一早就從上野去淺草，吃了鯛魚燒，逛了西松屋買小孩衣服（觀光客應該不會跑來這間），午餐買豬排三明治，本來要搭水上巴士的 EMERALDAS 到台場的，結果竟然整天的票都賣光了，真的是完全想不到這麼熱門，這時候我犯了一個錯誤，其實這邊還有一家東京水邊線可以搭（其實也有一點距離），我忘了去那邊看看還有沒有位子，後來改成搭地鐵轉百合海鷗號去台場，到台場看獨角獸鋼彈，然後和朋友會合晚餐，還有搭車走夜間的首都高和去了一下東京鐵塔旁邊。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52853106575/" title="天空樹 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52853106575_0abe2caeb0_b.jpg" width="1024" height="683" alt="天空樹" srcset="https://live.staticflickr.com/65535/52853106575_2d487b749d_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52853165333/" title="淺草寺 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52853165333_a207eb35b8_b.jpg" width="1024" height="683" alt="淺草寺" srcset="https://live.staticflickr.com/65535/52853165333_7a1e3b8469_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52853104990/" title="東京 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52853104990_cde1f96253_b.jpg" width="1024" height="683" alt="東京" srcset="https://live.staticflickr.com/65535/52853104990_5d7e04941b_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52852894519/" title="台場 UC 鋼彈 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52852894519_49e0de5959_b.jpg" width="1024" height="683" alt="台場 UC 鋼彈" srcset="https://live.staticflickr.com/65535/52852894519_0d5339c476_k.jpg 2x" /></a></p>
<p>第四天早上搭 Uber 大車直接去迪士尼樂園大飯店，寄放行李後搭 Disney Resort Line 到 Disney Sea，晚上就住迪士尼樂園大飯店。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52853569055/" title="Tokyo Disney Land Hotel by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52853569055_063ef4103f_b.jpg" width="1024" height="683" alt="Tokyo Disney Land Hotel" srcset="https://live.staticflickr.com/65535/52853569055_8de52eb31d_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52853175811/" title="Tokyo Disney Sea by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52853175811_26a6e2da7d_b.jpg" width="1024" height="683" alt="Tokyo Disney Sea" srcset="https://live.staticflickr.com/65535/52853175811_19c0cc64bb_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52853561360/" title="Tokyo Disney Sea by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52853561360_d473e9a791_b.jpg" width="1024" height="683" alt="Tokyo Disney Sea" srcset="https://live.staticflickr.com/65535/52853561360_f1b96a4788_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52853560390/" title="Tokyo Disney Land Hotel by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52853560390_1f39cecba3_b.jpg" width="1024" height="683" alt="Tokyo Disney Land Hotel" srcset="https://live.staticflickr.com/65535/52853560390_c4fa03821f_k.jpg 2x" /></a></p>
<p>第五天早上先衝去 Disney Land 玩了美女與野獸，後來大概十點我回到飯店處退房，順便把行李轉給門房請他們送去大倉東京灣酒店，這個免費服務其實我查了很久，迪士尼網站每個語言資訊不太一樣，只有繁體中文版網頁有明確寫是免費服務，總之在海邊那幾間公認飯店都可以送行李過去，他會跟你確認你有在那邊訂房就是，然後從飯店內小超商買了一些食物當午餐回去園區，晚上搭單軌去搭轉接巴士到飯店。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52853398651/" title="Enchanted Tale of Beauty and the Beast by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52853398651_75365f2ba7_b.jpg" width="1024" height="683" alt="Enchanted Tale of Beauty and the Beast" srcset="https://live.staticflickr.com/65535/52853398651_19833dd9b8_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52853580444/" title="Tokyo Disney Land by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52853580444_a8c33b8279_b.jpg" width="1024" height="683" alt="Tokyo Disney Land" srcset="https://live.staticflickr.com/65535/52853580444_5c40c08168_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52852816337/" title="Tokyo Disney Land by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52852816337_2004e283f8_b.jpg" width="1024" height="683" alt="Tokyo Disney Land" srcset="https://live.staticflickr.com/65535/52852816337_cd673cb2bf_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52852815892/" title="Tokyo Disney Resort by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52852815892_3fda514797_b.jpg" width="1024" height="683" alt="Tokyo Disney Resort" srcset="https://live.staticflickr.com/65535/52852815892_49a466f005_k.jpg 2x" /></a></p>
<p>第六天早上太晚出門，總之就是搭單軌、轉公車然後去浦安的 Toyota 租車把車開回酒店載行李，之後穿過東京灣去木更津 outlet 順便午餐，之後逛了兩個多小時（太晚出門只有兩個多小時逛），然後回程去 <a href="https://zh.wikipedia.org/wiki/%E6%9D%B1%E4%BA%AC%E7%81%A3%E8%B7%A8%E6%B5%B7%E5%85%AC%E8%B7%AF">Aqualine</a> 中間那個海上螢火蟲休息站晃一下，之後就一路往河口湖，結果在市區塞車花不少時間，到飯店時已經快要過晚餐時間了，有點驚險。這天住的是秀峰閣湖月，是我每天刷網頁刷了很久才訂到的，晚餐是在房間用餐，每個房間都有很棒的景可以看，運氣好的話在房間就可以看到逆富士。</p>
<p>PS. 秀峰閣湖月的小賣店的商品都還蠻不錯的，可以逛逛。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854814044/" title="東京行 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854814044_ac9f056437_b.jpg" width="683" height="1024" alt="東京行" srcset="https://live.staticflickr.com/65535/52854814044_094702c56d_k.jpg 2x" /></a></p>
<p>租的車其實有點小，行李差點塞不下，不過車子本身蠻新的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855033040/" title="木更津三井 Outlet by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855033040_9da5f45e99_b.jpg" width="1024" height="683" alt="木更津三井 Outlet" srcset="https://live.staticflickr.com/65535/52855033040_cf049c3f62_k.jpg 2x" /></a></p>
<p>樂高竟然比較比台灣便宜一點，匯率真是太低了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855087113/" title="海螢火蟲 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855087113_bf6eb8bf13_b.jpg" width="1024" height="683" alt="海螢火蟲" srcset="https://live.staticflickr.com/65535/52855087113_06f5e3167f_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855087148/" title="海螢火蟲 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855087148_b91f751849_b.jpg" width="1024" height="683" alt="海螢火蟲" srcset="https://live.staticflickr.com/65535/52855087148_2db3b6cfc0_k.jpg 2x" /></a></p>
<p>很特別的海上休息站，海螢火蟲，天氣好時可以看到富士山，不過那天只有一片白。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854056822/" title="海螢火蟲 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854056822_61a5d57c5a_b.jpg" width="683" height="1024" alt="海螢火蟲" srcset="https://live.staticflickr.com/65535/52854056822_49c0d7ada6_k.jpg 2x" /></a></p>
<p>這種休息站在日本屬於 PA（Parking Area），還有一種更多服務的的則是 SA（Service Area），如果有要在日本開車上高速，還有兩個一定要知道的就是 IC (Inter Change) 指的是交流道，JCT（junction）則是複數高速公路交會的地方，可以換線但是不能上下高速公路。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857848330/" title="東京 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857848330_ca00b15558_b.jpg" width="1024" height="768" alt="東京" srcset="https://live.staticflickr.com/65535/52857848330_6ceb50cb75_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854056207/" title="河口湖 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854056207_b63384ab13_b.jpg" width="1024" height="683" alt="河口湖" srcset="https://live.staticflickr.com/65535/52854056207_0984572c82_k.jpg 2x" /></a></p>
<p>晚上用相機長曝才拍的出來的逆富士，肉眼其實只看到一片黑，仔細看才會發現非常淡的輪廓，所以我才判斷可以用相機拍出來，不過這次沒帶腳架，不然應該可以拍更漂亮。</p>
<p>第七天我一早就起床看有沒有機會看到逆富士，不過很可惜，一大早富士山都被雲遮住，直到太陽出來才開始散開，這時候湖面也已經不平靜了，是還好我前一天晚上有用相機長鋪拍到逆富士，飯店也有個池子讓人可以拍到逆富士，也不是毫無收穫，其實這兩天在富士見預報都只有 1 分，所以能看到富士山其實我已經蠻滿意了，之後跑了兩三個景點，午餐吃了<a href="https://fujide223.com/">FUJI de 223 いなりと発酵カフェ</a>，然後就直奔回東京市區了，這天晚上是要住池袋王子，照著導航經過九彎十八拐的首都高後，沒想到東池袋出口下來，馬上左轉就是池袋王子的大門，然後還車的東池袋 Toyota 租車，就繼續往前，右轉之後馬上就到了，超級方便（不過我為了加油又去繞了一圈），晚餐就在 Sunshine City 解決，這天應該多逛一下 Sunshine City 裡面的店的，因為後來真的要逛時反而沒時間了，商店又很早關門。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854055527/" title="秀峰閣湖月 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854055527_da88b58789_b.jpg" width="1024" height="683" alt="秀峰閣湖月" srcset="https://live.staticflickr.com/65535/52854055527_f53351fb32_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855031215/" title="秀峰閣湖月 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855031215_33583d6284_b.jpg" width="1024" height="683" alt="秀峰閣湖月" srcset="https://live.staticflickr.com/65535/52855031215_8429c3f718_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854811669/" title="河口浅間神社 遥拝所 【天空の鳥居】 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854811669_02099b85c5_b.jpg" width="1024" height="683" alt="河口浅間神社 遥拝所 【天空の鳥居】" srcset="https://live.staticflickr.com/65535/52854811669_4d1f856883_k.jpg 2x" /></a></p>
<p>上去遙拜所時太陽高度太高了，光線不太好，這塊其實還算是開發中的地方，旁邊的植物都還沒長出來。</p>
<p>第八天照預定是去大宮鐵道博物館，因為想說是熱門景點，應該平日去比較好，結果真的人不多，逛起來蠻舒適的，拍照拍的很快樂，不過少逛到一間新幹線的展示區小可惜，然後體驗區我們幾乎都沒去，因為小孩還太小，大部分都要是小學生才可以操作，也因此時間控制的還不錯，大概半天多一點就結束這段行程，還可以回去池袋逛百貨；大宮鐵道博物館這個景點真的蠻不錯的，有興趣的人光是展示區就可以逛很久，還有很多可以體驗的裝置，一些鐵路相關的物理原理介紹等等，然後紀念品店也很大，這次去還剛好有全國 IC 聯通的十週年特區，下午則是回池袋隨便逛逛。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52854890236/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52854890236_3951bbe36d_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52854890236_fe54cdd001_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855062919/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855062919_8368233e8e_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52855062919_aeb6a6231b_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855333583/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855333583_7708a8276a_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52855333583_3687752af3_k.jpg 2x" /></a></p>
<p>大宮站有一個鐵道商店：Railyard 我還蠻喜歡的，還看到 Suica 的印傳錢包，回來研究了好一會兒才找到，詳細紀錄在 <a href="https://twitter.com/othree/status/1651153062504042497">Twitter</a> 那邊。</p>
<p>第九天早上決定去新宿看巨大貓咪，不過早上先去池袋西武百貨找高湯包，意外在那邊超市買到養樂多 Y1000，到新宿後想說先跑去西口看看藥粧要補買，結果沒買藥粧，反而在 Yodobashi 西口買了一堆遊戲和布娃娃（我的瑪利歐和路易），後來午餐去吃 Shake Shack，之後才去到東口看貓咪，然後人實在太多了，看完貓咪就逃回池袋去逛水族館。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855617160/" title="養樂多 1000 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855617160_38bac0012e_b.jpg" width="1024" height="683" alt="養樂多 1000" srcset="https://live.staticflickr.com/65535/52855617160_5ef89834ec_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855396714/" title="新宿東口巨大貓咪 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855396714_1b9eed6cfb_b.jpg" width="1024" height="683" alt="新宿東口巨大貓咪" srcset="https://live.staticflickr.com/65535/52855396714_e9427d6c61_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855218846/" title="Sunshine Aquarium by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855218846_343392bf2a_b.jpg" width="1024" height="683" alt="Sunshine Aquarium" srcset="https://live.staticflickr.com/65535/52855218846_78a0079c6e_k.jpg 2x" /></a></p>
<p>第十天是最後一個整天，有鑑於昨天新宿人實在太多，所以我就放棄鬧區行程（本來有考慮去渋谷，有 Sibuya Sky 和任天堂商店），決定去荒川線（Sakura Tram）一日遊，直接走去池袋四丁目站搭去終點然後往回跑，去拍了天空樹加荒川線電車，然後荒川車庫前面的 memoral hall 看老車和一些都營電車的歷史紀錄，然後去巢鴨商店街，我個人很喜歡巢鴨商店街這種有一點年代感但是又夠熱鬧的商店街，還偷偷買了他們的吉祥物鴨鴨，之後再單獨一篇介紹這段行程；之後晚餐回到池袋的敘敘院，是前兩天訂到的，之後去 Uniqlo 補充一點衣物，我大概一年會買一件 DRY-EX 不同花色，日本的選擇也多一點，然後買新的 AIRism 淘汰現在穿的，這間也是可以退稅的 Uniqlo 超大型店，然後回到 Sunshine City，本來想逛 one piece 商店或是 pokemon store 或是 BANDAI NAMCO cross store，後來只有逛了最後一間，走馬看花一下，裡面還有  SJHA 特展，但是特展比商店還早關門...</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857417249/" title="都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857417249_4e1175cc40_b.jpg" width="1024" height="683" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52857417249_b2b99b0470_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52856666077/" title="都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52856666077_1b03f3c143_b.jpg" width="683" height="1024" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52856666077_1075f031df_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52856665227/" title="都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52856665227_947536cede_b.jpg" width="1024" height="683" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52856665227_97c141ce21_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857244546/" title="巢鴨地藏通商店街 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857244546_f09946a784_b.jpg" width="1024" height="683" alt="巢鴨地藏通商店街" srcset="https://live.staticflickr.com/65535/52857244546_ea39b7c732_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857413534/" title="BANDAI NAMCO cross store by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857413534_a56b93847e_b.jpg" width="1024" height="683" alt="BANDAI NAMCO cross store" srcset="https://live.staticflickr.com/65535/52857413534_d86606ba20_k.jpg 2x" /></a></p>
<p>最後一天就是有約了機場接送，十點就搭車去羽田空港，然後領了一堆完美行買的土產，去報到和托運行李，然後去 HANEDA Airport Garden 逛逛，這一整棟是新的，和羽田第三航廈在二樓有連通，二樓都是商店、也有連通到旅館和溫泉，本來有想說要不要在這邊吃飯，不過那時候完全不餓，而且飛機上也有供餐，所以就沒去餐廳，然後就發現他規劃的蠻好，商店全部集中在二樓，而且在空橋就有商店了，餐廳則是在一樓，所以如果只是要買買紀念品，從二樓連通道過去不用上下樓，對於還要推車和行李的旅客來說很方便，而且商店也還蠻好逛的，KOKUYO 也有一間專店，還擺出我本來想要買的剪刀 HASA 系列，不過當時行李已經托運了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857412964/" title="Haneda Airport Garden by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857412964_e0b6e3ff6e_b.jpg" width="1024" height="683" alt="Haneda Airport Garden" srcset="https://live.staticflickr.com/65535/52857412964_c3982cab9a_k.jpg 2x" /></a></p>
<p>HANEDA Airport Garden 還有旅館和溫泉，可以參考 Henry 的<a href="https://medium.com/%E4%BA%A8%E5%88%A9%E7%9A%84%E7%A7%91%E6%8A%80%E7%BE%8E%E9%A3%9F%E6%97%85%E9%81%8A/%E5%BE%9E%E7%BE%BD%E7%94%B0%E6%A9%9F%E5%A0%B4%E5%88%B0-villa-fontaine-grand-haneda-airport-%E9%A3%AF%E5%BA%97%E6%8C%87%E5%BC%95%E8%88%87-%E6%B3%89%E5%A4%A9%E7%A9%BA%E4%B9%8B%E6%B9%AF-%E5%85%A5%E5%A0%B4%E7%B0%A1%E4%BB%8B-b8f8d97b658f">文章</a>。</p>
<p>有旅程就會有收穫和缺憾，這次有幾個讓人印象深刻的經驗，第一個是迪士尼的美女與野獸，現在很熱門，我們因為提早入園所以沒排太久，一般推薦是可以買 DPA 入場，不過事實上排隊進城堡後，還有很多場景蠻棒的，走 DPA 通道好像就會跳過這些，回到設施本身，我只能說很棒，值得體驗。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52853397641/" title="Enchanted Tale of Beauty and the Beast by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52853397641_a76936a299_b.jpg" width="1024" height="683" alt="Enchanted Tale of Beauty and the Beast" srcset="https://live.staticflickr.com/65535/52853397641_690654d496_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52853790280/" title="Enchanted Tale of Beauty and the Beast by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52853790280_a423622529_b.jpg" width="1024" height="683" alt="Enchanted Tale of Beauty and the Beast" srcset="https://live.staticflickr.com/65535/52853790280_09a36c0dd0_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52852822207/" title="Enchanted Tale of Beauty and the Beast by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52852822207_a2edd4cf60_b.jpg" width="1024" height="683" alt="Enchanted Tale of Beauty and the Beast" srcset="https://live.staticflickr.com/65535/52852822207_3d7f741614_k.jpg 2x" /></a></p>
<p>第二個則是夜晚的首都高，這次旅程我第一次上首都高，結果這次一共上去了五趟，其中只有第一趟是晚上上去的，是我朋友帶我們去吃飯前後經過首都高，必須說夜晚的首都高配上東京鐵塔的景致真的很特別，除去首都高夜景之外，我後來自己開上去經過 Aqualine 還有回程繞東京一大圈然後到東池袋出口，也真是讓我體會到首都高的錯綜複雜，甚至在皇居附近其實也有路線，但是是完全地下化了，日本人真的是對天皇很敬重啊，期待日本橋那邊也有機會重見天日。</p>
<p>實際上走首都高也讓我對於東京有多大有更深刻的體會，必須說他們的電車地鐵速度真的是很快，開車走高速公路很多地方都會覺得怎麼會有這麼遠。</p>
<p>至於缺憾的部分，其實很多，不過大部分都算是小事就是：</p>
<ul>
<li>Sunshine City 動漫商店沒什麼逛到，那個 SJHA 特展也幾乎沒看到；</li>
<li>銀座那邊有些展覽和也沒時間看；</li>
<li>銀座伊東屋讓人有些失望，商品品項蠻少的，然後人很多幾乎無法逛；</li>
<li>錯過新宿歌舞伎町的藍色招牌和 Suica 廣場的企鵝銅像；</li>
<li>沒拍到東京車站正面；</li>
<li>沒搭到松本零士設計的東京遊船，這已經是我第二次錯過了，第一次只有一台時我剛好遇到維修日；</li>
<li>沒有上高樓展望台，Shibuya Sky 沒去，也沒有去重新開張的 Sunshine City 60；</li>
<li>沒去任天堂商店；</li>
<li>回來才發現<a href="https://blog.othree.net/log/2016/04/05/kyushu-rail/">水戸岡鋭治</a>的<a href="https://www.amazon.co.jp/gp/product/476831662X?psc=1">書</a>剛出，沒順便買；</li>
<li>沒和小孩搭到小小世界，剛好我跑去處理退房和行李；</li>
<li>沒喝到無酒精檸檬堂和 Jack Daniel 的威士忌可樂調酒。</li>
</ul>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857630164/" title="東京 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857630164_5ab43817c0_b.jpg" width="768" height="1024" alt="東京" srcset="https://live.staticflickr.com/65535/52857630164_cf78c259f7_k.jpg 2x" /></a></p>
<p>最後，想提一下午後的紅茶無糖版，我必須說多年前台灣有上市前是真的蠻好喝的，台灣剛上市時我也覺得很好喝，可是後來我喝就開始覺得味道不對，我一直在想會不會是台灣版本的味道不對，結果這次去日本特地買了一瓶驗證，還真的味道就是變差了，真是讓人傷心，還好後來我買到其他款不錯的，Craft Boss 的無糖紅茶，不過這款比較難買。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857848045/" title="東京 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857848045_c516cdf7d2_b.jpg" width="768" height="1024" alt="東京" srcset="https://live.staticflickr.com/65535/52857848045_ae4db6ac98_k.jpg 2x" /></a></p>
<p>延伸的遊記：</p>
<ul>
<li><a href="https://blog.othree.net/log/2023/05/03/sakura-tram/">荒川線（Sakura Tram）一日遊</a></li>
<li><a href="https://blog.othree.net/log/2023/05/04/the-railroad-museum/">大宮鐵道博物館</a></li>
</ul>
]]></description>
<link>https://blog.othree.net/log/2023/05/01/2023-tokyo/</link>
<guid>https://blog.othree.net/log/2023/05/01/2023-tokyo/</guid>
<category>diary</category>
<pubDate>Mon, 01 May 2023 23:18:19 +0800</pubDate>
</item>

<item>
<title>wbr 的這些那些</title>
<description><![CDATA[<p>在 responsive design 成為主流之後，有個問題也隨之被突顯出來，就是文字的換行，尤其是標題文字的換行位置，現在的瀏覽器的換行方式簡單來說就是超出區塊範圍的東西都往下放到下一行，所以在某些情況下，就會有第一行很長第二行很短的狀況，視覺上非常不平衡，以下圖為例，網頁的副標題沒有作特殊處理，所以會有可能會變成兩行長度差距很大的樣子：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52622679026/" title="line breaking by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52622679026_dce07ba029_b.jpg" width="1024" height="626" alt="line breaking" srcset="https://live.staticflickr.com/65535/52622679026_a03a8ede93_k.jpg 2x" /></a></p>
<p>這個問題有蠻多解決方法的，目前我知道的就有：</p>
<ol>
<li>微調 responsvie 的樣式來避免出現不平衡的狀態</li>
<li>在特定地方插入 <code>&amp;nbsp;</code> 避免換行</li>
<li>用 flex layout 來控制換行位置</li>
</ol>
<p>基本上就是只要你不擇手段，問題還是可以解決的，不過我一直以來都是會偏好用標準的方法來解決問題，所以整理了一下我所知道可以拿來用的東西：</p>
<ol>
<li><code>&lt;wbr&gt;</code> HTML element</li>
<li><code>white-space</code> CSS property</li>
<li><code>&lt;nobr&gt;</code> HTML element</li>
<li><code>text-wrap</code> CSS property</li>
</ol>
<p>首先的想法是 <code>&lt;wbr&gt;</code> 配上 <code>white-space: nowrap;</code> 或是 <code>&lt;nobr&gt;</code>，不過意外的是大部分瀏覽器都不支援這個組合，也就是說，包在 <code>&lt;nobr&gt;</code> 內的 <code>&lt;wbr&gt;</code> 的地方在現在大部分主流瀏覽器內是不會換行的：</p>
<pre><code class="language-html">&lt;nobr&gt;ChatGPT: Optimizing&lt;wbr&gt;Language Models&lt;wbr&gt;for Dialogue&lt;/nobr&gt;
</code></pre>
<p>這就激起了我的好奇心了，於是我開始仔細的找資料，看看 <code>&lt;nobr&gt;</code> 和 <code>&lt;wbr&gt;</code> 到底是怎樣運作的。首先，就來看看 <code>&lt;wbr&gt;</code> 吧，雖然他第一次出現在 W3C 的文件內就是在 HTML5，但是其實它已經出現了 20 年以上，最早是作為 <a href="https://web.archive.org/web/20000303182655/http://www.netscape.com/assist/net_sites/html_extensions.html">Netscape 的 HTML 2 extension</a> 的一員：</p>
<blockquote>
<p>The WBR element stands for <strong>W</strong>ord <strong>BR</strong>eak. This is for the very rare case when you have a NOBR section and you know exactly where you want it to break. Also, any time you want to give the Netscape Navigator help by telling it where a word is allowed to be broken. The WBR element does not force a line break (BR does that) it simply lets the Netscape Navigator know where a line break is allowed to be inserted if needed.</p>
</blockquote>
<p>在 Internet Archive 上找到的備份，最早的定義其實明確的說著 <code>&lt;wbr&gt;</code> 處應該是要可以優先於 <code>&lt;nobr&gt;</code> 的，我甚至還在 bugzilla 上找到一個 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=6347">24 年前的 bug report</a> 在講這件事，根據這張票最後的關掉前的討論，其實可以用 <code>&lt;/nobr&gt;&lt;nobr&gt;</code> 來達成一樣的效果，然後 Firefox 不打算支援 <code>&lt;wbr&gt;</code>，看到這邊，我只能說這解法怎麼這麼天才（稱讚的意味）。</p>
<p>查到這邊，我還是很好奇為什麼現在的主流瀏覽器依然 <code>&lt;wbr&gt;</code> 優先度比 <code>&lt;nobr&gt;</code> 還低，所以繼續找資料，這次看的就是最新的文件了，首先是 <code>&lt;wbr&gt;</code> 的<a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-wbr-element">定義</a>，在 HTML5 中變成：</p>
<blockquote>
<p>The <code><a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-wbr-element">wbr</a></code> element <a href="https://html.spec.whatwg.org/multipage/dom.html#represents">represents</a> a line break opportunity.</p>
</blockquote>
<p>從 &quot;word break&quot; 變成 &quot;line break opportunity&quot; 了，<code>&lt;nobr&gt;</code> 則和 <code>&lt;wbr&gt;</code> 一樣一開始是 Netscape extension，不過他倒是沒有進到 HTML5，事實上，雖然 <code>&lt;nobr&gt;</code> 不是 HTML5 的一員，但是文件中<a href="https://html.spec.whatwg.org/multipage/rendering.html#phrasing-content-3">定義的 default style 還是有它</a>：</p>
<pre><code class="language-css">br { display-outside: newline; } /* this also has bidi implications */
nobr { white-space: nowrap; }
wbr { display-outside: break-opportunity; } /* this also has bidi implications */
nobr wbr { white-space: normal; }
</code></pre>
<p>其實就是等價於 <code>white-space: nowrap</code>，而 <code>white-space</code> 屬性<a href="https://www.w3.org/TR/CSS2/text.html#white-space-prop">在 CSS2 時</a>是用來定義空白的處理方式：</p>
<blockquote>
<p>This property declares how white space inside the element is handled.</p>
</blockquote>
<p>到 CSS Text Level 3 時<a href="https://www.w3.org/TR/css-text-3/#white-space-property">定義</a>說的更明確，是用來決定遇到 &quot;line break opportunity&quot; 時的處理方式和是不是要合併 space 字元的屬性：</p>
<blockquote>
<ul>
<li>whether and how <a href="https://www.w3.org/TR/css-text-3/#white-space">white space</a> is collapsed</li>
<li>whether lines may <a href="https://www.w3.org/TR/css-text-3/#wrapping">wrap</a> at unforced <a href="https://www.w3.org/TR/css-text-3/#soft-wrap-opportunity">soft wrap opportunities</a></li>
</ul>
</blockquote>
<p>其實在 <a href="https://www.w3.org/TR/css-text-4/#white-space-property">Level 4</a> 更是可以分開設定兩種屬性，<code>white-space</code> 變成一個 shorthand，而看到這些定義的演進，其實也讓人發現最早命名時其實只有考慮到西方語言的特色。</p>
<p>看到這邊，會發現有一個新的名詞：&quot;line break opportunity&quot;，有些地方是稱為 &quot;wrap opportunity&quot;，這個名詞其實是出現在 CSS Module Text 文件中的，顧名思義，就是可以換行的位置，而這份文件也是<a href="https://www.w3.org/TR/css-text-4/#line-breaking">定義換行邏輯</a>的文件，不過這邊其實沒把換行演算法（line breaking algorithm）明確定義下來，而是闡明各種相關的 CSS 屬性和它們會怎樣影響換行的結果，例如換行有分強制（<code>&lt;br&gt;</code>）和非強制（<code>&lt;wbr&gt;</code>），然後不同 CSS 屬性會影響這些換行點的出現與否，至於文本之中，哪些地方可以換行，就是換行演算法的部分了，這部份在 W3C 文件沒有定義死，所以是允許瀏覽器自己決定的，不過有提供一些參考文件，像是 Unicode 的附件 14：&quot;Unicode Line Breaking Algorithm&quot;，或是稱為 UAX14，這份文件要搭配 Unicode Database（UCD） 的 <a href="https://www.unicode.org/Public/UCD/latest/ucd/LineBreak.txt">Line_Break Property 資料</a>，文件中的第五章有仔細的說明各種不同的 line breaking class，然後資料庫則是定義了所有 Unicode 字元的 Line_Break property，接著的第六章就是最重要的換行演算法了，這邊列出了 31 條規則，基本上是反向列舉，說哪些地方不能換行，例如 WJ（word joiner）前後都不能換行，數字中間的符號前後也不能換行之類的，不過不確定哪些瀏覽器是實作 UAX14 的，Chrome 似乎有用到 UCD，Firefox 則是以 JIS X 4051 為基礎做的<a href="https://searchfox.org/mozilla-central/rev/6566d92dd46417a2f57e75c515135ebe84c9cef5/intl/lwbrk/LineBreaker.cpp">換行演算法</a>，其實 JIS X 4051 是我所知道，二戰後世界，最早的正式的文字編排的標準，查到的紀錄是 <a href="https://www.klnet.pref.kanagawa.jp/find-books/kawasaki/kikaku/kikaku-list/jis-hb-x-03.html">1989 有一版</a>，而 UAX14 第一個非草稿的版本則是要到 1999 年才出來。</p>
<p>回到現在主流瀏覽器不支援 <code>&lt;wbr&gt;</code> 放在 <code>white-space: nowrap</code> 裡面無法換行的問題，其實要回到這個 HTML 標籤在繪製時，是不是有 magic 的，什麼是 magic 呢？簡單說就是，你能不能用 CSS 來定義該標籤的樣子，以及你能不能用 CSS 來改掉這些預設的樣式，而 <code>&lt;br&gt;</code> 和 <code>&lt;wbr&gt;</code> 正好是有 magic 的標籤，可以想想看，要怎樣用 CSS 讓文字內產生一個換行點，可能有人會說剛剛上面才看到的，不過，其實那幾個 <code>display-outside</code> 的值只存在於以前的草稿中，CSS-WG 決議不為了這個問題<a href="https://github.com/w3c/csswg-drafts/issues/610">新增多的 display 狀態</a>，所以問題就回到 HTML-WG 這邊了，CSS-WG 的 fantasai 其實有給了一組 default style：</p>
<pre><code class="language-css">br { all: unset !important; display: contents !important; content: &quot;\a&quot; !important; white-space: pre !important; }
wbr { all: unset !important; display: contents !important; content: &quot;\200B&quot; !important; }
</code></pre>
<p>我把 <code>!important</code> 拿掉整理一下：</p>
<pre><code class="language-css">br {
  all: unset;
  display: contents;
  content: &quot;\a&quot;;
  white-space: pre;
}
wbr {
  all: unset;
  display: contents;
  content: &quot;\200B&quot;;
}
</code></pre>
<p>其中，<code>\a</code> 就是<a href="https://util.unicode.org/UnicodeJsps/character.jsp?a=000A&amp;B1=Show">換行字元</a>，<code>\200B</code> 則是 <a href="https://util.unicode.org/UnicodeJsps/character.jsp?a=200B&amp;B1=Show">ZWSP</a>，zero width space，因為是 zero width，所以看不到，然後又因為是 space，所以可以用來把字切開，也就表示可以在該處斷行。不過這個版本有些問題，因為有很多瀏覽器還不支援在 <code>::before, ::after</code> 以外的物件上套用 <code>content</code> 屬性，所以 fantasai 又提供一版用 <code>::before</code> 的版本：</p>
<pre><code class="language-css">br, wbr { all: unset !important; display: contents !important; white-space: pre !important; }
br::before { all: unset !important; content: &quot;\a&quot; !important; }
wbr::before { all: unset !important; content: &quot;\200B&quot; !important; }
</code></pre>
<p>但是，實際上直接拿這組定義來用，還是一樣有問題，就是有些瀏覽器已經讓 <code>&lt;wbr&gt;</code> 有 magic 了，結果 <code>wbr::before</code> 是沒有用的，目前 <a href="https://github.com/whatwg/html/pull/2298">HTML 標準的修改也就還卡在這邊</a>（issue 則是<a href="https://github.com/whatwg/html/issues/2291">另外一個</a>），HTML-WG 的 Domenic 開了這個 PR 要讓 <code>&lt;br&gt;</code> 和 <code>&lt;wbr&gt;</code> 就用 magic 來實現效果，不過這討論已經停很久了，所以最後會是怎樣的方案還不知道。</p>
<p>總之目前的結論就是，現在如果想要讓 <code>&lt;wbr&gt;</code> 照其定義的一樣，可以在 <code>&lt;nobr&gt;</code> 或是 <code>white-space: nowrap</code> 內產生換行，是辦不到的，不過可以用其他的標籤來辦到，像是：</p>
<pre><code class="language-css">.wbr::before {
  display: inline;
  content: &quot;\00200B&quot;;
  white-space: normal;
}
</code></pre>
<p>配上</p>
<pre><code class="language-html">&lt;nobr&gt;ChatGPT: Optimizing&lt;span class=&quot;wbr&quot;&gt;Language Models&lt;span class=&quot;wbr&quot;&gt;for Dialogue&lt;/nobr&gt;
</code></pre>
<p>這個寫法也有出現在一份由 Leif Halvard Silli 在提交 <a href="https://bugs.webkit.org/show_bug.cgi?id=64005">bug</a> 給 WebKit 所做的 <a href="https://www.m%C3%83%C2%A5lform.no/testing/html5/nobr+wbr.html">test 內</a>。</p>
<p>到這邊，大概已經把自己控制換行位置的部分講的差不多了，不過其實，還有一個方法可以處理一開始所提到的換行結果不理想的問題，就是在 CSS Text Module Level 4 中有一個新的屬性叫做 <code>text-wrap</code>，其中有一個屬性值是 <code>balance</code>，合起來<a href="https://www.w3.org/TR/css-text-4/#valdef-text-wrap-balance">就是</a>：</p>
<pre><code class="language-css">text-wrap: balance;
</code></pre>
<p>這樣設定，預期的結果就是會換行換在每一行的寬度最接近的位置，不過當然還沒有瀏覽器支援，連 caniuse 都還查不到 <code>text-wrap</code> 屬性，只是還是有 JS 的解決方案：</p>
<ul>
<li><a href="https://github.com/adobe/balance-text">Adobe 的 balance text</a>，是 jQuery plugin，因為是認真去算長度的，效能比較不好；</li>
<li><a href="https://github.com/qgustavor/vanilla-balance-text">vanilla 版本的 balance text</a>；</li>
<li><a href="https://github.com/nytimes/text-balancer">nytimes（紐約時報）的 text-balancer</a>，透過 binary search 改寬度來調整換行位置，效能比較好；</li>
<li><a href="https://react-wrap-balancer.vercel.app/">React wrap balancer</a>，React component，基本原理和前者一樣，但是還多支援 <code>ratio</code> 屬性。</li>
</ul>
<p>最後的最後補上一些參考資料，一篇是古老的 IE 時代的東西，一篇則是現在的相關 CSS 屬性，一篇則是 balance wrap 的介紹：</p>
<ul>
<li><a href="https://jkorpela.fi/html/nobr.html">Word division in IE</a></li>
<li><a href="https://codersblock.com/blog/deep-dive-into-text-wrapping-and-word-breaking/">Deep Dive into Text Wrapping and Word Breaking</a></li>
<li><a href="https://www.ctrl.blog/entry/text-wrap-balance.html">Improving the New York Times' line wrap balancer</a></li>
</ul>
]]></description>
<link>https://blog.othree.net/log/2023/01/13/wbr-and-nobr/</link>
<guid>https://blog.othree.net/log/2023/01/13/wbr-and-nobr/</guid>
<category>css-html</category>
<pubDate>Fri, 13 Jan 2023 22:52:00 +0800</pubDate>
</item>

<item>
<title>日本郵便番号</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/7979542259/" title="北海道 by othree, on Flickr"><img src="https://live.staticflickr.com/8042/7979542259_86954d3eb8_b.jpg" width="1024" height="683" alt="北海道" srcset="https://live.staticflickr.com/8042/7979542259_9ff2dab54b_k.jpg 2x" /></a></p>
<p>因為工作的關係，要做日本郵遞區號和地址間的自動補完，還因此開始維護 <a href="https://www.npmjs.com/package/japan-postal-code-oasis">japan-postal-code-oasis</a> 這個套件，它的前身其實是另外一套叫 <a href="https://www.npmjs.com/package/japan-postal-code">japan-postal-code</a> 的，但是它很久沒更新了，所以我就簡單修改一些設計，在研究套件設計的同時就有機會比較深入了解日本的郵遞區號（郵便番号）系統，發現不少有趣的細節，這篇文章特別來紀錄一下。</p>
<p>首先，第一點就是，日本郵遞區號的資料是有整理好並<a href="https://www.post.japanpost.jp/zipcode/dl/readme.html">開放下載</a>的，而且下載路徑、檔案格式都是固定的沒什麼變動過，也因此可以找到不少使用這些資料的程式語言套件（包含下載腳本），<a href="https://www.npmjs.com/package/japan-postal-code">japan-postal-code</a> 就是透過這份資料來實作從郵遞區號抓地址資訊的功能，雖然不是很想和台灣比，但是這點台灣真的是輸很多，台灣其實到 3+2 郵遞區號都還可以在郵局網站下載的到，但是那個下載連結不是固定的，然後也看不出來是不是固定更新，所以你不會知道你下載的資料是不是最新的，至於最新的 3+3 郵遞區號，就沒有開放大眾下載，取而代之的是提供 Web Service、Windows 應用程式，如果真的要下載資料檔，要特別申請（參照：<a href="https://www.post.gov.tw/post/download/%E6%9C%AC%E5%85%AC%E5%8F%B83%2B3%E9%83%B5%E9%81%9E%E5%8D%80%E8%99%9F%E7%B3%BB%E7%B5%B1%E4%BD%BF%E7%94%A8%E8%A6%8F%E7%AF%84%E8%AA%AA%E6%98%8E%E4%BA%8B%E9%A0%85.odt">本公司3+3郵遞區號系統使用規範說明事項</a>），另外就是台灣是一季更新一次，日本則是一個月更新一次。</p>
<p>其實我會注意到日本每個月都更新郵遞區號，是從另外一件事情發現的，在繼續之前，先來介紹一下日本郵遞區號內不同數字的意義，這在日本郵局網站有很詳細的<a href="https://www.post.japanpost.jp/zipcode/zipmanual/p04.html">說明</a>，前三碼稱為郵便區番号，後四碼是町域番号，其中的前兩碼是大 block 番号，第三碼則是小 block 番号，基本上都是這樣規劃，理論上不會需要到每個月更新，直到有一天我發現到六本木森大樓，每一層樓都有自己的郵遞區號，例如用 Google Map 搜尋 <code>Google Japan (Roppongi Hills)</code> ，然後查看地址就會發現他的郵遞區號是 106-6126，其中的後兩碼就是 26 樓的意思，然後搜尋 <code>Apple Japan合同会社</code>，就會發現郵遞區號是 106-6140，就是 40 樓的意思。後來我才知道，這是屬於 <strong>個別番号</strong> 之中的超高層大樓番号，除了大樓之外，還有其他種個別番号，像是大型機構（醫院、電視台、公家單位等）也可以申請，而這種個別番号也就是資料內最常會變動的地方，所以他們才有這麼頻繁的資料更新。</p>
<p>其實我還有在一些<a href="https://www.msr.co.jp/mapinfo/dl/pdf/PEPOS-201411_1015.pdf">第三方資料</a>，看到說前三碼的郵便區番号，還可以再更細分成兩組：前兩碼是地域番号，第三碼則是地域調整番号，町域番号的最後一碼則是町域調整番号，另外就是第一版的日本郵遞區號是三碼為主，然後有部分地區有 3+2 碼的設計，網路上還找的到當時（1968、昭和43年）<a href="http://sasukekyon.web.fc2.com/postal/postal_code.txt">第一版的郵遞區號的清單</a>。</p>
<p>再來印在信封上的，手寫郵遞區號的格子，其實在日本郵局網站上也有仔細的定義它的尺寸，甚至連手寫的字體也有提供範例（基本上就是要你不要寫的太潦草），台灣郵局網站我找到的最接近的就是只有<a href="https://www.post.gov.tw/post/internet/Postal/index.jsp?ID=21001">信封書寫範例</a>了，其實日本的規範這麼仔細，有一個原因是為了自動化作業。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52579607481/" title="郵便番号枠 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52579607481_fa8277f6c9_b.jpg" width="1024" height="534" alt="郵便番号枠" srcset="" /></a></p>
<p>這個自動化作業，其實遠超我的預期，不只是根據郵遞區號分類而已，日本郵局其實定義了一套地址的數位化編碼系統，轉換邏輯也不困難，也就是說，日本國內的任意地址，都可以用一串數字（看情況加上英文字母）來表示，日本地址可以簡單的轉為英數編碼，有一個很大的原因是他們的地址是從大範圍（ex: X丁目X番X号）到小範圍這樣，而不像是其他地方用路加上號碼（ex: XX路X號）的方式，所以其實編碼機制也很簡單，大部分的地址，就是郵遞區號加上後面的三碼，然後再加上可能樓層、房號就可以組成，例如東京鳩居堂 銀座本店，地址是：</p>
<blockquote>
<p>〒104-0061 東京都中央区銀座５丁目７−4</p>
</blockquote>
<p>轉成編碼就是：</p>
<blockquote>
<p>10400615-7-4</p>
</blockquote>
<p>前七碼固定式郵便番号，所以不用處理分隔符號的問題。</p>
<p>另外日本地址有個天字第一號（我取名的），大家可以猜猜看是哪個地方的地址，沒錯，就是皇居，郵遞區號是 100-0001，地址是 1 丁目 1 番（沒有号），編碼就是：</p>
<blockquote>
<p>10000011-1</p>
</blockquote>
<p>而且這套編碼系統還有一組專用的 <a href="https://www.post.japanpost.jp/zipcode/zipmanual/p11.html">barcode 系統</a>，可以用掃描的方式輸入，非常方便，barcode 的<a href="https://www.post.japanpost.jp/zipcode/zipmanual/p11.html">定義</a>也蠻有趣的，不是用粗細，而是用長短和位置來表達不同意義，一條 bar 有四種（4-state）可能的變化（1-4），所以是 2bit，然後一個字元是三條 bar，所以是 6bit，可以有單一字元或是雙字元，理論上單字元有 64 種組合，雙字元是 12bit 共 4096 種組合，不過其實雙字元的第一個字元固定是控制碼，所以實際上變化沒這麼多，目前也只有定義英數、hyphen 和一些控制字元而已，日本郵局內部似乎還有其他用途，而不是只有標記收件人地址而已，不過細節沒有網站上沒有公開，這部份有分為局內 barcode 和 ID barcode，而自己用這組 barcode 系統標注地址的部分，則是稱為 custom barcode。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52580048500/" title="郵便番号 カスタマバーコード by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52580048500_587f5ae388_b.jpg" width="605" height="1024" alt="郵便番号 カスタマバーコード" srcset="" /></a></p>
<p>至於要如何產生住址的 custom barcode 呢，日本郵局網站是有蠻詳細的說明，包括怎樣拆解地址、怎樣編碼、檢查碼怎樣算等等都有說明。而也還有提供一個 custom barcode 產生程式可以下載，抓下來解開後可以發現是網頁應用程式，上一個世代的，編碼也不是 UTF-8 的，現在還可以正常運作，其實還蠻厲害。</p>
<p>PS. 後來<a href="https://ja.wikipedia.org/wiki/%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%83%90%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89">發現</a>其實有蠻多國家的郵務系統是使用類似的 4-state barcode 的。</p>
<p>接下來算是不相關的資訊了，其實我在查資料時，有想研究看看郵便番號有沒有和其他標準相似或是共通的地方，首先是有注意到 ISO 3166-2 這個標準，是每個國家自己有一個子集，定義了各自國家的行政區，例如日本的是 ISO 3166-2:JP，裡面就是用 01-47 從北到南把日本的都道府縣編碼了一遍，而且直接對應到 JIS X 0401，最初是在好奇 JIS 的編碼和郵便番号前兩碼的地域番号有沒有相通，結果當然是沒有。其實我還蠻羨慕日本有 JIS 標準統整各種規範的單位，台灣也是有相關的編碼，只是就是像是 <a href="https://zh.wikipedia.org/wiki/ISO_3166-2:TW">ISO 3166-2:TW Wikipedia 條目</a>裡面列出的，就是各單位各自為政這樣。</p>
<p>另外一套標準(?)則是日本導航系統幾乎都會有支援的 <a href="https://www.denso-solution.com/mapcode/whats.html">MAPCODE</a>，這個編碼系統就不是官方標準了，而是民間企業 <a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%B3%E3%82%BD%E3%83%BC" title="デンソー">日本電装</a> （前身是 Toyota 自動車的一個部門）開發的定位系統，是針對日本境內的，用類似 quadtree 的方式，把地圖分割成一小塊一小塊，然後每一塊下去編碼，不過和 quadtree 不一樣的是，不是統一分成四塊，而是分成三個層級，第一級是 Zone 全日本被分為 1203 個 Zone，然後每個 Zone 再細分成 30x30 個 Block，每個 Block 一樣再細分成 30x30 個 Unit，如果還要更細，還可以再細分成 Core 和 S Core，大約可以到 3 公尺的精細度，最後就是當然，這套系統的大分區也和郵遞區號完全不相通。</p>
]]></description>
<link>https://blog.othree.net/log/2022/12/23/japan-postal-code/</link>
<guid>https://blog.othree.net/log/2022/12/23/japan-postal-code/</guid>
<category>others</category>
<pubDate>Fri, 23 Dec 2022 09:59:16 +0800</pubDate>
</item>

<item>
<title>Archlinux 修復紀錄</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52538205764/" title="Universal Studio Singapore by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52538205764_932f161e34_b.jpg" width="1024" height="768" alt="Universal Studio Singapore" srcset="https://live.staticflickr.com/65535/52538205764_0282fbb78d_k.jpg 2x" /></a></p>
<p>之前我在推特上有說過我不小心把我放 blog 的主機搞壞，當時就是用 pacman 更新過後，出現一些錯誤，我快速的重跑 <code>pacman -Syu</code> 然後就開始一直出現錯誤了，當時想說是因為我太久沒更新，然後有相依性錯誤造成系統幾乎爛掉，一度要放棄，不過因為網站相關的 instance 都還跑著，所以我就想說暫時放著，等有空把資料弄出來再重建系統，然後十一月中去了一趟新加坡，這趟行程要邊顧小孩其實很累，然後就在回來當天晚上就收到 Linode 的緊急維護，已經把我的 Linode 主機重開了，網站當然也死了，真的是晴天霹靂，不過實在太累了我也只能先放著不管。</p>
<p>過了幾天終於比較有力氣來看看看問題，我當時的狀況是，無法使用 pacman，然後更進一步發現是 curl 就死掉，curl 死掉會造成很多東西一起掛掉，像是 git、wget 也都掛了，結果我能使用的工具和手段就變的很少，總之先來看看錯誤訊息吧：</p>
<pre><code>/usr/lib/libcurl.so.4: undefined symbol: BrotliDecoderCreateInstance
</code></pre>
<p>由此可知基本上問題就是動態連結 Brotli 的 library 時出錯，我還記得我當初裝機器時，Archlinux 還沒有正式 Brotli 的套件，所以我還自己編譯了一版給 nginx 用，而我的 nginx 也是自己編譯的，沒想到不知不覺 Archlinux 已經有正式的 Brotli 套件，而且 curl 還相依於它。</p>
<p>接著我就開始各種嘗試，想辦法重新裝 Brotli 套件，curl 雖然不能動，但是我還可以用 scp 傳檔案上去，不過就算傳上去 pacman 也還是完全無法跑起來，即使我只是想要他安裝本地的檔案，而不是要連網路，然後我也去看了 <code>/use/local/</code> 裡面 brotli 套件的 header 檔案，查看內容，發現真的沒有 <code>BrotliDecoderCreateInstance</code>，不過這個 symbol 在 Brotli 的 repo 內是有的，而且已經存在了有四年之久，所以顯然，我系統內安裝的版本很有問題，雖然確定問題在哪，但是還是一直沒有解決方法，重裝套件需要 pacman，但是 pacman 需要修好 brotli 才能動，陷入死結當中，更糟的是，我在網路上搜尋就是找不到有一樣問題的人。</p>
<p>然後我就開始研究 pacman 掛掉要怎麼辦，找了許久終於找到有一個 <a href="https://github.com/chaitanyarahalkar/Pacman-Static">pacman-static</a> 的工具，是預先編譯好，並且是靜態連結的 pacman 執行檔，抓下來後發現真的可以用，真的是感動的痛哭流涕，然後我立馬執行 <code>pacman -Syu</code>，一切執行順利，感動QQ，然後我執行了 <code>curl</code> 想確認有沒有修好，結果我再次看到了那個一樣的，熟悉的錯誤訊息...</p>
<p>這時我百思不得其解，我用 pacman 看安裝的套件版本確實是新的，我去解開套件來看也是新的，但是我去系統的 <code>/usr/local/</code> 下看裡面的檔案卻是舊的，重新裝了很多次也都是一樣狀況，就這樣鬼打牆很久之後，我突然察覺，<code>/usr/local/</code> 下的東西，其實是我們手動編譯安裝的，也是路徑中優先權較高的，然後我在前面有提過，我很久以前有手動編譯安裝 Brotli 套件，終於，一切真相大白，我手動裝的時間點是五年前，所以該版本沒有 <code>BrotliDecoderCreateInstance</code>，然後 Archlinux 用的是四年前版本，所以系統中其他需要 Brotli 的東西都會因此而掛掉，解決方法就是把手動裝的全部砍光光就好了。</p>
<p>不過砍掉我手動編譯的 Brotli，也同時造成我的 nginx 再起不能，因為在設定檔內它是需要我手動編譯安裝的那那個套件，解決方法是很簡單，就把需要的 module 路徑改到 pacman 安裝的套件那邊，然後我的 nginx 就可以起來了，不過我的 blog 還是死的，非 blog 的部分倒是活著，我一開始想說是 php-fpm 的問題，看錯誤訊息發現有 permission 問題，就去改 socket file permisson 成 666，然後網站還是起不來，我研究了很久，想要看看 PHP 的錯誤訊息，但是一直看不到東西，也去看 nginx error log，journalctl 也是看沒錯誤，還以為 php-fpm 是死的，還用了</p>
<pre><code>&lt;? echo phpinfo(); ?&gt;
</code></pre>
<p>然後開瀏覽器看到原始碼直接回回來，搞了一陣子想起要改用 <code>&lt;?php</code>，改下去結果又發現一切正常，最後才發現，問題是因為我在用 pacman 更新整個系統時，把 PHP 7 升級到 8，然後我的程式碼裡面有個地方寫死大版號不對的話會回錯誤訊息，但是我沒有把錯誤訊息寫到 log 中，結果就造成我一直找不到問題點。</p>
<p>PHP 的問題解決後，我的 blog 就回到線上了，不過其實，這時候我的 mariadb 還是死的，透過 journalctl 看 log</p>
<pre><code>sudo journalctl -xeu mariadb.service
</code></pre>
<p>有一行寫著：</p>
<pre><code>Plugin 'InnoDB' registration as a STORAGE ENGINE failed.
</code></pre>
<p>一開始想說是安裝失敗，後來往上找發現還有另外一行：</p>
<pre><code>InnoDB: Upgrade after a crash is not supported. The redo log was created with MariaDB 10.4.8
</code></pre>
<p>意思就是如果你的 DB crash 後，沒有正常關閉的狀態下，去更新 mariadb，就會有這個錯誤，不過一開始我不以為意，因為我認為我只有 upgrade，但是不知道是何時 crash 過，後來回想，應該是 brotli 爛掉時，mariadb 就跟著起不來了，總之，這個問題的解決方法，就是退回舊的 10.4.8 然後重新啟動 DB，所以就研究了一下 Archlinux 怎樣安裝舊版的套件，基本上 pacman 是不能指定版本的，有兩個方法可以裝舊版，一個是透過系統內的 pacman cache，不過我之前在修理的時候已經清掉了，所以就只能從 <a href="https://archive.archlinux.org/packages/">Arch Linux Package Archive</a> 那邊下載特定版本的 package tar 檔案，下來用 <code>pacman -U</code> 安裝，然後因為有相依性問題，所以要把幾個需要的套件都抓下來，一起安裝：</p>
<pre><code>pacman -U mariadb-10.4.8-2-x86_64.pkg.tar.xz \
  mariadb-clients-10.4.8-2-x86_64.pkg.tar.xz \
  mariadb-libs-10.4.8-2-x86_64.pkg.tar.xz
</code></pre>
<p>反正如果啟動失敗，也會有訊息提示你要看 log，結果把 mariadb 三個都裝下去後還真的有問題，說找不到 openssl 1.1 的檔案，所以也去抓下來手動安裝：</p>
<pre><code>pacman -S openssl-1.1
</code></pre>
<p>至此，總算是修好了，接下來就是有時間要把我的 blog 系統容器化吧，有太多不是很好安裝的東西了。</p>
<p>PS. 這篇發的出去表示真的修好了。</p>
]]></description>
<link>https://blog.othree.net/log/2022/12/03/fix-my-archlinux/</link>
<guid>https://blog.othree.net/log/2022/12/03/fix-my-archlinux/</guid>
<category>unix</category>
<pubDate>Sat, 03 Dec 2022 00:38:10 +0800</pubDate>
</item>

<item>
<title>HTTP 103 Early Hints</title>
<description><![CDATA[<p>前幾天晚上前同事陶百貼了個 Tweet，說到 Chrome 要移除 HTTP/2 Server Push 了：</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">HTTP/2 PUSH is finally going away in Chrome 106: <a href="https://t.co/FFL8hmkRyf">https://t.co/FFL8hmkRyf</a><br /><br />HTTP 103 is the best way to early-hint out-of-band.<br /><br />Thanks to the community and teams that made this possible (standards teams for 103, CDNs for implementing, Net team, huge effort)</p>-- Patrick Meenan (@patmeenan) <a href="https://twitter.com/patmeenan/status/1559943970481913856?ref_src=twsrc%5Etfw">August 17, 2022</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>仔細看一下，發現原來大家用 Server Push 都還是為了提升網頁第一屏的速度，但是 Server Push 一直有<a href="https://www.fastly.com/blog/faster-websites-early-priority-hints#but-what-about-http/2-server-push">一些難解的問題</a>，像是不知道 client 端有沒有 cache，實作和支援比較麻煩，而 Chrome 要移除 Server Push 前，其實先實作了 <a href="https://datatracker.ietf.org/doc/html/rfc8297">RFC-8279 的
HTTP 103: Early Hints</a>，為的就要讓 Server Push 現在作的事情先有替代方案。</p>
<p>Early Hints 應該算是 Fastly 提出的，RFC 文件作者是 <a href="https://twitter.com/kazuho/">Kazuho Oku</a>，實際上應該也有其他 Fastly 的人參與構思和試驗，支援 Early Hints 的環境下，一個 HTTP request 看起來就像是下面這樣：</p>
<pre><code>Client request:

  GET / HTTP/1.1
  Host: example.com


Server response:

  HTTP/1.1 103 Early Hints
  Link: &lt;/style.css&gt;; rel=preload; as=style
  Link: &lt;/script.js&gt;; rel=preload; as=script

  HTTP/1.1 200 OK
  Date: Fri, 26 May 2017 10:02:11 GMT
  Content-Length: 1234
  Content-Type: text/html; charset=utf-8
  Link: &lt;/style.css&gt;; rel=preload; as=style
  Link: &lt;/script.js&gt;; rel=preload; as=script

  &lt;!doctype html&gt;
  [... rest of the response body is omitted from the example ...]
</code></pre>
<p>很特別的，就是在於有兩段 response，第一段就是 103 的 status code，然後內容就是 Link headers 了，接著才是常見的 200 回應，看到這邊，自然的出現第一個問題：現有的瀏覽器能相容嗎？</p>
<p>這個問題在 <a href="https://stackoverflow.com/questions/73320707/http-103-responses-what-happens-if-a-server-sends-a-103-early-hints-response-to/73320831#73320831">Stack Overflow 也有人問</a>，結果回答在 RFC 文件內其實就有，只不過是放在第三章的安全性那邊，我一開始也因為先跳過這章而沒發現，總之關於這個問題，就是如果是 HTTP/2 的話，就比較沒問題，HTTP/1.1 的話，理論上應該要可以相容（沒功能但是也不出錯），但是無法保證現在有在用的 HTTP/1.1 client 都有正確的處理 1xx response，所以比較建議是 HTTP/2 才回 103。</p>
<p>過了兩天後，我更仔細的研究一下，發現其實早在 HTTP/1.1 時，就有把 <a href="https://www.rfc-editor.org/rfc/rfc9110#section-15.2-3">1xx 的處理需求定義</a>好了：</p>
<blockquote>
<p>A client MUST be able to parse one or more 1xx responses received prior to a final response, even if the client does not expect one. A user agent MAY ignore unexpected 1xx responses.</p>
</blockquote>
<p>就是說早在 HTTP/1.1 時的設計，就允許 1xx 接 200 的回應，而且還應該要支援多個 1xx 回應，而最後的那個 200（其實是 2xx 到 5xx 都可以），則是稱為 final response，至於這處理的方式，在 WHATWG 的 fetch 的 4.7 章則有清楚的寫下流程，在該章節的第九項裡面的第五子項目，寫成程式碼大概長成：</p>
<pre><code class="language-js">while (true) {
  const response = await networkTransmit();
  const status = response.statusCode;
    
  if (status &gt;= 100 &amp;&amp; status &lt;= 199) {
    // handle 1xx response
    continue;
  } else {
    break;
  }
}

// handle final response
</code></pre>
<p>所以理論上，Early Hints 的設計在正確支援 HTTP/1.1 但是還沒有支援 Early Hints 的瀏覽器就應該要可以正常的略過，而不會把它當成是 final response。</p>
<p>解決完第一個問題後，接著來仔細的看看剛剛範例的 server response：</p>
<pre><code>HTTP/1.1 103 Early Hints
Link: &lt;/style.css&gt;; rel=preload; as=style
Link: &lt;/script.js&gt;; rel=preload; as=script

HTTP/1.1 200 OK
Date: Fri, 26 May 2017 10:02:11 GMT
Content-Length: 1234
Content-Type: text/html; charset=utf-8
Link: &lt;/style.css&gt;; rel=preload; as=style
Link: &lt;/script.js&gt;; rel=preload; as=script

&lt;!doctype html&gt;
[... rest of the response body is omitted from the example ...]
</code></pre>
<p>不知道會不會有人疑惑，為什麼不直接用 200 response 裡面回應的 Link header 就好了？其實我一開始也是這樣想，不過這完全是因為這個問題落入身為前端工程師的我的盲點之中，因為現在前端開發主流是 SPA，通常 HTTP server 回的就是一個靜態的 HTML 檔案，所以回應速度超快。不過，如果回應的 HTML 文件，是由程式語言動態生成的，或許還需要查詢一下資料庫之類的，那這個回應時間就會變慢了，而 HTTP 103 Early Hints 就是在這種狀態下用的，在你的 server 端程式開始處理 request 之前，就先丟 103 的 status code 和 Early Hints 的內容回給瀏覽器，然後才接著處理資料和生成 HTML 文件，這種情境下，Early Hints 就顯得比較有差異了。Nitropack 的<a href="https://nitropack.io/blog/post/early-hints">文章</a>就解釋的很清楚，還有附上詳細的說明圖。</p>
<p>相較於 Server Push，其實 Early Hints 的設計簡單很多，所有的傳輸還是從 client 端看有沒有 cache ，決定要不要發 request，而這種操作已經非常成熟（相較於 server push），相信很多地方可以直接使用現有的程式碼來實作，最大的隱憂，就只是不相容 HTTP/1.0，然後會擔心有 HTTP/1.1 的 client 端沒正確實作吧，畢竟 1xx 的處理機制雖然早早就設計好，但是實際上 1xx 有被廣泛使用也是這幾年的事。</p>
<p>目前 Chrome 是從 103 <a href="https://developer.chrome.com/blog/new-in-chrome-103/">開始支援 Early Hints</a> 的，並且預計在 106 <a href="https://developer.chrome.com/blog/removing-push/">正式移除 Server Push</a>，至於其他瀏覽器則是都還沒有支援， Firefox 是有計畫要支援，<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1407355">進度</a>有點緩慢就是。</p>
<p>最後，Fastly 其實有提供一個測試用的網站：<a href="https://early-hints.fastlylabs.com/">https://early-hints.fastlylabs.com/</a>，不過這個網站不是用來測試你的瀏覽器支不支援 Early Hints 的，而是用來測試先 103 然後接 200 的 response 會不會有非預期的問題（也就是相容性的測試），如果想要直接看看來回的內容，也可以直接用 curl：</p>
<pre><code class="language-sh">curl -v https://early-hints.fastlylabs.com
</code></pre>
]]></description>
<link>https://blog.othree.net/log/2022/08/23/http-103-early-hints/</link>
<guid>https://blog.othree.net/log/2022/08/23/http-103-early-hints/</guid>
<category>web</category>
<pubDate>Tue, 23 Aug 2022 22:27:35 +0800</pubDate>
</item>


</channel>
</rss>