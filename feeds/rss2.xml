<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>O3noBLOG</title>
<link>https://blog.othree.net/</link>
<description></description>
<copyright>Copyright 2017</copyright>
<lastBuildDate>Sat, 29 Apr 2017 22:58:39 +0800</lastBuildDate>
<generator>http://www.movabletype.org/?v=4.381</generator>
<docs>http://blogs.law.harvard.edu/tech/rss</docs> 


<item>
<title>日本自駕</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34028951701/" title="沖繩 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2805/34028951701_c6d1936940_b.jpg" width="1024" height="683" alt="沖繩" srcset="https://farm3.staticflickr.com/2805/34028951701_c6d1936940_b.jpg 1024w, https://farm3.staticflickr.com/2805/34028951701_5720ab1710_h.jpg 1600w" /></a></p>

<p>這篇想要記錄一下第一次去日本自駕，就前陣子去了沖繩一趟，當然就選擇租車自駕，這篇用條列式記錄一下：</p>

<ul>
<li>租車公司是 OTS，因為第一次的關係，所以就盡量走大眾路線</li>
<li>不過 OTS 因為比較大間，位置離機場也比較遠，其實比較花時間</li>
<li>租的車款是 Toyota C-HR，看到有特價加上早鳥，不過也還是比一般車款貴</li>
<li>不免俗的離開租車公司時要刷一下雨刷</li>
<li>大約第二天就不太有左右駕習慣問題了，回國後也沒有左右問題</li>
<li>沖繩比較偏遠，部分路段的路面狀況其實也不好</li>
<li>幾乎所有路口都可以右轉，有右轉道，可能是沖繩才這樣</li>
<li>晚上山路其實沒什麼路燈，交通號誌反光效果超強的，強到覺得會刺眼 <br />
不過一部份應該是因為車燈很亮，倒是號誌都很乾淨是真的</li>
<li>以後應該還想要東北、北海道也去試試看自駕</li>
</ul>

<p>針對 Toyota C-HR 的部分：</p>

<ul>
<li>後座空間真的小、後座車窗也小</li>
<li>四人三個行李箱有點勉強，後行李箱只能放兩個中 size 的行李箱 <br />
一大一中也不行，剩下一個大的是把後座一個位子拉倒才放進去</li>
<li>有個自動切換遠光燈（<a href="http://www.toyota-global.com/innovation/safety_technology/safety_technology/technology_file/active/ahb.html">AHB</a>）的功能，正確性很高，實在很方便</li>
<li>不過車門在開動車子後不會自動上鎖</li>
<li>開鎖的時候地上會有投影，有點騷包(?)</li>
<li>開起來感覺其實是還不錯啦</li>
</ul>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33201465513/" title="沖繩 okinawa by othree, on Flickr"><img src="https://farm3.staticflickr.com/2946/33201465513_939151304d_b.jpg" width="1024" height="683" alt="沖繩 okinawa, " srcset="https://farm3.staticflickr.com/2946/33201465513_939151304d_b.jpg 1024w, https://farm3.staticflickr.com/2946/33201465513_ea0cd7f8c5_h.jpg 1600w" /></a></p>
]]>
</description>
<link>https://blog.othree.net/log/2017/04/29/japan-self-drive/</link>
<guid>https://blog.othree.net/log/2017/04/29/japan-self-drive/</guid>
<category>diary</category>
<pubDate>Sat, 29 Apr 2017 22:58:39 +0800</pubDate>
</item>

<item>
<title>My First Contribution to Nginx</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/25580381505/" title="nginx conf by othree, on Flickr"><img src="https://farm2.staticflickr.com/1525/25580381505_0825ef9c24_b.jpg" width="570" height="427" alt="nginx conf" srcset="https://farm2.staticflickr.com/1525/25580381505_0825ef9c24_b.jpg 1024w" /></a></p>

<p>因為工作上的需要，所以其實我還蠻常會編輯 nginx configuration file 的，理所當然的編輯器是用 vim，然後就會對 nginx 設定檔的支援有意見，一般人用的 nginx 設定檔的 vim script 其實是 nginx repository 的 contrib 目錄裡面的那份，這份 vim script 其實本來也是獨立的，不過原作者好像把他捐進去 nginx 裡面，之後就一直都在裡面了，也因此之後更新就很不頻繁。</p>

<p>然後因為檔案都放在 nginx repository 裡面，Vim 要使用其實不太方便，所以 Github 上還看的到不少人單獨抽出來，我一開始也是 fork <a href="https://github.com/moskytw/nginx-contrib-vim">mosky</a> 的來用，後來就直接在<a href="https://github.com/othree/nginx-contrib-vim">自己的 repository</a> 上面修改了，改一陣子之後就開始想要推回 upstream，也就是 nginx 的程式庫，然後就開始了這段協工旅程(?)。</p>

<p>要發修改上 upstream，第一步自然是看一下<a href="http://nginx.org/en/docs/contributing_changes.html">如何貢獻</a>，節錄這邊幾個重點：</p>

<ol>
<li>用 <a href="http://mailman.nginx.org/mailman/listinfo/nginx-devel">nginx-devel</a> 這個 mailing list 做討論</li>
<li>發 patch 前有一些注意事項，不過我改 vim script 比較沒關係</li>
<li>Patch 也是用 email 發到 nginx-devel，有範例</li>
<li>推薦用 <a href="https://www.mercurial-scm.org/wiki/PatchbombExtension">patchbomb</a></li>
<li>要先簽 <a href="https://www.nginx.com/resources/wiki/contributing/cla/">CLA</a>（不過目前這條已經不見了，改成最後說發 patch 等於同意用他們專案的 LCIENSE）</li>
</ol>

<p>總之我就照這份，先去訂閱了 nginx-devel 觀察一陣子，然後就直接把我的<a href="http://mailman.nginx.org/pipermail/nginx-devel/2017-February/009489.html">修改</a>整個丟上去了，一開始是直接用 Gmail 發，把 patch 檔內容直接複製貼過去，產生 patch 檔的方法是：</p>

<pre><code>hg export &gt; something.patch
</code></pre>

<p><code>hg export</code> 會直接輸出最後一個 commit 的 patch 內容到 STDOUT，然後就直接用 Gmail 發過去，結果 review 的 <a href="http://mdounin.ru/">Maxim Dounin</a> 說他沒辦法 apply patch，可能是因為我的 mail client 的關係，建議我用 <a href="https://www.mercurial-scm.org/wiki/PatchbombExtension">patchbomb</a> 發，所以就研究搜尋了一下，發現他是直接發 email 的機制，所以要把帳號密碼都寫到設定內，找了一篇 Gmail 的<a href="http://blog.sidkalra.com/2009/02/using-gmail-with-hgs-patchbomb-extension/">設定範例</a>，搭配 Google account 的應用程式密碼，設定範例如下：</p>

<pre><code>[extensions]
hgext.patchbomb =

[email]
from=othree &lt;othree@gmail.com&gt;
to=nginx-devel@nginx.org
cc=othree@gmail.com
method=smtp

[smtp]
host=smtp.gmail.com
port=587
username=othree@gmail.com
password=[gmail_password]
tls=True
</code></pre>

<p>把這些資訊填入 <code>.hg/hgrc</code> 這個檔案內，然後就可以用 <code>hg email -o --test</code> 來測試看看，這個指令會把完整的原始信件內容，包括 header 等都顯示出來（丟到 STDOUT），如果正式要發就把 <code>--test</code> 拿掉就好了。</p>

<p>確認一切沒問題後，我就改用 patchbomb 發 patch 到 nginx-devel 了，結果還是被拒絕了，問題主要是這個 patch 一次修改太多，理想上應該是不同目的的修改放到不同 patch 內，當然這和我一開始的預想不一樣就是了，我一開始的想法是因為 contrib 這邊的東西，相對於 nginx 本體的原始碼來說比較次要，所以盡量減少 commit 數，其實如果我有先去問過應該是可以少繞這段路，總之，為了一個一個修改送出，我又開了一個 github repository，叫做 <a href="https://github.com/othree/nginx-contrib-vim-patch">nginx-contrib-vim-patch</a>，想要慢慢把我的 nginx-contrib-vim 內的更動搬過去，接著開始的，就是漫長的 review 和溝通了。</p>

<p>其實我完全沒想到 Maxim Dounin 會這麼認真的 review，不止會看我這樣改是要達到什麼目的，還有認真測試，結果被抓出一堆問題，雖然都是奇妙的 conf 寫法，合語法，但是應該不會有人這樣寫的 case，這些 case 我也開始慢慢收集到 github 上的 <a href="https://github.com/othree/nginx-conf-test">nginx-conf-test</a>，方便之後測試用，總之來回許久，終於有一部分比較簡單的東西先進去 nginx repository 了，然後我發現外部貢獻者都會在 <a href="https://nginx.org/en/CHANGES">change log</a> 那邊被感謝，我貢獻進去的目前應該都在 1.11.11 那版，其實只有把新的 directive 補上（core modules, 3rd party modules）和幾個 protocol 參數的 highlight，至於其他的修改還進不去，目前看起來會是一場長期抗戰，主要是因為 reviewer 對於期望的目標和我不一樣，目前大概會維持兩個版本吧，一邊弄<a href="https://github.com/othree/nginx-contrib-vim">自己希望的</a>，一邊抽東西送回去 upstream，不得不說主事者控制太緊會讓貢獻者動力被削減不少。</p>

<p>貢獻 nginx 的過程讓我體會到以前的開源協做的模式（應該是吧？），用 mailing list 溝通，發 Patch、code review、做討論，這些點來看，nginx 的流程其實是非常老派，和現在用 Github 做溝通、協做 的流程差很大，門檻也高不少，當然這不一定是壞事，還是要看專案性質，在 Github 這類平台上做這些協做流程的話，門檻降低了，其實可能隨之而來的問題就是太多人進來造成貢獻品質落差很大，反而會吃掉主力人員的時間，剛好今天也看到知乎上有一篇「<a href="https://www.zhihu.com/question/36292298/answer/160028010">維護一個大型開源專案是怎樣的體驗？</a>」，裡面就有提到 VSCode 的狀況，變成還需要排人專門處理 issue 和 PR，感覺就很可怕。</p>

<p>順帶一題，nginx 的固定貢獻者當中不少中國人啊。</p>
]]>
</description>
<link>https://blog.othree.net/log/2017/04/26/first-contribution-to-nginx/</link>
<guid>https://blog.othree.net/log/2017/04/26/first-contribution-to-nginx/</guid>
<category>unix</category>
<pubDate>Wed, 26 Apr 2017 14:35:29 +0800</pubDate>
</item>

<item>
<title>日本跨年</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32146540906/" title="八坂神社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/470/32146540906_eb9801be18_b.jpg" width="1024" height="683" alt="八坂神社, " srcset="https://farm1.staticflickr.com/470/32146540906_eb9801be18_b.jpg 1024w, https://farm1.staticflickr.com/470/32146540906_8915765235_h.jpg 1600w" /></a></p>

<p>去年年底臨時冒出了個去日本關西跨年的行程，由於之前有聽聞日本新年可能會變空城，所以就認真的研究了一下行程，主要擔心的是 12/31 和 1/1 兩天，這趟住的地點是在大阪，考慮了幾個行程，其中 12/31 的選項是：</p>

<ul>
<li>晚上早點買超市的晚餐回飯店看紅白，要跨年再看要不要去神社參拜</li>
<li>去京都一天，因為 12/31 到 1/1 終夜交通不會中斷，所以還可以考慮跨年參拜完才回來</li>
</ul>

<p>1/1 則是：</p>

<ul>
<li>環球影城玩整天</li>
<li>去看還很白的姬路城，1/1 有特別免費開放</li>
</ul>

<p>後來的決定是 12/31 去京都一天，不過結果沒待到跨年，大概十二點前就回到大阪了，然後 1/1 去姬路城，因為環球影城 1/1 預期人會很多，連 pass 都買不到了，加上以後來應該也還不會有損失，但是姬路城應該只會越來越不白，不過後來才發現環球影城有顆金氏世界記錄的<a href="https://twitter.com/hashtag/USJ%E3%83%A9%E3%82%B9%E3%83%88%E3%83%84%E3%83%AA%E3%83%BC?src=hash">聖誕樹</a> 最後一年展出...</p>

<p>總之，以下是 12/31 的清水寺：</p>
]]><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31374251433/" title="清水寺 by othree, on Flickr"><img src="https://farm1.staticflickr.com/455/31374251433_6516d8d58c_b.jpg" width="1024" height="683" alt="清水寺" srcset="https://farm1.staticflickr.com/455/31374251433_6516d8d58c_b.jpg 1024w, https://farm1.staticflickr.com/455/31374251433_0e5c7490cb_h.jpg 1600w" /></a></p>

<p>還有整修到一半的地方可以拍：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31343174914/" title="清水寺 by othree, on Flickr"><img src="https://farm1.staticflickr.com/681/31343174914_1c15753116_b.jpg" width="1024" height="683" alt="清水寺, " srcset="https://farm1.staticflickr.com/681/31343174914_1c15753116_b.jpg 1024w, https://farm1.staticflickr.com/681/31343174914_f777bcf9e3_h.jpg 1600w" /></a></p>

<p>二年坂、三年坂：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31374231273/" title="京都 by othree, on Flickr"><img src="https://farm1.staticflickr.com/372/31374231273_9d0dd55e07_b.jpg" width="1024" height="683" alt="京都, " srcset="https://farm1.staticflickr.com/372/31374231273_9d0dd55e07_b.jpg 1024w, https://farm1.staticflickr.com/372/31374231273_ae454b0cb8_h.jpg 1600w" /></a></p>

<p>人是很多，不過好像也沒比櫻花季多就是，午餐就在這邊路上的茶寮都路里吃的，沿路還買了不少東西吃，八坂神社那邊也不少攤販。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32146503696/" title="八坂神社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/632/32146503696_ebdb936c70_b.jpg" width="1024" height="683" alt="八坂神社, " srcset="https://farm1.staticflickr.com/632/32146503696_ebdb936c70_b.jpg 1024w, https://farm1.staticflickr.com/632/32146503696_a86795c18c_h.jpg 1600w" /></a></p>

<p>然後很多車站都有貼當天限定的終夜電車時刻表，下面是在稻荷大社拍的：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31809406240/" title="京都 by othree, on Flickr"><img src="https://farm1.staticflickr.com/769/31809406240_89f640caf8_b.jpg" width="1024" height="683" alt="京都, " srcset="https://farm1.staticflickr.com/769/31809406240_89f640caf8_b.jpg 1024w, https://farm1.staticflickr.com/769/31809406240_679d92aeb9_h.jpg 1600w" /></a></p>

<p>還準備了臨時入口要應付人潮：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32184301305/" title="伏見稻荷大社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/259/32184301305_9297a52a44_b.jpg" width="1024" height="683" alt="伏見稻荷大社, " srcset="https://farm1.staticflickr.com/259/32184301305_9297a52a44_b.jpg 1024w, https://farm1.staticflickr.com/259/32184301305_45cbb30bd6_h.jpg 1600w" /></a></p>

<p>不過我們去的時間還蠻早的，所以還沒啟用，倒是有些攤位都已經開張了：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31809385180/" title="伏見稻荷大社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/760/31809385180_16ea7bf524_b.jpg" width="1024" height="683" alt="伏見稻荷大社, " srcset="https://farm1.staticflickr.com/760/31809385180_16ea7bf524_b.jpg 1024w, https://farm1.staticflickr.com/760/31809385180_20fa389ed0_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32066349271/" title="伏見稻荷大社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/685/32066349271_9eaa940677_b.jpg" width="1024" height="683" alt="伏見稻荷大社, " srcset="https://farm1.staticflickr.com/685/32066349271_9eaa940677_b.jpg 1024w, https://farm1.staticflickr.com/685/32066349271_70fa8d00ae_h.jpg 1600w" /></a></p>

<p>特別要說這個就是所謂的厚切牛舌：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31343022084/" title="伏見稻荷大社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/261/31343022084_14ba10cdbb_b.jpg" width="1024" height="683" alt="伏見稻荷大社, " srcset="https://farm1.staticflickr.com/261/31343022084_14ba10cdbb_b.jpg 1024w, https://farm1.staticflickr.com/261/31343022084_665fcb63a8_h.jpg 1600w" /></a></p>

<p>烤好的：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32066327651/" title="伏見稻荷大社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/634/32066327651_f573b06301_b.jpg" width="1024" height="683" alt="伏見稻荷大社, " srcset="https://farm1.staticflickr.com/634/32066327651_f573b06301_b.jpg 1024w, https://farm1.staticflickr.com/634/32066327651_de5f4d1bfc_h.jpg 1600w" /></a></p>

<p>要回大阪前，發現平常往觀光區（清水寺）的那排公車站，全部變成往北野天滿宮的專車：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31342958224/" title="京都 by othree, on Flickr"><img src="https://farm1.staticflickr.com/491/31342958224_41f40fd676_b.jpg" width="1024" height="683" alt="京都, " srcset="https://farm1.staticflickr.com/491/31342958224_41f40fd676_b.jpg 1024w, https://farm1.staticflickr.com/491/31342958224_60a74a1982_h.jpg 1600w" /></a></p>

<p>據說北野天滿宮的新年參拜人潮是全日本最多的，看來所言不假。</p>

<p>然後是 1/1 的姬路，雖然百貨商場都沒開，不過商店街還是有些店面和吃的有開，而且挑到還不錯吃的穴子魚專門店，<a href="http://www.himeji-anago-iccyoura.com/">一張羅</a>：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32060711152/" title="姬路 by othree, on Flickr"><img src="https://farm1.staticflickr.com/441/32060711152_a8487254e4_b.jpg" width="1024" height="683" alt="姬路, " srcset="https://farm1.staticflickr.com/441/32060711152_a8487254e4_b.jpg 1024w, https://farm1.staticflickr.com/441/32060711152_80efe75024_h.jpg 1600w" /></a></p>

<p>姬路城城區很大，看起來保存的很完整，從車站出來就看的到，很漂亮：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31833769060/" title="姬路城 by othree, on Flickr"><img src="https://farm1.staticflickr.com/303/31833769060_d804c1c92b_b.jpg" width="1024" height="683" alt="姬路城, " srcset="https://farm1.staticflickr.com/303/31833769060_d804c1c92b_b.jpg 1024w, https://farm1.staticflickr.com/303/31833769060_351363a411_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32171317826/" title="姬路城 by othree, on Flickr"><img src="https://farm1.staticflickr.com/637/32171317826_e1ed4da92b_b.jpg" width="1024" height="683" alt="姬路城, " srcset="https://farm1.staticflickr.com/637/32171317826_e1ed4da92b_b.jpg 1024w, https://farm1.staticflickr.com/637/32171317826_c076c179ab_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31368031054/" title="姬路城 by othree, on Flickr"><img src="https://farm1.staticflickr.com/631/31368031054_aae9f81d44_b.jpg" width="1024" height="683" alt="姬路城, " srcset="https://farm1.staticflickr.com/631/31368031054_aae9f81d44_b.jpg 1024w, https://farm1.staticflickr.com/631/31368031054_03f7e53465_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31399045233/" title="姬路城 by othree, on Flickr"><img src="https://farm1.staticflickr.com/721/31399045233_f8c12f10b4_b.jpg" width="1024" height="683" alt="姬路城, " srcset="https://farm1.staticflickr.com/721/31399045233_f8c12f10b4_b.jpg 1024w, https://farm1.staticflickr.com/721/31399045233_f8524d845c_h.jpg 1600w" /></a></p>

<p>不過天守閣我就覺得沒這麼值得了，一來當天免費，所以排隊的人很多，花了很多時間在這，二來上去之後，窗戶的鐵網格子超小的，看外面的東西都覺得很受干擾：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31399067753/" title="姬路城 by othree, on Flickr"><img src="https://farm1.staticflickr.com/665/31399067753_d268766291_b.jpg" width="1024" height="683" alt="姬路城, " srcset="https://farm1.staticflickr.com/665/31399067753_d268766291_b.jpg 1024w, https://farm1.staticflickr.com/665/31399067753_67e151a152_h.jpg 1600w" /></a></p>

<p>回到大阪後發現 Yodobashi 梅田有開，所以晚餐就在那邊解決，順便逛了一下，還買到九折的 iTunes 點數（剛好有活動），就這樣順利的度過了 1/1，然後 1/2 開始各家百貨和商店就都開始營業了，到處都是福袋，日本人也都全部出來採買，看到比較特別的像是麵包店的、Mister Donut，還有 Pokemon Center 等都有，不過這次是都沒買啦，小可惜。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31399160683/" title="姬路 by othree, on Flickr"><img src="https://farm1.staticflickr.com/402/31399160683_35252ba95d_b.jpg" width="1024" height="683" alt="姬路, " srcset="https://farm1.staticflickr.com/402/31399160683_35252ba95d_b.jpg 1024w, https://farm1.staticflickr.com/402/31399160683_edcc508d72_h.jpg 1600w" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31418206723/" title="Pokemon Center by othree, on Flickr"><img src="https://farm1.staticflickr.com/372/31418206723_715d2f3017_b.jpg" width="1024" height="683" alt="Pokemon Center, " srcset="https://farm1.staticflickr.com/372/31418206723_715d2f3017_b.jpg 1024w, https://farm1.staticflickr.com/372/31418206723_a1ee511845_h.jpg 1600w" /></a></p>
]]></description>
<link>https://blog.othree.net/log/2017/04/11/japan-new-year/</link>
<guid>https://blog.othree.net/log/2017/04/11/japan-new-year/</guid>
<category>diary</category>
<pubDate>Tue, 11 Apr 2017 22:06:08 +0800</pubDate>
</item>

<item>
<title>GitHub Flavored Markdown 標準規範</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/15576500626/" title="Github Markdown Cheat Sheet by othree, on Flickr"><img src="https://farm6.staticflickr.com/5599/15576500626_b56732d883_b.jpg" width="1024" height="683" alt="Github Markdown Cheat Sheet" srcset="https://farm6.staticflickr.com/5599/15576500626_b56732d883_b.jpg 1024w, https://farm6.staticflickr.com/5599/15576500626_e0027ae0fb_h.jpg 1600w" /></a></p>

<p>前陣子看到 DK <a href="https://blog.gslin.org/archives/2017/03/16/7187/">提到</a> GitHub 的 Markdown：<a href="https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown">GitHub Flavored Markdown</a> <a href="https://githubengineering.com/a-formal-spec-for-github-markdown/">發表正式的 spec</a> 了，當時有大概看了一下內容，不過昨天才有空寫出來（然後今天也看到碼天狗有提到這件事），基本上這份 <a href="https://github.github.com/gfm/">spec</a> 是基於 <a href="http://commonmark.org/">CommonMark</a> 的，只是多了一些語法，包括：</p>

<ul>
<li>刪除線</li>
<li>表格</li>
<li><a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments">待辦清單</a></li>
<li>自動連結（包括網址和 email）</li>
<li>Raw HTML 黑名單：
<ul>
<li><code>&lt;title&gt;</code></li>
<li><code>&lt;textarea&gt;</code></li>
<li><code>&lt;style&gt;</code></li>
<li><code>&lt;xmp&gt;</code></li>
<li><code>&lt;iframe&gt;</code></li>
<li><code>&lt;noembed&gt;</code></li>
<li><code>&lt;noframes&gt;</code></li>
<li><code>&lt;script&gt;</code></li>
<li><code>&lt;plaintext&gt;</code></li>
</ul></li>
</ul>

<p>新增的部分都有很顯眼的標註，其中 Raw HTML 黑名單的 HTML 標籤的 <code>&lt;</code> 都會被轉成 entity，基本上看起來是安全性考量，不過不太確定為何有些很老的標籤出現，感覺上和安全性比較沒關係。另外我還注意到 <a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/#using-emoji">emoji</a>和<a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests">reference link</a>沒包含在這份 spec 內，emoji 或許是因為實做上的問題，轉成 unicode 字元相容性不好，要用 img 會有不少相依性問題，而 reference link 大概是因這是比較針對 GitHub 網站的特性。</p>

<p>GitHub 轉換 Markdown 引擎的過程也有在文中說明，這次 Markdown 引擎是從 <a href="https://github.com/vmg/sundown">Sundown</a>（更早是 Ruby 實做的 <a href="https://github.com/vmg/redcarpet">redcarpet</a> 的樣子）改成 <a href="https://github.com/jgm/cmark">cmark</a>，當然為了這些新語法，他們 fork 了<a href="https://github.com/github/cmark">自己的版本出來</a>，然後在真的套上 GitHub 本站前，有先做過測試，結果發現有 1% 的文件（所有的 Markdown 文件，包括 user comment、issue...etc）會受到影響，而且判斷方法不是單純 diff 輸出結果，而是 diff 正規化過的 HTML 文件樹，不過即使只有 1% 的文件，那也是很大量，後來他們又更仔細分析，發現會受影響的幾乎都是 issue、user comment 之類的內容，是存放在 GitHub 資料庫內的，而不是 repository 內的文件，所以他們可以直接修改，如果是 repository 內的文件，因為要看 sha1 hash，所以是改不了的，後來他們魔改 Sundown，讓它吃舊文件然後吐出符合新 spec 的 Markdown 文件，接著跑了幾天把全部需要修改的舊文件（1%）都轉完，所以現在除了少數文件外，剩下的文件都是符合 GFM spec 的文件了。</p>
]]>
</description>
<link>https://blog.othree.net/log/2017/03/27/github-flavored-markdown/</link>
<guid>https://blog.othree.net/log/2017/03/27/github-flavored-markdown/</guid>
<category>web</category>
<pubDate>Mon, 27 Mar 2017 20:41:56 +0800</pubDate>
</item>

<item>
<title>GitHub 提供專案授權簡介與概要</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32722736844/" title="Do What The F*ck You Want To Public License by othree, on Flickr"><img src="https://farm3.staticflickr.com/2898/32722736844_c977dc8ff8_b.jpg" width="1024" height="595" alt="Do What The F*ck You Want To Public License, " srcset="https://farm3.staticflickr.com/2898/32722736844_c977dc8ff8_b.jpg 1024w, https://farm3.staticflickr.com/2898/32722736844_e56ae26374_h.jpg 1600w" /></a></p>

<p>大概上週看到有人在 Twitter 講到 GitHub 現在會在專案上顯示該專案所使用授權條款的摘要，長的像是上面那樣，官方也有發表<a href="https://github.com/blog/2335-open-source-license-descriptions-and-metadata">公告</a>，其實這個修改是結合之前的<a href="https://github.com/blog/2252-license-now-displayed-on-repository-overview">授權偵測</a>和 <a href="https://choosealicense.com/">Choose a License</a>。</p>

<p>Choose a License 也是一個 GitHub 的附加服務，用來協助使用者挑選適合的授權條款，現在在 GitHub 建立新的專案時，可以順便初始化專案，包括建立 README、產生 <code>.gitignore</code> 和挑選要使用的授權條款：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33495590202/" title="Initialize Project by othree, on Flickr"><img src="https://farm4.staticflickr.com/3953/33495590202_f04d677f58_b.jpg" width="722" height="141" alt="Initialize Project" srcset="https://farm4.staticflickr.com/3953/33495590202_f04d677f58_b.jpg 1024w" /></a></p>

<p>授權條款旁邊的 i 點下去其實就會送到 Choose a License 網站去了（不過兩邊沒有連動接起來就是），Choose a License 網站則針對每種條款都一份重點摘要，分為 Permissions、Conditions 和 Limitations 三個區塊，分別條列出該條款可以做什麼（例如商業使用）、有什麼條件（例如需要也使用相同條款授權）和條款的限制（例如免責），而現在 GitHub 上顯示的條款摘要其實就是這邊的資訊搬過來的：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33495653292/" title="Choose a License by othree, on Flickr"><img src="https://farm4.staticflickr.com/3770/33495653292_b2822ac569_b.jpg" width="1024" height="601" alt="Choose a License" srcset="https://farm4.staticflickr.com/3770/33495653292_b2822ac569_b.jpg 1024w, https://farm4.staticflickr.com/3770/33495653292_0a6bd0bf6e_h.jpg 1600w" /></a></p>

<p>Choose a License 網站其實有很多授權條款的整理，而不是只有常見的幾種，可以看 <a href="https://choosealicense.com/appendix/">appendix</a> 頁面有完整清單，可惜裡面沒有 <a href="https://github.com/vim/vim/blob/master/runtime/doc/uganda.txt">Vim License</a>，另外特別想說的是 GitHub 自己（應該沒錯）提供的 <a href="https://choosealicense.com/licenses/unlicense/">Unlincense</a>，相似於創作領域的 <a href="http://creativecommons.tw/cc0">CC0</a>，就類似丟到 Public Domain 的意思，不過保留了免責條款，講到免責聲明，就還要順便提一下 <a href="https://choosealicense.com/licenses/wtfpl/">WTFPL</a>，它其實也是超自由的 License，差別就是連免責聲明都沒，其實是更加接近丟到 Public Domain 吧？</p>

<p>最後想說的是 GitHub 用來判斷專案使用的授權，用的是 <a href="https://github.com/benbalter/licensee">licensee</a> 這個 Ruby Gem，看起來完全就是為了做這些事情寫的，我看好像也沒其他類似功能的專案，作者 Ben Balter 其實也是 GitHub 員工。</p>
]]>
</description>
<link>https://blog.othree.net/log/2017/03/26/github-license-summary/</link>
<guid>https://blog.othree.net/log/2017/03/26/github-license-summary/</guid>
<category>web</category>
<pubDate>Sun, 26 Mar 2017 20:16:11 +0800</pubDate>
</item>

<item>
<title>Gitdags, Git 示意圖工具</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33595934396/" title="cherrypick-2 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2881/33595934396_3da08a8f62_b.jpg" width="1024" height="384" alt="cherrypick-2" srcset="https://farm3.staticflickr.com/2881/33595934396_3da08a8f62_b.jpg 1024w, https://farm3.staticflickr.com/2881/33595934396_96d863038c_h.jpg 1600w" /></a></p>

<p>最近因緣際會，需要畫些圖來教 Git，不是要拿真的 repository 來畫，當然可以用繪圖軟體刻，不過時間不夠，而且覺得應該之前就有人有需求了，應該有現成的工具，所以我就找了一下看有沒有方便的工具可以畫，結果很幸運的，沒多久就找到了 <a href="https://github.com/Jubobs/gitdags">gitdags</a> 這個 Latex 的 package，專門就是用來畫教學用的 Git 圖，而且圖的樣版還蠻接近 Pro Git v1 書內的<a href="https://git-scm.com/book/en/v1/Git-Branching-Basic-Branching-and-Merging">樣子</a>（v2 的樣版改的更<a href="https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging">簡潔</a>了），看起來還蠻 ok 的，它是基於 <a href="http://www.texample.net/tikz/">TikZ</a> 這個 package，是 Latex 上的繪圖 library，可以產生出向量格式的圖，所以我可以用 pdf2latex 先轉成 pdf，pdf 檔案就可以給 Keynote 用了，不過要通用一點，還可以用 pdf2svg 生成 SVG 圖檔，SVG 內容看起來也還蠻乾淨的，tex 文件內容大概像這樣：</p>

<pre><code>\documentclass[preview]{standalone}
\usepackage{gitdags}

\begin{document}
    \centering
    \begin{tikzpicture}
      % Commit DAG
      \gitDAG[grow right sep = 2em]{
        0 -- {
          1 -- 2 -- 3 -- 4,
          A
        }
      };
      \gitbranch
        {master}     % node name and text 
        {above=of 4} % node placement
        {4}          % target
      \gitbranch
        {for-rebase} % node name and text 
        {below=of A} % node placement
        {A}          % target
      \gitHEAD
        {below=of for-rebase} % node placement
        {for-rebase} 
      \end{tikzpicture}
\end{document}
</code></pre>

<p>產生的圖片就像是最上面的圖，gitdags 是用 <a href="http://ethanschoonover.com/solarized">solarized</a> 來配色，我覺得顏色不是很精緻，不過還可以接受，另外我有自己調整一版黑底用的，把線條和邊框改淺，還有把 commit node 的形狀調整了一下，也放在 <a href="https://github.com/othree/gitdags">GtiHub 上</a>。使用 gitdags 的過程，比較大的問題就是文件和範例不足，所以我把自己畫的部分<a href="https://github.com/othree/git-graph">全部丟上 GitHub</a> 了，後來發現原作者也有<a href="https://github.com/Jubobs/talks/tree/e1cfbd07587ac90c1602a6901260a798b858e727/corkdev-oct2015">一些 sample</a> 可以參考，作者自己兩年前是說有要寫文件和準備範例，不過後來就都沒動靜就是了。如果要在 Mac 上處理 Latex 文件，一般就是建議直接裝 <a href="http://www.tug.org/mactex/">MacTeX</a> 就好，不過 gitdags 沒包在裡面，所以要自己安裝，或是把 sty 檔案和 Tex 文件放在同一個目錄也可以。</p>

<p>不過用 pdf2svg 產生的 SVG 檔我用 AI 要編輯時會發現有些問題，我有另外試著用 <a href="https://inkscape.org/en/">inkscape</a> 做轉換，出來的文字大小是正常的，不過看起來字形和間距不太正確就是，如果要轉 PNG 之類的非向量格式是可以直接用 Preview 或是 convert 轉換，不過解析度要設定一下，通常預設的 150，輸出的圖片大小是不太夠就是了，上面那張我是設定 450。</p>

<p>最後，gitdags 這名字裡面的 dag 應該是<a href="http://www.csie.ntnu.edu.tw/~u91029/DirectedAcyclicGraph.html">有向無環圖</a>（Directed Acyclic Graph）的意思，這種圖剛好可以用來描述 Git 裡面 commit、branch 等東西之間的關係。</p>
]]>
</description>
<link>https://blog.othree.net/log/2017/03/25/gitdags-git/</link>
<guid>https://blog.othree.net/log/2017/03/25/gitdags-git/</guid>
<category>software</category>
<pubDate>Sat, 25 Mar 2017 21:49:34 +0800</pubDate>
</item>

<item>
<title>Docker 雜談</title>
<description><![CDATA[<p>最近使用的一些感想和疑問</p>

<ul>
<li><code>--name</code> 自動會變 network 內的 hostname，蠻方便</li>
<li>Image build 失敗，還是會產生一個東西在那邊，要 rm 掉才能重新 build...</li>
<li>Service 還不支援 update 修改 network</li>
<li>DB container 的資料要開 volume 掛比較保險（免得不小心砍到 container）</li>
<li>在多個 node 上開 replica，掛 volume 的話都是在該 node 上找，目前似乎沒有透過網路共享 volume container 這種事</li>
<li>很多服務的官方 docker 都是用環境變數做設定，不知道是不是本來就有的慣例</li>
<li>一直更新 registry 上的 image 好像會越來越多垃圾，不知道是不是有清理機制</li>
<li>整體而言，我覺得 docker service 介面是個很容易讓 fat finger 造成服務爆炸設計，不過架構規劃的好的話，應該不會太難修復就是</li>
</ul>
]]>
</description>
<link>https://blog.othree.net/log/2017/03/18/docker/</link>
<guid>https://blog.othree.net/log/2017/03/18/docker/</guid>
<category>unix</category>
<pubDate>Sat, 18 Mar 2017 23:46:02 +0800</pubDate>
</item>

<item>
<title>Guetzli: A New Open Source JPEG Encoder</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33444227946/" title="Guetzli by othree, on Flickr"><img src="https://farm4.staticflickr.com/3665/33444227946_858cf890f3_b.jpg" width="773" height="699" alt="Guetzli" srcset="" /></a></p>

<p>今天一早起來就看到 Google <a href="https://research.googleblog.com/2017/03/announcing-guetzli-new-open-source-jpeg.html">發表</a>的新的 JPEG 壓縮程式，叫 Guetzli（一種瑞士餅乾），這是 Google 繼 <a href="https://github.com/google/zopfli">Zopfli</a>、<a href="https://github.com/google/brotli">Brotli</a> 之後，算是第三個比較容易被大家廣為使用的新的節省網路流量的工具，這次主要針對 JPEG 圖片格式，和之前 Mozilla 的 <a href="https://github.com/mozilla/mozjpeg">mozjpeg</a> 的作法一樣，保持目前 JPEG decoder 的相容性，然後看能加強 JPEG 圖檔到什麼程度，我稍微測試了一下，結果還不錯，目前還沒有 homebrew formula，如果要自己 build 的可以參考<a href="https://agileblaze.com/google-guetzli-image-compression-setup-on-macos/">這篇</a>，基本上就是用 bazel 來編譯，然後可能會需要先裝 libpng 和 gflags，這兩個可以用 homebrew 安裝：</p>

<pre><code>brew install libpng gflags
</code></pre>

<p>然後裝 <a href="https://bazel.build/">bazel</a></p>

<pre><code>brew install bazel
</code></pre>

<p>然後到專案目錄下執行編譯指令：</p>

<pre><code>bazel build -c opt //:guetzli
</code></pre>

<p>結果就會把執行檔放到 <code>bazel-bin/guetzli</code> 這位置，就可以拿來用了，不過其實官方 GitHub repo 上的 <a href="https://github.com/google/guetzli/releases">release</a> 那邊就有編譯好的版本，抓下來用 Terminal 執行 <code>chmod +x</code> 也可以用（我是自己丟到 <code>/usr/local/bin/</code> 裡面），指令很簡單，可以加上 <code>--quality</code>，預設是 95，不過最小只能 84，設更小的值會跟你說，真的想要的話自己去改原始碼...</p>

<p>速度就如大家所說的，和其它工具比起來真的慢很多，感覺是有一些 recursive 找最佳解的過程，輸出的結果我覺得最讓人印象深刻的是對於純色色塊的處理，也比 mozjpeg 好上不少，輸出檔案的大小不一定會是最小的，不過品質好很多，差異是達到我可以放棄這點容量差距，而寧願要這畫質改進，然後就是 Quality 100 可能會體積暴漲，我隨便測試了幾張圖片，看起來設到 90 品質就蠻不錯的，看來目前通行的圖片最佳化工具又要有一輪更新了。</p>
]]>
</description>
<link>https://blog.othree.net/log/2017/03/17/guetzli-new-os-jpeg-encoder/</link>
<guid>https://blog.othree.net/log/2017/03/17/guetzli-new-os-jpeg-encoder/</guid>
<category>web</category>
<pubDate>Fri, 17 Mar 2017 12:57:34 +0800</pubDate>
</item>

<item>
<title>Visual Studio Code Copy with Syntax Highlighting</title>
<description><![CDATA[<p>今天 <a href="https://code.visualstudio.com/">Visual Studio Code</a> 出了 1.10，包含了很多讓人期待的功能，其中讓我比較注意到的是 <a href="https://code.visualstudio.com/updates/v1_10#_copy-with-syntax-highlighting">Copy with syntax highlighting</a>，這在 Mac 上可是讓人等了很久，我的主要目的是做投影片時，可以不用再特別處理程式碼的顏色了，以前只有 <a href="https://www.codingmonkeys.de/subethaedit/">SubEthaEdit</a> 有支援，不過這款軟體真的蠻貴的，好不容易有免費版的軟體支援了，就趕快來測試一下，基本上步驟就是，先挑選一下顏色主題，看你的投影片背景是亮的還是暗的，選擇 Menubar 最左邊的 Code > 喜好設定 > 色彩布景主題，快速鍵是 <code>CMD + K</code>, <code>CMD + T</code>：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33159251516/" title="VSCode Copy with Sytax Highlighting by othree, on Flickr"><img src="https://farm4.staticflickr.com/3672/33159251516_61635294c4_b.jpg" width="1024" height="768" alt="VSCode Copy with Sytax Highlighting" srcset="https://farm4.staticflickr.com/3672/33159251516_bacbf3f4f1_k.jpg 2x" /></a></p>

<p>選好程式碼，然後輸入 <code>CMD + Shift + P</code> 叫出命令面板，打入 <code>copysyn</code> 就可以找到 <strong>Copy with syntax highlighting</strong>：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33159251456/" title="VSCode Copy with Sytax Highlighting by othree, on Flickr"><img src="https://farm3.staticflickr.com/2838/33159251456_4946fca7f0_b.jpg" width="1024" height="768" alt="VSCode Copy with Sytax Highlighting" srcset="https://farm3.staticflickr.com/2838/33159251456_406eb36017_k.jpg 2x" /></a></p>

<p>去 Word 貼上就可以了：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33159251396/" title="VSCode Copy with Sytax Highlighting by othree, on Flickr"><img src="https://farm1.staticflickr.com/608/33159251396_27f9174f1f_b.jpg" width="640" height="787" alt="VSCode Copy with Sytax Highlighting" srcset="" /></a></p>

<p>不過我的目標其實是要貼上 Keynote，結果測試後發現貼到 Keynote 會沒有樣式，但是如果從 Word 那邊重新複製一次，就可以正確的貼到 Keynote 了：</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33159251346/" title="VSCode Copy with Sytax Highlighting by othree, on Flickr"><img src="https://farm1.staticflickr.com/749/33159251346_bfcf683406_b.jpg" width="875" height="711" alt="VSCode Copy with Sytax Highlighting" srcset="" /></a></p>

<p>這個問題我已經去 GitHub 開 <a href="https://github.com/Microsoft/vscode/issues/21686#issuecomment-283558495">issue</a> 了，看起來是因為只有提供 HTML 內容而不是 RTF 內容的關係，希望之後能修正，就可以更方便的使用了。</p>
]]>
</description>
<link>https://blog.othree.net/log/2017/03/02/vscode-copy-with-syntax/</link>
<guid>https://blog.othree.net/log/2017/03/02/vscode-copy-with-syntax/</guid>
<category>mac</category>
<pubDate>Thu, 02 Mar 2017 23:59:31 +0800</pubDate>
</item>

<item>
<title>網路發佈資料之最佳實踐</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32951614622/" title="Data on the Web Best Practices by othree, on Flickr"><img src="https://farm3.staticflickr.com/2901/32951614622_395e8d1b32_b.jpg" width="1024" height="576" alt="Data on the Web Best Practices" srcset="https://farm3.staticflickr.com/2901/32951614622_395e8d1b32_b.jpg 1024w" /></a></p>

<p>前幾天 W3C 發佈了這份文件 <a href="https://www.w3.org/TR/dwbp/">Data on the Web Best Practices</a> （DWBP），內容是關於在網路上發佈資料時的最佳實踐（公開或非公開的都適用），讓我想到了之前的 g0v summit 羅佩琪分享提到的一個重點，開放是有成本的，當時演講的影片：</p>

<div class="embed_16_9">
<iframe width="853" height="480" src="https://www.youtube.com/embed/aIuHcEmKZ2I" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>

<p>稍微看過這份文件後，覺得之前確實蠻缺乏這份整理好的文件，每點看了就都覺得，確實是應該要這樣的，不過沒有這種整理好的 checklist 其實真的要做的時候還蠻容易漏東漏西的，然後就是，每一點都是成本啊！！</p>

<p>整份文件還蠻有翻譯的價值的，比較不像是 HTML Spec 會常常更新，不過我自然沒這麼多時間可以翻譯，所以就先把重點標題翻起來放，以後有人要開始就先有個基礎了，DWBP 整份文件有 35 點 Best Practice，每一點都有標題、簡述、原因、預期結果、可能實做方法、如何測試、證據、好處、範例等內容，其中好處的部分是分成八種：</p>

<ul>
<li>Comprehension，人類容易理解理解</li>
<li>Processability，可程式自動處理</li>
<li>Discoverability，可讓程式自動發現</li>
<li>Reuse，容易重複使用</li>
<li>Trust，可靠</li>
<li>Linkability，可連結</li>
<li>Access，容易存取</li>
<li>Interoperability，容易互動（發佈者和使用者之間）</li>
</ul>

<p>我只翻譯了其中的標題和簡述，順便附上每一點的好處（上面的八種好處），以下就是這 35 點 Best Practice：</p>
]]><![CDATA[<ul>
<li>Metadata <br />
詮釋資料
<ul>
<li>Provide metadata <br />
提供詮釋資料(metadata) <br />
Provide metadata for both human users and computer applications. <br />
提供可讓人類閱讀和程式可處理的詮釋資料 <br />
優點：R, C, D, P</li>
<li>Provide descriptive metadata <br />
提供資料介紹的詮釋資料 <br />
Provide metadata that describes the overall features of datasets and distributions. <br />
提供介紹資料集整體特性和發佈資訊的詮釋資料 <br />
優點：R, C, D</li>
<li>Provide structural metadata <br />
提供資料結構的詮釋資料 <br />
Provide metadata that describes the schema and internal structure of a distribution. <br />
每次發佈都提供資料綱要(schema)和資料結構的詮釋資料 <br />
優點：R, C, P</li>
</ul></li>
<li>Data Licenses <br />
資料授權
<ul>
<li>Provide data license information <br />
提供資料授權的資訊 <br />
Provide a link to or copy of the license agreement that controls use of the data. <br />
提供鏈節到資料所使用授權的協議文件 <br />
優點：R, T</li>
</ul></li>
<li>Data Provenance <br />
資料發佈者
<ul>
<li>Provide data provenance information <br />
提供資料發佈者的訊息 <br />
Provide complete information about the origins of the data and any changes you have made. <br />
提供完整的資料發佈者的訊息以及所有的修改紀錄 <br />
優點：R, C, T</li>
</ul></li>
<li>Data Quality <br />
資料品質
<ul>
<li>Provide data quality information <br />
提供資料品質資訊 <br />
Provide information about data quality and fitness for particular purposes. <br />
提供資料針對特定用途的品質和適應性資訊 <br />
優點：R, T</li>
</ul></li>
<li>Data Versioning <br />
資料版本
<ul>
<li>Provide a version indicator <br />
提供明確版本號 <br />
Assign and indicate a version number or date for each dataset. <br />
提供每個資料集的明確版本號或是發佈日期 <br />
優點：R, T</li>
<li>Provide version history <br />
提供版本歷史 <br />
Provide a complete version history that explains the changes made in each version. <br />
提供完整的版本歷史，說明每個版本的變動 <br />
優點：R, T</li>
</ul></li>
<li>Data Identifiers <br />
資料識別符
<ul>
<li>Use persistent URIs as identifiers of datasets <br />
使用固定的 URI 作為資料集的識別符(identifier) <br />
Identify each dataset by a carefully chosen, persistent URI. <br />
為每個資料集都謹慎的挑選一個永久固定的 URI 作為識別用 <br />
優點：R, L, D, I</li>
<li>Use persistent URIs as identifiers within datasets <br />
在資料集之間使用 URI 做為連結的識別符 <br />
Reuse other people's URIs as identifiers within datasets where possible. <br />
連結其它資料集時，盡可能使用其它資料集既存的 URI 作為資料集之間連結的識別符 <br />
優點：R, L, D, I</li>
<li>Assign URIs to dataset versions and series <br />
提供特定版本和最新版本的的識別用 URI <br />
Assign URIs to individual versions of datasets as well as to the overall series. <br />
每個版本都提供一個獨立的識別用 URI，整個系列的資料也要提供一個特定的識別 URI <br />
優點：R, D, T</li>
</ul></li>
<li>Data Formats <br />
資料格式
<ul>
<li>Use machine-readable standardized data formats <br />
使用程式可處理的標準格式 <br />
Make data available in a machine-readable, standardized data format that is well suited to its intended or potential use. <br />
提供程式可處理的標準資料格式，並且是適合資料預期及潛在應用的格式 <br />
優點：R, P</li>
<li>Use locale-neutral data representations <br />
使用非地區性的資料表現形式 <br />
Use locale-neutral data structures and values, or, where that is not possible, provide metadata about the locale used by data values. <br />
使用非地區性的資料結構和形式，否則需提供所使用資料形式的詮釋資料 <br />
優點：R, C</li>
<li>Provide data in multiple formats <br />
提供多種格式 <br />
Make data available in multiple formats when more than one format suits its intended or potential use. <br />
如果資料預期及潛在的應用有不只一種適合的格式，則都提供 <br />
優點：R, P</li>
</ul></li>
<li>Data Vocabularies <br />
資料詞彙
<ul>
<li>Reuse vocabularies, preferably standardized ones <br />
盡量重複使用詞彙，並優先使用標準有定義的詞彙 <br />
Use terms from shared vocabularies, preferably standardized ones, to encode data and metadata. <br />
在資料本體和詮釋資料中，盡量使用已經有人使用的詞彙，並優先使用標準有定義的詞彙 <br />
優點：R, P, C, T, I</li>
<li>Choose the right formalization level <br />
選擇正確的數據尺度 <br />
Opt for a level of formal semantics that fits both data and the most likely applications. <br />
為資料挑選一個適當的尺度，以符合資料本身的意義和它最可能的應用 <br />
優點：R, C, I</li>
</ul></li>
<li>Data Access <br />
資料取得
<ul>
<li>Provide bulk download <br />
提供打包下載 <br />
Enable consumers to retrieve the full dataset with a single request. <br />
讓使用者可以只用一個請求就取得全部的資料集 <br />
優點：R, A</li>
<li>Provide Subsets for Large Datasets <br />
大資料集要單獨提供子集 <br />
If your dataset is large, enable users and applications to readily work with useful subsets of your data. <br />
如果你的資料集很大，讓使用者可以針對他的應用只下載一部分的子集 <br />
優點：R, L, A, P</li>
<li>Use content negotiation for serving data available in multiple formats <br />
使用內容協商機制來決定提供的資料格式 <br />
Use content negotiation in addition to file extensions for serving data available in multiple formats. <br />
除了副檔名之外，還可以使用 HTTP 的內容協商機制來決定提供的資料格式 <br />
優點：R, A</li>
<li>Provide real-time access <br />
提供及時的存取 <br />
When data is produced in real time, make it available on the Web in real time or near real-time. <br />
如果資料是即時產生的，也提供可以取得即時資料的方法 <br />
優點：R, A</li>
<li>Provide data up to date <br />
提供最新版的資料 <br />
Make data available in an up-to-date manner, and make the update frequency explicit. <br />
總是提供到最新版本的資料，並且固定更新的頻率 <br />
優點：R, A</li>
<li>Provide an explanation for data that is not available <br />
無法提供的資料要說明原因 <br />
For data that is not available, provide an explanation about how the data can be accessed and who can access it. <br />
針對無法直接提供的資料，說明如何取得及誰可以取得 <br />
優點：R, T</li>
<li>Make data available through an API <br />
讓資料可以透過 API 取得 <br />
Offer an API to serve data if you have the resources to do so. <br />
如果有足夠的資源，提供 API 服務來供應資料 <br />
優點：R, P, I, A</li>
<li>Use Web Standards as the foundation of APIs <br />
使用網路標準作為 API 的基礎 <br />
When designing APIs, use an architectural style that is founded on the technologies of the Web itself. <br />
設計 API 服務時，使用網路基礎的技術作為架構核心 <br />
優點：R, L, I, D, A, P</li>
<li>Provide complete documentation for your API <br />
提供完整的 API 文件 <br />
Provide complete information on the Web about your API. Update documentation as you add features or make changes. <br />
在網路上提供完整的 API 文件，並且在 API 有更新時即時更新文件 <br />
優點：R, T</li>
<li>Avoid Breaking Changes to Your API <br />
避免 API 有不向前相容的變動 <br />
Avoid changes to your API that break client code, and communicate any changes in your API to your developers when evolution happens. <br />
避免重大的 API 更新造成應用端程式錯誤，更改 API 時都要跟開發人員溝通 <br />
優點：T, I</li>
</ul></li>
<li>Data Preservation <br />
資料保存
<ul>
<li>Preserve identifiers <br />
保留識別符 <br />
When removing data from the Web, preserve the identifier and provide information about the archived resource. <br />
當從網路上移除資料時，保留該資料的識別符，並且提供該資料歸檔保存的資訊 <br />
優點：R, T</li>
<li>Assess dataset coverage <br />
評估資料集覆蓋率 <br />
Assess the coverage of a dataset prior to its preservation. <br />
評估資料集的覆蓋率來做為歸檔保存時的參考 <br />
優點：R, T</li>
</ul></li>
<li>Feedback <br />
回饋
<ul>
<li>Gather feedback from data consumers <br />
從資料使用者收集回饋意見 <br />
Provide a readily discoverable means for consumers to offer feedback. <br />
提供一個容易發現的方式讓使用者提供意見回饋 <br />
優點：R, C, T</li>
<li>Make feedback available <br />
公開回饋意見 <br />
Make consumer feedback about datasets and distributions publicly available. <br />
公開使用者對資料集和發佈方式的回饋意見 <br />
優點：R, T</li>
</ul></li>
<li>Data Enrichment <br />
加強資料
<ul>
<li>Enrich data by generating new data <br />
增加新資料來加強現有資料集 <br />
Enrich your data by generating new data when doing so will enhance its value. <br />
當新資料可以提升資料集的價值時，就著手產生新資料 <br />
優點：R, C, T, P</li>
<li>Provide Complementary Presentations <br />
提供補充的內容來展示資料 <br />
Enrich data by presenting it in complementary, immediately informative ways, such as visualizations, tables, Web applications, or summaries. <br />
提供資料的各種用例，像是視覺化呈現、表格、網路應用程式或是摘要等來讓資料更多元 <br />
優點：R, C, A, T</li>
</ul></li>
<li>Republication <br />
再散佈
<ul>
<li>Provide Feedback to the Original Publisher <br />
提供回饋意見給原發佈者 <br />
Let the original publisher know when you are reusing their data. If you find an error or have suggestions or compliments, let them know. <br />
讓資料的原發佈者資料你有再利用他的資料，如果有發現任何錯誤或可以改進的地方，也讓他知道 <br />
優點：R, I, T</li>
<li>Follow Licensing Terms <br />
遵照授權條款 <br />
Find and follow the licensing requirements from the original publisher of the dataset. <br />
確認原始發佈資料集的授權條款，並遵守之 <br />
優點：R, T</li>
<li>Cite the Original Publication <br />
標註原發佈者 <br />
Acknowledge the source of your data in metadata. If you provide a user interface, include the citation visibly in the interface. <br />
在詮釋資料內標註資料來源，如果有建立使用者介面，也要在上面顯示資料來源 <br />
優點：R, D, T</li>
</ul></li>
</ul>

<p>翻譯可能有問題，Patch Welcome。最後附上一些翻譯時參考的資料：</p>

<ul>
<li><a href="https://w3c-html-ig-zh.github.io/w3c-glossary/">https://w3c-html-ig-zh.github.io/w3c-glossary/</a>  </li>
<li><a href="http://terms.naer.edu.tw/">http://terms.naer.edu.tw/</a></li>
<li><a href="http://www.lac.org.tw/law/documents/02/06231.pdf">http://www.lac.org.tw/law/documents/02/06231.pdf</a></li>
</ul>
]]></description>
<link>https://blog.othree.net/log/2017/03/01/data-on-web-best-practice/</link>
<guid>https://blog.othree.net/log/2017/03/01/data-on-web-best-practice/</guid>
<category>web</category>
<pubDate>Wed, 01 Mar 2017 00:02:14 +0800</pubDate>
</item>

<item>
<title>2016</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/25004748819/" title="北京天安門 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1532/25004748819_666aa8a544_b.jpg" width="1024" height="683" alt="北京天安門" srcset="https://farm2.staticflickr.com/1532/25004748819_a5173f01f5_k.jpg 2x" /></a></p>

<p>又到了一年一度的照片回顧了，一樣也是一個月基本上挑一張。首先是一月的北京天安門，當時是去參加公司年會，這張照片拍攝的位置是無法步行走到的，我是搭巴士經過的時候拍的，那天的空氣也還不錯，隔天晚上空氣品質整個就爆炸了。</p>

<p>二月則是我第一次參加的 SITCON，也是記錄組，其實我覺得 SITCON 這幾年的活動完成度都蠻高的啊，我想一部分原因也是因為學生比較有時間能投入吧，2016 的 SITCON 我印象最深刻的是整套的過場畫面，基本上觀眾是看不到切換畫面的，一切都有做到無縫轉換。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26152430382/" title="SITCON 2016 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1602/26152430382_64036500c8_b.jpg" width="1024" height="683" alt="SITCON 2016" srcset="https://farm2.staticflickr.com/1602/26152430382_e3b9c44c65_k.jpg 2x" /></a></p>

<p>三月是剛購入的 Ricoh Theta 拍的，本來也想要寫篇文章介紹一下，不過目前難產中，之後看看有沒有時間吧。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26369570082/" title="101 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1450/26369570082_9afaaec8ee_b.jpg" width="1024" height="512" alt="101" srcset="https://farm2.staticflickr.com/1450/26369570082_4c45da1a96_k.jpg 2x" /></a></p>

<p>四月的照片是五月舉辦的 g0v summit 在四月辦的工人同樂會，其實五月 g0v 也有 <a href="https://www.flickr.com/photos/othree/26634526804/in/album-72157665323715403/">一張</a> 很喜歡不過後來還是選了另外一張。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26402986700/" title="g0v summit 2016 工人同樂會 by othree, on Flickr"><img src="https://farm2.staticflickr.com/1684/26402986700_26d5e78a85_b.jpg" width="1024" height="683" alt="g0v summit 2016 工人同樂會" srcset="https://farm2.staticflickr.com/1684/26402986700_e2da4e3684_k.jpg 2x" /></a></p>

<p>五月的照片則是挑了 PF24 的綾波零的 cosplay，今年拍的 cosplayer 是比較沒有印象深刻的，最近也越來越少去了，去得太頻繁的話其實也會看到很多重複出場的玩家，感覺有點浪費時間XD。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/26800559021/" title="PF24 Cosplay by othree, on Flickr"><img src="https://farm8.staticflickr.com/7023/26800559021_d2fb252a2b_b.jpg" width="683" height="1024" alt="PF24 Cosplay" srcset="https://farm8.staticflickr.com/7023/26800559021_980ba21c55_k.jpg 2x" /></a></p>

<p>六月因為 HKOSC 的關係去了一趟香港。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/27938866055/" title="香港 2016 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7291/27938866055_d86c2c9a77_b.jpg" width="683" height="1024" alt="香港 2016, " srcset="https://farm8.staticflickr.com/7291/27938866055_d86c2c9a77_b.jpg 683w, https://farm8.staticflickr.com/7291/27938866055_e82afbe9a3_h.jpg 1067w" /></a></p>

<p>七月是 HITCON CMT 的工人大會，實際上活動是八月辦的，今年我只有協助 CMT 的部分，年底的 Pacific 就沒進去幫忙了，主要是現在工作比較忙碌，而且常常去幫幾個整天後就會生病，只好減少場次。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/28104209765/" title="HITCON 2016 CMT 工人大會 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7329/28104209765_ac1bea5d44_b.jpg" width="1024" height="683" alt="HITCON 2016 CMT 工人大會" srcset="https://farm8.staticflickr.com/7329/28104209765_a81d0d2930_k.jpg 2x" /></a></p>

<p>八月是 iTHome 辦的 Modern Web 研討會會場，會場在松山菸廠那邊的台北文創大樓，平常不太有機會可以進去，會議廳那邊有大片落地窗可以看到停工的大巨蛋，主辦單位則是很善用這片玻璃窗，讓他變成留言板，可以用<a href="https://www.flickr.com/photos/othree/29171045152/in/album-72157673058020715/">白板筆留言</a>。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/28656546354/" title="Modern Web by othree, on Flickr"><img src="https://farm9.staticflickr.com/8083/28656546354_aaae1debd6_b.jpg" width="1024" height="683" alt="Modern Web" srcset="https://farm9.staticflickr.com/8083/28656546354_2c82f6f554_k.jpg 2x" /></a></p>

<p>九月整個月沒有拍照，所以改拿六月去的瑞士，特別挑的照片是歐洲最高峰少女峰，不過一共有三張，第一張是少女峰車站的近照，最左邊的山峰就是少女峰了，右下小點就是觀光客了。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/29573834391/" title="Jungfraujoch by othree, on Flickr"><img src="https://farm9.staticflickr.com/8128/29573834391_d65bc44d32_b.jpg" width="1024" height="683" alt="Jungfraujoch" srcset="https://farm9.staticflickr.com/8128/29573834391_72591a2446_k.jpg 2x" /></a></p>

<p>第二張則是回程在山腳下拍的少女峰車站，可以下載原始檔案找找看車站在哪，然後第三張是在差不多地方用望遠鏡頭拍的，可以比較一下大小差異。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/29544124212/" title="Jungfraujoch by othree, on Flickr"><img src="https://farm9.staticflickr.com/8042/29544124212_4ac50870a0_b.jpg" width="1024" height="683" alt="Jungfraujoch" srcset="https://farm9.staticflickr.com/8042/29544124212_a015770bde_k.jpg 2x" /></a></p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/29028819514/" title="Jungfraujoch by othree, on Flickr"><img src="https://farm9.staticflickr.com/8693/29028819514_9a3b2f6359_b.jpg" width="1024" height="683" alt="Jungfraujoch" srcset="https://farm9.staticflickr.com/8693/29028819514_b7b09c5d5f_k.jpg 2x" /></a></p>

<p>十月是在往 MOPCON 的火車上，突然發現到，台鐵車上跑馬燈的點陣字形還蠻不錯的，字體蠻好看之外，中英文混排也沒也有不協調的問題（不過照片上沒有），有人說可能是以前倚天系統的點陣字集。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/30483464980/" title="台鐵 by othree, on Flickr"><img src="https://farm6.staticflickr.com/5723/30483464980_7d3a850342_b.jpg" width="1024" height="683" alt="台鐵" srcset="https://farm6.staticflickr.com/5723/30483464980_58b5f22986_k.jpg 2x" /></a></p>

<p>十一月是 Firefox 慶生會，今年是第十二年了，地點是摩茲工寮。</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/30843698921/" title="Happy Birthday Firefox by othree, on Flickr"><img src="https://farm6.staticflickr.com/5484/30843698921_f74ac860ff_b.jpg" width="1024" height="683" alt="Happy Birthday Firefox" srcset="https://farm6.staticflickr.com/5484/30843698921_2010d66bbb_k.jpg 2x" /></a></p>

<p>十二月是月底去日本跨年的照片，這是第一次在日本跨年，也第一次逛了一下日本的神社祭典攤位，雖然時間比較早，和新年參拜的人潮錯開，不過也因此可以歸在 2016 年十二月～</p>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/32066349271/" title="伏見稻荷大社 by othree, on Flickr"><img src="https://farm1.staticflickr.com/685/32066349271_9eaa940677_b.jpg" width="1024" height="683" alt="伏見稻荷大社" srcset="https://farm1.staticflickr.com/685/32066349271_093f1e3a14_k.jpg 2x" /></a></p>
]]>
</description>
<link>https://blog.othree.net/log/2017/02/17/2016/</link>
<guid>https://blog.othree.net/log/2017/02/17/2016/</guid>
<category>diary</category>
<pubDate>Fri, 17 Feb 2017 23:27:50 +0800</pubDate>
</item>

<item>
<title>NodeJS and ES Module</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/27325803313/" title="香港 2016 by othree, on Flickr"><img src="https://farm8.staticflickr.com/7286/27325803313_0fd50750d0_b.jpg" width="1024" height="683" alt="香港 2016" srcset="https://farm8.staticflickr.com/7286/27325803313_0fd50750d0_b.jpg 1024w, https://farm8.staticflickr.com/7286/27325803313_daa4621d44_h.jpg 1600w" /></a></p>

<p>今天看了 TC39 一月會議的 Agenda 後才注意到，nodejs 用的 <a href="https://nodejs.org/docs/latest/api/modules.html">CommonJS Module</a> 和 <a href="https://hacks.mozilla.org/2015/08/es6-in-depth-modules/">ECMAScript Module</a>(ES Module) 在特定情況下會有混淆的情形發生，所謂的特定情形就是沒有 <code>import/require</code> 也沒 <code>export/exports</code> 的模組，例如寫東西在 root 物件上，只產生 side effect 的模組：</p>

<pre><code>(function (root) {

  root.lib = {};

}(this));
</code></pre>

<p>像這樣的檔案，Parser 就無法判斷他是 CommonJS Module 還是 ES Module，這樣會產生什麼問題呢，其實 ES Module 有一些特色，例如它必須要使用 strict mode 來解析並執行，而光是這個差異，就會讓相同的程式碼有不一樣的執行結果了，而需要同時支援 CommonJS Module 和 ES Module 的主要是 NodeJS 環境，當然它目前還沒有兩種都支援，但是勢必需要支援 ES Module 的，所以 NodeJS 需要能夠百分之百正確的判斷每個 JavaScript 程式碼是屬於 CommonJS Module 還是 ES Module，這在目前是辦不到的，也因為這個問題所以 NodeJS 雖然已經支援大部分的 ES2015 的新功能，但卻遲遲還無法支援 ES Module，相關的討論至少也半年有了，當時還提出了新的副檔名 <code>.mjs</code> <a href="https://github.com/nodejs/node-eps/blob/5dae5a537c2d56fbaf23aaf2ae9da15e74474021/002-es6-modules.md#51-determining-if-source-is-an-es-module">這種解法</a>，多一種副檔名聽起來有點不可思議，也引此還有個 Twitter <a href="https://twitter.com/nodemjs">帳號專門</a>在關注相關情報的，不過目前最新的解決方法，則是 ES Spec <a href="https://github.com/bmeck/UnambiguousJavaScriptGrammar">修改</a> Module 的 Grammer 來解決這個問題，修改的方式是就是以後 ES Module 一定要至少有一個 <code>import</code> 或是 <code>export</code> statement，如果是上面那種沒有需要 import 也沒有 export 的模組，那就要加上 <code>export {}</code>，變成：</p>

<pre><code>(function (root) {

  root.lib = {};

}(this));

export {};
</code></pre>

<p>語意上剛好等於沒有匯出任何東西，所以不會和現在的 ES2015 版的 Module 有衝突，這份提案已經是 accept 狀態了，所以沒意外應該今年的 ES2017 就會包含進去了，當然這會影響到以前寫出這種 ES Module 的程式碼，不過目前也還沒有那個環境有直接使用 ES Module 的能力，都還是先過 bundler 轉成現在環境可以使用的形式，Web 的 <code>&lt;script type="module"&gt;</code> 也才正要有瀏覽器支援，所以這個時間點做出這個修改影響還算是很小，之後大概就是有記得應該就沒問題了，我自己是比較期待 nodejs 能快點原生支援 ES Module 啦。</p>
]]>
</description>
<link>https://blog.othree.net/log/2017/01/14/nodejs-es-module/</link>
<guid>https://blog.othree.net/log/2017/01/14/nodejs-es-module/</guid>
<category>script</category>
<pubDate>Sat, 14 Jan 2017 12:22:32 +0800</pubDate>
</item>

<item>
<title>smartypants.js</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/31387550094/" title="大阪新年 by othree, on Flickr"><img src="https://farm1.staticflickr.com/293/31387550094_01791b5764_b.jpg" width="1024" height="683" alt="大阪新年" srcset="https://farm1.staticflickr.com/293/31387550094_01791b5764_b.jpg 1024w, https://farm1.staticflickr.com/293/31387550094_6f388b3f83_h.jpg 1600w" /></a></p>

<p><a href="https://daringfireball.net/projects/smartypants/">SmartyPants</a> 這個東西也是很久了，和 Markdown 差不多時期，都是 John Gruber 幫當時的網路文字出版軟體（ex: MovableType）所做的，而 SmartyPants 是用來處理一些標點符號的，其中，最容易被人注意到的就是引號「"」的轉換了。</p>

<p>雖然鍵盤上的引號按鍵只有一個，但是傳統的文書寫作上，引號是有分左邊（開始）的「&#8220;」和右邊（結束）的「&#8221;」，只不過早期為了減少鍵盤按鍵數，還有字元編碼上的限制，所以合併成為只有一個，不過隨著計算機的發展，可以使用的字元編碼資料量增加後，就還是有定義了開始和結束的兩種引號，並且有單引號和雙引號兩種：</p>

<ul>
<li>左單引號 &#8216;</li>
<li>右單引號 &#8217;</li>
<li>左雙引號 &#8220;</li>
<li>右雙引號 &#8221;</li>
</ul>

<p>理想上，寫作文章時也應該正確的使用這些引號，不過其實因為輸入上比較麻煩，一般人打字也不會特別注意，所以常常被忽略，比較常見的是軟體本身在使用者輸入文字時自動做轉換，例如 Apple 的 Pages、Keynote、微軟的 Skype 等等，講到 Keynote 自動轉換引號這點就要另外岔題一下，就是偶爾都會看到頭影片裡面的程式碼，其中的引號也被轉換過，其實就是因為貼上 code 到 Keynote 的時候被轉換了，如果作者沒有注意到的話就直接釋出，然後讀者 copy 程式碼出來試試看時，就會編譯失敗而無法執行。回到標點符號上，這類標點符號其實不止有引號，SmartyPants 可以處理的還包括：</p>

<ul>
<li><code>--</code> 轉成 en-dash &#8211;</li>
<li><code>---</code> 轉成 em-dash &#8212;</li>
<li><code>...</code> 轉成 ellipsis &#8230;</li>
</ul>

<p>而且它對於引號的轉換還算是聰明，會判斷是不是真的用來包起文字的，還支援用 backtick 來模擬的雙引號，看起來像：</p>

<pre><code>``quoted string''
</code></pre>

<p>另為也會針對年代的特殊寫法做處理，例如 <code>'80s</code> 會轉成 &#8217;80s，並且會避開 HTML 標籤的部分，不會把 HTML 標籤裡面的屬性值的引號也做轉換，像是 <code>&lt;html lang="en"&gt;</code> 這種。前陣子因為工作上要處理翻譯字串，想要順便好好的處理這些符號，所以就想到了這個工具，因為我一般寫小 script 做事情是用 JavaScript 然後用 node 來執行，所以要用 SmartyPants 就沒辦法那麼直接了，一開始先找 JavaScript 的 solution，找到一個簡單的，只用幾條 regular epxression 的<a href="https://gist.github.com/danburzo/1cc866400cb4f810c493">版本</a>，其實運作的也還不錯，但是無法避開不處理 HTML 標籤，所以產生出來的結果也不能用，接著改成用 STDIO 丟給 John Gruber 的 Perl 版，結果這效率實在太差，所以又繼續研究一番，發現還有一套叫 <a href="https://www.npmjs.com/package/typogr">typogr</a> 的文字處理工具有實做，不過不想要太多功能，所以最後我決定自己把 Perl 版 SmartyPants 移植成 NPM module，也因此有了 <a href="https://github.com/othree/smartypants.js">smartypants.js</a>。</p>

<p>這次開發我選擇的語言是 TypeScript，原因可以參考我上一篇文章 <a href="https://blog.othree.net/log/2016/11/18/20k-for-of/">20k-for-of</a>，然後用 Makefile 加上一些指令轉成類似 <a href="https://github.com/jquery/jquery/blob/master/src/wrapper.js">jQuery UMD</a> 形式的 JavaScript 檔案發佈到 NPM 上，目前的 smartypants.js 是完完全全把 Perl 版的邏輯翻過來，不過只有實作轉換編碼的部分加上 CLI 的介面，另外 Perl 版的只能轉換成 HTML entity 的格式，不過現在 UTF-8 已經算是很廣泛應用的文字編碼了，所以我還加上了一個轉成 UTF-8 字元的版本，用 UTF-8 編碼的雙引號其實很不錯，在 JSON 或是 csv 裡面也不用 escape，肉眼看起來也美觀許多。</p>

<p>實做過程比較緊張的地方大概就是要把 Perl 的 regular expression 轉成 JavaScript 的版本了，一度看到沒看過的用法都覺得會不會沒辦法用 JavaScript 做起來，還好沒用到很神奇的語法。另外它處理 HTML 語法的部分，其實是先過一個簡單的 lexer 轉成 token list，裡面兩種 token 分別就是一般文字和 HTML 標籤兩種，接著只針對一般文字 token 來做標點符號轉換，不過其實這個 tokenize 的部分有 bug，例如：</p>

<pre><code>&lt;span title="&gt;"&gt;HAHA&lt;/span&gt;
</code></pre>

<p>就會被分解成如下的 token：</p>

<ul>
<li><code>&lt;span title="&gt;</code></li>
<li><code>"&gt;HAHA</code></li>
<li><code>&lt;/span&gt;</code></li>
</ul>

<p>而且這種方法就也無法處理到一些文字內容的 HTML 屬性，例如 title 和 alt 等，所以接下來還可以做的改進，一個就是改進這部分的 lexer，然後也要對這些屬性值轉換標點符號，大概需要建立一個白名單，另外還有一個想加強的地方就是補上 test case 了，目前完全沒有相關的 test case 可以用，所以其實也沒很正式的驗證過，不過總之目前是都還運作正常，如果有相似需求的人可以參考一下。</p>
]]>
</description>
<link>https://blog.othree.net/log/2017/01/10/smartypants-js/</link>
<guid>https://blog.othree.net/log/2017/01/10/smartypants-js/</guid>
<category>script</category>
<pubDate>Tue, 10 Jan 2017 22:47:59 +0800</pubDate>
</item>

<item>
<title>20K for...of</title>
<description><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"><code>for...of</code></a> 是 ECMAScript 2016 的新語法，有了他之後，要用迴圈跑過陣列不用像以前一樣先用 <code>for...in</code> 或是用傳統的取長度，然後 <code>i++</code> 的方法：</p>

<pre><code>var arr = [1, 2, 3];
var i, v, len;

for (i in arr) {
    v = arr[i];
    console.log(v);
}

for (i = 0, len = arr.length; i &lt; len; i++) {
    v = arr[i];
    console.log(v);
}
</code></pre>

<p>現在只要用簡單的 <code>for...of</code> 就可以了：</p>

<pre><code>var arr = [1, 2, 3];

for (let v of arr) {
    console.log(v);
}
</code></pre>

<p>不過目前還是需要考慮只有 ECMAScript 5 的環境，例如 IE11，所以一般都還是會用像是 <a href="https://babeljs.io/">Babel</a> 之類的 transpiler 來把 ES2015 的 syntax 轉成 ES5 的 code，結果轉出來如下：</p>

<pre><code>"use strict";

var arr = [1, 2, 3];

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
    for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var v = _step.value;

        console.log(v);
    }
} catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
} finally {
    try {
        if (!_iteratorNormalCompletion &amp;&amp; _iterator.return) {
            _iterator.return();
        }
    } finally {
        if (_didIteratorError) {
            throw _iteratorError;
        }
    }
}
</code></pre>

<p>結果其實有點意外，一個簡單的 <code>for...of</code> 竟然變的這麼長，事實上是因為 <code>for...of</code> 其實沒想像中簡單，因為它可以用的地方其實不只是陣列，而是 <a href="https://blog.othree.net/log/2014/05/24/es6-iterable/">iterable 物件</a>，不過為了要完整的支援 <code>for...of</code>，就變成需要有 iterator, generator, symbol 等等的支援，當然上面的程式碼不能在 ES5 環境下執行，而 Babel 依靠的是 <a href="https://babeljs.io/docs/usage/polyfill/">babel-polyfill</a>，裡面其實就是 <a href="https://github.com/zloirock/core-js">core-js</a> 和 <a href="https://facebook.github.io/regenerator/">regenerator</a>，不過這一整包，其實有點龐大，要 228KB，即使最小化之後也還要 95KB，所以，就想著是不是能夠只捆包進需要的部分就好了，研究過後，發現有 Babel plugin 叫做 <a href="https://babeljs.io/docs/plugins/transform-runtime/">transform-runtime</a>，套用上去後：</p>

<pre><code>import _getIterator from "babel-runtime/core-js/get-iterator";
var arr = [1, 2, 3];

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _getIterator(arr), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var v = _step.value;

    console.log(v);
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion &amp;&amp; _iterator.return) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}
</code></pre>

<p>可以看到原來用 <code>Symbol</code> 取 iterator 的地方變成用 <code>_getIterator</code> 了，而且還有一行：</p>

<pre><code>import _getIterator from "babel-runtime/core-js/get-iterator";
</code></pre>

<p>如果要真的把這部分也打包進來，則需要讓 bundler 處理，我個人是偏好 <a href="http://rollupjs.org/">rollup</a>，搭配以下兩個 plugin：</p>

<ul>
<li><a href="https://github.com/rollup/rollup-plugin-node-resolve">rollup-plugin-node-resolve</a> 用來尋找 <code>node_modules</code> 目錄裡的模組</li>
<li><a href="https://github.com/rollup/rollup-plugin-commonjs">rollup-plugin-commonjs</a> 用來解析 CommonJS 型式的模組</li>
</ul>

<p>然後用以下的設定：</p>

<pre><code>babel({
  exclude: 'node_modules/**',
  plugins: ['transform-runtime'],
  presets: ['es2015-loose-rollup'],
  runtimeHelpers: true
}),
nodeResolve({ jsnext: true }),
commonjs({
  include: 'node_modules/**'
})
</code></pre>

<p>結果，就可以得到夢寐以求的 20KB 的<a href="https://github.com/othree/20k-for-of/blob/master/out/bundle-all.js">程式碼</a>了，當然 20KB 的部分不是預期的啦，相較於一開始的程式碼只有 72Bytes，為了一個 <code>for...of</code> 變成 20KB 好像有點本末倒置，畢竟我只有要在 Array 上用，難道不能只是簡單的轉成 <code>for...in</code> 型式嗎。</p>

<p>事實上是有辦法的，第一個就是改寫 <a href="https://www.typescriptlang.org/">TypeScript</a>，TypeScript 對於 <code>for...of</code> 只有兩種處理方法，而且結果都不會如此膨脹，第一種就是變成 <code>for...in</code>，第二種則是不變動，保留 <code>for...of</code> 的語法，後者是在 target 設定成 ES6 的時候使用的，官網也有相關的<a href="https://www.typescriptlang.org/docs/handbook/iterators-and-generators.html#targeting-es5-and-es3">說明</a>。</p>

<p>第二種方法則是用 <a href="https://buble.surge.sh/">Bublé</a> 取代 Babel 做為 transpiler，Bublé 是 rollup 的作者 <a href="http://www.rich-harris.co.uk/">Rich Harris</a> 的另外一個作品，我個人是蠻喜歡他的哲學的，Bublé 的哲學則是對於 code 做簡單、直接明瞭的轉換，所以 <code>for...of</code> 就只會轉成 <code>for...in</code> 的型式，不過也因此無法支援 iterable 物件，所以預設是不開啟支援的，歸類在 <a href="https://buble.surge.sh/guide/#dangerous-transforms">dangerious transofrm 之下</a>，另外 Bublé 也還不支援 Async/Await，因為要做出支援 ES3/5 的同樣效果的 code 會增加太多的<a href="https://gitlab.com/Rich-Harris/buble/issues/71">複雜度</a>，不符合他的哲學理念，所以目前還沒有計畫支援，這點倒是 TypeScript 支援比較完整，目前的 <a href="https://github.com/Microsoft/TypeScript/wiki/Roadmap#21-november-2016">2.1 RC</a> 已經支援把 Async/Await 轉成 ES3/5 的版本了。</p>

<p>最後結論，基本上就是個取捨，Babel、TypeScript、Bublé 各自有它們的優缺點，所以只能看情況選擇了，如果要 Map/Set 也要在這些物件上用 <code>for...of</code> 語法然後也要 Async/Await，那就只能用 Babel 加上 babel-polyfill；如果可以不要 Map, Set 或是可以接受不在這些物件上使用 <code>for...of</code> 語法（還可以用 forEach），那可以選擇 TypeScript，然後加上 Map/Set 的 polyfill，如果不用 Async/Await，也不用 Map/Set 的話，可以考慮用個 Bublé 看看。不過如果完全不需要考慮 ES3/5 的環境的話（Edge, Firefox, Chrome 都已經對 ES2015 支援很完整了），好像問題突然就小很多了XD，最後附上這篇文章提到的各種作法產生的檔案參考，目前都放在 github 上的 <a href="https://github.com/othree/20k-for-of/">20k-for-of</a> 這個專案。</p>
]]>
</description>
<link>https://blog.othree.net/log/2016/11/18/20k-for-of/</link>
<guid>https://blog.othree.net/log/2016/11/18/20k-for-of/</guid>
<category>script</category>
<pubDate>Fri, 18 Nov 2016 00:00:52 +0800</pubDate>
</item>

<item>
<title>Vim Filename Complete</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/30545367351/" title="Vim Filename Complete by othree, on Flickr"><img src="https://farm6.staticflickr.com/5750/30545367351_b09ec693f5_b.jpg" width="659" height="452" alt="Vim Filename Complete, " srcset="https://farm6.staticflickr.com/5750/30545367351_b09ec693f5_b.jpg 1024w" /></a></p>

<p>Vim 有一個內建的自動補完功能是針對<a href="http://vimdoc.sourceforge.net/htmldoc/insert.html#compl-filename">檔案名稱</a>的，使用的方法是 <code>&lt;C-X&gt;&lt;C-F&gt;</code>，我目前在維護的 <a href="https://github.com/othree/vim-autocomplpop">autocomplpop</a> 也有支援這種補完模式，只要輸入 <code>./</code> 後就會自動幫忙觸發，不過我比較有機會觸發到是在使用 ECMAScript 6 的 import 和 CSS 的 import 時，不過常常就是發現他查看的路徑不太對，不是拿目前編輯檔案的位置做為起點的，研究過後發現是因為 Vim 找檔案的起點是看他的工作目錄(<code>$PWD</code>)，加上我會使用 <a href="https://github.com/kien/ctrlp.vim">ctrlp</a> 這種工具，所以實際上在編輯的檔案通常是不在工作目錄下，對於這個問題，其實我覺得最理想的解決方式是 Vim 應該要提供兩種模式來決定要從那邊開始找，不過目前似乎沒這個計畫，唯一在文件是有提到的是未來可能會支援 <a href="http://vimdoc.sourceforge.net/htmldoc/options.html#%27path%27"><code>path</code></a> 的設定，理論上，如果有支援的話，應該就可以解決問題了，因為預設的 <code>path</code> 值包括了 <code>.</code>，不過目前還沒有相關時程，就只能自救了。</p>

<p>最簡單的方法，其實就是開啟 <a href="http://vimdoc.sourceforge.net/htmldoc/options.html#%27autochdir%27"><code>autochdir</code></a>，這個選項打開後就會自動在切換 window 時也更改工作目錄，不過這個選項是為了相容早期系統才提供的，文件也有說可能會和部分 Vim Script 不相容，實際上我也有找到一些不相容的 Vim Script，所以想避免，就搜尋了一下其它可能的解決方法，在 StackOverflow 上有看到<a href="http://superuser.com/questions/604122/vim-file-name-completion-relative-to-current-file">一篇</a>，裡面有兩個人提供了解法，第一個是用 <code>autocmd</code>，然後在進入 insert mode (在這時候才有機會用到檔名補完的功能)時自動開啟 <code>autochdir</code>，離開時自動關閉 <code>autochdir</code>，不過這樣的方式（感覺上）還是不太安全，因為還是用到 <code>autochdir</code>，所以下面有另外一個方法改用 <a href="http://vimdoc.sourceforge.net/htmldoc/editing.html#:lcd"><code>lcd</code></a>，作法是改成修改 Key Mapping 的方式，改的 mapping 是 <code>./&lt;C-X&gt;&lt;C-F&gt;</code>，不過這樣對我來說又不合用，因為我用 autocomplpop 的話，不會真的打 <code>&lt;C-X&gt;&lt;C-F&gt;</code>，所以基本上觸發不到這事件，所以我就決定把這兩種解法合併起來，改成用 <code>autocmd</code> 加上 <code>lcd</code>：</p>

<pre><code>:autocmd InsertEnter * let save_cwd = getcwd() | execute 'lcd %:p:h'
:autocmd InsertLeave * execute 'lcd' fnameescape(save_cwd)
</code></pre>

<p>進入 insert mode 時改變該 window 的工作目錄，離開 insert mode 時把工作目錄還原。這是我目前認為影響最小的調整方式，不過其實可能執行一次 <code>lcd</code> 換工作目錄就夠了，沒深入研究 autochdir 所產生的問題，不過我推測是影響到 Vim Script 建立的 window 的工作目錄，像是 NERD Tree 之類的側邊欄那種，總之目前這樣運作還算正常，接下來就是等 Vim 加上 <code>path</code> 的支援吧（或是有人送 patch）。</p>
]]>
</description>
<link>https://blog.othree.net/log/2016/10/29/vim-filename-complete/</link>
<guid>https://blog.othree.net/log/2016/10/29/vim-filename-complete/</guid>
<category>vim</category>
<pubDate>Sat, 29 Oct 2016 15:36:02 +0800</pubDate>
</item>


</channel>
</rss>