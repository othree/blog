<?xml version="1.0" encoding="utf-8"?>
<feed version="0.3" xmlns="http://purl.org/atom/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xml:lang="zh-TW">
<title>O3noBLOG</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/" />
<modified>2018-01-12T02:59:19Z</modified>
<tagline></tagline>
<id>tag:blog.othree.net,2018://1</id>
<generator url="http://www.movabletype.org/" version="4.381">Movable Type</generator>
<copyright>Copyright (c) 2018, othree</copyright>

<entry>
<title>分號大戰 again</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2018/01/12/recommend-semicolon/" />
<modified>2018-01-12T02:59:19Z</modified>
<issued>2018-01-12T02:54:06Z</issued>
<id>tag:blog.othree.net,2018://1.914</id>
<created>2018-01-12T02:54:06Z</created>
<summary type="text/plain">今天一早起來就看到有人說 TC39 要準備建議 JavaScript 程式碼應該要加分號： TC39 is recommending that JS programmers use semicolons at the end of statements in code, rather than relying on ASI.https://t.co/9FY4i29iqs-- Daniel Ehrenberg (@littledan) 2018年1月11日 然後下面就一大串了，本來想說 standardjs 要哭哭了，難道 semistandard 要扶正了嗎？不過我仔細端詳了一下，發現這個 PR 還是 open 狀態，而且 Brendan Eich...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>script</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p>今天一早起來就看到有人說 TC39 要準備建議 JavaScript 程式碼應該要加分號：</p>
<blockquote class="twitter-tweet" data-lang="zh-tw"><p lang="en" dir="ltr">TC39 is recommending that JS programmers use semicolons at the end of statements in code, rather than relying on ASI.<a href="https://t.co/9FY4i29iqs">https://t.co/9FY4i29iqs</a></p>-- Daniel Ehrenberg (@littledan) <a href="https://twitter.com/littledan/status/951523844262637568?ref_src=twsrc%5Etfw">2018年1月11日</a></blockquote>
<p>然後下面就一大串了，本來想說 <a href="https://standardjs.com/">standardjs</a> 要哭哭了，難道 <a href="https://www.npmjs.com/package/semistandard">semistandard</a> 要扶正了嗎？不過我仔細端詳了一下，發現這個 <a href="https://github.com/tc39/ecma262/pull/1062">PR</a> 還是 open 狀態，而且 Brendan Eich 甚至表態反對：</p>
<blockquote class="twitter-tweet" data-lang="zh-tw"><p lang="en" dir="ltr">I dissent.</p>-- BrendanEich (@BrendanEich) <a href="https://twitter.com/BrendanEich/status/951554266535141377?ref_src=twsrc%5Etfw">2018年1月11日</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>原因之一是已經有很多 standardjs 的 code 其實運作的很好，不過另外一個原因我覺得更重點，就是 TC39 的文件，作為 spec 似乎不該做<strong>建議</strong>，當然提出這個 PR 的 Daniel Ehrenberg 其實也不是單純因為支持加分號才提的，他其實是 <a href="https://github.com/tc39/proposal-class-fields">Class field declarations</a> 的主要貢獻者，這是什麼呢？就是：</p>
<pre><code class="language-javascript">class Counter extends HTMLElement {
  x = 0;

  clicked() {
    this.x++;
    window.requestAnimationFrame(this.render.bind(this));
  }
}
</code></pre>
<p>這種在 class method 外面定義 class 屬性和預設值的語法（另外還有 private property），而這種很像是 expression 的語句，一定要 semicolon，不然會有他稱為 AST hazard 的情形，也就是很難評斷開發者實際上意圖的情形發生，也就無法用 ASI 自動補分號，對此 Brendan Eich 有個建議是在 class field 裡面關掉 ASI 機制，也就是這些 property 定義一定要加分號做結。</p>
<p>目前看起來，Brendan Eich 提的那點，TC39 不該做語法的建議實在很強而有力，應該也反駁不了，所以結果應該就是沒有收 PR，或是改成更中性的文字，不是建議的文字，不過想來想去還是沒有比較適合的，畢竟在 spec 文件裡面還做建議開發者用的語法就很怪。</p>
]]>

</content>
</entry>

<entry>
<title>Web F2E 看 Python Syntax</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/12/05/web-f2e-and-python-syntax/" />
<modified>2017-12-06T05:52:06Z</modified>
<issued>2017-12-05T10:39:38Z</issued>
<id>tag:blog.othree.net,2017://1.913</id>
<created>2017-12-05T10:39:38Z</created>
<summary type="text/plain"> 雖然主業是 Web Front End，不過其實要搞好 Front End，後端也不可不知，所以我工作內容其實也寫 Python 寫了不少，最近終於可以跟 Flake8 相安無事，所以想來記錄一些對我來說很有趣的 Python Syntax，不全是喜歡的就是了，以下內容以 2.7 為主。 內建支援 String Formatting 第一個我覺得很棒的是，Python 內建有 String Formatting Operations 可以用，超方便的，所以我只要寫： &apos;%d: The answer to the ultimate question of life, the universe and everything&apos; % 42 就可以把...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>script</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/mrtopf/3681678882/" title="Bruce Eckel's keynote by MrTopf, on Flickr"><img src="https://farm3.staticflickr.com/2655/3681678882_1211d131ce_b.jpg" width="1024" height="576" alt="Bruce Eckel's keynote, " srcset="https://farm3.staticflickr.com/2655/3681678882_1211d131ce_b.jpg 1024w" /></a></p>
<p>雖然主業是 Web Front End，不過其實要搞好 Front End，後端也不可不知，所以我工作內容其實也寫 Python 寫了不少，最近終於可以跟 <a href="https://pypi.python.org/pypi/flake8">Flake8</a> 相安無事，所以想來記錄一些對我來說很有趣的 Python Syntax，不全是喜歡的就是了，以下內容以 2.7 為主。</p>
<h4>內建支援 String Formatting</h4>
<p>第一個我覺得很棒的是，Python 內建有 <a href="https://docs.python.org/2/library/stdtypes.html#string-formatting">String Formatting Operations</a> 可以用，超方便的，所以我只要寫：</p>
<pre><code class="language-python">'%d: The answer to the ultimate question of life, the universe and everything' % 42
</code></pre>
<p>就可以把 42 填進去字串裡面了，雖然我第一次看到 <code>％</code> 放最後面還以為是什麼奇妙的註解符號；傳統的 formatting 用來做翻譯字串就會發現，如果有多個變數，它們的順序在不同的語言可能有不同，傳統的 formatting 只能處理固定順序，不適合這種情景，這時候還有新的 <code>format()</code> 可以用，幫變數命名好、然後丟參數進去就可以了，例如：</p>
<pre><code class="language-python">'{author} wrote {name}'.format(author='JRR', name='TLOR')
</code></pre>
<p>雖然 Python 的 string format 很好用，不過文件寫得太高深了，所以還有人做了 <a href="https://pyformat.info/">pyformat.info</a> 這個站，收集了不少實用的範例幫助大家理解，而且仔細看過之後發現舊的格式也可以用 dict 格式丟命名變數進去。</p>
<h4>Multiline String</h4>
<p>多行字串也是我蠻喜歡的，像是要弄 template 的時候就很方便，JavaScript 一直到 ES6 的 tempalte string 才算是有內建，Python 就用三個引號框起來就可以了：</p>
<pre><code class="language-python">template_string = &quot;&quot;&quot;&lt;div&gt;
                       Wow
                     &lt;/div&gt;&quot;&quot;&quot;
</code></pre>
<p>不過很理所當然的，那些為了縮排所填入的空白，就都是真的字串內容，所以 <code>Wow</code> 前面就是有 23 個空白字元，如果字串在 class 或是 function 定義裡面，那空白就會更多，在一些使用情境下，空白數量是影響很大的，所以就會有到底該怎樣排的問題，StackOverflow 上就可以找到相關的<a href="https://stackoverflow.com/questions/2504411/proper-indentation-for-python-multiline-strings">問題</a>，還好我處理 HTML template 的話，影響不大，當然結果會造成一些多餘的資料傳輸啦。</p>
<h4>Keyword Arguments</h4>
<p>很久以前我寫過一篇 <a href="https://blog.othree.net/log/2013/06/19/options-object/">options object</a> 的文章，為的就是處理參數太多造成程式碼不好解讀的問題，沒想到 Python 可以在呼叫函數的時候，傳入參數的名稱，例如以下的函數：</p>
<pre><code class="language-python">def func(a, b, c, d):
    return a + b + c + d
</code></pre>
<p>呼叫的時候可以分別說明每個參數的 key 和 value 對應關係：</p>
<pre><code class="language-python">func(a=1, b=2, c=3, d=4)
</code></pre>
<p>而且也可以混用：</p>
<pre><code class="language-python">func(1, 2, c=3, d=4)
</code></pre>
<p>覺得這語法真是領先超多，當然 ECMAScript 現在可以用 destructing assignment 的語法做到類似效果，不過我覺得還是有些差距。</p>
<p>而針對 Keyword Argument 其實還有特殊的 syntax 是 <code>**kwargs</code>，其實我一開始是先看到這個語法的，想說 Python 怎麼有個很像 C++ 指標的東西，看了許久，某天終於會意到 kw 是 keyword 的意思，然後才終於理解是怎麼回事，後來查資料才知道還有 <a href="https://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/"><code>*args</code></a>，現在的 ECMAScript 的話可以用 <code>...</code> spread operator 做到。</p>
<h4>Circular Dependency</h4>
<p>恩，可以做到循環相依，第一次看到真是覺得不可思議，不過後來慢慢瞭解限制，大概也知道怎麼實際上是如何跑的了。</p>
<h4>Ternary Operator</h4>
<p>三元運算，Python 的語法真的是比較特別一點，其它語言比較常看到的是用 <code>?</code>，不過 Python 是用後置的 <code>if else</code>：</p>
<pre><code class="language-python">reality = True if isReal else False
</code></pre>
<p>其實我還蠻喜歡後置的 <code>if</code> 語句，第一次看到這種寫法是在 CoffeeScript，我很常用在一些參數特殊狀況的處理，一樣 CoffeeScript，不用後置 <code>if</code> 的時候：</p>
<pre><code class="language-coffeescript">filename = file.name

if file.hash
  filename = filename + '-' + file.hash
  
if file.ext
  filename = filename + '.' + file.ext
</code></pre>
<p>用了後置 <code>if</code> 的話可以寫成：</p>
<pre><code class="language-coffeescript">filename = file.name

filename = filename + '-' + file.hash if file.hash

filename = filename + '.' + file.ext if file.ext
</code></pre>
<p>看起來整齊許多，視覺上(?)少了一層縮排，不過 Python 的三元運算，和 CoffeeScript 的後置 <code>if</code> 語法是不一樣的東西，雖然可以用來做類似的事情，但是因為他是三元運算，所以一定要提供 <code>else</code> 區段：</p>
<pre><code class="language-python">filename = filename + '.' + file.ext if file.ext else filename
</code></pre>
<p>就比較不喜歡這樣就是了。</p>
<h4>Tuple</h4>
<p>Python 的 List 資料型態可以比做 JS 的 Array、Dict 可以比做 Object，兩種資料型態分別是使用中括號和大括號，不過在 Python 語言裡，還有一種用小括號的 Tuple 資料型態。</p>
<p>Tuple 資料型態似乎還蠻少見的，我第一次聽到這個名詞的時候是在學校學資料庫系統的時候，一筆資料稱為一個 Tuple，不知道為什麼印象很深，然後第一次看到使用 tuple 的程式碼自然是不太理解，不過還算直觀看的懂，後來不知道為什麼查到這種語法其實是一種資料型態叫 Tuple 的，意義上和資料庫系統的 Tuple 感覺還蠻像的，理解這是個資料型態之後用起來覺得順手很多，而且 Python 還蠻自由，很多地方和 List 都可以用一樣的操作，像是 <code>in</code> 運算，或是作為 function 的多個回傳值（多回傳值的函數也蠻方便的）。</p>
<h4>in 運算</h4>
<p>上面提到的 <code>in</code> 運算，用來判斷一個 List 或 Tuple 是否包含特定元素：</p>
<pre><code class="language-python">if target.stat in ('ACTIVE', 'PREMIUM')
    ok()
</code></pre>
<p>對於常在古早 JS 開發的人，真的是超羨慕的，可能有人說可以用 <code>indexOf</code> 做，雖然 JS String 的 indexOf 很早就有了，但是 Array 的 indexOf 卻是到 ES5.1 才正式進標準，IE9 之前的都不支援，所以要用他來判斷一個元素是否在一個陣列內，首先要確定你不支援 IE8 之前的瀏覽器，不過就算支援，其實程式碼也沒 <code>in</code> 運算來的漂亮，後來 ES2015 有個比較好一點的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"><code>Array.includes</code></a> 可以用就是了。</p>
<h4>Dict</h4>
<p>Dict 可以比做 JS 的 Object 比較好理解，對於這個我不能適應的有兩個地方，一是 Dict 不是 class，所以不能直接用 <code>.</code> 取屬性，一定要用 <code>[]</code> 或是內建的 <code>get()</code> ，再來就是用 <code>[]</code> 取屬性的時候，一定要 key 存在，用到不存在的 key 就會噴錯誤，如果一定要這樣操作就要改用 <code>get()</code>，get 還有一個特點是可以給 default 值，如果是複雜的結構，想要一口氣很深入就可以寫成：</p>
<pre><code class="language-python">data.get('attr1', {}).get('attr2', {}).get('attr3', None)
</code></pre>
<p>實在是有點難看，CoffeeScript 是有 Existential Operator 可以做這種多階層的取值：</p>
<pre><code class="language-coffeescript">data.attr1?.attr2?.attr3?
</code></pre>
<p>在 TC39 的草案也有類似的 <a href="https://github.com/TC39/proposal-optional-chaining">Optional Chainging</a>，這兩樣都是上一篇文章有提到的東西。</p>
<h4>Unix Timestamp</h4>
<p>內建的 datetime 似乎沒有支援直接輸出 Unix Timestamp，是說目前有需要都用 <a href="https://pendulum.eustace.io/">Pendulum</a>，還蠻好用的，API 介面也蠻直接，也有完整的時區、Period、Duration 等觀念。</p>
<h4>PEP8, Flake8</h4>
<p>文章一開始提到的 Flake8 把好幾個 code checker 包進去，包括了官方的 <a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a>、PyFlakes、pycodestyle 等，我用 Vim 的 <a href="https://github.com/vim-syntastic/syntastic">Syntastic</a> 都有支援，只要有安裝就會偵測到執行檔，然後就可以用來檢查了，一開始裝起來的時候就和第一次用 JSLint 一樣傷感情，不過兩個月過後到是還蠻適應的，其中比較和以往習慣不一樣的就是 function 參數的值，不論是定義時的 default value 還是呼叫時的 keyword argument，<code>=</code> 的左右兩邊都是不加空白的，例如：</p>
<pre><code class="language-python">def hello(name='John'):
  return 'Hello ' + name

hello(name='Hancock')
</code></pre>
<p>另外就是特殊情況需要循環相依，或是 import 但是不使用時，會需要關閉一些檢查，可以在該行末端加上註解關閉特定項目：</p>
<pre><code class="language-python">import pages  # noqa: F401
</code></pre>
<p>錯誤的編號可以參考 Flake8 的<a href="http://flake8.pycqa.org/en/latest/user/error-codes.html">文件</a>。</p>
<h4>Python Enhancement Proposals (PEPs)</h4>
<p>之前在研究 Joda Time 的時候，發現 Java 有個 <a href="https://jcp.org/en/jsr/all">JSR</a> (Java Specification Requests)，在找 Python 的 coding style 的時候則是發現了 <a href="https://www.python.org/dev/peps/">PEPs</a> (Python Enhancement Proposals)，不過 ECMAScript 目前是沒有類似的、完整的收集並編目各個 Proposal 文件的地方，甚至連語言本身的官網都沒有啊...XDrz</p>
]]>

</content>
</entry>

<entry>
<title>問號出頭天</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/11/19/question-mark-in-es/" />
<modified>2017-11-19T06:07:25Z</modified>
<issued>2017-11-18T16:06:30Z</issued>
<id>tag:blog.othree.net,2017://1.912</id>
<created>2017-11-18T16:06:30Z</created>
<summary type="text/plain"> 剛剛掃了一下 TC39 新的草案，發現和 ? 相關的還不少，稍微來介紹一下這幾個很初期的草案吧：首先第一個是已經見過一陣子的 Optional Chaining，第一次看到這種語法是 CoffeeScript，在 CoffeeScript 現在是叫 Existential Operator，不知道是不是以前就這個名字，對付多階層的物件特別好用： let zip = lottery.drawWinner?.()?.address?.zipcode 可以像這樣用，中間任何一層回傳 falsy value 就會直接把值給 zip 變數，而不會繼續往下找，不會造成 Script 執行錯誤，不過目前看起來對於 function 的處理比 CoffeeScript 麻煩一點，要寫成 ?.()，而不是 ?()，其實我覺得也比較醜一些。 第二個是 Nullish Coalescing，這是正港的用來設定變數 default 值用的，以前通常的作法是用 ||： function (option =...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>script</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37786653964/" title="Mario by othree, on Flickr"><img src="https://farm5.staticflickr.com/4517/37786653964_3a7bc2cef2_b.jpg" width="1024" height="576" alt="Mario" srcset="https://farm5.staticflickr.com/4517/37786653964_3a7bc2cef2_b.jpg 1024w, https://farm5.staticflickr.com/4517/37786653964_44fc722b32_h.jpg 1600w" /></a></p>
<p>剛剛掃了一下 TC39 新的草案，發現和 <code>?</code> 相關的還不少，稍微來介紹一下這幾個很初期的草案吧：首先第一個是已經見過一陣子的 Optional Chaining，第一次看到這種語法是 <a href="http://coffeescript.org/">CoffeeScript</a>，在 CoffeeScript 現在是叫 Existential Operator，不知道是不是以前就這個名字，對付多階層的物件特別好用：</p>
<pre><code class="language-javascript">let zip = lottery.drawWinner?.()?.address?.zipcode
</code></pre>
<p>可以像這樣用，中間任何一層回傳 falsy value 就會直接把值給 zip 變數，而不會繼續往下找，不會造成 Script 執行錯誤，不過目前看起來對於 function 的處理比 CoffeeScript 麻煩一點，要寫成 <code>?.()</code>，而不是 <code>?()</code>，其實我覺得也比較醜一些。</p>
<p>第二個是 <a href="https://github.com/tc39-transfer/proposal-nullish-coalescing">Nullish Coalescing</a>，這是正港的用來設定變數 default 值用的，以前通常的作法是用 <code>||</code>：</p>
<pre><code class="language-javascript">function (option = {}) {
  let quick = option.quick || true;
}
</code></pre>
<p>在上面的範例中，<code>quick</code> 預期是 boolean 值，可能是 <code>true</code> 或 <code>flase</code> ，預期的預設值是 <code>true</code>，不過這樣寫其實，如果傳 <code>false</code> 進來會誤判，結果會變成用預設值的 <code>true</code>，新的 Nullish Coalescing 就是要來解決這個問題，把 <code>||</code> 換成 <code>??</code>：</p>
<pre><code class="language-javascript">function (option = {}) {
  let quick = option.quick ?? true;
}
</code></pre>
<p>這樣傳 <code>false</code> 時就不會被當成沒傳值，只有 <code>null</code> 和 <code>undefined</code> 才會用預設值，其實判斷的方式和第一個 Optional Chaining 一樣。</p>
<p>第三個是 <a href="https://github.com/rbuckton/proposal-partial-application">Partial Application</a>，其實就是字面上的意思，不過是從 syntax 上就支援 partial 執行 function：</p>
<pre><code class="language-javascript">function add(x, y) { return x + y; }

const addOne = add(1, ?); // apply from the left
addOne(2); // 3
</code></pre>
<p>我覺得用 <code>?</code> 這招還蠻漂亮的，雖然我還不太有機會用到 就是。</p>
]]>

</content>
</entry>

<entry>
<title>Naming Cases</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/11/16/naming-cases/" />
<modified>2017-11-17T05:39:16Z</modified>
<issued>2017-11-16T04:31:26Z</issued>
<id>tag:blog.othree.net,2017://1.911</id>
<created>2017-11-16T04:31:26Z</created>
<summary type="text/plain"> 整理一下各種多單字 identifier 命名慣例（規則）： CamelCase CamelCase 應該是最有名的了，單字的首字母大寫，其它字母小寫，然後其實還分為 UpperCamelCase 和 lowerCamelCase，UpperCamelCase 是指第一個單字的首字母大寫；lowerCamelCase 則相反，其中 UpperCamelCase 又稱為 Pascal Case，因為是 Pascal 語言當中常用的命名慣例，而因為有 PascalCase 這名稱代表 UpperCamelCase，所以也很多人直接用 camelCase 代表 lowerCamelCase；此外，也有 Dromedary Case 的講法，不過現在應該只要只剩下 Pascal Case 和 Camel Case 的說法比較有人用吧，Lower Camel Case 在 JavaScript Standard 裡面是命名變數用、Upper Camel...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>vim</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/renaud44/5286648292/" title="Camel by Réno, on Flickr"><img src="https://farm6.staticflickr.com/5009/5286648292_f03dd7c973_b.jpg" width="1024" height="731" alt="Camel, " srcset="https://farm6.staticflickr.com/5009/5286648292_f03dd7c973_b.jpg 1024w" /></a></p>
<p>整理一下各種多單字 identifier <a href="https://www.itworld.com/article/2833265/cloud-computing/don-t-go-into-programming-if-you-don-t-have-a-good-thesaurus.html">命名</a>慣例（規則）：</p>
<h5>CamelCase</h5>
<p>CamelCase 應該是最有名的了，單字的首字母大寫，其它字母小寫，然後其實還分為 UpperCamelCase 和 lowerCamelCase，UpperCamelCase 是指第一個單字的首字母大寫；lowerCamelCase 則相反，其中 UpperCamelCase 又稱為 Pascal Case，因為是 Pascal 語言當中常用的命名慣例，而因為有 PascalCase 這名稱代表 UpperCamelCase，所以也很多人直接用 camelCase 代表 lowerCamelCase；此外，也有 Dromedary Case 的講法，不過現在應該只要只剩下 Pascal Case 和 Camel Case 的說法比較有人用吧，Lower Camel Case 在 JavaScript Standard 裡面是命名變數用、Upper Camel Case 則是大部分語言推薦的建構函示和 Class 的命名慣例。</p>
<p>CamelCase 應該也是最早有名稱的，而且其實還有很多的別名，而除了 CamelCase 外，其它命名慣例都是有用個符號分隔單字，其中最常見到的就是 snake_case 了。</p>
<h5>snake_case</h5>
<p>snake_case 是用底線符號 <code>_</code> 做分隔，通常是全小寫，名稱應該由其外觀而來，是 Ruby 社群那<a href="https://groups.google.com/forum/#!msg/comp.lang.ruby/ra5WDzNGwGU/oe_mnvRVclUJ">邊出</a>來的，應該可以算是象形文字的一個分支。在 Python 的 PEP 8 和 <a href="http://perldoc.perl.org/perlstyle.html">perlstyle</a> 是用 snake_case 來命名 function。</p>
<h5>MACRO_CASE</h5>
<p>snake_case 的另一種形式是全大寫字母，因為 C 語言的 MACRO 使用，所以稱為 MACRO_CASE，偶爾有人稱之為 ALL_CAPS（不過其實全部大寫就可以稱為 ALL CAPS 了），也有一種說法叫 SCREAMING_SNAKE_CASE，通常是常數使用的命名慣例，另外像是 Bash 的環境變數、C 語言的 MACRO 等也是這個形式。</p>
<p>以底線為分隔的，在 perlstyle 裡面還有定義一種不常見的形式，首字母大寫加上底線分隔的 Some_Caps_Snake_Case，作為模組內的 global/static 變數，另外在 wikipedia 上有看到 Ada 語言也是用這種命名慣例，這種形式目前似乎沒有慣用的稱呼方式。</p>
<h5>lisp-case</h5>
<p>lisp-case 則是用連字號（hyphens） <code>-</code> 做分隔，也一樣通常是全小寫，和 PascalCase 一樣因為程式語言 lisp 而得名，其實大部分語言都不支援 lisp-case，因為 <code>-</code> 同時是運算符號， parse 起來會蠻有問題的，除了 lisp 外我看過支援的還有 livescript，好像都還蠻偏 functional language 的，除了程式語言外，其實 URL 的路徑很常用，雖然主要是為了 SEO 效果，另外就是 HTML、XML 裡面的 attribute、id、class 也蠻容易見到用 lisp-case 的，而除了 lisp-case 這個名字外外，還有一個也很知名的稱呼是 kebab-case，和 snake_case 一樣是外觀而來的名稱。</p>
<h5>COBOL-CASE</h5>
<p>用連字號做分隔，但是全大寫的則是叫 COBOL-CASE，一樣是從 COBOL 語言而來。</p>
<h5>Train-Case</h5>
<p>以 hyphens 為分隔的，在 wikipedia 上還有看到首字母大寫的形式叫 Train-Case，不過沒有標註名稱出處，不多人用這個名稱，不過也沒其它名稱，以後應該也只有這個名稱吧，不常在程式語言內見到，Windows Power Shell 的指令是用這種規則命名的，另外一個比較常見的地方就是 HTTP Header 的 field name 了。</p>
<p>我自己其實是最喜歡 lisp-case，編寫 HTML 的時候 id、class 我都是用 lisp-case，次之是 snake_case，偏偏 JavaScript Standard 是用 camelCase 的，其實掙扎了一陣子，不過現在已經比較習慣一點了。</p>
<p>這些不同命名規則間的轉換其實有不少工具可以協助，Ian Storm Taylor 在 NPM 上有<a href="https://github.com/ianstormtaylor/to-case">一整個系列的工具</a>，支援很多種規則的轉換，還包括了書寫用的 <a href="https://lists.w3.org/Archives/Public/www-style/2011Feb/0634.html"><strong>Title Case</strong></a>，講到這個就要提一下 CSS 裡面的 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform"><code>text-transform</code></a> 的 capitalize，其實這個屬性只處理每個單字的第一個字母，也就是說，如果你本來是全大寫的 <strong>TITLE</strong>，用 capitalize 轉換後，還是 <strong>TITLE</strong>，如果要純 CSS 方案的，其它字母轉小寫，一個單字的話勉強可以配合 <code>::first-letter</code> 來辦到，不然就是輸出到 HTML 之前要先處理過，而且，capitalize 不是 Title Case，精確的 Title Case 是不會把一些介係詞、冠詞轉大寫的，例如「I Have an Apple」裡面的 <strong>an</strong>，這問題目前就是沒有 CSS 解法，有搜尋過一下發現，沒做的<a href="https://lists.w3.org/Archives/Public/www-style/2011Feb/0634.html">主因</a>應該是因為 Title Case 幾乎只有英語用的上。</p>
<p>在 Vim 上如果要轉換一個變數名稱的命名規則，我是用 <a href="https://github.com/AndrewRadev/switch.vim">switch.vim</a> 然後加上一組自訂的轉換設定：</p>
<pre><code class="language-vim">let g:switch_custom_definitions =
    \ [
    \   {
    \     '\&lt;\(\l\)\(\l\+\(\u\l\+\)\+\)\&gt;': '\=toupper(submatch(1)) . submatch(2)',
    \     '\&lt;\(\u\l\+\)\(\u\l\+\)\+\&gt;': &quot;\\=tolower(substitute(submatch(0), '\\(\\l\\)\\(\\u\\)', '\\1_\\2', 'g'))&quot;,
    \     '\&lt;\(\l\+\)\(_\l\+\)\+\&gt;': '\U\0',
    \     '\&lt;\(\u\+\)\(_\u\+\)\+\&gt;': &quot;\\=tolower(substitute(submatch(0), '_', '-', 'g'))&quot;,
    \     '\&lt;\(\l\+\)\(-\l\+\)\+\&gt;': &quot;\\=substitute(submatch(0), '-\\(\\l\\)', '\\u\\1', 'g')&quot;,
    \   }
    \ ]
</code></pre>
<p>這組設定是 <code>MACRO_CASE</code>、<code>lisp-case</code>、<code>camelCase</code>、<code>PascalCase</code>、<code>snake_case</code> 這樣的順序循環切換，還蠻方便的，不用花大腦思考要轉成哪種規則然後下不同指令，就一直連打 <code>-</code> 就好。</p>
<p>其實一開始只是在想有多少種組合才開始查的，結果幾乎一般組合都有地方使用，只差符號分隔單字加 camelCase 的兩種形式吧，最後放一些參考連結：</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Naming_convention_(programming)#Multiple-word_identifiers">Multiple-word identifiers</a></li>
<li><a href="https://en.wikipedia.org/wiki/Naming_convention_(programming)">Naming convention (programming)</a></li>
<li><a href="https://www.reddit.com/r/learnprogramming/comments/3wcne1/where_does_the_term_kebabcase_come_from/">Where does the term kebab-case come from</a></li>
<li><a href="https://en.wikipedia.org/wiki/Letter_case">Letter case</a></li>
</ul>
]]>

</content>
</entry>

<entry>
<title>Apple 電話支援</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/10/23/apple-phone-support/" />
<modified>2017-10-23T15:04:48Z</modified>
<issued>2017-10-23T15:02:46Z</issued>
<id>tag:blog.othree.net,2017://1.910</id>
<created>2017-10-23T15:02:46Z</created>
<summary type="text/plain"> 前陣子蘋果發表 iPhone 8 和 X 後，我趁機幫我爸買了 iPhone 7，因為是我爸第一次用 iPhone，所以就由我幫忙設定，想不到遇上了要電話聯繫客服的狀況，因為用了蘋果產品這麼久，還是第一次聯繫客服，所以特別紀錄一下。 遇到的狀況是，一開始覺得我爸沒有 Apple ID，所以就直接在手機上走註冊流程，使用的是我爸一直在使用的 gmail，沒想到走到後來，發現這個帳號已經存在了，這時還想說是不是以前幫他裝 iTunes 時有註冊過，不過嘗試登入都沒辦法成功，後來走忘記密碼的流程成功進去了，沒想到，裡面的資訊都是韓文，像是姓名、地址、app store 國家、安全問題等，很像是被盜用後把資料改成自己的樣子，然後我就一個一個慢慢改回正確的資料和設定，不過即使我區域設定到台灣，語言是中文，還是有一個地方改不動，那就是安全提示問題，依然保持韓文的題目，而因為我不知道問題的答案是什麼，也沒辦法重設，也無法開啟兩步驟驗證，據蘋果文件說明，開啟兩步驟驗證就會停用安全提示問題，而一個月後會把之前設定的安全提示問題刪除。 遇到這種狀況也只能聯絡客服了，一開始尋找入口不會太困難，不過蘋果不是直接留個號碼給你撥，而是有個表單請你填寫，他會打電話給你，一般看到這種做法的都會覺得是不是要很久以後才會有回應，不過其實完全相反，他在表單上就寫了大約兩分鐘後就會有人撥電話過去給你，而且這是真的！除了致電迅速外，蘋果這種做法其實還有兩個優點，一個是對客戶來說，不用電話費，另一個則是對蘋果來說，他們還是掌握主控權的。 接通電話之後，第一位服務人員無法處理這個狀況，跟他溝通一下後他轉給專門負責帳號的人員，請我等一下，然後我等了沒多久就換第二位接手，他接手時已經大概知道我的問題，不過我還是有把細節又交待一次，交待完之後，對方就表達了說叫我們不用擔心，一定會盡力幫我們解決問題，他本來有想請我做一些操作，不過知道我幾乎都做過後，也沒有要求我再嘗試一次，這時候他有提到最簡單的方法就是建立一個新的 Apple ID，不過我還是不太希望這樣，一時也沒別的信箱適合（那時候忘了 gmail 有 + 的別名可以用，後來想到時決定當最後備案），他二話不說，就要幫忙把我們的問題轉給主管，這次他有先說因為假日的關係要等比較久，結果真的等了蠻久，等待時是用手機開擴音所以還好不會太累，話筒端就播著蘋果風格的音樂，然後我也趁著這時間翻翻我爸過去收到的 Apple 的信，看一看覺得或許一開始我們沒申請過 Apple ID，而是有個韓國人申請錯帳號，然後我們收到信都是韓文也看不懂，不小心就點了連結然後帳號就開通了⋯ 等待時，前一位還有再回來關心一下，甚至他還試著幫忙翻譯了安全提示問題，想要看看會不會是我們以前設定的忘記了，這點我蠻意外的，不過因為真的沒印象所以也沒用，所以他也完全沒勉強我們測試，而且其實我已經亂測被鎖了，另外我也跟他說了目前推測可能是因為以前亂點到信件連結造呈現在的狀況。最後等了應該有半小時吧，終於等到了，這位主管的聲音聽起來和前一位差不多年輕，有點意外，再來就是他接電話前，已經跟前面那位交接好我的問題了，所以我不用再重新說明一次，而且是最新的狀況，最後這段過程我有點忘記，不過基本上就是，他會找工程師看有什麼法可以處理這個狀況，然後會再跟我聯絡，有約好傍晚在撥，不過沒隔一個小時他就又回撥了，他要請我收信然後回報信件內的六碼 code，不過我剛好在騎車移動，就還是請他六點在撥，後來收到的那個六碼 code 是高強度的，英數大小寫有別，看起來是個特殊的流程給 Apple Support 團隊確認帳號信箱所有權用的，回報確認之後，他就說要請我們等兩三天時間。 然後過了兩三天後，我爸接到電話說帳號已經可以使用了，我就去測試了一下，結果變無法登入，所以我推測是帳號砍掉了，測試過後就發現真的變成可以註冊的狀態，就趕快把他重新註冊起來，中間這段時間，我猜是去翻 archive 起來的使用者...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>mac</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34475448783/" title="Apple Store Taipei 101 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4198/34475448783_fc97f7bfaa_b.jpg" width="1024" height="683" alt="Apple Store Taipei 101, " srcset="https://farm5.staticflickr.com/4198/34475448783_fc97f7bfaa_b.jpg 1024w, https://farm5.staticflickr.com/4198/34475448783_2de7ddb630_h.jpg 1600w" /></a></p>
<p>前陣子蘋果發表 iPhone 8 和 X 後，我趁機幫我爸買了 iPhone 7，因為是我爸第一次用 iPhone，所以就由我幫忙設定，想不到遇上了要電話聯繫客服的狀況，因為用了蘋果產品這麼久，還是第一次聯繫客服，所以特別紀錄一下。</p>
<p>遇到的狀況是，一開始覺得我爸沒有 Apple ID，所以就直接在手機上走註冊流程，使用的是我爸一直在使用的 gmail，沒想到走到後來，發現這個帳號已經存在了，這時還想說是不是以前幫他裝 iTunes 時有註冊過，不過嘗試登入都沒辦法成功，後來走忘記密碼的流程成功進去了，沒想到，裡面的資訊都是韓文，像是姓名、地址、app store 國家、安全問題等，很像是被盜用後把資料改成自己的樣子，然後我就一個一個慢慢改回正確的資料和設定，不過即使我區域設定到台灣，語言是中文，還是有一個地方改不動，那就是安全提示問題，依然保持韓文的題目，而因為我不知道問題的答案是什麼，也沒辦法重設，也無法開啟兩步驟驗證，據蘋果文件說明，開啟兩步驟驗證就會停用安全提示問題，而一個月後會把之前設定的安全提示問題刪除。</p>
<p>遇到這種狀況也只能聯絡客服了，一開始尋找入口不會太困難，不過蘋果不是直接留個號碼給你撥，而是有個表單請你填寫，他會打電話給你，一般看到這種做法的都會覺得是不是要很久以後才會有回應，不過其實完全相反，他在表單上就寫了大約兩分鐘後就會有人撥電話過去給你，而且這是真的！除了致電迅速外，蘋果這種做法其實還有兩個優點，一個是對客戶來說，不用電話費，另一個則是對蘋果來說，他們還是掌握主控權的。</p>
<p>接通電話之後，第一位服務人員無法處理這個狀況，跟他溝通一下後他轉給專門負責帳號的人員，請我等一下，然後我等了沒多久就換第二位接手，他接手時已經大概知道我的問題，不過我還是有把細節又交待一次，交待完之後，對方就表達了說叫我們不用擔心，一定會盡力幫我們解決問題，他本來有想請我做一些操作，不過知道我幾乎都做過後，也沒有要求我再嘗試一次，這時候他有提到最簡單的方法就是建立一個新的 Apple ID，不過我還是不太希望這樣，一時也沒別的信箱適合（那時候忘了 gmail 有 + 的別名可以用，後來想到時決定當最後備案），他二話不說，就要幫忙把我們的問題轉給主管，這次他有先說因為假日的關係要等比較久，結果真的等了蠻久，等待時是用手機開擴音所以還好不會太累，話筒端就播著蘋果風格的音樂，然後我也趁著這時間翻翻我爸過去收到的 Apple 的信，看一看覺得或許一開始我們沒申請過 Apple ID，而是有個韓國人申請錯帳號，然後我們收到信都是韓文也看不懂，不小心就點了連結然後帳號就開通了⋯</p>
<p>等待時，前一位還有再回來關心一下，甚至他還試著幫忙翻譯了安全提示問題，想要看看會不會是我們以前設定的忘記了，這點我蠻意外的，不過因為真的沒印象所以也沒用，所以他也完全沒勉強我們測試，而且其實我已經亂測被鎖了，另外我也跟他說了目前推測可能是因為以前亂點到信件連結造呈現在的狀況。最後等了應該有半小時吧，終於等到了，這位主管的聲音聽起來和前一位差不多年輕，有點意外，再來就是他接電話前，已經跟前面那位交接好我的問題了，所以我不用再重新說明一次，而且是最新的狀況，最後這段過程我有點忘記，不過基本上就是，他會找工程師看有什麼法可以處理這個狀況，然後會再跟我聯絡，有約好傍晚在撥，不過沒隔一個小時他就又回撥了，他要請我收信然後回報信件內的六碼 code，不過我剛好在騎車移動，就還是請他六點在撥，後來收到的那個六碼 code 是高強度的，英數大小寫有別，看起來是個特殊的流程給 Apple Support 團隊確認帳號信箱所有權用的，回報確認之後，他就說要請我們等兩三天時間。</p>
<p>然後過了兩三天後，我爸接到電話說帳號已經可以使用了，我就去測試了一下，結果變無法登入，所以我推測是帳號砍掉了，測試過後就發現真的變成可以註冊的狀態，就趕快把他重新註冊起來，中間這段時間，我猜是去翻 archive 起來的使用者 log 判斷是不是可以砍帳號吧。</p>
<p>最後總結一下，這次過程我覺的蘋果電話客服有以下特色，不過大概也不會是每個公司都複製的起來的：</p>
<ol>
<li>由他們掌握主控權，但是又完全免費，而且填表後真的很快就會接到電話</li>
<li>每個要等待的階段都會先讓使用者有預期</li>
<li>除了第一位外言談都蠻誠懇的</li>
<li>完全相信（至少表現起來是）客戶，不會強迫做一些嘗試過的操作</li>
<li>連砍帳號都可以辦到</li>
</ol>
]]>

</content>
</entry>

<entry>
<title>OSX Admin Account 消失</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/09/16/osx-admin-account-missing/" />
<modified>2017-09-16T15:46:35Z</modified>
<issued>2017-09-16T15:02:54Z</issued>
<id>tag:blog.othree.net,2017://1.909</id>
<created>2017-09-16T15:02:54Z</created>
<summary type="text/plain"> 昨天晚上終於收齊拖了一段時間的 HITCON 2017 CMT 照片，根據莫非定律，這時候一定會有異象發生，果然，我的 iMac 就第一次出問題了，基本狀況是帳號消失，然後我剛好就一個主要帳號同時是 admin，所以狀況就升級成 admin 帳號消失了。 首先說一下背景，平常我是沒關電腦也沒休眠的，就是用螢幕熱點關閉顯示器而已，然後加上顯示器關閉太久之後回來需要密碼，不用休眠的主要原因是外接鍵盤休眠後就會抓不到，然後昨天晚上，安裝了 Adobe Bridge 後，無法使用，重複移除安裝了兩次結果依舊，於是我就先把照片作簡單的整理，然後丟上 NAS 做備份（NAS 還會丟上 Google Drive 做二號備份），接著我去忙其他事情之後回來，發現登入不了，說密碼錯誤，試了很多次都一樣，而這段時間也不可能進來幫我改密碼的，由於我之前還開了一個一般帳號，所以可以切換成其它使用者，然後就在我按了「切換使用者」之後，我的主要帳號就不見了！ 總之我就試著登入另一個帳號，中間還看到幾次鑰匙圈損毀的訊息，大概可以確定這次的狀況就是這個原因，然後 OSX 不知道怎麼判斷就認為沒這個帳號了，搜尋了一下網路，看到一些解法，最後我的處理方式如下： 重開機同時按著 cmd+s 進入 single user mode 用 single user mode 的 CLI 介面刪除 /var/db/.AppleSetupDone 這個檔案 執行...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>mac</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37260875515/" title="Mac OSX single user mode by othree, on Flickr"><img src="https://farm5.staticflickr.com/4367/37260875515_4399b64e42_b.jpg" width="1024" height="683" alt="Mac OSX single user mode" srcset="https://farm5.staticflickr.com/4367/37260875515_4399b64e42_b.jpg 1024w, https://farm5.staticflickr.com/4367/37260875515_07dbc0b069_h.jpg 1600w" /></a></p>
<p>昨天晚上終於收齊拖了一段時間的 HITCON 2017 CMT 照片，根據莫非定律，這時候一定會有異象發生，果然，我的 iMac 就第一次出問題了，基本狀況是帳號消失，然後我剛好就一個主要帳號同時是 admin，所以狀況就升級成 admin 帳號消失了。</p>
<p>首先說一下背景，平常我是沒關電腦也沒休眠的，就是用螢幕熱點關閉顯示器而已，然後加上顯示器關閉太久之後回來需要密碼，不用休眠的主要原因是外接鍵盤休眠後就會抓不到，然後昨天晚上，安裝了 Adobe Bridge 後，無法使用，重複移除安裝了兩次結果依舊，於是我就先把照片作簡單的整理，然後丟上 NAS 做備份（NAS 還會丟上  Google Drive 做二號備份），接著我去忙其他事情之後回來，發現登入不了，說密碼錯誤，試了很多次都一樣，而這段時間也不可能進來幫我改密碼的，由於我之前還開了一個一般帳號，所以可以切換成其它使用者，然後就在我按了「切換使用者」之後，我的主要帳號就不見了！</p>
<p>總之我就試著登入另一個帳號，中間還看到幾次鑰匙圈損毀的訊息，大概可以確定這次的狀況就是這個原因，然後 OSX 不知道怎麼判斷就認為沒這個帳號了，搜尋了一下網路，看到一些解法，最後我的處理方式如下：</p>
<ol>
<li>重開機同時按著 <code>cmd</code>+<code>s</code> 進入 single user mode</li>
<li>用 single user mode 的 CLI 介面刪除 <code>/var/db/.AppleSetupDone</code> 這個檔案</li>
<li>執行 <code>reboot</code> 重開機，這樣會進入初次開機的狀態</li>
<li>重新建立帳號，我是用相同的帳號名稱，會執行的有點久，最後會說失敗，原因應該是因為該帳號的 home 目錄已經存在了</li>
<li>再次重開機，結果會進入正常的登入畫面，可以登入新建的帳號，發現 home 目錄的東西幾乎都可以正常讀入</li>
</ol>
<p>最後，為什麼會鑰匙圈損毀呢，我推測是硬碟東西塞太多加上當時在上傳資料才造成問題的，不過也就是個推測而已啦。</p>
]]>

</content>
</entry>

<entry>
<title>Sublime Text 3</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/09/14/sublime-text-3/" />
<modified>2017-09-14T15:03:36Z</modified>
<issued>2017-09-14T14:59:57Z</issued>
<id>tag:blog.othree.net,2017://1.908</id>
<created>2017-09-14T14:59:57Z</created>
<summary type="text/plain"> 今天除了任天堂發表 Mario Odyssey 新情報並開放預約之外，還有一個令人意外的消息，就是 Sublime Text 3 正式版 release 了，官網也整個更新了，就我記憶所及，Sublime Text 最活躍的時期應該也是 Rails 正火熱的那段時間，雖然是閉源的半商業軟體，不過它確實是引入了很多先進的機制進入純文字編輯器世界，例如 Command-T（不過我推薦用 ctrlp.vim）、Command Palette、Multi Cursor 應該也是吧，或許大部分人會覺得我應該是 Vim 為主力的，應該對 Sublime 興趣不大吧，不過事實上我有買他的 license，其實當初購買的原因是我的博士論文是用 Latex 格式的文件，然後用 Vim 寫這麼大份文本有點辛苦，所以後來都是用 Sublime Text 2，後來畢業就決定花錢買個 license 以茲感謝，而即使到今天也還是會有用到，算是和 Vim 不同用途。 其實本來以為作者已經不太想繼續了，沒想到實際上是偷偷的一直開發，最新這版和上次 Beta 已經相隔一年了，有興趣的可以看看 Changelog...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>software</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37224534155/" title="Sublime Text 3 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4372/37224534155_19ea953001_b.jpg" width="1024" height="670" alt="Sublime Text 3, " srcset="https://farm5.staticflickr.com/4372/37224534155_19ea953001_b.jpg 1024w, https://farm5.staticflickr.com/4372/37224534155_6dc29751a4_h.jpg 1600w" /></a></p>
<p>今天除了任天堂發表 Mario Odyssey 新情報並開放預約之外，還有一個令人意外的消息，就是 Sublime  Text 3 正式版 release 了，官網也整個<a href="https://www.sublimetext.com">更新</a>了，就我記憶所及，Sublime Text 最活躍的時期應該也是 Rails 正火熱的那段時間，雖然是閉源的半商業軟體，不過它確實是引入了很多先進的機制進入純文字編輯器世界，例如 <a href="https://github.com/wincent/command-t">Command-T</a>（不過我推薦用 <a href="https://github.com/kien/ctrlp.vim">ctrlp.vim</a>）、<a href="https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette">Command Palette</a>、Multi Cursor 應該也是吧，或許大部分人會覺得我應該是 Vim 為主力的，應該對 Sublime 興趣不大吧，不過事實上我有買他的 license，其實當初購買的原因是我的博士論文是用 Latex 格式的文件，然後用 Vim 寫這麼大份文本有點辛苦，所以後來都是用 Sublime Text 2，後來畢業就決定花錢買個 license 以茲感謝，而即使到今天也還是會有用到，算是和 Vim 不同用途。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37224533955/" title="Sublime Text 3 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4411/37224533955_ccc97a9e2b_b.jpg" width="325" height="168" alt="Sublime Text 3, " srcset="https://farm5.staticflickr.com/4411/37224533955_ccc97a9e2b_b.jpg 650w" /></a></p>
<p>其實本來以為作者已經不太想繼續了，沒想到實際上是偷偷的一直開發，最新這版和上次 Beta 已經相隔一年了，有興趣的可以看看 <a href="https://www.sublimetext.com/3">Changelog</a> ，然後整個視覺設計也改很大，最上面那張是 Adaptive 主題的樣子，Default 的則是：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37052309552/" title="Sublime Text 3 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4384/37052309552_68f8a32300_b.jpg" width="1024" height="670" alt="Sublime Text 3, " srcset="https://farm5.staticflickr.com/4384/37052309552_68f8a32300_b.jpg 1024w, https://farm5.staticflickr.com/4384/37052309552_0318a85a9c_h.jpg 1600w" /></a></p>
<p>似乎很多人不習慣淺灰色的地方就是，另外就是 icon 也換了：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/37224612235/" title="Sublime Text 3 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4386/37224612235_91a13883c4_b.jpg" width="256" height="256" alt="Sublime Text 3, " srcset="https://farm5.staticflickr.com/4386/37224612235_91a13883c4_b.jpg 1024w" /></a></p>
<p>我今天也因此好幾次找不到就是了...</p>
]]>

</content>
</entry>

<entry>
<title>196</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/08/18/196/" />
<modified>2017-08-18T16:00:01Z</modified>
<issued>2017-08-18T15:54:40Z</issued>
<id>tag:blog.othree.net,2017://1.907</id>
<created>2017-08-18T15:54:40Z</created>
<summary type="text/plain"> 這篇文章是在寫 temporal 那篇文章時，找資料發現的有趣東西，在那篇文章當中，我有說到目前 date 物件的各種問題，其中第六點是「不支援 Gregorian Calendar（格里曆）以外的日曆（例如農曆）」 ，然後我就好奇起來了，現在還有什麼其他的曆法在用呢？結果找著找著，就看到有個網站提供了很多曆法了線上轉換，像是 Julian Calendar（儒略曆）、Hebrew Calendar（希伯來曆）、Islamic Calendar（伊斯蘭曆）、Persian Calendar（波斯曆）等，用 JavaScript 寫的，而且在程式碼裡面宣告貢獻到 public domain。 由於整個網站非常老派，我就對作者起了興趣，發現這個網站 fourmilab.ch 的所有者是 John Walker，Autodesk 的 founder 之一，他現在已經退休搬到瑞士去了，然後 fourmilab.ch 上就放了他的各種記錄，像是文章，其實就是 blog，看他結構感覺也是個 MovableType 站，還有閱讀清單，旅遊照片，例如他去過南極一趟，還有些他寫的書，例如 Hacker&apos;s Diet、The Autodesk File 等。 然後，我在 fourmilab.ch 上看到了「Three Years...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>diary</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/36512922821/" title="196 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4360/36512922821_91c0a76194_b.jpg" width="1024" height="683" alt="196" srcset="https://farm5.staticflickr.com/4360/36512922821_91c0a76194_b.jpg 1024w, https://farm5.staticflickr.com/4360/36512922821_a17aefd061_h.jpg 1600w" /></a></p>
<p>這篇文章是在寫 <a href="http://blog.othree.net/log/2017/08/12/temporal-is-next-date/">temporal</a> 那篇文章時，找資料發現的有趣東西，在那篇文章當中，我有說到目前 date 物件的各種問題，其中第六點是「不支援 Gregorian Calendar（格里曆）以外的日曆（例如農曆）」 ，然後我就好奇起來了，現在還有什麼其他的曆法在用呢？結果找著找著，就看到有個<a href="http://www.fourmilab.ch/documents/calendar/">網站</a>提供了很多曆法了線上轉換，像是 Julian Calendar（儒略曆）、Hebrew Calendar（希伯來曆）、Islamic Calendar（伊斯蘭曆）、Persian Calendar（波斯曆）等，用 JavaScript 寫的，而且在程式碼裡面宣告貢獻到 public domain。</p>
<p>由於整個網站非常老派，我就對作者起了興趣，發現這個網站 fourmilab.ch 的所有者是 <a href="https://en.wikipedia.org/wiki/John_Walker_(programmer)">John Walker</a>，Autodesk 的 founder 之一，他現在已經退休搬到瑞士去了，然後 fourmilab.ch 上就放了他的各種記錄，像是<a href="http://www.fourmilab.ch/fourmilog/">文章</a>，其實就是 blog，看他結構感覺也是個 MovableType 站，還有<a href="http://www.fourmilab.ch/documents/reading_list/">閱讀清單</a>，旅遊照片，例如他去過<a href="http://www.fourmilab.ch/images/antarctica_2013/S015.html">南極一趟</a>，還有些他寫的書，例如 <a href="ttps://www.fourmilab.ch/hackdiet/">Hacker's Diet</a>、<a href="http://www.fourmilab.ch/autofile/">The Autodesk File</a> 等。</p>
<p>然後，我在 fourmilab.ch 上看到了「<a href="http://fourmilab.ch/documents/threeyears/threeyears.html">Three Years Of Computing</a>」這篇文章，標題就吸引了我進去仔細閱讀，這篇文章是在說迴文數（palindrome）挑戰，什麼是迴文數呢，「95277259」就是迴文數，不論是從頭開始還是反過來從尾開始都是相同的數字，那什麼是迴文數問題呢？首先你要拿到一個非迴文數的十進位數字，例如 <strong>362</strong> 好了，把他和自己的反轉相加：</p>
<pre><code>&gt;
   362
+  263
------
   625
</code></pre>
<p>結果不是迴文數，那繼續一樣的反轉相加運算：</p>
<pre><code>&gt;
   625
+  526
------
  1151
+ 1511
------
  1661
</code></pre>
<p>最後得到了一個迴文數 <strong>1661</strong>，迴文數問題就是，是否所有的正整數都可以透過這樣的運算，不管幾次，最終可以得到迴文數，如果有數字無法透過這個過程變成迴文數，那這數字也可以稱為 <a href="https://zh.wikipedia.org/wiki/%E5%88%A9%E5%85%8B%E7%91%9E%E5%B0%94%E6%95%B0">Lychrel Number</a>，不過因為目前無法從理論證明一個十進位數是 Lychrel Number，就只能想辦法反證它（註：我有看到說二進位數有證明）。</p>
<p>文裡說到，所有小於一萬的數字都已經被測試過，大部分的數字都可以用很少的次數就得到迴文數，其中，最小的可能的 Lychrel Number: <strong>196</strong> ，到目前還無法讓它經由反轉相加的過程變為迴文數，John Walker 那個跑了三年的程式就是在驗證 196 到底能不能透過反轉相加的過程。他在 1987 年用他的 Sun 工作站開始跑，結果跑了三年後的 1990，達到他當初設的停止條件，100 萬位，總共反轉相加了 2415836 次，他還放上他的程式碼還有計算的結果，如果有人有興趣可以從這邊開始接手繼續算下去，事實上，當初他跑這程式的工作站性能和現在的電腦比起來差距實在很大，在其它人後來的<a href="http://jasondoucette.com/worldrecords.html">挑戰</a>當中，就有提到一些性能數字，例如 Ian J. Peter 的程式只需要 5 小時就可以計算到一百萬位，用的電腦大約是 500 MHz 的 CPU。</p>
<p>John Walker 在 1990 年跑到一百萬位，結果還沒得到迴文數，那麼現在最新的紀錄是多少呢？<a href="http://www.p196.org/news.html">p196.org</a> 這網站收集了很多相關的資訊，對這議題有興趣的人還可以去看看，而它站上的紀錄是 <strong>413,930,770</strong>，四億多位，總共反轉相加了十億次；至於我目前看到的最高紀錄，是在「<a href="http://www.dolbeau.name/dolbeau/p196/p196.html">The p196_mpi page</a>」這裡，提供了平行版的程式，而據作者 Romain Dolbeau 所說，他在 2015 年 2 月已經計算到十億位了，不過他沒提供相關資料，有提供的只有 2012 年的六億位結果。</p>
]]>

</content>
</entry>

<entry>
<title>Temporal - 下個世代的 Date</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/08/12/temporal-is-next-date/" />
<modified>2017-08-14T01:23:25Z</modified>
<issued>2017-08-12T02:41:06Z</issued>
<id>tag:blog.othree.net,2017://1.906</id>
<created>2017-08-12T02:41:06Z</created>
<summary type="text/plain">這篇文章寫到快寫完的時候，決定到 Modern Web 2017 分享，所以就比較晚發佈 ，其實 Modern Web 演講內容比較多，文末有放相關參考資料。 JSConf EU 2017 前陣子放出演講影片，蠻多場次都不錯，這篇要主要是從其中的一場演講而來，演講是「 The Past, Present, and Future of JavaScript Date and Time APIs」，講者是 Matt Johnson，Moment.js 的作者，下面是這場演講的影片： 長度不長，推薦可以看一下，主要是在談 JavaScript 的 Datetime，提出這老東西的問題，我覺得可以稱為 WAT JavaScript 的 Datetime 篇，像是 0 起始的月份、不支援 Time Zone、難以運算、是...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>script</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p>這篇文章寫到快寫完的時候，決定到 <a href="http://modernweb.tw/">Modern Web 2017</a> 分享，所以就比較晚發佈 ，其實 Modern Web 演講內容比較多，文末有放相關參考資料。</p>
<p>JSConf EU 2017 前陣子放出演講影片，蠻多場次都不錯，這篇要主要是從其中的一場演講而來，演講是「 The Past, Present, and Future of JavaScript Date and Time APIs」，講者是 Matt Johnson，<a href="http://momentjs.com/">Moment.js</a> 的作者，下面是這場演講的影片：</p>
<div class="embed_16_9">
  <iframe width="853" height="480" src="https://www.youtube.com/embed/aVuor-VAWTI?rel=0" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>長度不長，推薦可以看一下，主要是在談 JavaScript 的 Datetime，提出這老東西的問題，我覺得可以稱為 WAT JavaScript 的 Datetime 篇，像是 0 起始的月份、不支援 Time Zone、難以運算、是 mutable 物件等等，接著介紹了目前檯面上比較多人用的幾個 library 和他們的特色，都是品質不錯的 library，有需求的可以從中選用，包括了：</p>
<ul>
<li><a href="http://momentjs.com/">Moment.js</a></li>
<li><a href="https://date-fns.org/">date-fns</a></li>
<li><a href="https://js-joda.github.io/js-joda/">js-joda</a></li>
</ul>
<p>最後則是提到他們目前在進行的，改進 JavaScript Datetime 的計畫，也就是新的 ECMAScript Datetime 的 proposal，叫 <a href="https://github.com/tc39/proposal-temporal">temporal</a>，除了 Matt Johnson 之外，還有一位 Microsoft 的 Maggie Pint 也是目前草案的主力推手，他的 blog 上就有兩篇相關的<a href="https://maggiepint.com/2017/04/09/fixing-javascript-date-getting-started/">文</a><a href="https://maggiepint.com/2017/04/11/fixing-javascript-date-web-compatibility-and-reality/">章</a>，裡面有列出目前 <code>Date</code> 的主要問題：</p>
<ol>
<li>不支援 timezone，只有 UTC 和 local</li>
<li>Parser （轉譯日期字串轉成日期物件）的行為不可靠且難以使用</li>
<li>Date object 是 mutable 物件</li>
<li>日光節約時間的行為無法預期</li>
<li>日期計算 API 很難用</li>
<li>不支援 <a href="https://jonathanou.wordpress.com/2005/06/02/gregorian-calendar/">Gregorian</a> 以外的日曆（例如農曆）</li>
</ol>
<p>事實上，目前的 Date 物件，當初 Brendan Eich 因為時間緊迫，所以 Datetime 的 API 是直接參考 Java 的，當時是 1995，參考的應該是 Beta 版 Java 的 <code>java.util.Date</code>，後來 1996 年 1 月 Java 1.0 發佈，但是到了 1997 年 2 月的 Java 1.1 發佈時，<code>java.util.Date</code> 大部分的設計都被捨棄了，然後 1997 年 6 月，ECMAScript 標準 1.0 發佈，結果這個在 Java 語言只活了 1 年多的設計，就活在 JavaScript 世界活了 20 年之久，相信有用過的人都能多少都知道使用起來的痛苦。</p>
<p>不過要改善 JavaScript 從來就不是一件容易的事情，最大的困難點就是你不能隨便改動任何已有的東西，像是已經存在 20 年的 <code>Date</code>，即使它設計不好，隨便改動都可能造成大量的網站壞掉，不像是 Java 1.0 升級到 Java 1.1 那樣，各自用各自的，在改善 JavaScript 時基本上就是要當成有人從不升級，不能有 broken change，最簡單的方法就是增加新的東西，而不要去修改舊的，這也是目前 temporal 的方向（其實 ES 5.1 後，舊有的東西該修的東西大概都修完，之後就是一直加新的而已），在 draft 文件已經有一點基礎和預期的 code sample 了：</p>
<pre><code class="language-javascript">var ldt = new CivilDateTime(2017, 12, 31, 23, 59);

var addHours = new CivilDateTime(2017, 12, 31, 23, 00)
    .add(2, 'hours');

var zdt = ldt.withZone('America/New_York');
</code></pre>
<p>可以看到有方便的加減時間的 API、immutable 特性、還有時區支援等等。事實上這份草案還非常初步而已，還缺非常多細節，預期會有的物件目前已經有八種了，不過這八種物件的 API 也都還沒定義完，不過也正因為如此，想參與的人反而這時候比較有機會提供想法，推薦有興趣的人可以關注關注，給點意見。</p>
<p>最後列一些參考文件：</p>
<ul>
<li>Web Rebels 2017 <a href="https://twitter.com/jxxf">@jxxf</a> 的「<a href="https://www.webrebels.org/#talk-8">Time and Time Again: Fixing Dates in JS</a>」 花了很多時間在講 JavaScript Date 缺少的 concept</li>
<li>林信良（良葛格）介紹 Java 的 Joda-Time 和 JSR310 的<a href="http://www.codedata.com.tw/tag/jodatime/">相關文章</a>，Joda-Time 是 Java 上很廣為使用的時間套件，由 Stephen Colebourne 為主開發的，他也參與了 <a href="https://jcp.org/en/jsr/detail?id=310">JSR 310: Date and Time API</a> 的制訂，並在 JDK 8 開始可以用</li>
<li>temporal 目前主要作者之一的 Maggie Pint 的文章：<a href="https://maggiepint.com/2017/04/11/fixing-javascript-date-web-compatibility-and-reality/">Fixing JavaScript Date - Web Compatibility and Reality</a></li>
<li><a href="https://www.youtube.com/watch?v=oVVXW7lmwtw">Understanding Dates, Times, and Time Zones, with Maggie Pint, Matt Johnson, and Jon Skeet</a></li>
</ul>
]]>

</content>
</entry>

<entry>
<title>WAT JavaScript Date</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/08/12/wat-javascript-date/" />
<modified>2017-08-11T16:16:21Z</modified>
<issued>2017-08-11T16:13:59Z</issued>
<id>tag:blog.othree.net,2017://1.905</id>
<created>2017-08-11T16:13:59Z</created>
<summary type="text/plain">週四在 Modern Web 2017 分享的投影片 /* A_A */...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>script</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p>週四在 Modern Web 2017 分享的投影片</p>
<script async="async" class="speakerdeck-embed" data-id="5cf2c2b7e3734425b660781da7a9e57a" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
]]>

</content>
</entry>

<entry>
<title>iPad Pro 10.5-inch</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/08/03/ipad-pro-105-inch/" />
<modified>2017-08-12T03:46:07Z</modified>
<issued>2017-08-03T14:17:48Z</issued>
<id>tag:blog.othree.net,2017://1.904</id>
<created>2017-08-03T14:17:48Z</created>
<summary type="text/plain"> 本來其實就一直想要為了四喇叭升級 iPad Pro 了，不過手上機器還可以用就沒下手，最近因緣際會終於要下手升級了，考慮了一陣子卻遲遲無法決定要買 12.9 吋還是剛發表的新款 10.5 吋，直到前天終於我買了 10.5 吋，兩個推手： 有 n 個人跟我說 12.9 吋太重，雖然我去店面拿起來感覺是還好； 我自己店面試用有覺得體積是有點過大。...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>buy</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35936571200/" title="iPad Pro 10.5 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4353/35936571200_fc44613220_b.jpg" width="1024" height="683" alt="iPad Pro 10.5, " srcset="https://farm5.staticflickr.com/4353/35936571200_fc44613220_b.jpg 1024w, https://farm5.staticflickr.com/4353/35936571200_e0c6c415db_h.jpg 1600w" /></a></p>
<p>本來其實就一直想要為了四喇叭升級 iPad Pro 了，不過手上機器還可以用就沒下手，最近因緣際會終於要下手升級了，考慮了一陣子卻遲遲無法決定要買 12.9 吋還是剛發表的新款 10.5 吋，直到前天終於我買了 10.5 吋，兩個推手：</p>
<ol>
<li>有 n 個人跟我說 12.9 吋太重，雖然我去店面拿起來感覺是還好；</li>
<li>我自己店面試用有覺得體積是有點過大。</li>
</ol>
]]>
<![CDATA[<p>然後最後一根稻草是 Apple Store 沒有 12.9 吋的現貨，所以我最後是拿了 iPad Pro 玫瑰金、Wifi、256GB 的版本，回來之後覺得實在是有感升級，雖然我上一台是 Air ，不是 iPad Pro 9.7，還是來介紹一下這次的 10.5 有哪些地方不同。</p>
<p>首先是尺寸，本來單獨看 10.5 吋機種，還以為是 9.7 吋的大小塞進比較大的螢幕，事實上 10.5 吋是比 9.7 吋大一點的：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35524354283/" title="iPad Pro 10.5 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4345/35524354283_a0e736ea4d_b.jpg" width="1024" height="683" alt="iPad Pro 10.5, " srcset="https://farm5.staticflickr.com/4345/35524354283_a0e736ea4d_b.jpg 1024w, https://farm5.staticflickr.com/4345/35524354283_2330336dc7_h.jpg 1600w" /></a></p>
<p>結果就是保護殼類的周邊例如 Smart Cover 都不能沿用，尺寸不對，我看<a href="https://www.cool3c.com/article/127342">癮科技</a>有測試鍵盤還是可以接上，就是大小不合而已。另外厚度比 Air 薄不是新聞了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35524353103/" title="iPad Pro 10.5 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4362/35524353103_692ba4dc52_b.jpg" width="1024" height="683" alt="iPad Pro 10.5" srcset="https://farm5.staticflickr.com/4362/35524353103_692ba4dc52_b.jpg 1024w, https://farm5.staticflickr.com/4362/35524353103_0f21f121d2_h.jpg 1600w" /></a></p>
<p>重量其實照規格上寫的是沒比較輕，差個十來公克吧，不過我覺得整體拿起來感覺是比較輕盈的。</p>
<p>再來四喇叭是我一開始主要想要升級 Pro 的原因，因為我現在使用很大比例是拿橫的看影片，這時候四喇叭就有差了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/36164320082/" title="iPad Pro 10.5 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4401/36164320082_259c2422dd_b.jpg" width="1024" height="683" alt="iPad Pro 10.5" srcset="https://farm5.staticflickr.com/4401/36164320082_259c2422dd_b.jpg 1024w, https://farm5.staticflickr.com/4401/36164320082_cf26af2c73_h.jpg 1600w" /></a></p>
<p>相機也有升級，可以錄到 4K 30fps，後相機還多了閃燈，有光學變焦和防手震，藍寶石水晶玻璃，相對的鏡頭有凸出，不過我是沒什麼拿 iPad 拍照啦。</p>
<p>支援 Apple Pay，但是我不想要拿著 iPad 去付款..</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/36164319222/" title="iPad Pro 10.5 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4415/36164319222_192e05cf58_b.jpg" width="1024" height="683" alt="iPad Pro 10.5" srcset="https://farm5.staticflickr.com/4415/36164319222_192e05cf58_b.jpg 1024w, https://farm5.staticflickr.com/4415/36164319222_4c8603e28b_h.jpg 1600w" /></a></p>
<p>然後就是最大亮點的螢幕了，還可以分幾個特色來看：</p>
<ol>
<li>螢幕的抗指紋塗層似乎有升級，我看<a href="https://www.apple.com/tw/ipad-pro/specs/">產品規格</a>還有特別寫「防指印疏油外膜」，應該是和以前有差吧，觀察看看能撐多久；</li>
<li>反光減少很多很多，規格也是有特別寫了一條「抗反射鍍膜」，不知道和 Pro 9.7 比如何，我找了一下以前的報導發現是 Air 2 開始有的，剛好我的 Air 還沒有（補充，根據 m01 上一篇<a href="https://www.mobile01.com/newsdetail/22121/10-5-ipad-pro-one-week-review">比較</a>，和 Pro 9.7 比也差很多）；</li>
<li>P3 廣色域高亮度和 True Tone，True Tone 拍照的時候比較會有明顯感覺吧，基本上就是要讓肉眼感覺不到差異的功能；</li>
<li>120 Hz 就是 120fps 的意思啦，之前看這麼高 frame rate 的就是去看李安的「比利·林恩的中場戰事」了，這規格的動畫真的有點有趣，我在店面玩得的時候還沒感覺，回來開始設定的時候，突然覺得好像哪裡不太一樣，大概就是當初看比利·林恩的中場戰事時的那種，有不一樣，大腦有感覺，但是那種差異實在是無法描述，蘋果網站上也說是 &quot;The world's most advanced display.&quot;</li>
</ol>
<p>綜合以上的特點，我覺得這次升級是很有感啦。</p>
<p>最後來補個 Apple Store 消費記錄，發現他們查庫存全部都用手機終端查，即使重開軟體也不放棄！不過這是有原因的，要搶貨也要靠手機終端，甚至店員 A 點下去之後，就會有店員 B 把東西送過來！然後第二次用 Android Pay 總算成功了。</p>
]]>
</content>
</entry>

<entry>
<title>日本橋人形町</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/08/01/nihombashi-ningyocho/" />
<modified>2017-08-01T14:09:57Z</modified>
<issued>2017-08-01T14:00:29Z</issued>
<id>tag:blog.othree.net,2017://1.903</id>
<created>2017-08-01T14:00:29Z</created>
<summary type="text/plain"> 前陣子去東京有些時間可以自己安排，後來因為也沒特別有什麼目標，就決定排個可以比較悠閒的行程，就是去人形町逛逛，其實很早之前就知道人形町了，後來真的比較有印像是看了新參者這部小說，這本小說的舞台就圍繞在人形町，後來阿部寬有主演日劇版，更是大大帶起該地區最近的知名度，除了新參者之外，我偶爾會看有吉君的正直散步，也是有一兩集散步到那附近，所以就把目標放在人形町了。...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>diary</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35737121375/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4238/35737121375_528bc4b723_b.jpg" width="1024" height="683" alt="日本橋, " srcset="https://farm5.staticflickr.com/4238/35737121375_528bc4b723_b.jpg 1024w, https://farm5.staticflickr.com/4238/35737121375_659ce1f602_h.jpg 1600w" /></a></p>
<p>前陣子去東京有些時間可以自己安排，後來因為也沒特別有什麼目標，就決定排個可以比較悠閒的行程，就是去人形町逛逛，其實很早之前就知道人形町了，後來真的比較有印像是看了新參者這部小說，這本小說的舞台就圍繞在人形町，後來阿部寬有主演日劇版，更是大大帶起該地區最近的知名度，除了新參者之外，我偶爾會看有吉君的正直散步，也是有一兩集散步到那附近，所以就把目標放在人形町了。</p>
]]>
<![CDATA[<p>當天到達人形町時其實中午了，所以第一個目標就是先去找午餐，人形町其實範圍不大，熱鬧的就是人形町站到水天宮之間那段，再加上橫向的甘酒橫丁，範圍不大，慢慢走也只要兩三個小時就可以晃完，我走沒兩下就發現甘酒橫丁，就灣進去找吃的了，結果發現有一間排了不少人的燒鳥，叫久助。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567894502/" title="日本橋 久助 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4263/35567894502_0425356b57_b.jpg" width="683" height="1024" alt="日本橋 久助, " srcset="https://farm5.staticflickr.com/4263/35567894502_0425356b57_b.jpg 683w, https://farm5.staticflickr.com/4263/35567894502_f3811fa8fd_h.jpg 1067w" /></a></p>
<p>我又繼續往前看了幾間，晃了一下回來發現排隊的人潮消化的差不多了，就決定吃這間，其實當時店內還蠻滿的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34895894774/" title="日本橋 久助 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4216/34895894774_291cd15b71_b.jpg" width="1024" height="683" alt="日本橋 久助, " srcset="https://farm5.staticflickr.com/4216/34895894774_291cd15b71_b.jpg 1024w, https://farm5.staticflickr.com/4216/34895894774_4bd74d1d27_h.jpg 1600w" /></a></p>
<p>吃的就是午間套餐的燒鳥飯</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567878502/" title="日本橋 久助 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4259/35567878502_fe412df9b0_b.jpg" width="1024" height="683" alt="日本橋 久助, " srcset="https://farm5.staticflickr.com/4259/35567878502_fe412df9b0_b.jpg 1024w, https://farm5.staticflickr.com/4259/35567878502_fa88f2ce77_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567875592/" title="日本橋 久助 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4258/35567875592_4046348975_b.jpg" width="1024" height="683" alt="日本橋 久助, " srcset="https://farm5.staticflickr.com/4258/35567875592_4046348975_b.jpg 1024w, https://farm5.staticflickr.com/4258/35567875592_2dd4c91e07_h.jpg 1600w" /></a></p>
<p>烤的很剛好，還有花椒粉芥末粉可以加，我覺得最厲害的是淋的醬汁的量超剛好，飯幾乎都有沾到醬汁，但是吃完整個飯盒就是表面濕濕的狀況，完全沒有醬汁積成一攤，所以完全不會吃到後來覺得太鹹之類的，飯量其實還可以選擇，這師傅實在是經驗老到，可以控制得這麼精準。</p>
<p>吃完飯後，其實對面就是有名的草家屋煎餅了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35349493920/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4258/35349493920_0402646e71_b.jpg" width="1024" height="683" alt="日本橋, " srcset="https://farm5.staticflickr.com/4258/35349493920_0402646e71_b.jpg 1024w, https://farm5.staticflickr.com/4258/35349493920_8dd2cdbe86_h.jpg 1600w" /></a></p>
<p>還有柳屋鯛燒</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35349486260/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4260/35349486260_f4d721976c_b.jpg" width="1024" height="683" alt="日本橋, " srcset="https://farm5.staticflickr.com/4260/35349486260_f4d721976c_b.jpg 1024w, https://farm5.staticflickr.com/4260/35349486260_df7a7504d5_h.jpg 1600w" /></a></p>
<p>兩間都在新參者中出現過，不過我只有買些仙貝，因為剛吃完飯就沒買鯛燒，有點可惜，即使是中午剛過，店內都還是一直都是排著人。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35737108935/" title="水天宮 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4098/35737108935_ddca1cb1a3_b.jpg" width="1024" height="683" alt="水天宮, " srcset="https://farm5.staticflickr.com/4098/35737108935_ddca1cb1a3_b.jpg 1024w, https://farm5.staticflickr.com/4098/35737108935_4d9a1c1cd5_h.jpg 1600w" /></a></p>
<p>接著我就慢慢沿著人形町通逛，走到尾巴的水天宮，水天宮是很有名求子求安產的神社，回來才聽說前兩年還在整修，不過這新蓋好的水天宮實在很厲害，從對面看：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35737107425/" title="水天宮 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4258/35737107425_d5b5c5d43b_b.jpg" width="1024" height="683" alt="水天宮, " srcset="https://farm5.staticflickr.com/4258/35737107425_d5b5c5d43b_b.jpg 1024w, https://farm5.staticflickr.com/4258/35737107425_9dec05af6a_h.jpg 1600w" /></a></p>
<p>旁邊那條走道：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567844992/" title="水天宮 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4278/35567844992_7fbca9ec43_b.jpg" width="1024" height="683" alt="水天宮, " srcset="https://farm5.staticflickr.com/4278/35567844992_7fbca9ec43_b.jpg 1024w, https://farm5.staticflickr.com/4278/35567844992_016f383709_h.jpg 1600w" /></a></p>
<p>門口，要爬樓梯往上：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35696854726/" title="水天宮 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4133/35696854726_2c4d79e580_b.jpg" width="1024" height="683" alt="水天宮, " srcset="https://farm5.staticflickr.com/4133/35696854726_2c4d79e580_b.jpg 1024w, https://farm5.staticflickr.com/4133/35696854726_2c5c4bcc56_h.jpg 1600w" /></a></p>
<p>到了上面才發現別有洞天。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35605763291/" title="水天宮 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4288/35605763291_2e2645f1ca_b.jpg" width="1024" height="683" alt="水天宮, " srcset="https://farm5.staticflickr.com/4288/35605763291_2e2645f1ca_b.jpg 1024w, https://farm5.staticflickr.com/4288/35605763291_eeb728066d_h.jpg 1600w" /></a></p>
<p>事實上，整個神社木造建築是蓋在一層現在的防震結構上的，而且現代結構的部分也不是只有防震，而是還有做為辦公室、販賣商品等用途的部分在，我覺得他們這種結合兩種風格卻不衝突的設計真的是非常厲害，最後是從平台上往回拍大門的方向。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35696855446/" title="水天宮 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4254/35696855446_36afcaa201_b.jpg" width="1024" height="683" alt="水天宮, " srcset="https://farm5.staticflickr.com/4254/35696855446_36afcaa201_b.jpg 1024w, https://farm5.staticflickr.com/4254/35696855446_cf87394e2c_h.jpg 1600w" /></a></p>
<p>到達水天宮後我就往回走了，去了一開始就有看到的 RON 咖啡館。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35737102345/" title="RON by othree, on Flickr"><img src="https://farm5.staticflickr.com/4264/35737102345_0b45307f57_b.jpg" width="683" height="1024" alt="RON" srcset="https://farm5.staticflickr.com/4264/35737102345_0b45307f57_b.jpg 683w, https://farm5.staticflickr.com/4264/35737102345_ee380df5e2_h.jpg 1067w" /></a></p>
<p>這間也是當地的老店，店內應該是完整開店當時的裝潢保存到現在吧：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34895831914/" title="RON by othree, on Flickr"><img src="https://farm5.staticflickr.com/4287/34895831914_a437d008e2_b.jpg" width="1024" height="683" alt="RON" srcset="https://farm5.staticflickr.com/4287/34895831914_a437d008e2_b.jpg 1024w, https://farm5.staticflickr.com/4287/34895831914_9a11659f3b_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34927502753/" title="RON by othree, on Flickr"><img src="https://farm5.staticflickr.com/4212/34927502753_20624b18b6_b.jpg" width="1024" height="683" alt="RON" srcset="https://farm5.staticflickr.com/4212/34927502753_20624b18b6_b.jpg 1024w, https://farm5.staticflickr.com/4212/34927502753_0ad220fc0d_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34895826844/" title="RON by othree, on Flickr"><img src="https://farm5.staticflickr.com/4213/34895826844_6007a7f647_b.jpg" width="1024" height="683" alt="RON" srcset="https://farm5.staticflickr.com/4213/34895826844_6007a7f647_b.jpg 1024w, https://farm5.staticflickr.com/4213/34895826844_624aa76f44_h.jpg 1600w" /></a></p>
<p>店員也是老老的，是不是也是年輕做到現在的呢。</p>
<p>在 RON 咖啡休息一陣子之後，因為時間還早，就決定去日本橋看看，日本橋</p>
<p>是日本<a href="https://zh.wikipedia.org/wiki/File:The_Kilometre_Zero_of_road_in_Japan_in_Nihonbashi,_Chuo,_Tokyo.jpg">道路起點</a>，一直都是很繁榮的地方，是很有歷史意義的地點，不過 1964 年為了舉辦奧運而蓋的首都高，把日本橋蓋住了，之後就一直維持這樣的狀況。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35696816036/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4285/35696816036_06150b18cb_b.jpg" width="1024" height="683" alt="日本橋" srcset="https://farm5.staticflickr.com/4285/35696816036_06150b18cb_b.jpg 1024w, https://farm5.staticflickr.com/4285/35696816036_45589e1ca2_h.jpg 1600w" /></a></p>
<p>橋上可以看到日本道路原標地點，不過人走不過去就是了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34927459313/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4033/34927459313_28eb8ebcff_b.jpg" width="683" height="1024" alt="日本橋" srcset="https://farm5.staticflickr.com/4033/34927459313_28eb8ebcff_b.jpg 683w, https://farm5.staticflickr.com/4033/34927459313_7727619d42_h.jpg 1067w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567779372/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4139/35567779372_eaaef3e123_b.jpg" width="1024" height="683" alt="日本橋" srcset="https://farm5.staticflickr.com/4139/35567779372_eaaef3e123_b.jpg 1024w, https://farm5.staticflickr.com/4139/35567779372_3915bc5598_h.jpg 1600w" /></a></p>
<p>現在的橋據說是 1911 年蓋的第十九代了，橋柱上有些非常華麗的裝飾，也常出現在電視上。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35696808136/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4057/35696808136_faf4f68e39_b.jpg" width="1024" height="683" alt="日本橋" srcset="https://farm5.staticflickr.com/4057/35696808136_faf4f68e39_b.jpg 1024w, https://farm5.staticflickr.com/4057/35696808136_555145da7a_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567766362/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4014/35567766362_07a50f6734_b.jpg" width="683" height="1024" alt="日本橋" srcset="https://farm5.staticflickr.com/4014/35567766362_07a50f6734_b.jpg 683w, https://farm5.staticflickr.com/4014/35567766362_08fa80913a_h.jpg 1067w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34895801964/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4259/34895801964_c0ecd60ba9_b.jpg" width="1024" height="683" alt="日本橋" srcset="https://farm5.staticflickr.com/4259/34895801964_c0ecd60ba9_b.jpg 1024w, https://farm5.staticflickr.com/4259/34895801964_df476986e8_h.jpg 1600w" /></a></p>
<p>最近日本有開始有些<a href="http://asahichinese-f.com/travel/scenery/11153530">聲音</a>說希望能夠恢復日本橋景區的天空，主要方法是把首都高地下化，東京其實已經有一些地下高速公路了，技術上不是問題，雖然經費很貴，我猜他們真的會做下去吧，如果成真的化應該就會找個藍天的日子再去個一趟了。</p>
<p>日本橋的對面就是新光三越本館了：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35567761352/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4068/35567761352_df9c042901_b.jpg" width="1024" height="683" alt="日本橋" srcset="https://farm5.staticflickr.com/4068/35567761352_df9c042901_b.jpg 1024w, https://farm5.staticflickr.com/4068/35567761352_3abc7f27c5_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34895760694/" title="三越 本館 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4021/34895760694_992703c33a_b.jpg" width="1024" height="683" alt="三越 本館" srcset="https://farm5.staticflickr.com/4021/34895760694_992703c33a_b.jpg 1024w, https://farm5.staticflickr.com/4021/34895760694_fe57311267_h.jpg 1600w" /></a></p>
<p>遠遠看就覺得氣勢不凡，進去逛一逛發現這間真的是不同凡響：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35737023025/" title="三越 本館 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4214/35737023025_a821b3dde4_b.jpg" width="1024" height="683" alt="三越 本館" srcset="https://farm5.staticflickr.com/4214/35737023025_a821b3dde4_b.jpg 1024w, https://farm5.staticflickr.com/4214/35737023025_131119eb13_h.jpg 1600w" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34895759084/" title="三越 本館 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4208/34895759084_0a60ba06d8_b.jpg" width="683" height="1024" alt="三越 本館" srcset="https://farm5.staticflickr.com/4208/34895759084_0a60ba06d8_b.jpg 683w, https://farm5.staticflickr.com/4208/34895759084_5786a48d02_h.jpg 1067w" /></a></p>
<p>在百貨公司裡面開了這麼大的挑高室內空間，還放這麼大的固定式藝術品，真的是完全無法想像，然後本來想說去逛一下生活用品那層好了，結果映入眼簾的都是高級進口餐具之類的，我一整個跑錯棚的感覺。</p>
]]>
</content>
</entry>

<entry>
<title>SVG</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/07/29/svg/" />
<modified>2017-07-31T02:32:54Z</modified>
<issued>2017-07-29T03:14:28Z</issued>
<id>tag:blog.othree.net,2017://1.902</id>
<created>2017-07-29T03:14:28Z</created>
<summary type="text/plain"><![CDATA[ 最近網站的 icon 都盡量改用 SVG 向量檔了，網路上也有不少資源，像是 Material Icons，累積了一些心得可以記錄一下，其實早在 GitHub 開使用 icon font 之前，大部分的瀏覽器就都有支援 SVG 了，只不過當時的支援還不夠完備，會各自有一些問題，這應該也是 Github 當年不先用 SVG，而是用 icon font 先檔了幾年的主因，總之現在比較不用擔心這些問題了，所以 GitHub 又開槍轉用 SVG icon 了。 GitHub 的用法是 inline SVG 為主，我自己則是用 &lt;picture&gt; 比較多： &lt;picture&gt; &lt;source srcset=&quot;/path/to/icon.svg&quot; type=&quot;image/svg+xml&quot;&gt; &lt;img src=&quot;/path/to/icon.png&quot; alt=&quot;&quot;...]]></summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>css-html</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35882767130/" title="SVG by othree, on Flickr"><img src="https://farm5.staticflickr.com/4300/35882767130_abb5a7e7b3_b.jpg" width="1024" height="782" alt="SVG" srcset="https://farm5.staticflickr.com/4300/35882767130_2848f09cbc_k.jpg 2x" /></a></p>
<p>最近網站的 icon 都盡量改用 SVG 向量檔了，網路上也有不少資源，像是 <a href="https://material.io/icons/">Material Icons</a>，累積了一些心得可以記錄一下，其實早在 GitHub 開使用 icon font 之前，大部分的瀏覽器就都有支援 SVG 了，只不過當時的支援還不夠完備，會各自有一些<a href="http://voormedia.com/blog/2012/10/creating-svg-vector-graphics-for-maximum-browser-compatibility">問題</a>，這應該也是 Github 當年不先用 SVG，而是用 icon font 先檔了幾年的主因，總之現在比較不用擔心這些問題了，所以 GitHub 又開槍轉用 SVG icon 了。</p>
<p>GitHub 的用法是 inline SVG 為主，我自己則是用 <code>&lt;picture&gt;</code> 比較多：</p>
<pre><code class="language-html">&lt;picture&gt;
  &lt;source srcset=&quot;/path/to/icon.svg&quot; type=&quot;image/svg+xml&quot;&gt;
  &lt;img src=&quot;/path/to/icon.png&quot; alt=&quot;&quot; width=&quot;32&quot; height=&quot;32&quot; /&gt;
&lt;/picture&gt;
</code></pre>
<p>CSS Trick 有一篇文章 <a href="https://css-tricks.com/a-complete-guide-to-svg-fallbacks/">A Complete Guide to SVG Fallbacks</a> 則介紹了各種在網頁內放入 SVG 圖檔的古老方法，用 <code>&lt;picture&gt;</code> 是比較新的，沒列在其中，而我是為了向下相容選擇用 <code>&lt;picture&gt;</code>，因為支援<code>&lt;picture&gt;</code>標籤的瀏覽器都很新了，對於 SVG 的支援度很夠，剩下少數（大概都是 IE）就讓他直接吃 png 之類的（PS: pngquant 處理過的 PNG 很多可以直接在 IE6 上顯示透明色），這樣用起來就像是一般 <code>&lt;img&gt;</code> 一樣，SVG 檔可以先用 <a href="https://github.com/svg/svgo">svgo</a> 工具處理過，除此之外，我通常會先用 Adobe Illustrator 把不必要的圖層階層刪除，圖層在 SVG 原始碼裡面通常是會 <code>&lt;g&gt;</code> 標籤，另外也記得要把圖層名稱（id）改成 ASCII only 的名稱，甚至直接編輯原始碼刪除 id，因為 svgo 不會處理這部分。</p>
<p>用外部 SVG 檔案好處是可以善用 browser cache 減少傳輸量，尤其是大量重複使用的圖片，不過也會犧牲一些 SVG 的特性，例如會因此不能直接用 CSS 來調整樣式，做 transition，做動畫等等，所以有時候也是會用 inline SVG，就可以搭配 CSS、JS 弄出很多不錯的效果（Safari 偶爾還有遇到無解 bug），不過要讓 inline SVG fallback 回一般圖片就比較麻煩些了，在做這件事之前可以先看一下是不是有需要<a href="http://caniuse.com/#feat=svg-html5">支援</a>，以前是 iOS 不支援，現在還有機會碰到的大概還是 IE（6-8）吧，總之，如果有需要的話，就是參考 CSS Trick 的 <a href="https://css-tricks.com/svg-fallbacks/">SVG Fallbacks</a> 這篇文章，使用</p>
<pre><code class="language-html">&lt;svg width=&quot;96&quot; height=&quot;96&quot;&gt;
  &lt;image xlink:href=&quot;svg.svg&quot; src=&quot;svg.png&quot; width=&quot;96&quot; height=&quot;96&quot; /&gt;
&lt;/svg&gt;
</code></pre>
<p>這是個很有趣的技巧，首先 <code>&lt;image&gt;</code> 標籤是<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image">合法的 SVG 元素</a>，所以放在 SVG 不成問題，但是不支援 SVG 的瀏覽器，照理說也不應該認得 <code>&lt;image&gt;</code> 標籤啊，其實，<code>&lt;image&gt;</code> 在很久以前就一直是 <code>&lt;img&gt;</code> 的別名了，甚至在 WHATWG 的 parse HTML 文件的<a href="https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inbody">流程</a>裡都還有提到處理的方式，而經過測試也都證實了以前的瀏覽器確實是這樣的行為，文裡也有各瀏覽器的行為和支援狀況，不支援 inline SVG 的就會顯示替代的 png 或 jpg 。</p>
<p>文章裡面還有提到背景圖使用 SVG 的處理方式，不過因為我沒這樣使用，所以沒什麼實做到，另外最近也有人用外部 SVG 加上 CSS filter 來改變 <a href="https://codepen.io/noahblon/post/coloring-svgs-in-css-background-images">SVG icon 顏色</a>，不過這太技巧太新了，考慮到支援度我也是沒有用過。</p>
<p>親和力問題的部分，一樣 CSS Tricks 有篇文章 <a href="https://css-tricks.com/accessible-svgs/">Accessible SVG</a> 在講相關的作法，像是用 <code>&lt;title&gt;</code> 加替代文字，加上 <code>role=&quot;img&quot;</code> 等；如果要自己編寫 SVG，W3C 還有份 <a href="http://w3c.github.io/svgwg/specs/svg-authoring/">Authering Guide</a> 可以參考，除了親和力相關的資訊外還有不少技巧可以參考。</p>
<p>最後整理一下，拿到 svg 檔案後我的處理過程：</p>
<ol>
<li>用 Adobe Illustrator 先開來整理一下，修改圖層名稱、刪去合併不必要的圖層</li>
<li>輸出成 SVG 和 1x 解析度的 PNG</li>
<li>SVG 檔用 <code>svgo</code> 最佳化、PNG 會用 <code>pngquant</code> 和 <code>zopflipng</code> 處理過</li>
</ol>
<p>使用方式則還是當成一般外部圖片為主，需要動畫效果才會用 inline SVG。</p>
]]>

</content>
</entry>

<entry>
<title>表單 Practice</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/06/13/form-practice/" />
<modified>2017-06-13T14:43:28Z</modified>
<issued>2017-06-13T14:42:42Z</issued>
<id>tag:blog.othree.net,2017://1.901</id>
<created>2017-06-13T14:42:42Z</created>
<summary type="text/plain"> 這邊是我最近對於表單的一些作法，因為內化還不夠，每次都會漏掉一些，所以花了些時間整理整理，適合的情境不是 single page application 就是了，比較偏傳統形式網頁的表單，然後可能也包括不少大家早就知道(?)的細節就是了。 首先，我現在偏好不用 JavaScript 做表單檢查，而是先做好最基本的 server side 檢查，然後加上 HTML5 的表單檢查，會這樣決定的主因是： JavaScript 的表單檢查 library 用起來都不太順手，而且不想花時間處理串接，且能少點 library 總是好的； 幾個常用的 type，像是 email, url 比較不需要擔心檢查的 pattern 有不周全的地方，我想很多人都有上網搜尋過這些欄位的 regular expression pettern 的經驗； 支援度已經不是大問題了，事實上我的工作上還需要支援 IE 10, 9 之類的，其實這些非 modern browser 的量都已經非常少了，所以就靠個 server...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>css-html</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34947056856/" title="Form Validation by othree, on Flickr"><img src="https://farm5.staticflickr.com/4274/34947056856_e1ae234f6c_b.jpg" width="500" height="270" alt="Form Validation" srcset="https://farm5.staticflickr.com/4274/34947056856_e1ae234f6c_b.jpg 500w" /></a></p>
<p>這邊是我最近對於表單的一些作法，因為內化還不夠，每次都會漏掉一些，所以花了些時間整理整理，適合的情境不是 single page application 就是了，比較偏傳統形式網頁的表單，然後可能也包括不少大家早就知道(?)的細節就是了。</p>
<p>首先，我現在偏好不用 JavaScript 做表單檢查，而是先做好最基本的 server side 檢查，然後加上 <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation">HTML5 的表單檢查</a>，會這樣決定的主因是：</p>
<ol>
<li>JavaScript 的表單檢查 library 用起來都不太順手，而且不想花時間處理串接，且能少點 library 總是好的；</li>
<li>幾個常用的 type，像是 email, url 比較不需要擔心檢查的 pattern 有不周全的地方，我想很多人都有上網搜尋過這些欄位的 regular expression pettern 的經驗；</li>
<li>支援度已經不是大問題了，事實上我的工作上還需要支援 IE 10, 9 之類的，其實這些非 modern browser 的量都已經非常少了，所以就靠個 server side 檢查對付他們就好，使用體驗稍微差一點也還可以接受，這也是種 graceful degradation（優雅降級）；</li>
<li>HTML5 的表單檢查可以說是 web developer 當年對抗網路標準發展遲緩一大勝利指標，當然應該要好好用一下。</li>
</ol>
<p>而用 HTML5 表單檢查還有個意外的好處是基本的錯誤訊息自動有翻譯（看使用者瀏覽器的語言），另外如果有自製的輸入元件，也有 <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validating_forms_using_JavaScript">API</a> 可以串接，當然訊息就要自己提供就是了。</p>
<p>用 HTML5 表單檢查當然也不是完全沒有問題，例如目前 email 欄位還沒有瀏覽器支援 <a href="https://github.com/w3c/html/issues/538">IDN domain 的信箱</a>；另外就是上傳檔案的 file input 的值不能從 server 端直接給，這限制是因為會有安全性問題，而這限制所衍生的問題是：表單送到 server side 檢查後發現有錯誤時（例如 captcha 錯），使用者就一定要重新選取上傳的檔案，對於使用者體驗算是個扣分（而且上傳檔案大的話很花時間，然後另外還有個上傳檔案大小限制、就又是另外一個議題了），要解決這問題一般來說就是靠 JavaScript 做些加強，例如針對 captcha 可以先用 ajax call 檢查 captcha ，正確的話就換個 session token 之類的回來，不過即使這樣，還是逃不了完整的 server side 表單檢查，所以也還要處理 ajax submit 後的表單錯誤訊息顯示。</p>
<p>不管是 server side 檢查後產生的錯誤訊息，還是 ajax call 之前檢查產生的錯誤訊息，理所當然都會放在欄位附近，不過還要讓訊息和欄位之間建立關聯，才好進一步做一些處理，例如使用者有更新欄位值之後會把錯誤訊息隱藏之類的，或許很多人會用父層 DOM 節點加上特殊的 class 包起來找，不過我比較偏好用 <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute"><code>aria-describedby</code></a>，大概會看起像是：</p>
<pre><code class="language-html">&lt;input id=&quot;mail&quot; name=&quot;mail&quot; type=&quot;email&quot; aria-describedby=&quot;mail-field-info&quot; /&gt;
&lt;span id=&quot;mail-field-info&quot;&gt;Required field!&lt;/span&gt;
</code></pre>
<p>這樣只要找的到 <code>#mail</code> 欄位，就可以透過他的 <code>aria-describedby</code> 屬性找到該欄位的相關訊息的 DOM 節點，另外值得注意的是，aria-describedby 值的格式是 <a href="https://www.w3.org/TR/wai-aria/states_and_properties#valuetype_idref_list">IDRefList</a>，不是單一個 ID，而是一個用空白切分的 ID 指標們，所以如果有這種情形，還可以在錯誤訊息的那個 DOM 節點加上  <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role"><code>role=&quot;alert&quot;</code></a> 給它用來辨識，其實就算只有一個 ID 也還是可以加上 role 屬性啦。如果真的需要用透過父層 DOM 節點來找的話，之前研究的結論是可以在預期的父層標籤用 <code>role=&quot;section&quot;</code>來方便定位，用 jQuery 大概會像是：</p>
<pre><code class="language-javascript">$fieldSection = $field.closest('[role=&quot;section&quot;]');
</code></pre>
<p>這個標籤下應該會包括欄位的標籤（label）、欄位的 input element 以及相關的資訊（說明、錯誤訊息）等。</p>
<p>另外還有一點，就是要用 ajax 上傳檔案的話，需要有支援 <a href="http://caniuse.com/#feat=xhr2">FormData</a> 的瀏覽器，並且如果用 jQuery 送 FormData 的話記得要加點設定：</p>
<pre><code class="language-javaascript">contentType: false,
processData: false
</code></pre>
<p>還有就是 ajax 送表單的目標 URL，我目前比較喜歡的作法是讀 <code>&lt;form&gt;</code> 的 <code>action</code> 屬性，也就是和瀏覽器自己送的 URL 一樣，然後透過 HTTP content negotiation 機制來決定回傳的格式，比較正確的作法是看 <code>Accept</code>，以 jQuery 來說，如果要 server 回 JSON 格式的話，可以加上：</p>
<pre><code class="language-javascript">dataType: 'json'
</code></pre>
<p>這樣送出的 request 就會帶上正確的 <code>Accept</code> header，向 server 端要求 <code>application/json</code> ，不過 <code>Accept</code> 的值解析起來比較麻煩些，其實是可以送出說 client 端可以接受多種格式，然後還加上個優先度的，也因此也有很多人是看 <code>X-Requested-With</code>，一般 library 如果是透過 XHR 發的 request 都會有這個 header；還有就是送出的資料格式（Content-Type），即使是 ajax call，我目前也都不用 JSON 了，還是用 <code>application/x-www-form-urlencoded</code> 為主，另外要上傳檔案的話當然一定要用 <code>multipart/form-data</code>，主要是因為：</p>
<ol>
<li>送 JSON 的話就不會是 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Simple_requests">simple request</a> 了，有些時候會比較麻煩，例如 Cross Origin 時會需要發 preflight，然後就可能遇到 AWS 以前不支援 preflight request 的 bug；</li>
<li>用這幾個老的 Content-Type 支援度還是比較高，對於 server 端實做和 client 端實做其實都相對友善一點，例如 jQuery 預設就依然是 form-urlencoded，没特别需求還是用標準一點的格式，特殊需求是例如 GraphQL，不過一般表單發送應該不會走 GraphQL 吧。</li>
</ol>
<p>其實 JSON 雖然已經有 RFC 規範了，不過在 Web 標準的世界還沒相當深入內化，不知道以後有沒有機會更加的內化整合進去。</p>
<p>前面有提到 ajax call 送出的目標 URL 我會偏好從，<code>&lt;form&gt;</code> 裡面讀，不過或許有的情境會讓 ajax call 必須要自己用不一樣的 API URL，這時候我建議還是把 API URL 寫在 <code>&lt;form&gt;</code> 的屬性裡面，這樣可以讓 JavaScript 的邏輯比較乾淨，也不用作什麼 mapping 或是常數來儲存 API 的 URL，維護修改時也不用兩邊檢查，屬性名稱可以用例如：<code>data-action</code> 之類的屬性，<code>data-*</code>屬性正好適合來做這些事情，不但有 DOM API 支援，jQuery 也可以用 <code>.data()</code> method 來讀取，命名上，如果覺得有個標準參考比較好，可以看看 <a href="https://github.com/rails/jquery-ujs">jQuery-ujs</a> 的設計，雖然比較長一點，它用的是：<a href="https://github.com/rails/jquery-ujs/blob/master/src/rails.js#L117"><code>data-ujs:submit-button-formaction</code></a>，我是覺得有些不正確啦，畢竟要送出表單不一定是點擊 submit button。</p>
<p>其實假設送出表單的動作都是滑鼠點擊 submit button 這是個親和力問題，如果只把 ajax call 送的函式 bind 在 submit button 的 click 事件上，這其實是不太好的，因為其實瀏覽器預設的行為是可以在很多地方用鍵盤送出表單，例如在 text input 上按下 Enter 鍵，或是在 submit button 上按下空白鍵之類的，所以針對表單還是要去 bind form submit 事件才是正解，至於 jQuery-ujs，其實也是這樣做的，它是用 delegate event 的形式去監聽傳遞到 document 上的 submit 事件，然後才去做後續的處理，只是命名上讓人覺得不太正確。</p>
<p>最後一項，前面說不用 JavaScript 做表單檢查（不看自訂輸入元件的話），其實有一個例外，就是上傳檔案的大小檢查，因為沒做對使用體驗的影響比較大，然後就是要還要記得針對 ajax call 送表單加上 <a href="https://tools.ietf.org/html/rfc7231#section-6.5.11">HTTP 413</a> Status Code 的錯誤訊息處理。</p>
]]>

</content>
</entry>

<entry>
<title>a11y</title>
<link rel="alternate" type="text/html" href="https://blog.othree.net/log/2017/06/07/a11y/" />
<modified>2017-06-06T16:11:26Z</modified>
<issued>2017-06-06T16:09:19Z</issued>
<id>tag:blog.othree.net,2017://1.900</id>
<created>2017-06-06T16:09:19Z</created>
<summary type="text/plain"> 標題的 a11y 其實是 accessibility （親和力）的縮寫，現在英文世界似乎很大量的使用這個簡稱，今年的 JSConf EU 前陣子放出演講錄影，其中有一場是在講網路親和力的議題「YES, your site too can (and should) be accessible.」： 講者是 Laura Carvajal，在 Financial Times 工作，而這場演講就是他們改進 ft.com 網站親和力的過程和一些想法，我覺得精華在後半，前面是介紹自動化工具 Pa11y，a11y 是 accessibility，至於首字母的 P，看 README 應該是 pal 的意思；他們把這個自動化工具整合進他們的開發流程，然後慢慢的修改，直到把回報的問題都修完，其實現在自動化工具已經很強了，連顏色對比度夠不夠都能算出來（瀏覽器的開發工具以後也會有相關資訊），不過要驗證親和力做的如何，還是有很大量的驗證其實是需要手動測試。 手動測試的部分他們是請了 DAC (Digital Accessibility Centre) 來做，演講中還有一些測試者的測試影片，每位測試者都會先說他身體有怎樣的障礙，然後他邊測試會邊口述他在做什麼，遇到怎樣的問題，建議可以怎麼處理，感覺就是很專業的測試員。總之，在他們處理完所有 Pa11y...</summary>
<author>
<name>othree</name>

<email>othree@gmail.com</email>
</author>
<dc:subject>web</dc:subject>
<content type="text/html" mode="escaped" xml:lang="en" xml:base="https://blog.othree.net/">
<![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34944175192/" title="Pa11y Dashboard by othree, on Flickr"><img src="https://farm5.staticflickr.com/4251/34944175192_71a6475ca3_b.jpg" width="1024" height="595" alt="Pa11y Dashboard, " srcset="https://farm5.staticflickr.com/4251/34944175192_71a6475ca3_b.jpg 1024w, https://farm5.staticflickr.com/4251/34944175192_32efc09322_h.jpg 1600w" /></a></p>
<p>標題的 a11y 其實是 accessibility （親和力）的縮寫，現在英文世界似乎很大量的使用這個簡稱，今年的 JSConf EU 前陣子放出演講錄影，其中有一場是在講網路親和力的議題「YES, your site too can (and should) be accessible.」：</p>
<div class="embed_16_9">
<iframe width="853" height="480" src="https://www.youtube.com/embed/H4FzW9oFObs?rel=0&amp;showinfo=0" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>講者是 Laura Carvajal，在 <a href="https://ft.com">Financial Times</a> 工作，而這場演講就是他們改進 ft.com 網站親和力的過程和一些想法，我覺得精華在後半，前面是介紹自動化工具 <a href="http://pa11y.org/">Pa11y</a>，a11y 是 accessibility，至於首字母的 <strong>P</strong>，看 README 應該是 pal 的意思；他們把這個自動化工具整合進他們的開發流程，然後慢慢的修改，直到把回報的問題都修完，其實現在自動化工具已經很強了，連顏色對比度夠不夠都能算出來（瀏覽器的開發工具以後也會有相關資訊），不過要驗證親和力做的如何，還是有很大量的驗證其實是需要手動測試。</p>
<p>手動測試的部分他們是請了 <a href="http://digitalaccessibilitycentre.org/">DAC</a> (Digital Accessibility Centre) 來做，演講中還有一些測試者的測試影片，每位測試者都會先說他身體有怎樣的障礙，然後他邊測試會邊口述他在做什麼，遇到怎樣的問題，建議可以怎麼處理，感覺就是很專業的測試員。總之，在他們處理完所有 Pa11y 檢測到的問題後，才請 DAC 做親和力評估驗證，結果還是收到了一份兩百多頁的測試報告，回報了各種 ft.com 網站上的親和力問題，之後又花了幾個月的時間來處理這些問題，最後終於得到 DAC 的<a href="http://digitalaccessibilitycentre.org/index.php/financial-times">認證</a>，這份認證資訊還蠻完整的，還說明了他們認證時網站的狀況，還有哪些問題待解決，甚至連可能會使用到但是還沒處理過親和力問題的同組織的網站（服務）都有列出來，另外在 ft.com 的<a href="https://www.ft.com/accessibility">親和力聲明</a>也可以看到 DAC 的認證。</p>
<p>接著 Laura Carvajal 介紹到如何實際體會（參與）這些親和力問題，其中一個很經典的狀態就是只用鍵盤做所有的控制，他提供了一些強迫自己只能用鍵盤操控的方法，並且在這種狀態下工作，其它還有像是使用 Mac 的 VoiceOver 做為 ScreenReader、使用 Windows 的高對比模式等等，他建議可以實際自己去體驗看看的，甚至強迫自己使用一陣子，會對這些問題更有體會，除此之外，他還透過一些活動來讓其他公司內的人也來參與，像是模擬一個障礙者會面臨的環境，以他的例子來說是把網頁模糊化，模擬視力障礙的使用者狀態，然後在這個狀態下請人去完成一些任務，像是填一個表單，並且有提供些獎勵增加參與人數，記得他們是提供 Amazon Credit，這樣可以讓更多人體會到需要依靠輔具來上網的不便，長久下來也可以讓這些工作的推動更加順利。</p>
<p>這幾天我也試著裝起了 <a href="https://github.com/pa11y/dashboard">Pa11y Dashboard</a> 開始做些檢測，看到的 Error 加上 Warning 數量真是有點驚人，再來慢慢處理吧...</p>
]]>

</content>
</entry>

</feed>