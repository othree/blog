<?xml version="1.0" encoding="utf-8"?>

<rdf:RDF
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
xmlns:admin="http://webns.net/mvcb/"
xmlns:cc="http://web.resource.org/cc/"
xmlns="http://purl.org/rss/1.0/">

<channel rdf:about="https://blog.othree.net/">
<title>O3noBLOG</title>
<link>https://blog.othree.net/</link>
<description></description>
<dc:creator></dc:creator>
<dc:date>2024-10-19T13:17:31+08:00</dc:date>
<admin:generatorAgent rdf:resource="http://www.movabletype.org/?v=4.381" />

<cc:license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/1.0/" />


<items>
<rdf:Seq>
<rdf:li rdf:resource="https://blog.othree.net/log/2024/10/19/onautofill/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2024/07/21/oklab-color-space/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2024/05/16/communication/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2024/05/08/see-different/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2024/04/24/happy-busy/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2024/04/17/json-type-definition/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2024/04/03/the-magic-of-dialog/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2024/03/28/yamani/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2024/03/24/ui-event-order/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2024/03/08/akira-toriyama/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2024/01/12/qr-code-history/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2024/01/06/2023-nagoya/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2023/12/09/genji-koh/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2023/11/08/sign-in-with-/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2023/10/22/celeste/" />
</rdf:Seq>
</items>

</channel>


<item rdf:about="https://blog.othree.net/log/2024/10/19/onautofill/">
<title>onAutofill</title>
<link>https://blog.othree.net/log/2024/10/19/onautofill/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/54075332210/" title="Credit Card autofill by othree, on Flickr"><img src="https://live.staticflickr.com/65535/54075332210_2204a73894_b.jpg" width="1024" height="529" alt="Credit Card autofill" srcset="" /></a></p>
<p>在現在這個網路標準橫行的時代，要遇到還沒廣泛標準化的東西其實是越來越難了，不過我最近還是遇到了一個，那就是 autofill 的偵測。</p>
<p>首先要說的是，autofill（自動填入）和 autocomplete（自動補完）嚴格定義下是不一樣的，雖然都可以透過 <code>autocomplete</code> 來控制相關的行為，但是 autocomplete 其實只能算是 autofill 的一種，而我遇到的就是非 autocomplete 的，信用卡資料的自動填入，那問題在哪呢？</p>
<p>問題就是這種 autofill 發生時，瀏覽器不一定會觸發 <code>change/input</code> 事件，如果表單設計成自動檢查表單輸入，然後輸入都正確才讓人送出的話就會有使用體驗的問題發生，因為這種設計的欄位檢查通常就是綁在 <code>&lt;input&gt;</code> 的 <code>change/input</code> 事件上，結果就是如果瀏覽器自動填入，然後又沒觸發 <code>change/input</code> 事件，於是就不會執行到欄位檢查，表單也就會一直維持在無法送出的狀態，產生的副作用就是使用者體驗反而比按下送出按鈕才作表單檢查還要來的差。</p>
<p>那麼在 Web 標準中，<code>change</code> 事件應該何時觸發的定義是為何呢？在 <a href="https://www.w3.org/TR/html401/interact/scripts.html#adef-onchange">HTML 4.01</a> 是這樣寫的：</p>
<blockquote>
<p>The onchange event occurs when a control loses the input focus <em>and</em> its value has been modified since gaining focus. This attribute applies to the following elements: INPUT, SELECT, and TEXTAREA.</p>
</blockquote>
<p>按照古時候網路標準的規範，autofill 不是使用者和 DOM 之間的互動，沒有經過 focus blur，所以沒有觸發 change 事件也是合理，事實上也就是現在部分瀏覽器的行為；不過在現在的 <a href="https://html.spec.whatwg.org/multipage/input.html#common-input-element-events">HTML Living Standard</a> 是這樣寫的：</p>
<blockquote>
<p>The <code>change</code> event fires when the value is committed, if that makes sense for the control, or else when the control loses focus.</p>
</blockquote>
<p>觸發的時機除了失去 focus 時之外，還多了資料 commit（提交）時，變成兩種時機，而這邊的提交主要指的是像 <code>type=color</code> 或是 <code>type=date</code> 那種，瀏覽器有支援，有提供另外頁面內的小工具讓使用者方便挑選值的時候，使用者選好，瀏覽器更新值進入 <code>&lt;input&gt;</code> 的 value 的動作，那 autofill 更新值該算是 commit 嗎？其實文件內也是有講到的，就在同個章節的後面：</p>
<blockquote>
<p>When the user agent is to change an input element's value on behalf of the user (e.g. as part of a form prefilling feature), the user agent must queue an element task on the user interaction task source given the input element to first update the value accordingly, then fire an event named <code>input</code> at the <code>input</code> element, with the <code>bubbles</code> and <code>composed</code> attributes initialized to true, then fire an event named <code>change</code> at the <code>input</code> element, with the <code>bubbles</code> attribute initialized to true.</p>
</blockquote>
<p>這段就是說當瀏覽器代表使用者改變 input 的值時，也是要發一個 input 一個 change 事件，這段文字的重點在於 &quot;on behalf of the user&quot;，就是「代表使用者做事」，後面舉的例是 prefill 時，prefill 通常發生在 帳號/密碼 欄位，發生時間點又不太一樣，可能是在 render DOM 時就發生；不過根據文字解釋其實 autofill 應該也符合 &quot;on behalf of the user&quot;。</p>
<p>雖然 HTML 標準有規範了，但是現實世界總是不會這麼美好，不然也不會有這篇文章了，那麼現實世界是怎樣呢？我遇到的狀況就是有些瀏覽器是照著舊的規範，完全沒有事件，發現問題後我就上網搜尋一番之後發現，這問題其實已經很久了，早在 2010 年，<a href="http://twitter.com/avernet">@avernet</a> 就寫了一篇 [Autocomplete and JavaScript Change Event][]，紀錄了當年的這個問題，根據不同欄位、不同瀏覽器會有不同的行為，即使到了今天，也還是同樣情形，文章最後建議的解法也是很無奈的：</p>
<p><a href="https://avernet.blogspot.com/2010/11/autocomplete-and-javascript-change.html">Autocomplete and JavaScript Change Event</a></p>
<ol>
<li>關掉相關功能 <code>autocomplete=off</code></li>
<li>定時檢查</li>
</ol>
<p>總之就是讓人不喜歡的解法，那麼時至今日，有沒有比較好的方法呢？其實還真的有，而且蠻聰明的，<a href="https://klarna.com">Klarna</a> 的 Tommy Brunn 在 2016 年寫了 <a href="https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7">Detecting autofilled fields in Javascript</a> 一文介紹了這種方法，透過 CSS pseudo-class <code>:autofill</code> 和 CSS animation 配上 <code>animationStart</code> 事件，首先 CSS 這樣：</p>
<pre><code class="language-css">input:autofill {  
  animation-name: autofill;
  animation-duration: 500ms;
  animation-fill-mode: both;
}

@keyframes autofill {
  from {
    background: var(--color1);
  }
  to {
    background: var(--color2);
  }
}
</code></pre>
<p>然後 JS 監聽事件並確定動畫名稱沒錯，就可以做事了：</p>
<pre><code class="language-js">inputNode.addEventListener('animationstart', (event) =&gt; {  
  const { currentTarget, animationName } = event;
  
  if (animationName === 'autofill') {
    // do what ever you want, or
    // trigger `change` event
    currentTarget.dispatchEvent(new Event('change'));
    // trigger custom event
    currentTarget.dispatchEvent(new Event('autofill'));
  }  
}, false);
</code></pre>
<p>完全成為真的 event based，不用定時檢查了，不過缺點是要 CSS 搭配，不是純 JS 的方案，維護上比較麻煩一些，另外就是 Tommy Brunn 文章內用的是 <code>:--webkit-autofill</code>，但是現在完全可以用沒有 prefix 的 pseudo class 了。</p>
<p>以上的程式碼範例就可以處理好瀏覽器內建的自動填入事件，不過現實世界除了瀏覽器內建的自動填入，還有很多的第三方工具支援，像是各種 password manager: 1Password, LastPass, Dashlane 等，這些工具自動填入的行為又不太一樣，我確實有發現有其中一兩家的行為也是 value 會改變，但是不會有 input 和 change 事件，幸好這些工具都會加上各自自訂的 attribute，所以可以另外透過 observer 監看 attribute 的變化來判斷是否有相關的事件，目前我所知道有以下的 attributeName 可以檢查：</p>
<ul>
<li><code>data-dashlane-autofilled</code> Dashlane 的</li>
<li><code>data-com-onepassword-filled</code> 1Password 的</li>
<li><code>chrome-autofilled</code> iOS Chrome，超容易漏掉</li>
</ul>
<p>至於 LastPass 目前測試結果是不會有自訂的 attribute，但是會有 change 事件，所以也可以照常運作（不過相對的就完全沒有提供給使用者的視覺提示好像怪怪的）。</p>
<p>這篇內容大概就到這邊，雖然沒有提供很完整的程式碼，不過這些資訊應該很夠幫助其他人完成 autofill 事件的偵測了，其實這次弄信用卡資訊的輸入欄位真是費了不少心力，很多細節可以弄，也很多 domain knowledge（都靠 lib 搞定就是），真是想不到只是信用卡欄位也這麼多眉角。</p>
]]></description>
<dc:subject>script</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2024-10-19T13:17:31+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2024/07/21/oklab-color-space/">
<title>Oklab Color Space</title>
<link>https://blog.othree.net/log/2024/07/21/oklab-color-space/</link>
<description><![CDATA[<p>2019 年的時候，寫過一篇文章介紹了 <a href="https://blog.othree.net/log/2019/03/18/lab-gradient/">Lab Gradient</a>，然後就沒特別關注相關發展，直到前幾天看到勞哥的推文提到 <a href="https://bottosson.github.io/posts/oklab/">Oklab</a> 這個色彩空間，而且瀏覽器已經原生支援了，我才發現原來網路標準的發展有跟上來，我也趁機多惡補了一些相關的知識。</p>
<blockquote class="twitter-tweet"><p lang="zh" dir="ltr">因為一些搜尋讓我今天才了解 oklch 這個色彩格式（或是色彩空間）的使用方法。這個色彩格式在 2023 年納入了幾乎所有現代瀏覽器，好奇查詢之下發現了作者的 blog 有寫為什麼要製作 Oklab 的原因與研究過程，以及詳細的討論過去 HSV 或 HSL 系的色彩空間到底有什麼問題，收穫滿滿。...</p># -- 勞哥 maylogger (@may_logger) <a href="https://twitter.com/may_logger/status/1812110985752420697?ref_src=twsrc%5Etfw">July 13, 2024</a></blockquote> <script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>在介紹 Oklab 前，先來介紹以前提到的 Lab 吧，其實它是國際照明委員會(International Commission on Illumination，簡稱 CIE)在 1976 年提出的色彩空間定義，全名是 CIELAB color space，或是簡寫為 L*a*b*，多加 <code>*</code> 為了避免混淆，Lab 其實是不正確的縮寫，不過這三個字母其實就是該顏色空間的三個軸：L 代表亮度、a 代表紅色到綠色間的位置、b 代表藍色到黃色間的位置，也就是 opponent color theory（又稱對比色理論或色覺對向論）的顏色組成，這個色彩空間的重點在它的座標比較符合人類對色彩的感知。</p>
<p>那 <a href="https://bottosson.github.io/posts/oklab/">Oklab</a> 又是什麼呢？它是 Björn Ottosson 在 2020 年底發表的一個新的色彩空間定義，他在文章內有詳細的說明為什麼會想要定義一個新的色彩空間，文內也列舉了現存的色彩空間的主要問題，其中 CIELAB 的問題就是在 predict hue （預測色相）有些問題，尤其是藍色附近，其實我一開始對於這個 predict 感到很疑惑，想說到底是什麼意思，後來看到另外一篇文章 <a href="https://raphlinus.github.io/color/2021/01/18/oklab-critique.html">An interactive review of Oklab</a>，文章一開始放的互動工具預設的漸層設定就是藍色到白色，然後一看就很明顯， CIELAB 的漸層色相跑一下就歪掉了變成偏紫色去了（random 按鈕可以按按看看其他色相都沒這樣嚴重），才了解到因為 CIELAB 是屬於人類感知的色彩空間，意思就是它的依歸其實是人類的感覺，所以需要從三維座標去<strong>推測</strong>人類實際上看到感覺到的顏色，數值上一樣的話就應該讓人感覺一致，而 Oklab 則是結構和 CIELAB 一樣，但是透過新的資料集來調整並解決前面提到的問題，而後在 2023，Oklab 進了 CSS Color Level 4 的草稿，主流瀏覽器現在也都已經支援。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53870474429/" title="CIELAB by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53870474429_b239243a3e_b.jpg" width="1024" height="484" alt="CIELAB" /></a></p>
<p>進 CSS Color 代表什麼意思呢？第一個當然就是可以用 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/oklab"><code>oklab()</code></a> 函數來定義顏色了：</p>
<pre><code>oklab(40.1% 0.1143 0.045);
oklab(59.69% 0.1007 0.1191);
oklab(59.69% 0.1007 0.1191 / 0.5);
</code></pre>
<p>除了直接定義顏色之外，現在 CSS 也支援相對顏色（relative color）了：</p>
<pre><code>/* Relative values */
oklab(from green l a b / 0.5)
oklab(from #0000FF calc(l + 0.1) a b / calc(alpha * 0.9))
oklab(from hsl(180 100% 50%) calc(l - 0.1) a b)
</code></pre>
<p>這樣要只調整色相或是亮度都變得很簡單，或是也可以用 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/oklch"><code>oklch()</code></a>，這樣色相（Hue）就更好挑選。</p>
<p>然後就是漸層了，現在的 CSS 漸層也支援使用不同的顏色內差方式，也就是用不同色彩空間來算中間的顏色變化：</p>
<pre><code>linear-gradient(in oklab, blue, red)
linear-gradient(in lab to right, #44C, #795)
</code></pre>
<p>在最前面加上 <code>in &lt;color-space&gt;</code> 就可以，支援的色彩空間其實不少，如果是線性漸層，那支援 srgb、srgb-linear、display-p3、a98-rgb、prophoto-rgb、rec2020、lab、oklab、xyz、xyz-d50、xyz-d65，如果是 polar 漸層，那支援 hsl、hwb、lch、oklch，其實相當夠用，而這段語法其實是叫 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color-interpolation-method">color-interpolate</a>（顏色內插），除了漸層之外，會用到的地方還包括 filter、animation、transition 和 <code>color-mix()</code> 函數等。</p>
<p>前面也已經提到，現在主流瀏覽器都已經支援了，不過還是來看一下 <a href="https://caniuse.com/mdn-css_types_image_gradient_linear-gradient_interpolation_color_space">caniuse</a> 上的細節，Chrome 是 2022 就支援了，但是 Firefox 是到去年的 2023 才支援，如果要抓兩年的時間的話就還要再等等，當然現在也還是可以直接用，多加一組 fallback 就可以。</p>
<p>除了瀏覽器原生支援外，其實也不少其它開發相關的工具支援，也有不少文章在介紹，像是 Smashing Magazine 的 <a href="https://www.smashingmagazine.com/2023/08/oklch-color-spaces-gamuts-css/">Falling For Oklch: A Love Story Of Color Spaces, Gamuts, And CSS</a> 和 Evil Martians 的 <a href="https://evilmartians.com/chronicles/oklch-in-css-why-quit-rgb-hsl">OKLCH in CSS: why we moved from RGB and HSL</a>，兩篇文章就介紹了不少工具和一些延伸的文章，工具部分像是 Figma 的 plugin <a href="https://www.figma.com/community/plugin/1173638098109123591/okcolor">OkColor</a> 和 npm 上的 <a href="https://www.npmjs.com/package/convert-to-oklch/v/1.2.0">convert-to-oklch</a>，Evil Martians 還做了一個 <a href="https://oklch.com/">oklch.com</a> ，是針對 Oklch 的 color picker 還蠻厲害的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53869218887/" title="oklch.com by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53869218887_128b804d16_b.jpg" width="1024" height="686" alt="oklch.com" srcset="https://live.staticflickr.com/65535/53869218887_067ddb5f54_k.jpg 2x" /></a></p>
]]></description>
<dc:subject>css-html</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2024-07-21T18:33:34+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2024/05/16/communication/">
<title>溝通</title>
<link>https://blog.othree.net/log/2024/05/16/communication/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53403022423/" title="とこなめ招き猫通り by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53403022423_5539409fe7_b.jpg" width="683" height="1024" alt="とこなめ招き猫通り" srcset="https://live.staticflickr.com/65535/53403022423_7446cfc748_k.jpg 2x" /></a></p>
<p>照片是常滑招財貓大道的「除憂解難」。</p>
<p>沒想到這週這麼熱鬧，前後兩天分別發生兩件和溝通有關的熱烈討論（網路對罵？），第一件事情比較少人知道，是發生在 COSCUP 的 telegram 社群，雖然是公開社群但是因為沒有直接的公開網址所以我就不寫網路 id 了。有社群朋友（後面用 A 代稱）想要辦 BoF 需要一些硬體設備，但是因為今年的 BoF 公告還沒出來，所以他想知道大會方是不是有機會能協助（幫忙借用設備），可以的話就會提出申請，其實如果熟悉 BoF 的應該都知道大會方只有提供場地，不過我當時在開車也沒辦法馬上幫忙回，總之就有其他朋友幫忙回了，四貓作為工作人員也在幫忙釐清對方的需求，當時大概就是有位社群朋友回文時多了一句：</p>
<blockquote>
<p>但如果認為大會方該要提供的話，你們預期大會方能從哪搞到這個資源呀</p>
</blockquote>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2024-05-16T20:19:02+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2024/05/08/see-different/">
<title>看見不同的學習風景</title>
<link>https://blog.othree.net/log/2024/05/08/see-different/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53705215124/" title="SEE DIFFERENT 看見不同的學習風景 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53705215124_e27643e0af_b.jpg" width="1024" height="768" alt="SEE DIFFERENT 看見不同的學習風景" srcset="https://live.staticflickr.com/65535/53705215124_3bdc8e8496_k.jpg 2x" /></a></p>
<p>週末帶小孩去松山菸廠意外發現到「<a href="https://www.songshanculturalpark.org/exhibition/activity/20028bbd-8f9c-472a-ad04-3e7584800adf">SEE DIFFERENT 看見不同的學習風景</a>」這個展覽，心中實在是有些想法和感觸想分享，首先先來介紹一下這個展覽吧：這個展覽其實是「<a href="https://schooltextbooks.design.org.tw/news/20240422">第二屆教科圖書設計獎</a>」的得獎作品，沒錯，是教科書，國中國小的教科書的設計展！而且不只是視覺上的設計，評選的範圍也包含內容的設計，展場展出的就是本屆得獎的教科書們，有一整區是可以翻閱的，只能說現在的教科書和我接觸過的三十年前左右的真的是差很多，除了更加活潑有質感的設計，還有各種清晰的圖表輔助，甚至連內文都變得很好閱讀，很像是在看科普書而不是教科書，深入了解之後，才知道這一切其實要從十年前，也就是 2014 年在 FlyingV 上的「<a href="https://www.flyingv.cc/projects/4221">美感細胞的教科書改造計畫</a>」開始，其實我當年也有看到，不過我是沒什麼參與，覺得就是很理想但是很難進入體制內，沒想到，美感細胞默默耕耘十年，加上教育部推動美感教育，還真的推展開來了，教科圖書設計獎都辦到了第二屆，而<a href="https://www.aestheticell.org/research/">美感細胞</a>在其中的角色，除了在 FlyingV 上三季的募資計畫，後來還成立社團法人，承接一些政府合作案之外，也持續進行相關研究，發佈了不少的<a href="https://www.aestheticell.org/research/">設計報告和參考資料</a>，另外還有一個很重要的角色，就是作為教科書出版社和設計師之間的媒合橋樑，其實教科書的出版不是那麼容易，和一般書籍比起來限制較多，除了內容要送審之外，教育部還有<a href="https://edu.law.moe.gov.tw/LawContent.aspx?id=FL033134">印製規定</a>。</p>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2024-05-08T17:06:12+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2024/04/24/happy-busy/">
<title>時間ねぇ</title>
<link>https://blog.othree.net/log/2024/04/24/happy-busy/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53676063087/" title="時間のないサイト運営者リング by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53676063087_6e0a1efc69_b.jpg" width="1024" height="824" alt="時間のないサイト運営者リング" srcset="https://live.staticflickr.com/65535/53676063087_91a1755290_k.jpg 2x" /></a></p>
<p>在 blog 這詞最為蓬勃之時，很流行在自己的網站上放各式各樣的 banner，這些 banner 種類用途很多，像是顯示你網站使用了甚麼技術、你想幫忙宣傳的東西、網站連結、甚至是一些自我的主張表現或是可以稱為無用小廢物（像是<a href="http://www.max.hi-ho.ne.jp/mao_h/nhk/">日本放置協会</a>，又簡寫為 NHK）的都有，我以前也放了不少，不過最後留下來的就只有兩個，第一個是 MDN 的推廣貼紙，第二個則是「<a href="https://sites.google.com/view/happy-busy/">時間のないサイト運営者リング</a>」，沒時間的站長串連，這張 banner 我看到的第一眼就很喜歡，有很符合個人狀況所以我放了很久，從 2007 年五月開始就一直放著，也有連結回去，直到前陣子整理網站的時候才發現，當初連回的串連網站已經死掉了！然後我就花了些時間尋找替代方案。</p>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2024-04-24T23:10:47+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2024/04/17/json-type-definition/">
<title>JSON Type Definition</title>
<link>https://blog.othree.net/log/2024/04/17/json-type-definition/</link>
<description><![CDATA[<p>之前工作上需要，想要一個簡單的可以檢查 JSON 資料結構的工具，研究了一陣子，發現到了 <a href="https://jsontypedef.com/">JSON Type Definition</a>（簡稱 JSON Typedef 或是 JTD） 這個 <a href="https://datatracker.ietf.org/doc/html/rfc8927">RFC 標準</a>，相較於發展已經很久的 <a href="https://json-schema.org/">JSON Schema</a>，JSON Typedef 的語法簡潔不少：</p>
<pre><code class="language-json">{
	&quot;properties&quot;: {
		&quot;id&quot;: { &quot;type&quot;: &quot;string&quot; },
		&quot;createdAt&quot;: { &quot;type&quot;: &quot;timestamp&quot; },
		&quot;karma&quot;: { &quot;type&quot;: &quot;int32&quot; },
		&quot;isAdmin&quot;: { &quot;type&quot;: &quot;boolean&quot; }
	 }
}
</code></pre>
]]></description>
<dc:subject>script</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2024-04-17T22:47:21+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2024/04/03/the-magic-of-dialog/">
<title>Dialog 的魔法</title>
<link>https://blog.othree.net/log/2024/04/03/the-magic-of-dialog/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53626597432/" title="HTML dialog by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53626597432_f11da51222_b.jpg" width="1024" height="235" alt="HTML dialog" srcset="https://live.staticflickr.com/65535/53626597432_8d2190c44e_k.jpg 2x" /></a></p>
<p>HTML 在 2014 的 HTML5 之後，其實就很少有什麼新的標籤，比較多是在各種細節的釐清和標準化各種未定義行為，不過在這些屈指可數的新標籤中，有一個比較廣為人知的，就是 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog"><code>&lt;dialog&gt;</code></a>。</p>
]]></description>
<dc:subject>css-html</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2024-04-03T11:49:41+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2024/03/28/yamani/">
<title>やまに（yamani）旅館</title>
<link>https://blog.othree.net/log/2024/03/28/yamani/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53403097470/" title="やまに旅館 お手頃ふぐ梅 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53403097470_8f640fb9b6_b.jpg" width="1024" height="683" alt="やまに旅館 お手頃ふぐ梅" srcset="https://live.staticflickr.com/65535/53403097470_931b7f0426_k.jpg 2x" /></a></p>
<p><a href="https://blog.othree.net/log/2024/01/06/2023-nagoya/">去年的名古屋之行</a>因為所以然後就跑去了南知多，研究行程時發現當地冬天有虎河豚，也很多餐廳有套餐可以享用，加上在台灣要吃河豚相對比較不容易，所以在安排行程時就花了不少時間研究要找哪一間，做這種套餐的其實很多是旅館，蠻大部分是當地的小型旅館，沒有上國際的訂房網站，甚至有的只有電話可以聯絡訂房訂位的，後來我的搜尋方法就是用 Google Map 慢慢找，在上面找了很久，最後選的旅館叫 <a href="https://yamaniryokan.com/">やまに（yamani）旅館</a>，本來是打算住一晚，後來因為參加源氏香活動的關係，就改成只有去吃河豚套餐。</p>
<p>選擇 Yamani 旅館的一個主要原因是，雖然舊，但是看起來蠻乾淨，我也一直很想體驗看看比較在地的住宿體驗（雖然沒住），另外就是它們其實也是有上樂天旅遊可以接外國遊客，不過樂天旅遊訂的話會比較貴，所以就還是在官網訂（不過沒住宿的我忘了樂天能不能能訂），唯一比較擔心的大概就是我沒日本電話號碼吧，不過結果還蠻順利的，不多說廢話，就趕快來看看 やまに旅館 的虎河豚套餐吧。</p>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2024-03-28T10:01:14+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2024/03/24/ui-event-order/">
<title>UI Event Order</title>
<link>https://blog.othree.net/log/2024/03/24/ui-event-order/</link>
<description><![CDATA[<p>我一直以來都對於 DOM 事件的順序抱有一種不確定的感覺，舉例來說，當使用者點滑鼠時，你可以預期到會有 <code>mousedown</code>、<code>mouseup</code>、<code>click</code> 事件，但是它們的順序是什麼呢？可以確定的是 down 一定是第一個，up 一定在 down 之後，那 <code>click</code> 是在中間還是最後呢？更進一步，點在可以有 focus 的元件上，那 <code>focus</code> 事件的順序呢？如果已經有其他元件有 focus，那它的 <code>blur</code> 事件又是在 <code>focus</code> 的前面還後面呢？除了滑鼠事件外，鍵盤事件又更複雜，除了 <code>keydown</code>、<code>keyup</code> 之外還有 <code>input</code>、<code>change</code> 和 IME 的 composition 事件等，總之最近實在是太在意了，就認真的弄了個測試網頁自己測試，之後又查找了相關的標準規範，這篇就來記錄一下這些事件的順序。</p>
<p>首先就來說滑鼠（指標裝置）相關的事件順序吧，第一個是滑鼠點擊，就是 <code>mousedown</code>、<code>mouseup</code>、<code>click</code>，是在 <code>mouseup</code> 後才接著有 <code>click</code> 事件，其實仔細想了一下也是蠻合理的，要有 up 事件才代表完成了 <code>click</code> 事件。然後這順序其實是有定義在 <a href="https://www.w3.org/TR/uievents/#events-mouseevent-event-order">UI Events 5.3.3</a> 之中的，其中的最後一個表格就是一個標準的點擊時事件的順序，而且這個表格還包括了 <code>mousemove</code> 和 <code>dblclick</code> 事件，這個章節中的其他部分則是滑鼠移動經過不同、多層的 DOM node 時，不同 node 上的 <code>mouseover</code>、<code>mouseout</code> 事件的順序。</p>
]]></description>
<dc:subject>script</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2024-03-24T18:07:13+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2024/03/08/akira-toriyama/">
<title>鳥山明過世</title>
<link>https://blog.othree.net/log/2024/03/08/akira-toriyama/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53575001401/" title="鳥山明訃報 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53575001401_24c238fbc5_b.jpg" width="600" height="800" alt="鳥山明訃報" /></a></p>
<p>今天（2024-03-08）官方發布的<a href="https://dragon-ball-official.com/news/01_2499.html">消息</a>，七龍珠的作者鳥山明在三月一日時因病過世了，JUMP 也有<a href="https://www.shonenjump.com/j/2024/03/08/240308_oshirase.html">訃報</a>，而且還有堀井雄二、桂正和、尾田栄一郎和岸本斉史的緬懷文（巴哈姆特 GNN 有<a href="https://gnn.gamer.com.tw/detail.php?sn=264681">譯文</a>），在緬懷鳥山明之餘，想來紀錄一下我對七龍珠系列的一些小心得。</p>
<p>首先是作者名字，其實我小時候一直搞錯，而且搞錯很久，把「鳥」當成「島」，即使到現在我都還需要在腦中確認一下，然後直到今天我才知道名字的念法（Akira Toriyama）；然後就是雖然現在大家對於 Z 那段的印象是很拖，但是其實拖的是電視動畫而已，後來我回去重看漫畫時，其實節奏還蠻明快的，當然有不少轉折拉長連載的時間，但不會在同一段劇情上拖拖拉拉；然後另外一個印象就是角色強度的通膨，以前總有個是不是一直吃書改設定的印象，像是佛力札已經號稱是宇宙最強了，怎麼後面還可以一直有更強的角色，後來重看漫畫才發現其實沒有，宇宙帝王佛力札就是在那個時間點的該宇宙中戰鬥力最高的人，接在後面的人造人是紅緞帶軍團製造出來的，魔人普烏則是古早時候就被大界王神封印的，所以佛力札作威作福時人造人還不存在，普烏則是被封印的狀態。</p>
<p>然後動畫故事到魔人普烏之後的續作，有「GT」和「神 vs 神」、「超」那一個系列的兩個線，其實我兩部都蠻喜歡的，比較早的 GT 是鳥山明沒有參與的，這邊就先略過，後來好不容易鳥山明回來參與的「神 vs 神」劇場版開始的世界設定，擴展了整個世界/宇宙的設定，從和界王神成對的破壞神開始到後來的多重宇宙、超級賽亞人 Blue、全王等等，我覺得都很非常的精巧，有趣而且最厲害的是沒有破壞到既有的設定，只能說真不愧是鳥山明，不知道這些設定有多詳細，和未來的企劃也不知道有多少關聯（像是那個還沒開始的大魔），不管如何，都是無限讓人惋惜啊。</p>
<p>最後想放一個 YouTube 的影片連結：</p>
<p><a href="https://www.youtube.com/watch?v=aOXs5hg0a5Y">https://www.youtube.com/watch?v=aOXs5hg0a5Y</a></p>
<p>這是龍珠超最後悟空和吉連對決最高潮的片段，也就是悟空進入「身勝手の極意」狀態的片段，似乎是在墨西哥的非官方?公開放映的景象（一開始有非授權的放映，但是後來有各種地方政府取得授權的放映活動），當初看到這影片的時候就覺得很驚訝，沒想到會在離日本這麼遙遠的地方，有個國家這麼多人都對七龍珠有這麼大的熱情，真的是個空前的成就。</p>
<p>追記：在發文的時間點，推特（現在的 X）的日本的 Trends 上沒有鳥山明，不過其實有三個相關的：「かめはめ波」、「スーパーサイヤ人」和「国民栄誉賞」。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53575020381/" title="Japan Trends 2024-03-08 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53575020381_d36fbe330e_b.jpg" width="387" height="1024" alt="Japan Trends 2024-03-08" srcset="https://live.staticflickr.com/65535/53575020381_37c354f542_k.jpg 2x" /></a></p>
]]></description>
<dc:subject>acg</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2024-03-08T23:15:52+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2024/01/12/qr-code-history/">
<title>QR Code 發明歷史展</title>
<link>https://blog.othree.net/log/2024/01/12/qr-code-history/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53400019990/" title="QRコード発明ヒストリー～QRコードはトヨタグループの発明だった！～ by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53400019990_281e6bd784_b.jpg" width="1024" height="683" alt="QRコード発明ヒストリー～QRコードはトヨタグループの発明だった！～" srcset="https://live.staticflickr.com/65535/53400019990_9636388588_k.jpg 2x" /></a></p>
<p><a href="https://blog.othree.net/log/2024/01/06/2023-nagoya/">去年去名古屋</a>時，有去了 <a href="https://www.tcmit.org/">Toyota 產業技術紀念館</a>，館內的展覽其實著重在技術介紹，分為紡織和汽車，其實我以前不知道 Toyota 是紡織起家的，展覽的內容非常不錯，很多機器都還可以運作，而且也可以讓訪客按按鈕自動展示，非常用心：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53400018490/" title="トヨタ産業技術記念館 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53400018490_75533ab6f8_b.jpg" width="1024" height="683" alt="トヨタ産業技術記念館" srcset="https://live.staticflickr.com/65535/53400018490_9bfe9edc2b_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53398655727/" title="トヨタ産業技術記念館 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53398655727_79d94ac64f_b.jpg" width="1024" height="683" alt="トヨタ産業技術記念館" srcset="https://live.staticflickr.com/65535/53398655727_1525f1a646_k.jpg 2x" /></a></p>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2024-01-12T23:42:13+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2024/01/06/2023-nagoya/">
<title>2023 名古屋</title>
<link>https://blog.othree.net/log/2024/01/06/2023-nagoya/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53401245579/" title="高山陣屋 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53401245579_c93978534b_b.jpg" width="1024" height="683" alt="高山陣屋" srcset="https://live.staticflickr.com/65535/53401245579_50db12c77e_k.jpg 2x" /></a></p>
<p>去年十一月底的時候，安排了一趟名古屋的旅遊，一開始的目標很簡單，就是帶小孩去樂高樂園，所以挑選了名古屋，結果這趟旅遊在出發前還真是一波三折，首先是因為差不多快要楓葉季了，所以挑選時間時就想說挑個可以順便看楓葉的時間，又考量到公司專案的時程，兩週不錯的時間挑了第二週，和本來那個專案的時間差了兩三週，結果公司專案最後還是拖到我出國前還沒上線；接著在規劃行程時，本來想說一天去下呂溫泉，然後前面四天後面五天都在市區或是近郊，接著看回程要怎樣到機場時，考慮到有想多買行李箱，所以可能無法搭電車，就看了一下計程車費，不意外的很貴，想了一下去查了一下租車一天的價錢，結果發現差不多！但是都租車了，乾脆多租幾天在附近玩，所以就看起了中部國際機場所在的知多半島的觀光景點，發現有虎河豚套餐可以吃，後來老婆覺得可以不用太多小孩行程，想去飛驒高山，排到最後變成：</p>
<pre><code>11/25 名古屋車站
11/26 Toyota 博物館、大須商店街
11/27 栄、Harbs 本店、東山植物園
11/28 Lego Land
11/29 三井 Outlet、名花之里
11/30 飛驒高山
12/01 下呂溫泉
12/02 犬山城、住南知多（源氏香）
12/03 知多半島、河豚套餐
12/04 臨空區、機場回程
</code></pre>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2024-01-06T23:34:12+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2023/12/09/genji-koh/">
<title>源氏香 南知多</title>
<link>https://blog.othree.net/log/2023/12/09/genji-koh/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377566549/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377566549_d4c2cc3812_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377566549_2332169903_k.jpg 2x" /></a></p>
<p>前陣子去了一趟名古屋，一開始其實只是想說帶小孩去樂高樂園，結果行程規劃從一開始的名古屋市區和周邊為主，弄到後來變成市區五天租車五天的，然後打算最後一天住在機場旁邊，就想說那前一天就在附近玩玩好了，要去的地方就因此多了一個一開始完全沒考慮過的「知多半島」了，當然也有研究住宿，當時也有找到「<a href="https://genji-koh.kaiei-ryokans.com/">源氏香</a>」這間旅館，不過那時候已經有安排了下呂溫泉的溫泉旅館，所以就沒考慮這個價位的住宿了，就在一切都安排好後沒幾天，突然就看到 FB 上有人分享到他們有特別的，針對台灣人的免費體驗方案，就是入住後要在 SNS 上分享。</p>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2023-12-09T15:41:08+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2023/11/08/sign-in-with-/">
<title>Sign-in with OOO ID</title>
<link>https://blog.othree.net/log/2023/11/08/sign-in-with-/</link>
<description><![CDATA[<p>最近工作上在研究 Sign-in with Apple/Google ID，其實這件事情也作過很多次了，不過距離上次也有點久了，不知道那些 SDK 有沒有什麼改變，所以還是要重頭來，而且這次多研究了一個 Apple，有搞懂些以前沒釐清的細節，想說紀錄一下。</p>
<p>首先就是，我發現到 Google 和 Apple 現在都會回一個 <a href="https://openid.net/specs/openid-connect-core-1_0.html#IDToken">ID Token</a>，內容則是 JWT，而且是認真的 JWT，真的會有帶一點使用者資料（像是 email）的，可以用來作 user authentication（認證）用的，這在以前只有 OAuth 2.0 的時候是沒有的，查一陣子資料才發現這其實是 <a href="https://openid.net/specs/openid-connect-core-1_0.html">OpenID Connect</a>（簡稱 OIDC） 規範的，該規範是是 2014 年發布的，其實還比 JWT 早定稿。</p>
<p>相較於 OAuth 2.0 做的是 authorization（授權），OIDC 做的則是 authentication（認證），只不過 OIDC 是整個依附在 OAuth 2.0 的架構上，利用的就是 OAuth 2.0 的 <a href="https://www.rfc-editor.org/rfc/rfc6749#section-3.1.1">response_type</a>，本來只有 <code>code</code> 和 <code>token</code> 兩種，在 OIDC 多提供了 <a href="https://openid.net/specs/openid-connect-core-1_0.html#Authentication"><code>id_token</code></a>，ID Token 是用 JWT，而且也有明確定義有裡面的 user profile 相關的<a href="https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims">欄位</a>（不是定義哪些是必須提供，而是定義好語意和對應的欄位名稱）。</p>
<p>第二個則是我一直存疑已久的問題，就是 OAuth 2.0 的設計上基本是用 redirection flow，而且 <a href="https://www.rfc-editor.org/rfc/rfc6749#section-3.1.2"><code>redirect_uri</code></a> 也是必要的，但是 Google 其實一直都支援純 JS 的方案，也就是說 Relying Party(應用程式端)不需要實作一個 redirection endpoint 來接資料，前端的 JS 就可以直接拿到 authorization code 和 access token，這次也認真的研究了這個問題，結果發現，Apple 的 OAuth 流程中，<a href="https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#ResponseModes">response_mode</a> 給的值是目前不在標準內的 <code>web_message</code>，而 Google 則是 <a href="https://www.rfc-editor.org/rfc/rfc6749#section-3.1.2"><code>redirect_uri</code></a> 給的是一個沒見過的 scheme：<code>storagerelay://</code> 的 URI。</p>
<p>其實我一開始以為這些設計，是各個公司自己想一想然後就自己做下去的，結果沒想到其實不是，首先是 Apple 的實作，用的是 <a href="https://datatracker.ietf.org/doc/html/draft-sakimura-oauth-wmrm-00">OAuth 2.0 Web Message Response Mode</a> 這份草稿的設計，這份草稿其中一位作者 Nat Sakimura 現在是 OpenID 的 chairman，而且他也是其他很多相關規範的作者（像是 <a href="https://www.rfc-editor.org/rfc/rfc7519">JWT</a>)，不過這份草稿只有一版且沒人更新，有很多細節沒有寫定，大部分都是提供範例程式碼而已，所以 Apple 有些東西不是照範例做，例如 message 的 payload；Google 實作的則是 <a href="https://lists.openid.net/pipermail/openid-specs-ab/2015-November/005865.html">OAuth 2.0 IDP-IFrame-based Implicit Flow</a>，這份文件其實是我最後才找到的，因為這份只有出現在 OpenID 的 mailing-list，而且也完全沒有討論和更新，不像前一份還有發到 IETF，回到文件內容，這份的作者，就全部都是 Google 的人了，內容完整許多，也有定義好 message 的 payload 結構，不過還是有些細節有缺，像是認證完成後的回傳事件，現在 Google 用的事件名稱在這份文件中就找不到。</p>
<p>除了這兩份草稿外，其實還有一份是 <a href="https://curity.io/">Curity</a> 提出的 <a href="https://datatracker.ietf.org/doc/html/draft-ideskog-assisted-token-05">OAuth 2.0 Assisted Token</a>，一樣有發到 IETF，而且還比較有在更新，最新一版是 2021 的，Assisted Token 的設計是多給了一個流程叫做 Assisted Token Flow，用不一樣的 URL 來使用這個 flow，這個流程的最後一步就是 postMessage 回到 opener/parent，規範寫的比較完整，包括各種新屬性的 registry、message 的 payload，還有安全性相關的考量都有，不過我看一看有些地方覺得有些疑惑，第一個是 message payload 的結構似乎辨識度沒很高，第二個則是完全沒提到 refresh token 和 authorization code，不確定是目前還沒考慮到那邊，還是因為安全性考量把它們先排除。</p>
<p>第三個是 Apple 的實作，雖然基本上還是照著 OAuth，但是其實限制更多，首先就是，<code>scope</code> 就只有 email 和 name 可以拿，而且 Apple 做成，只有第一次 authorization 時，會把 user profile 傳給 RP，之後是拿不到的（不過 email 有在 id token 內），然後，雖然可以拿到 access token，但是其實完全沒有可以使用它的 API endpoint，所以什麼事情都不能作，真的只能用來做 authentication，最後一個，就是用 code 換 token 時，要給的 <code>client_secret</code> 參數還特別麻煩，要<a href="https://developer.apple.com/documentation/accountorganizationaldatasharing/creating-a-client-secret">自己組一個 JWT</a>（但是也因此會 expire 比較安全），然後用之前從 Apple Developer 後台生好的 secret key 去算 signature。</p>
<p>最後一個想紀錄的就是，這幾份標準和文件裡面幾乎都有一個章節是 Security Consideration，內容雖然不全面但是還蠻值得一看的，也有提到一些攻擊手法，而除此之外，其實還有一份文件：<a href="https://www.rfc-editor.org/rfc/rfc6819">RFC6819: OAuth 2.0 Threat Model and Security Considerations</a>，內容就是有說明 OAuth 2.0 各種設計在安全性上的考量（像是為什麼有 <a href="https://www.rfc-editor.org/rfc/rfc6819#section-3.3">Refresh Token</a>，什麼情境下它有助於安全性的提升），以及各種可能的攻擊手法。</p>
]]></description>
<dc:subject>web</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2023-11-08T21:52:51+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2023/10/22/celeste/">
<title>Celeste</title>
<link>https://blog.othree.net/log/2023/10/22/celeste/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53276279101/" title="Celeste by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53276279101_c264a1ba25_b.jpg" width="768" height="1024" alt="Celeste" srcset="https://live.staticflickr.com/65535/53276279101_77a78ba47f_k.jpg 2x" /></a></p>
<p>一直想寫一篇關於 <a href="https://www.celestegame.com/">Celeste</a>（蔚藍山脈）的文章，不過拖了很久一直寫不出來，其實我當初也是拖了很久才玩的。我因為原本就很喜歡 2D 的平台遊戲，然後看到 Celeste 的介紹覺得很特別，以登山為目標，沒有戰鬥但是有挑戰性的平台遊戲，多麼特別啊！所以 2019 年我就把它買下來了，還是 <a href="https://limitedrungames.com/products/switch-limited-run-23-celeste-preorder">Limited Run Games 的版本</a>，結果買回來後，稍微玩一下覺得怎麼難到爆炸，就放置了。</p>
<p>後來到了 2021 年底，在 FB 看到橘子說<a href="https://www.facebook.com/Orange.8361/posts/pfbid0MZgonb2aBDzEfp1JwzrRALTZGtjf384afpWZXYFo9Pt3Pk78rDaJAwxyXyPwtHoNl">他登頂了</a>，我才一點手癢一點不服輸的又重拾了起來，結果這次就順利了突破一開始的障礙，漸漸的上手了起來，後來橘子更是把<a href="https://www.facebook.com/Orange.8361/posts/pfbid02hRCPB4QydeQnBcUygewfZh7akZ2nWr9i9XTQmvB2sVpLjsheCCjWtiuuZmWpfJwal">全部的關卡包括第九章都過完</a>了，本來想說我 B 面 C 面不勉強（有多難可以參考机核的文章：<a href="https://www.gcores.com/articles/96249">《蔚蓝：Celeste》：每个人心中都有一座山，但并非每个人都能登上山顶</a>），結果還是不服輸的就慢慢的也都過完了，必須說這關卡難度的曲線設計的真的是非常棒，最後花了一個月左右，遊戲時間 50 多小時，成績是把全部關卡通過，收集到所有除了黃金草莓以外的草莓，認真的說，這遊戲真的很難，我相信一定很多人無法達到這樣的成績，當然我也不是要說我多厲害，因為我這樣的成績還不是全要素收集，更上一層還有無死通關的金草莓，不過這樣的挑戰歷程已經讓我想寫文章記錄下來了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53281633529/" title="Celeste by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53281633529_58b4cc2bc0_b.jpg" width="1024" height="576" alt="Celeste" srcset="" /></a></p>
<p>我覺得這款遊戲最讓我感到厲害的，就是它遊戲的內外呼應，遊戲內的故事主軸是登山，而在了遊戲故事之外，這款遊戲也設計成了一個讓人攀登的高山，關卡和整體的難度就是設計的非常精巧，大家都可以在山腳出發，但是可能只有一半人能到五成高度，到了八成高度的地方就只剩下兩成，而真正能到達山頂，達成全要素，收集到所有的草莓，真正見到最後那個山頂風景的，就只有少數的那些玩家，那 26 個黃金草莓，全世界登記有案能拿到的大約只有<a href="https://celeste.ink/wiki/List_of_Celeste_players_with_the_Farewell_Golden_Berry">三百多人</a>（<a href="https://forum.gamer.com.tw/C.php?bsn=32436&amp;snA=17">台灣也有至少一位</a>），Celeste 也有賣出一百萬套左右，也就說只有萬分之三的人，能夠到達這款遊戲的真正的山頂（要素的山頂、還有另一批人在拼 speed run）。</p>
<p>本來還想要介紹更多的東西，但是寫了兩三次都不盡如意，最後決定，留下這篇文章作為自己參與了這段挑戰的紀錄，我到現在偶爾，都還會拉出當時登山時的一些影片紀錄，有些關卡真的是非常困難，難到讓人過關時都忍不住會按下 Switch 的錄影按鍵紀錄下來，甚至也不少是功虧一簣的紀錄，當然，我拿到最後一顆 moon berry 的紀錄也有，當時也有<a href="https://www.facebook.com/othree/posts/pfbid0RtymcvfzMXR2QfdD1X756CNoCzuZBe4WYj9dCsCEu4zpEVorNweWqBjbrTMtUnJZl">貼在 FB</a> 上。</p>
<p>附上幾篇開發相關的延伸閱讀：</p>
<ul>
<li><a href="https://indie-guider.games/post/DevStudy-Celestegame/">開發經驗分享】專題系列－《Celeste》</a></li>
<li><a href="https://qwe321qwe321qwe321.github.io/posts/61013/">從移動和跳躍開始，做好 2D 平台跳躍遊戲的角色控制 _BB001</a></li>
<li><a href="https://www.rockpapershotgun.com/celeste-dash">Why Celeste's dash feels great</a></li>
<li><a href="https://www.youtube.com/watch?v=4RlpMhBKNr0">Level Design Workshop: Designing Celeste</a> Celeste 開發者 Maddy Thorson 在 GDC 2017 的分享</li>
</ul>
<p>其他延伸閱讀可以參考橘子的第二篇 FB 貼文。</p>
]]></description>
<dc:subject>acg</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2023-10-22T20:56:37+08:00</dc:date>
</item>


</rdf:RDF>