<?xml version="1.0" encoding="utf-8"?>

<rdf:RDF
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
xmlns:admin="http://webns.net/mvcb/"
xmlns:cc="http://web.resource.org/cc/"
xmlns="http://purl.org/rss/1.0/">

<channel rdf:about="https://blog.othree.net/">
<title>O3noBLOG</title>
<link>https://blog.othree.net/</link>
<description></description>
<dc:creator></dc:creator>
<dc:date>2020-08-06T23:30:04+08:00</dc:date>
<admin:generatorAgent rdf:resource="http://www.movabletype.org/?v=4.381" />

<cc:license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/1.0/" />


<items>
<rdf:Seq>
<rdf:li rdf:resource="https://blog.othree.net/log/2020/08/06/usb-cdisplayport/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2020/08/01/upgrade-my-monitor/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2020/07/17/safari-3rd-party-cookie/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2020/05/02/2019/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2020/02/21/scroll-to-text/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2020/02/01/w3c-tag/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2020/01/27/dns-caa/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2020/01/05/public-suffix-list/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2019/10/22/enter-space-keydown-keyup/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2019/10/20/activation-behavior/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2019/08/22/circleci-terraform-aws-deploy/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2019/08/20/coscup-2019/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2019/07/18/kyoani-fire/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2019/07/02/robots-exclusion-protocol/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2019/05/29/2018/" />
</rdf:Seq>
</items>

</channel>


<item rdf:about="https://blog.othree.net/log/2020/08/06/usb-cdisplayport/">
<title>USB-C、DisplayPort</title>
<link>https://blog.othree.net/log/2020/08/06/usb-cdisplayport/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50176207458/" title="LG UltraFine 5K by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50176207458_47d3e5420f_b.jpg" intrinsicsize="1024x768" width="1024" height="768" alt="LG UltraFine 5K" srcset="https://live.staticflickr.com/65535/50176207458_47d3e5420f_b.jpg 1024w, https://live.staticflickr.com/65535/50176207458_6984419dba_h.jpg 1600w" /></a></p>
<p>前陣子為了買螢幕認真的研究了一下 USB-C 介面的問題，然後就在 FB 上快速的紀錄了一下，這篇就把那時的紀錄轉過來，每段文字前後有點不連貫還請忽略，然後尾巴加一些後來研究才知道的東西，當然因為我不是這方面專業的，內容有錯還請通知我～</p>
<p>最有趣的大概是 USB-C to HDMI 幾乎都是走 DisplayPort Alt. mode 然後線上晶片轉成 HDMI 訊號吧，反而沒有什麼支援輸出  HDMI Alt. mode 的設備，就算有，用上這種主動線材也不能用，然後買線的時候，有些廠商又不寫他是支援 DisplayPort Alt. mode  還是 HDMI Alt. mode（像是那個 moshi，盒子上可能有寫但是網站上都沒寫），不過現在應該幾乎都是前者吧，後者專用的線材可能還要特別去找。</p>
<p>然後 Mac 之前 Thunderbolt 3 其實只有支援到傳輸 DisplayPort 1.2 的訊號，但是 DisplayPort 1.2  的資料傳輸量只有支援到 4K 60Hz，只是 Thunderbolt 3 可以傳輸兩組 DisplayPort 1.2 訊號，所以可以把 5K 60Hz 10bpc(bit per color) 的視訊資料塞進去。不過最近出的 Pro Display XDR 是 6K 螢幕，一樣只用一條 Thunderbolt 3 線傳輸，研究一番才發現應該是 Mac 換了新的 Thunderbolt 晶片，現在支援到 DisplayPort 1.4，所以可以輸出到 6K 訊號了，不過一般查 Thunderbolt 3 都還是只有寫支援到 DisplayPort 1.2，不知道是不是其實這部分是動態沒寫死的。</p>
<p>再來就是我之前貼的兩台螢幕，MSI 那台的 USB-C 頭在使用手冊內有寫說不支援數據傳輸，所以那個頭應該是用 USB-C 的 DisplayPort Alt. mode，而不是 Thunderbolt Alt. mode 去傳輸 DisplayPort 訊號，LG 的是後者，所以它可以一條線同時做訊號傳輸，還提供筆電充電和三個  USB-C 頭出來（真的是 USB 介面的），不過沒有 downstream 來串接 Thunderbolt 設備，4K 版才有多餘的頻寬。</p>
<p>蘋果那條 Pro Cable 厲害的點就是在它有 2M 長度，但是：</p>
<ol>
<li>支援 USB-C 資料傳輸，傳輸速度可以到 USB 3.1 Gen 2 的 10Gbps；</li>
<li>Thunderbolt 3 Alt. mode，傳輸速度可以到最高速的 40 Gbps；</li>
<li>DisplayPort Alt. mode 訊號，並且支援到 1.3 的 HBR3，資料量有到 25.92 Gbps；</li>
<li>支援充電到 100W，也是 Thunderbolt 3 規格的最高功率。</li>
</ol>
<p>可以說是目前最常見的模式都有支援到目前的頂級規格了，一般這種長度的線通常就是：1. 普通 USB-C 被動（沒晶片處理）線材，然後就無法乘載 Thunderbolt 3 的 40G 訊號；2. 主動的 Thunderbolt 3 or DisplayPort 線材，但是就會變成只能傳輸自己支援的訊號，不能當 USB-C 線用，蘋果那條線到底是怎麼同時達成其實還不清楚，充電要怎樣能到 100W 然後同時傳輸這樣大量的資料也是很厲害。其實也有廠商出過同時可以當 Thunderbolt 3 和 USB 的<a href="https://www.akitio.com.tw/accessories/40gbps-thunderbolt3-cable-2m">線材</a>，只是 USB 就不能到 10Gbps，充電也有差，總之就是沒有樣樣完美的。</p>
<p>MacBook Pro 16 現在有支援同時輸出給兩台 Pro Display XDR，不過要一台插左邊，一台插右邊，其實 5K 就需要了，官網文件有寫，所以大概可以知道四個 port 頻寬是左右兩邊分開的，其實 Apple 官方文件寫的還蠻仔細的，不同機種都有各自的文件說明：</p>
<ul>
<li><a href="https://support.apple.com/en-us/HT210754">MacBook Pro 16</a></li>
<li><a href="https://support.apple.com/en-us/HT208366">iMac Pro</a></li>
<li><a href="https://support.apple.com/en-us/HT210392">Mac Pro with Radeon Pro Vega II Duo MPX Module</a></li>
</ul>
<p>然後 DisplayPort 1.4 有支援到 8K 60Hz 的訊號，Dell 也有一台 8K 螢幕 UP3218K 支援到 8K 60Hz 10bpc，不過現在一來 macOS 不支援輸出 8K，二來 Dell 那台如果要支援 8K 60Hz 是用兩條 DisplayPort 1.3（標準接頭）來傳輸訊號的，因為 DisplayPort 1.3 只有支援到 8K 30Hz，單一條無法到達 60Hz。不過一來 30Hz 蘋果不喜歡，二來兩條線也不符合蘋果美學，所以這個組合在可見的未來大概也是無法搭配在一起吧，我推測蘋果的裝置要支援到 8K 螢幕應該是至少要先換到 Thunderbolt 4 的介面，用比較高效的編碼然後用到單向 80Gbps 的傳輸，不過單向傳輸的話其實就無法同時串接 Thunderbolt 裝置了，也會變成無法達成一條線同時傳視訊、資料和充電，到時候到底會怎樣還是很很讓人好奇啊。</p>
<p>說到這其實我就很好奇，兩條 DisplayPort 線輸出高解析度畫面，這靠的是什麼標準呢？以前在 DVI 時代，這叫做 Dual-Link，不過 DisplayPort 似乎沒有相對應的專有名詞，蘋果網站和 LG 說是 dual-link SST(Single Stream Transport) ，Thunderbolt 網站有看到寫 Dual DisplayPort 的，不過似乎都不是正式的名稱，我基於好奇搜尋許久，還找到看起來好像很有關連的 DisplayPort Dual Mode（DP++）這東西，但是其實這也不是我要找的，我要找的最後是在一份 VESA 在 Display Summit 用的投影片中找到，這份投影片叫：<a href="https://www.vesa.org/wp-content/uploads/2016/06/Display-Summit-USA-2016-AMD-VESA-SAH_Final_r1.pdf">DisplayPort Future Proofing Display Connectivity for VR and 8K HDR</a>，其實這個能力是真的沒有特別的專有名詞（行銷用詞），它是利用 <a href="https://en.wikipedia.org/wiki/DisplayID">DisplayID</a> 的一個功能「Tiled Display Topology Data Block」來達成的，意思就是顯示器的 DisplayID 會跟訊源說你可以把我當成是一組並排螢幕中的一個，Dell UP3218K 是需要實體的 DisplayPort 線兩條，顯示器只要其中一個孔位說是左邊，一個說是右邊就可以，然後解析度都是 3840 × 4320 at 60Hz ，像 Thunderbolt 3 可以傳輸兩組 DisplayPort 訊號，也是一樣的方式，接 UltraFine 5K 的話是兩組 2560 × 2880 at 60Hz 10bpc 的訊號。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50195209003/" title="Pro Cable by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50195209003_39aa1b5807_b.jpg" intrinsicsize="1024x768" width="1024" height="768" alt="Pro Cable" srcset="https://live.staticflickr.com/65535/50195209003_39aa1b5807_b.jpg 1024w, https://live.staticflickr.com/65535/50195209003_60a2cb1dd3_h.jpg 1600w" /></a></p>
<p>最後，如果你看到一台螢幕號稱說是 USB-C 螢幕，那有三種可能性，一是它只支援 Thunderbolt Alt. mode，像是舊版的 LG UltraFine 5K；二是它只支援 DisplayPort Alt. mode，像是 MSI Prestige PS341WU；最後就是兩種都支援，像是新版的 LG UltraFine 5K。哇！除了線材挑選有學問之外，螢幕說支援 USB-C 接頭傳輸視訊，其實也有不同可能性了，USB-C 真的很難！</p>
]]></description>
<dc:subject>buy</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2020-08-06T23:30:04+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2020/08/01/upgrade-my-monitor/">
<title>更新螢幕</title>
<link>https://blog.othree.net/log/2020/08/01/upgrade-my-monitor/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50176899326/" title="LG UltraFine 5K by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50176899326_873c44ed56_b.jpg" intrinsicsize="1024x768" width="1024" height="768" alt="LG UltraFine 5K" srcset="https://live.staticflickr.com/65535/50176899326_873c44ed56_b.jpg 1024w, https://live.staticflickr.com/65535/50176899326_4d8f5560db_h.jpg 1600w" /></a></p>
<p>最近因為改用公司發的筆電，所以買了一台新螢幕，本來用的初代 Retina 5K iMac 就先搬回舊家了，這篇來記錄一下這次的螢幕的挑選過程。</p>
]]></description>
<dc:subject>buy</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2020-08-01T23:22:17+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2020/07/17/safari-3rd-party-cookie/">
<title>Safari 3rd-Party Cookie</title>
<link>https://blog.othree.net/log/2020/07/17/safari-3rd-party-cookie/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/50122828112/" title="Apple ITP by othree, on Flickr"><img src="https://live.staticflickr.com/65535/50122828112_79ce3e54d3_b.jpg" intrinsicsize="1024x837" width="936" height="765" alt="Apple ITP" srcset="https://live.staticflickr.com/65535/50122828112_79ce3e54d3_b.jpg 1024w, https://live.staticflickr.com/65535/50122828112_73eaebf7b0_h.jpg 1600w" /></a></p>
<p>Apple 之前有<a href="https://webkit.org/blog/10218/full-third-party-cookie-blocking-and-more/">宣告</a>要完全阻擋 3rd-party cookie，iThome 也有相關的<a href="https://www.ithome.com.tw/news/136565">報導</a>，iOS 和 iPadOS 應該是已經上線了，然後最近 Mac 版 Safari 也快要上線了，所以這篇來記錄一下要怎樣因應還有一些參考資料。</p>
<p>其實真的會寫到第三方 cookie 的服務是沒想像多的，如果不是開發給其它網站用的第三方服務的話（不是掛 script 而已），那其實沒那麼常見，舉例來說：很多人可能會覺得 Google Analytic 會受影響，但是其實並沒有，一般網站掛 Google Analytic 算是掛上 3rd-party script，但是它寫的 cookie 是 1st party cookie，也就是寫在你的網站的 domain 下，Google 的文件也有很詳細的說明他的每個 cookie 的<a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/cookie-usage">用途</a>，然後仔細看就會找到還有寫如何<a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/cross-domain">跨網域追蹤</a>，而這其實是需要帶一些參數過去的，如果 GA 是用 3rd-party cookie 寫在 Google 自己的 domain 的話，要跨網域追蹤就不需要這樣帶參數了，我是覺得 Apple 的 ITP 比較是針對廣告和 Facebook，早幾年前 Facebook 可以用 like button 來簡單的做到跨站追蹤，現在那些 iframe 都會被認為是 3rd-party，cookie 會和 1st-party 放不同區（partition），甚至本來如果有先去看過 facebook.com 之後，會有 24 小時可以存取該網域 3rd-party cookie 的能力也在 <a href="https://webkit.org/blog/8311/intelligent-tracking-prevention-2-0/">ITP 2.0</a> 移除，facebook 後來加上了 <code>fbclid</code> 這個參數來追蹤連出去的連結，然後 <a href="https://webkit.org/blog/8828/intelligent-tracking-prevention-2-2/">ITP 2.2</a> 就又針對這種連結裝飾（link decoration）也設了 cookie 的存取限制（剛好同時也影響到 Google Analytic）。</p>
<p>如果真的是需要作為 3rd-party 端提供服務的話怎麼辦呢？其實一開始 Apple 那篇<a href="https://webkit.org/blog/10218/full-third-party-cookie-blocking-and-more/">文章</a>，有列了幾個方案，其中正規的兩個方案：</p>
<ol>
<li>用 OAuth 2.0 作為 user auth 的方案，然後第一方網站拿到 token 後自己存好（作為 1st-party cookie 或是其它儲存方法）。</li>
<li>用 <a href="https://webkit.org/blog/8124/introducing-storage-access-api/">Storage Access API</a>，這是 Apple 所提出的 Web API，在被視為第三方的 context 中（例如 iframe），可以透過 Storage Access API 來取得 1st-party cookie 的存取權限，不過一般人直接用這個 API 要權限，可能會覺得奇怪怎麼 Safari 都沒有問使用者要不要給，權限就拿到了，其實這是因為 Apple 那邊的想法是這個 API 要盡可能的不干擾使用者，所以只有被歸類（classified）為有追蹤能力的域名才會跳出視窗跟使用者詢問，至於這個歸類的方法是在 <a href="https://webkit.org/blog/7675/intelligent-tracking-prevention/">ITP 1.0</a> 中提出的，Apple 考慮到隱私問題，所以這個機制是用機器學習的，每台電腦/裝置都維護自己的清單，沒有中心化的黑名單（Firefox 應該是用這種方法），而如果想要親自驗證自己的 domain 要是被歸類為追蹤網站的話，會發生什麼事的話，也有篇<a href="https://webkit.org/blog/8387/itp-debug-mode-in-safari-technology-preview-62/">文章</a>介紹，我自己有測試過也確實看到了那個詢問視窗。</li>
</ol>
<p>然後如果要用 Storage Access API，其實還有些限制，Safari 從 1.0 開始，就有個針對 3rd-party cookie 的限制，就是使用者要曾經直接訪問過該網域，並且寫入過 1st-party cookie，之後該網域才能對 3rd-party cookie 做存取，而這項限制也延伸到 Storage Access API 這邊，一樣要先作為 1st-party 寫入過 cookie，之後才能夠透過 Storage Access API 取得 1st-party cookie 的存取權限，Apple 負責 ITP 的 <a href="https://twitter.com/johnwilander">John Wilander</a> 最近正在寫相關的<a href="https://bugs.webkit.org/show_bug.cgi?id=193277#c7">文件</a>，裡面就有提到，然後這個限制 Firefox 也有，不過 Firefox 似乎是 30 天內有訪問過該網域就可以。</p>
<p>寫到這邊，其實有件事情忘記先提，就是網路上你去搜尋 <strong>Safari 3rd Party Cookie</strong> 會找到一些方法說可以成功讀寫 3rd-party cookie 的，那些全部都已經失效了，而且不只是 cookie，所有可以寫入的東西像是 DOM Storage 也是有受到一樣的限制保護的（然後 Storage Access API 現在<a href="https://twitter.com/jonathandavis/status/1204102948571119616">只能拿到 cookie 的權限</a>），目前也沒有出現其它的繞過方式，而且就算有人找到，Apple 都會修掉的，所以如果有這需求還是趕快用 Storage Access API 實做吧（別忘了 feature detection）。</p>
<p>然後或許有人會覺得 ITP 沒檔到 Google Analytic 好像沒什麼意義，其實 <a href="https://twitter.com/johnwilander">John Wilander</a> 早在 2017 年就有在 WebAppSec 稍微<a href="https://lists.w3.org/Archives/Public/public-webappsec/2017Mar/0034.html">提過 Single Trust</a> 這件事，提的就是網頁內掛的 3rd-party script 其實是安全性隱憂，應該只有同 domain 的東西可以信任，在 cookie 這邊來說就是 3rd-party script 不應該有存取網站 1st-party cookie 的權限（不過後來發生的是<a href="https://twitter.com/GossiTheDog/status/1038333980423204865">某航空公司的信用卡資訊輸入頁面放的第三方 script 會做 key log</a>），如果真的進行，這個改變可以想像的到影響非常的巨大，舉例來說，以前的 Performance Practice 其中一項是把 static file 放到 CDN 並且用不同 domain host，但是這樣其實就會被當成是 3rd-party script 了，雖然他在我們的認知下是可信任的，然後目前也有非常大量的現存網站是這樣做。目前 Apple 也有在做一些相關的研究，其中一個已經廣為人知(?)的就是 Safari 現在有在<a href="https://bugs.webkit.org/show_bug.cgi?id=204262">紀錄 3rd-party script 的數量</a>，另外就是我之前在 <a href="https://blog.othree.net/log/2019/05/27/incrementally-better-cookies/">SameSite Cookie</a> 這篇文章有提到的，Mike West 起草的 <a href="https://github.com/WICG/first-party-sets">First-Party Sets</a>，透過 <code>/.well-known/</code> 下的檔案定義可以被認為是 1st-party 的 domain 清單，假設未來真的要做到 single trust 的程度，要處理 CDN 之類的問題，像是 First-Party Sets 的機制就不可少。</p>
<p>最後附上一些延伸的參考資料：</p>
<ul>
<li><a href="https://github.com/whatwg/html/issues/3338#issuecomment-357790890">在提案 Storage Access API 時，Apple 工程師整理的 Safari 行為</a></li>
<li><a href="https://medium.com/@meistudio/the-rise-of-privacy-8c9ea5f53b09">Paul Li 之前在介紹 SameSite Cookie 時也有討論到相關的問題，並且還有一個 test suite</a></li>
<li><a href="https://www.tenmax.io/archives/14012">TenMax 介紹 ITP 的這篇文章的 ITP 發展歷程整理的很棒</a></li>
<li><a href="https://note.com/martech">日本的 AD EBiS マーテック研究会 的文章資訊都很新且深入</a></li>
</ul>
]]></description>
<dc:subject>web</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2020-07-17T21:51:00+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2020/05/02/2019/">
<title>2019</title>
<link>https://blog.othree.net/log/2020/05/02/2019/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/49845723161/" title="2019 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/49845723161_bccd876b09_b.jpg" intrinsicsize="768x1024" width="576" height="768" alt="2019" srcset="https://live.staticflickr.com/65535/49845723161_bccd876b09_b.jpg 768w, https://live.staticflickr.com/65535/49845723161_349079f004_h.jpg 1200w" /></a></p>
<p>2019 年的回顧也是拖很久，這次也是拖到五月了，不過基本上和去年一樣，沒有什麼拍照，所以只能做一個整年度的紀錄，這一年最大的不同就是整個年度都要照顧小孩，其實我的生活形態已經變成像是過一週算一週的方式了，每週維持一樣的生活步調，咬牙苦撐完 52 週就結束了這一年，還蠻沒有什麼過了一年的實感，不過小孩在兩歲前的成長真的是不等人，去年還在那邊爬來爬去，現在已經可以跑來跑去講一堆話了，根據我周邊同事和我的感想，小孩最可愛就是一歲半到兩歲中間這段時期了（其實有點跨到今年了），還沒有生小孩或是小孩還沒到這個年記得朋友還請把握這段時期XD</p>
<p>另外一件值得記錄的就是 COSCUP 還有負責辦 Open Web Technologies 議程（今年因為眾多考量就沒繼續了，留待明年再說），一開始投稿階段稿量很高，結果仔細一看發現一人多投的還不少，有點尷尬，最後選出來的海外講者也比我預期的還多，我自覺是沒有統整的很好，甚至有些 TODO 自己都沒做好，當然也是因為要照顧小還有些事情不能親自下去，而且其實意外的不好找人幫忙，像是 Moztw 社群內就找不太到人來幫忙當天的雜事，另外就是去年半下來我認為最需要避免再犯的就是在徵稿階段就需要提示主辦方對於講者能提供多少補助，像是 COSCUP 無法對講者旅費做補助，就讓兩位外國講者無法參與，我印象中其中一位是內部審稿已經過關了但是才確定不行，因為我在跟他聯絡後，該名講者也有自己去找他們公司內部的補助，不過沒有過關，如果能提早告知這個部分的資訊，應該是可以避免這個過程，也不用讓雙方都有錯誤的期待了。</p>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2020-05-02T21:53:25+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2020/02/21/scroll-to-text/">
<title>Scroll to Text</title>
<link>https://blog.othree.net/log/2020/02/21/scroll-to-text/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/49561392806/" title="Scroll To Text by othree, on Flickr"><img src="https://live.staticflickr.com/65535/49561392806_362f83d4cd_b.jpg" intrinsicsize="1024x869" width="1024" height="869" alt="Scroll To Text" srcset="https://live.staticflickr.com/65535/49561392806_362f83d4cd_b.jpg 1024w, https://live.staticflickr.com/65535/49561392806_a7ec190efb_h.jpg 1600w" /></a></p>
<p>Chrome 最近有個新功能叫做 <a href="https://chromestatus.com/feature/4733392803332096">Scroll to Text Fragment</a>，雖然在 Chrome Platform Status 網站那邊寫 M80 會可以用，不過我實際上測試正式版的 Chrome 80 還沒有，但是 Chrome Canary 已經是預設啟用了。這個功能讓你可以在網址內的 Fragment 段（<code>#</code> 後面那段），用新定義的語法來讓瀏覽器直接捲動到指定的文字位置，語法如下：</p>
<pre><code>#:~:text=[prefix-,]textStart[,textEnd][,-suffix]
          context  |-------match-----|  context
</code></pre>
<p>如果有在用 Chrome Canary 的可以直接試試看<a href="https://blog.othree.net/log/2019/10/20/activation-behavior/#:%7E:text=%E6%AD%A3%E5%A4%A7%E5%85%89%E6%98%8E">這個連結</a>。這個語法其實還蠻靈活的，可以和以前 id identifier 並用：</p>
<pre><code>#targetID:~:text=theText
</code></pre>
<p>這樣如果找不到文字，瀏覽器還可以改用 targetID 定位；如果網頁內有多個一樣的文字，可以用 <code>prefix-</code> 和 <code>-suffix</code> 給出前後文來讓瀏覽器找到正確的目標；再來就是如果要標註的文字很長，也可以用 <code>textStart,textEnd</code> 來標註，這樣就不用在網址內放一大串文字了；然後也可以標註多段文字，用 <code>&amp;</code> 切開，和給參數的格式一樣：</p>
<pre><code>#:~:text=firstText&amp;text=secondText
</code></pre>
<p><a href="https://wicg.github.io/ScrollToTextFragment/">正式的文件</a>現在是放在 WICG 那邊，GitHub 那邊的 <a href="https://github.com/WICG/ScrollToTextFragment/">Proposal repo</a> 則是有一段解釋<a href="https://github.com/WICG/ScrollToTextFragment/#enter-">為什麼選擇用 <code>:~:</code></a> 當分割符號的段落，我覺得這種脈絡的紀錄是很重要的，這邊簡單說一下，一開始有考慮過 <code>##</code> 這種比較容易想到形式，但是有些 URL parser 是由右到左的可能會有錯誤，再來他們列出一堆不太會有人去用的組合來當候選，然後去看 Google 那邊過去五年的紀錄，結果就是 <code>:~:</code> 最沒人用，只有 0.0000039% 的比例，所以目前是選擇這個分割符號。</p>
<p>我是蠻喜歡這新功能（標準？）的，<a href="https://github.com/mozilla/standards-positions/issues/194">Mozilla 也覺得還可以考慮看看</a>，不過目前這個功能似乎還沒在 stable channel 啟用，應該是因為<a href="https://www.theregister.co.uk/2020/02/20/chrome_deploys_deeplinking/">隱私問題</a>，Chrome 負責的團隊也有整理相關的<a href="https://docs.google.com/document/d/1YHcl1-vE_ZnZ0kL2almeikAj2gkwCq8_5xwIae7PVik/edit#heading=h.uoiwg23pt0tx">資訊</a>，大概簡單說就是有可能透過頁面的讀取時間或是 <code>scrollTop</code> 的值來判斷你開啟的頁面內有沒有特定字串，然後就會有外洩的疑慮。另外還有一個讓人擔心的問題是這個功能可能會讓那些本來用 fragment 當成 route 的 SPA 壞掉，<a href="https://github.com/w3ctag/design-reviews/issues/392">W3C TAG design review</a> 那邊他們自己也有提到。</p>
<p>其實這個 scroll to text 的功能在之前還有一套提案，不過不是由瀏覽器開發商所提，而是 indieweb 提的，叫做 <a href="https://indieweb.org/fragmention">Fragmention</a>，這組提案功能就比較陽春而且不成熟了：</p>
<pre><code>#some%20text
</code></pre>
<p>重點在裡面那個 <code>%20</code>，也就是空白字元，Freagmention 的提案是你的目標文字要有空白，因為 HTML 的 id 不能包含空白字元，所以如果有空白字元就表示不是要找 id，這個提案由我來看就是很明顯沒搞過 i18n 的啊～</p>
]]></description>
<dc:subject>web</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2020-02-21T00:15:26+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2020/02/01/w3c-tag/">
<title>W3C TAG</title>
<link>https://blog.othree.net/log/2020/02/01/w3c-tag/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/49471463826/" title="3874462 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/49471463826_8119bbecd7_n.jpg" width="320" height="320" alt="" srcset="https://live.staticflickr.com/65535/49471463826_8119bbecd7_n.jpg 320w" /></a></p>
<p>去年我在規劃 COSCUP 的 Open Web Technologies 的時候，有準備了一個備用的演講，題目是關於到哪裡可以追蹤到新的網路標準發展，其中的一個可以關注的資源，就是 <a href="https://www.w3.org/2001/tag/">W3C TAG(Technical Architecture Group)</a> 的 <a href="https://github.com/w3ctag/design-reviews">design-reviews</a>，我一開始其實是誤打誤撞發現這個 issue list 的，有點像是發現寶庫一樣，幾乎所有的新標準都會到這邊提出審查請求，而除了標准之外，Web 相關的比較重要的修改提案也會發到這邊來，像是最近要進行的 <a href="https://github.com/w3ctag/design-reviews/issues/373">SameSite=Lax by default</a>，還有剛提出的 <a href="https://github.com/w3ctag/design-reviews/issues/467">Partial freezing of the User-Agent string</a>。</p>
<p>W3C 有一份 <a href="https://www.w3.org/2019/Process-20190301/">Consortium Process Document</a> 的文件（簡稱為 Process），內容包括了 W3C 的一些基本構成，規範如何建立 Working/Interest Group 以及這些小組如何發展技術報告（Technical Report），這邊說的技術報告包括了草稿到 W3C Rec（推薦標準），除此之外，這份文件還有制訂了兩個獨立組別的構成方法，這兩個組分別為：<a href="https://www.w3.org/2002/ab/">Advisory Board</a>（顧問團） 和 Technical Architecture Group（TAG、技術架構組），兩者都有負責解決跨技術報告（aka 標準）之間的問題，前者是負責非技術的問題，後者則是負責技術問題。W3C TAG 的成員結構現在是：</p>
<ul>
<li>Tim Bernes Lee 為終生成員</li>
<li>W3C 總監</li>
<li>總監可以提名三位成員</li>
<li>另外有六名成員則是由 Advisory Committee（諮詢委員會，其實就是所有 W3C 會員代表人）選出</li>
</ul>
<p>其實看他們的審查意見都覺得真的很厲害，不過這些成員的名字其實曝光都很少。然後我一直很好奇，為什麼幾乎所有的技術報告都來這邊提審查，應該是有在技術報告開發流程上寫到才會這麼多，結果那份 Process 文件找來找去就是沒找到，花了幾個小時最後終於在其中一分外連的「如何建立一個工作/興趣小組」的文件中找到，其實找 TAG 做審查是 <a href="https://www.w3.org/Guide/process/charter.html#horizontal-review">Horizontal Review</a>（橫向審查） 的一部分，Horizontal Review 指的是技術報告在發展的過程中，找各個相關/相依的小組一起來做審查，而這些組別間的關係其實是寫在小組各自的章程裡面的，該份文件還有列出一些比較關鍵的組別：</p>
<ul>
<li><a href="https://www.w3.org/WAI/APA/">WAI Accessible Platform Architectures (APA) Working Group</a> 親和力</li>
<li><a href="https://www.w3.org/International/review-request">Internationalization Working Group</a> 多國語言支援</li>
<li><a href="https://www.w3.org/Security/wiki/IG">Security Interest Group</a> 安全性</li>
<li><a href="https://www.w3.org/Privacy/">Privacy Interest Group</a> 隱私</li>
<li><a href="https://www.w3.org/2001/tag/">Technical Architecture Group</a> 技術架構</li>
</ul>
<p>這五個確實是非常跨技術的主題，尤其是 TAG，技術的議題都跑不掉，我也循線去其它四個小組看了一下，發現真的也有相關的審查請求，不過不同小組申請審查的管道不一樣，有的還是用 W3C 傳統的 mailing-list，TAG 已經用 GitHub 算是非常先進而且方便訂閱了，從開發者的角度如果要關心網路標準的新發展可以以這邊為主，明顯比較缺的就是 CSS 的新東西不會發到這邊，我自己是還有訂 CSS Working Group 的 issue list。</p>
<p>最後就是現在台灣的 W3C 會員似乎只剩下 <a href="http://www.dpublishing.org.tw/">台灣數位出版聯盟</a>，日本現在倒是很多組織有加入了，像是不知道為什麼加入的 DWANGO，看起來也沒參加 Chinese Interest Group 的 <a href="https://w3c.github.io/danmaku/api.zh.html">Danmaku</a>。</p>
]]></description>
<dc:subject>web</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2020-02-01T23:40:51+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2020/01/27/dns-caa/">
<title>DNS CAA record</title>
<link>https://blog.othree.net/log/2020/01/27/dns-caa/</link>
<description><![CDATA[<p>過年前因為工作關係第一次注意到 <a href="https://en.wikipedia.org/wiki/DNS_Certification_Authority_Authorization">CAA record</a> (Certification Authority Authorization) 這個東西，簡單說明就是透過 DNS record 來設定你的 SSL cert 的簽發單位白名單，一開始的規範是 <a href="https://www.rfc-editor.org/rfc/rfc6844.html">RFC6844</a>，其實原理也不複雜，不過我就在遇到用 AWS ACM 簽發憑證時說檢查不過的狀況，有趣的是該 domain 沒有設定任何 CAA，搜尋研究一陣子後發現可能是因為該 domain 是 CNAME 去到別的第三方 domain 才會這樣，然後果然發現這個<a href="https://forums.aws.amazon.com/thread.jspa?messageID=924285&amp;#924285">問題</a>其實很久了。</p>
<p>不過其實原始版本的 RFC6844 其實沒有要求檢查 CNAME 目標的 CAA，而是在 2017 年的<a href="https://www.rfc-editor.org/errata/eid5065">勘誤 5065</a> 中才加入的，不過這個修改造成很多問題，所以 letsencrypt 在同一年就又<a href="https://community.letsencrypt.org/t/legacy-caa-implementation/42335">換回舊的實做</a>了。CAA record 看起來也因此放棄這個修改了，在用來取代 RFC6844 的 <a href="https://www.rfc-editor.org/rfc/rfc8659.html#name-differences-from-rfc-6844">RFC8659</a> 中，就完全沒有提到 CNAME 的檢查，甚至在與舊版相異的附錄也是特別提到這點差異，不過 RFC8659 還很新，是 2019 年 11 月的，看起來 AWS 還沒修正也情有可原(?)。</p>
]]></description>
<dc:subject>web</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2020-01-27T23:41:16+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2020/01/05/public-suffix-list/">
<title>Public Suffix List</title>
<link>https://blog.othree.net/log/2020/01/05/public-suffix-list/</link>
<description><![CDATA[<p>最近因為花了很多時間研究 Safari 和第三方 Cookie，常常看到一個專有名詞 <strong>eTLD+1</strong>，之前只知道和 domain name 及 TLD 相關，不清楚確切的定義，所以又去查了一下，結果找到解釋最清楚的竟然是 Go 的 publicsuffix 套件的<a href="https://godoc.org/golang.org/x/net/publicsuffix">說明文件</a>，總之簡單比較不明確的解釋，eTLD 指的是 effective TLD，像是 <code>net</code>、<code>net.tw</code> 這類，域名註冊商可以提供的網址後綴，依此類推，eTLD+1 就是 eTLD 再多一段，也就是一般人可以註冊到的網域名稱，像是我這邊用的 <code>othree.net</code>，至於部落格的子網域 <code>blog.othree.net</code> 就不是 eTLD+1 了。</p>
<p>其中的 eTLD 又稱為 Public Suffix，然後 Mozilla 有維護一份 <a href="https://publicsuffix.org/">Public Suffix List</a>，給瀏覽器用的，主要用途就是避免寫入太高權限的 cookie，例如我要是把 cookie 寫到 <code>.net</code> 層的話，所有的 <code>.net</code> 域名的網站都會讀的到它，就會有安全性問題，這份清單現在已經是主要瀏覽器開發商都有在使用了，它的內容除了那些 eTLD 之外，其實還有私人公司提交的，像是 blogspot 列了一大串，還有 github 有列 <code>github.io</code> 和 <code>githubusercontent.com</code>，<code>github.io</code> 是 GitHub Pages 的預設 domain，像我的 Github Page 就會用 othree.github.io，GitHub 提交這筆記錄，在現代瀏覽器就會限制我在 <code>othree.github.io</code> 不能寫 cookie 到 <code>github.io</code>，這樣可以確保所有使用者的頁面不會互相影響。</p>
<p>我還順便亂瀏覽一下內容，發現 Amazon 手上好多的 gTLD，像是 <code>book</code>、<code>song</code>，然後他們的 <code>cloudfront.net</code> 也有提交，還有一堆其它的 aws 網域名稱；另外就是 DynDNS 和 no-ip 兩個類似服務都提交超多的；然後還發現一間叫 <a href="https://nymnom.com/">nymnom.com</a> 的域名註冊商，專門提供一堆 <code>nom</code> 或 <code>nym</code> 結尾的域名，搞不清楚這兩個單字的意思啊。</p>
]]></description>
<dc:subject>web</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2020-01-05T23:23:59+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2019/10/22/enter-space-keydown-keyup/">
<title>ENTER or SPACE, KEYDOWN or KEYUP</title>
<link>https://blog.othree.net/log/2019/10/22/enter-space-keydown-keyup/</link>
<description><![CDATA[<p>前一篇文章<a href="https://blog.othree.net/log/2019/10/20/activation-behavior/">作動行為 Activation Behavior</a> 發佈之後，卡西又做了一些測試，發現到 <kbd>ENTER</kbd> 和 <kbd>SPACE</kbd> 的觸發時機其實不一樣：</p>
<blockquote class="twitter-tweet" data-conversation="none"><p lang="zh" dir="ltr">終於可以登入 codesandbox 了，在目前的 Chrome, Firefox, Safari 試了一下，結果 enter 會在 keydown 觸發 activation behavior ，但是 space 會在 keyup 觸發 <a href="https://t.co/ec1rMlFVvO">https://t.co/ec1rMlFVvO</a></p>-- 卡西 (@caasih) <a href="https://twitter.com/caasih/status/1186268152184766464?ref_src=twsrc%5Etfw">October 21, 2019</a></blockquote> <script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> 
<p>然後我仔細測試過發現真的是這樣，而且 <kbd>SPACE</kbd> 有 <code>keypress</code> 的狀態，就像是滑鼠按鍵按下去但是還沒放開時的樣子，然後這又讓我有點好奇起來了，仔細搜尋一番，發現 web 標準都沒有提到這個細節的定義，唯一有一點關係的是卡西也有找到的 <a href="https://github.com/w3c/aria-practices/issues/610">WAI-ARIA Authoring Practices Issue 610</a>，於是我就覺得這應該和 Web 標準定義沒關係，應該是更古老的預設行為，於是改變方向改找 Windows 預設行為相關的文件，搜尋一陣子其實也找不太到東西，大概是因為 GUI 和 Windows 剛出的時候其實 www 還不知道在哪裡吧，不過後來還是找到兩篇 stackoverflow 的問答看起來是相關的：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/16090578/why-do-enter-and-space-keys-behave-differently-for-buttons">Why do Enter and Space keys behave differently for buttons?</a></li>
<li><a href="https://stackoverflow.com/questions/6706689/keyboard-control-of-gui-dialogs-should-default-button-change-with-focus">Keyboard control of GUI dialogs - Should default button change with focus?</a></li>
</ul>
<p>總和這兩篇的內容，大概整理一下：</p>
<p>這個行為應該是 Windows 一開始的時候就如此設計的了（看起來是很難找到相關設計的文件），然後實際上和 <kbd>ENTER</kbd> 相關（相對）的操作其實是 <kbd>ESC</kbd> 鍵，<kbd>ENTER</kbd> 鍵代表的是直接點 default button（例如 form 的 submit、dialog 的 ok 之類的），或是可以說是執行元件預設的行為，至於 <kbd>ESC</kbd> 鍵則是取消，不過取消在網頁的控制元件中幾乎是不存在的，過去有的大概只有 <code>&lt;select&gt;</code> 展開下拉選單後又決定不選時可以取消，到 HTML5 則又多了 <code>&lt;dialog&gt;</code> 有取消的行為（關閉 dialog），大概也是因為這個原因讓人忽略了 <kbd>ENTER</kbd> 和 <kbd>ESC</kbd> 的關係，變成注意到 <kbd>ENTER</kbd> 和 <kbd>SPACE</kbd> 都可以操作元件；至於 <kbd>SPACE</kbd> 鍵其實就像是滑鼠點擊，<code>keyDown</code> 如同 <code>mouseDown</code>，<code>keyUp</code> 如同 <code>mouseUp</code>，要到 <code>keyUp</code> 才算一個點擊的動作，也就是到這時候才會去觸發 <code>click</code> 事件。</p>
<p>搞清楚這現象的原理之後，其實也就更容易理解 <a href="https://github.com/w3c/aria-practices">WAI-ARIA Authoring Practices</a> 的範例那些 <kbd>ENTER</kbd>、<kbd>ESC</kbd>、<kbd>SPACE</kbd> 幾個按鍵行為為什麼是那樣了，當然，以後需要客製 widget 時也不用再對這幾個按鍵的行為該怎樣定義苦惱了。</p>
]]></description>
<dc:subject>css-html</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2019-10-22T22:54:22+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2019/10/20/activation-behavior/">
<title>作動行為 Activation Behavior</title>
<link>https://blog.othree.net/log/2019/10/20/activation-behavior/</link>
<description><![CDATA[<p>前幾天全知全能的米奧大人在 Twitter 上徵求中階的 JavaScript 課程：</p>
<blockquote class="twitter-tweet" data-theme="light"><p lang="zh" dir="ltr">想求推薦中階 JavaScript 課程，唯一期望是想要有實務向的練習題，不用解答都沒關係，但我的腦需要靠自己動手來體會「使用 OOO 可以做出 XXX，OOO 是有用的！」才能學會東西 +_+，如果剛好有看過這樣的東西還請各位大人不吝推薦給我（跪）</p>-- Miau Huang (@miau715) <a href="https://twitter.com/miau715/status/1183625099137540098?ref_src=twsrc%5Etfw">October 14, 2019</a></blockquote>
<p>然後 Jedi 提供了一個題目：</p>
<blockquote class="twitter-tweet" data-conversation="none"><p lang="zh" dir="ltr">困難的簡單習題（平均起來就是中階）：<br/>讓一個 &lt;span&gt; 獲得跟 &lt;a&gt; 完全一樣的行為，以及讓一個 &lt;div&gt; 獲得跟 &lt;button&gt; 完全一樣的行為（提示：空白鍵跟 Enter 的差別、按下按鍵還沒放開前又按下 Esc、滑鼠中鍵把連結開到新分頁、是否已訪問過、停用狀態、Accessibility Tree / AOM 等）。</p>-- Jedi (@JediLin) <a href="https://twitter.com/JediLin/status/1183634431929503744?ref_src=twsrc%5Etfw">October 14, 2019</a></blockquote>
<p>後來米奧大人真的交作業了，也有提出一些問題，然後卡西有回應：</p>
<blockquote class="twitter-tweet" data-conversation="none"><p lang="zh" dir="ltr">button 比較明顯的問題有：<br/>* 點了 button 後不放開滑鼠，移到 button 外，不該 active 該 button ，但該取得 focus<br/>* button 上的文字不該被選取<br/>* keyup 該觸發 button 上的 onclick</p>-- 卡西 (@caasih) <a href="https://twitter.com/caasih/status/1184838289603231744?ref_src=twsrc%5Etfw">October 17, 2019</a></blockquote> <script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> 
<p>其中，「keyup 該觸發 button 上的 onclick」這句引起了我的興趣。</p>
<p>為了要顧及到網頁親和力，所有的控制元件的操作都應該要可以用鍵盤執行，所以像是 button 的動作也應該要可以用鍵盤控制，但是其實我以前一直搞不清楚，這之間正確的關係應該是怎樣，就三種可能性：</p>
<ul>
<li>key 事件觸發 click 事件，click 事件有 default handler</li>
<li>click 事件觸發 key 事件，key 事件有 default handler</li>
<li>click 事件和 key 事件都有同一個 default handler</li>
</ul>
<p>當我看到卡西那段文字的時候，我覺得他應該說的是有憑據的，不過我也覺得有些不正確，像是就我的認知，button 的 key 事件預設是不會觸發 click 事件的，於是我就花了點時間研究一下網路標準，這次終於找到規範和正確的關係了。</p>
<p>我先從 button 標籤開始查起，然後注意到一段，在說明 button 的 <a href="https://dom.spec.whatwg.org/#eventtarget-activation-behavior">activation behavior</a> 行為應該如何的文字，行為分成 submit button、reset button 和 button 三種，其中前兩個就像是在說 submit button 和 reset button 的行為一樣，所以我就了解到，activation behavior 就是我要找的關鍵字了，目前將它翻譯為「作動行為」。</p>
<p>然後在 <a href="https://html.spec.whatwg.org/multipage/interaction.html#activation">HTML 6.3 Activation</a> 找到：</p>
<blockquote>
<p>Certain elements in HTML have an <a href="https://dom.spec.whatwg.org/#eventtarget-activation-behavior">activation behavior</a>, which means that the user  can activate them. This is always caused by a <code>click</code> event.</p>
<p>The user agent should allow the user to manually trigger elements that have an <a href="https://dom.spec.whatwg.org/#eventtarget-activation-behavior">activation   behavior</a>, for instance using keyboard or voice input, or through mouse clicks. When the  user triggers an element with a defined <a href="https://dom.spec.whatwg.org/#eventtarget-activation-behavior">activation behavior</a> in a manner other than  clicking it, the default action of the interaction event must be to <a href="https://html.spec.whatwg.org/multipage/webappapis.html#fire-a-click-event">fire a <code>click</code> event</a> at the element.</p>
</blockquote>
<p>第一段就是說作動行為（activation behavior）都是 <code>click</code> 事件觸發，第二段則是說瀏覽器要讓其它方法（像是鍵盤、語音操作等）可以觸發作動行為的話，實做的方法應該是在該事件的處理器（event handler）內觸發 <code>click</code> 事件來觸發該 HTML 元素的作動行為。這段文字就可以證明卡西說的基本上沒錯，另外就是我有疑惑的，應該是 <code>keydown</code> 還是 <code>keyup</code> 事件呢？根據我自己的實驗結果應該是要用 <code>keydown</code>，不過總還是想找一下標準定義的出處，雖然沒有找到很明確的文字說明，不過 <a href="https://www.w3.org/TR/uievents/#event-flow-activation">UI Events 3.5. Activation triggers and behavior</a> 裡面的 EXAMPLE 4 內確實是寫 keydown event，當然 <code>keydown</code> 的時間點也比較符合期待，目前在不同標準文件內看到的範例也都是用 keydown。</p>
<p>查到這邊大概就可以確定，正確的關係應該是「key 事件觸發 click 事件，click 事件有 default handler」，<del>不過卡西說的小錯誤是應該要用 keydown 事件，然後我在 twitter 有回說普通 button 不應該 keydown 觸發 click 則是我當時的錯誤認知</del>（請見 <a href="https://blog.othree.net/log/2019/10/22/enter-space-keydown-keyup/">ENTER or SPACE, KEYDOWN or KEYUP</a>）。</p>
<p>再來，其實我還很好奇，哪裡有定義不同的元素分別用哪些按鍵 <strong>active</strong> 呢？因為表單送出是用 <kbd>ENTER</kbd> 鍵，但是像是 checkbox 的狀態切換卻是用 <kbd>SPACE</kbd> 鍵；上面提供的幾份文件也都沒講到這部分的定義，有種刻意避開的感覺，後來又找了許久才終於找到，其實是放在 WAI-ARIA Authoring Practices 這份 Working Group Note 內，拿 <a href="https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-4">checkbox</a> 為例，在它的 Keyboard Interaction 段落內就明白寫了：</p>
<blockquote>
<p>When the checkbox has focus, pressing the Space key changes the state of the checkbox.</p>
</blockquote>
<p>當然也有 <a href="https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-3">button</a> 的規範，就是同時有定義 <code>space</code> 和 <code>enter</code> ；由於這份文件是 Working Group Note，規範的硬性比較低，這應該也是故意為之的。</p>
<p>最後來整理一下，首先是 HTML 文件有定義，預設的作動行為都是透過 <code>click</code> 事件觸發，但是同時也要保留其它操作介面觸發作動行為的可能性，像是常見的鍵盤行為，而其它操作方式都要透過觸發 <code>click</code> 事件的方式來觸發作動行為；再來就是不同 HTML 元素的作動行為要做哪些事情也是在 HTML 文件內；至於不同 HTML 元素要支援哪些按鍵呢，這部分就要交叉參考 <a href="https://w3c.github.io/html-aria">ARIA in HTML</a> 和 <a href="https://www.w3.org/TR/wai-aria-practices-1.2/">WAI-ARIA Authoring Practices</a> 兩份文件了，前者用來查詢 HTML 元素對應的 ARIA role，後者可以根據 role 來判斷要支援哪些鍵盤按鍵。</p>
<p>以後要做自訂的控制元件的時候，就可以正大光明的把主要的動作寫在 onclick 事件下了（然後根據情況去加上 key event）。</p>
]]></description>
<dc:subject>css-html</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2019-10-20T14:22:27+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2019/08/22/circleci-terraform-aws-deploy/">
<title>Circle CI run Terraform and AWS deployment</title>
<link>https://blog.othree.net/log/2019/08/22/circleci-terraform-aws-deploy/</link>
<description><![CDATA[<p>最近花很多時間在 CI，其中一個比較大的目標是跑 Terraform 加上用它輸出的 S3 name 來作為後面發佈步驟的發佈目標，然後加上不想要用第三方的 docker image 和 orbs，不過網路上都沒看到有這樣子做的範例，所以花了些時間嘗試、看文件和範例，這篇就是把一些目前的結論記錄下來：</p>
<p>Terraform 是用 hashicorp 官方的 <a href="https://hub.docker.com/r/hashicorp/terraform/">image</a>，基本上就是 alpine + go + terraform 而已，shell 只有 sh 沒有 bash，不過其實 Circle CI 的一些文件看起來，他們應該是建議要使用 bash 為主，其中一個主要原因就是 <a href="https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-shell-command">BASH_ENV</a> 這個環境變數有沒有支援，支援的話就可以很輕鬆的在不同 command 間傳遞環境變數了，不過還好我在 Terraform 這邊只需要寫入，還不需要讀出，所以就是 Terraform 執行完之後加一個 command 執行：</p>
<pre><code class="language-sh">echo &quot;export S3_ID=`terraform output s3_bucket_name`&quot; &gt;&gt; $BASH_ENV
</code></pre>
<p>當然你的 terraform module 要有定義好 output。</p>
<p>第二個是重點是 <code>$BASH_ENV</code> 的值，個人建議是設定絕對路徑，直接寫出完整路徑，不要用其它環境變數來組合，然後位置要放在 working directory 內，好方便能  <code>persist_to_workspace</code>，這樣才能夠跨 job 使用，另外就是檔名建議不要用 <code>.</code> 開頭的隱藏檔名，我遇到過各種找不到檔案的錯誤訊息，然後 working directory 建議不要放在 home 目錄下，一來 <code>$BASH_ENV</code> 去用 <code>$HOME</code> 組合出來我遇到錯誤過，用 <code>~</code> 來寫路徑也是遇到錯誤過，二來不同 image 的 home 目錄路徑不同，如果要在 config 內直接寫死絕對路徑，建議直接定一個固定的位置，我現在是用：</p>
<pre><code>/tmp/workspace
</code></pre>
<p>然後這樣後面就可以用官方的 s3 orb 下指令了：</p>
<pre><code class="language-yaml">- aws-s3/sync:
    from: build
    to: &quot;s3://${S3_ID}&quot;
    aws-region: &quot;ap-northeast-1&quot;
</code></pre>
]]></description>
<dc:subject>script</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2019-08-22T23:02:19+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2019/08/20/coscup-2019/">
<title>COSCUP 2019</title>
<link>https://blog.othree.net/log/2019/08/20/coscup-2019/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/48582240846/" title="COSCUP 2019 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/48582240846_0a6a7576c2_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="COSCUP 2019" srcset="https://live.staticflickr.com/65535/48582240846_0a6a7576c2_b.jpg 1024w, https://live.staticflickr.com/65535/48582240846_26f337902f_h.jpg 1600w" /></a></p>
<p>今年發生什麼事大家都知道了，我今年負責的是 Open Web Technologies 議程軌，相對是受影響比較小的單位，不過還是想從我的角度來記錄一下，這篇就流水帳吧。</p>
<p>前一天晚上聽到說台科大停電的時候，還沒什麼實感，而且研揚大樓很快就恢復了，想說應該不會停太久吧，直到後來要睡前都沒有恢復才有一點緊張感，不過基本上也做不了什麼事情，還是準時去睡覺，還把龍王的工作八給看完了，隔天早上七點多醒來一看已經確定要換場地了，各管道的宣傳也開始在跑了，我就邊處理小孩的東西，先發了一封信件給今天的所有講者說場地要換大樓了，當時新教室的位置還沒出來。然後也邊跟另外一位社群協調人 hlb 聯絡，他還要從新竹出發過來，比我還早出門，後來教室確定後我又再發一封郵件，還有在 Telegram 的 Mozillians at COSCUP 2019 群（專門開給國外來參加 COSCUP 的 Mozilla 人的群）也趕快發通知，剛好那邊還有今天下午的兩位講者在裡面。</p>
<p>我自己本來的規劃是九點到場，後來因為確定狀況和發信等等後來有比較晚到，不過還是去採買了要給講者喝的水，我準備了一個保冷袋還加買兩包冰塊，後來冰塊到離開時都還沒融化完，可是冷卻效果不是很好，或許還是專用的保冷劑效果會比較好，另外就是有一包冰塊好像袋子還有破洞漏水。停到研揚大樓停車場的時候，竟然只能使用悠遊卡，然後一刷，只剩下 80 塊，這表示我要離開前勢必要先找地方加值了，當然，當時校內的便利商店也都停電了 ～＿～</p>
<p>九點多到場時很感謝 hlb 都已經確認完場地狀況了，而且看起來幾乎場地都已經準備好了，雖然還有攤位沒準備完，樓下其實還一直在搬東西過來，不過真的是要讓演講開始已經完全沒問題了，像是教室指標、背版、麥克風備用電池，甚至連新印的單間會議廳的議程表都有，隔壁教室的贊助商攤位看起來也很有一回事了。</p>
<p>之後就都還蠻順利的，講者都有準時到，沒有開空窗，也沒有人超時卡到下一位講者，分享後互動最熱烈的那場，也剛好排在午餐前，比較可惜是我的主持還不太行，介紹講者的部分都不太好，當然週五無法先去找講者聊一下也是蠻有影響的，不過更大的因素是我自己事前準備還不夠，沒有練習好，這部分就明年繼續努力了。</p>
<p>今年 Open Web Technologies 下午有三位海外講者，其實都是他們各自籌經費，Mozilla 的 Rabimba 和 Bob 都是 Mozilla Tech Speaker，所以應該是從那邊申請經費的，另外一位則是 LINE 的 Trustin Lee，LINE 也是今年贊助商之一，講者的經費應該是公司出的，剛好攤位就在隔壁教室，好像也有該主題自己的攤位和其它一起從韓國來的朋友，開場前就看到他們開始在拍照，然後我才想到，像這種公司出錢來的海外講者，要是因為活動因故取消的話，人都到了不知道他們的旅費要怎麼處理，這時才第一次體會到，推廣國際能見度其實也是伴隨而來更多的責任的啊。</p>
<p>總之議程過程還算順利，我自己因為主持的關係幾乎離不開，只有挑了一場演講開始的時間去 HKOSC 買預計要入手的 kotties，還有去拿個人贊助的紀念品，不過我沒有拿到大會手冊就是，最後議程結束後，我就把東西收好走去長興街 7-11 儲值悠遊卡，那段時間雨還不小，回來時在一樓跟小耕打招呼，他也提到了場佈兩次的事情，我腦中就響起了這個旋律：</p>
<blockquote>
<p>每條大街小巷<br />
每個人的嘴裡<br />
見面第一句話<br />
場佈快不快樂</p>
</blockquote>
<p>搭配音樂：</p>
<div class="embed_16_9">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/7BNPbS1lmy8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>之後還在閃電講時間，我去了記錄組工作區晃了一下，還遇到不少老人回來要準備幫忙撤場，沒停留多久就回家顧小孩了，停車費 400（應該是 50 x 8 小時），大概九點弄完才有時間去找出 YouTube 直播留存的影片來看最後的閃電講和閉幕，看完覺得第二天能順利辦完真是太好了，不只是對贊助商和講者的交代，要是沒有辦起來也沒機會再次緬懷 Ilya 和阿怪了。</p>
<p>最後個人想法，其實我聽到要換場地的時候，我腦中倒是完全沒有懷疑過 COSCUP 團隊會辦不到，有個替代場地可以用反而是我覺得真的是撿到的，不知道為什麼一開始會先把研揚大樓的供電恢復，而且校方還能迅速幫忙協調出空間給我們用這真的是非常關鍵，如果今天在其它地方辦搞不好就真的無法找到替代空間了；然後在研揚辦的效果其實也還不錯，走道有空調真是舒適不少，第一次到台科辦的時候好像也有考慮過這個位置就是，不過大概就是因為沒有比較正式的會議廳吧。第二是 Bobchao 從前年開始推動的社群議程其實也在這次事件發揮蠻大的功效，不然整個議程相關的問題就會擠在議程組內了，現在這樣倒是可以把很多事務和權責放到外部，對我來說，其實更換場地影響沒有很大（當然是因為我到場時東西都已經準備好了，十點社群議程才開始也提供了相當充足的時間），最重要的就是確定新的會議廳位置以及想辦法通知講者，尤其是海外講者，這次我們軌三位海外講者中有兩位都有 IM 管道可以跟他們聯繫（感謝 Irvin 有先建立群組），所以我都有確定他們知道場地變動的訊息，以後也可以考慮先建立好跟講者聯繫的 IM 管道。</p>
<p>然後比較個人部分的感想，要顧一間做整天的主持人，幾乎都沒有機會離開啊，更不用說拍什麼照片了，其實攝影器材有帶不少但是大概用不到一半，希望以後能更多時間到場，然後可以分個半天一天做自由記錄。</p>
<p>最後的最後就放其它人的紀錄吧（不過目前看到的公開的只有四貓的，歡迎提供其它連結）：</p>
<ul>
<li><a href="https://blog.catcatcatcat.cc/2019/08/19/coscup2019/">四貓</a></li>
<li><a href="https://medium.com/@nijia.lin/chatbottw-in-coscup-2019-%E5%BE%9E%E6%9C%83%E7%9C%BE%E8%AE%8A%E6%88%90%E8%B2%A0%E8%B2%AC%E4%BA%BA%E7%9A%84%E5%BF%83%E8%B7%AF%E6%AD%B7%E7%A8%8B-d58ddfe61328">NiJia</a></li>
<li><a href="https://www.facebook.com/bigbody2/posts/10158315999530752">大隻</a></li>
<li><a href="https://pingyeh.blogspot.com/2019/08/coscup-2019.html">pingooo</a></li>
</ul>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2019-08-20T15:13:53+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2019/07/18/kyoani-fire/">
<title>京都動畫公司縱火事件</title>
<link>https://blog.othree.net/log/2019/07/18/kyoani-fire/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/48315611637/" title="#PrayForKyoani by othree, on Flickr"><img src="https://live.staticflickr.com/65535/48315611637_98b6a090b2_b.jpg" intrinsicsize="542x1024" width="343" height="648" alt="#PrayForKyoani" srcset="https://live.staticflickr.com/65535/48315611637_98b6a090b2_b.jpg 542w" /></a></p>
<p>想不到我在這個類別隔這麼的發文又是為了記錄這種事情。</p>
<p>今天（2019 年 7 月 18 日）京都動畫第一工作室遭縱火，目前<a href="https://www.fdma.go.jp/disaster/info/items/1907182201.pdf">死者 33 人</a>，不過也有十名重傷，火災重傷後續也很辛苦，所以數字還不排除有變化的可能性。這場火災是日本近年來死傷最嚴重的縱火事件，我一早就看到消息了，然後整天就一直看著傷亡數字上升，很難受。</p>
<p>其實我對京阿尼還算蠻有情感的，想當年他們要開始獨立製作動畫時，還有發新聞稿，強調他們要以著重動畫品質的時候，我還想著就來看看結果會如何，結果後來就是大家所知道的，他們推出了一部又一部品質精美的動畫作品，我自己很喜歡的一張我拍的 <a href="https://www.flickr.com/photos/othree/8477826443/">cosplay 照片</a> 的角色六花也是從他們的作品中出來的，今天我認真的查了一下我看過哪些，發現沒看過的其實沒幾部，就這樣從我大學一直到現在。這個消息在全世界動漫圈都傳很大，美國的發行商 Sentai Filmworks 還為他們發起了<a href="https://www.gofundme.com/f/help-kyoani-heal">募款活動</a>，本來五十萬美金的目標已經達標，現在是新目標 75 萬，<a href="https://twitter.com/search?q=%23PrayForKyoani&amp;f=live">#PrayForKyoani</a> 這個 hashtag 也在世界趨勢中維持在第一位一整天了。</p>
<p>動物朋友的監督 たつき 在 twitter 上發表了一段文字，我想很正確的表達了這件事情為什麼讓人感受這麼深：</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">亡くなられた方がどれだけの、膨大で地道な時間を人知れずアニメに使ってきたか、のべ何万人何億人のひとの時間を豊かにしたか、ヒトの幸せの総量を増やしたか。そんな方々がなぜこんな苦しいつらい終わり方をしないといけないのか。</p>－ たつき／irodori (@irodori7) <a href="https://twitter.com/irodori7/status/1151776349121417216?ref_src=twsrc%5Etfw">July 18, 2019</a></blockquote> <script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> 
<p>借一下 plurk 上 AT2 的<a href="https://www.plurk.com/p/nes3xm">翻譯</a>：</p>
<blockquote>
<p>逝世者們到底花費多少龐大且踏實的時間，在不為人知的情況下拿來做動畫。
豐富了幾萬、甚至幾億人的時間，增加了人們幸福的總指標。
為什麼這樣的人們要非得以這麼痛苦、這麼悲傷的方法離世呢</p>
</blockquote>
<p>最後就是突然又想到 ZEGAPAIN 這部動畫，ZEGAPAIN 其實是 ZEGA 和 PAIN 兩個單字，意思是人類（整個人類種族）難以承受的巨大傷痛，想我當年看完這部作品心情嚴重低落三天，嚴重到我爸媽問我怎麼了，今天這件事來看好像又更能體會一點了。</p>
]]></description>
<dc:subject>acg</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2019-07-18T22:48:26+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2019/07/02/robots-exclusion-protocol/">
<title>Robots Exclusion Protocol</title>
<link>https://blog.othree.net/log/2019/07/02/robots-exclusion-protocol/</link>
<description><![CDATA[<p>Google Webmaster Central Blog 昨天發表了 <a href="https://webmasters.googleblog.com/2019/07/rep-id.html">Formalizing the Robots Exclusion Protocol Specification</a> 這篇文章，介紹到 Robots Exclusion Protocol (REP) 這個正在標準化的<a href="https://tools.ietf.org/html/draft-rep-wg-topic-00">草案</a>，REP 其實就是已經被廣泛使用的 <a href="https://support.google.com/webmasters/answer/6062608?hl=zh-Hant">robots.txt</a> 檔案，robots.txt 誕生至今已經 25 年了，當初是由 <a href="https://en.wikipedia.org/wiki/Martijn_Koster">Martijn Koster</a> 所設計，早期網路的東西基本上就是先做，設計的不錯大家就跟著抄，不一定會有什麼標準的文件，robots.txt 就是這樣其實一直都沒正式的標準文件，我以前還真的有懷疑過怎麼找不到，直到 Google 這篇文章才確定了，真的一直以來是沒標準的，雖然 Google 衝網路標準太快讓人有不少意見，不過這次我倒是覺得樂觀其成，而且他們也還公開了他們的 robots.txt 的 <a href="https://github.com/google/robotstxt">parser matcher lib</a>。</p>
<p><a href="https://twitter.com/igrigorik/status/1145778175898599424">消息來源</a></p>
]]></description>
<dc:subject>web</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2019-07-02T12:35:06+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2019/05/29/2018/">
<title>2018</title>
<link>https://blog.othree.net/log/2019/05/29/2018/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/47958934008/" title="Baby by othree, on Flickr"><img src="https://live.staticflickr.com/65535/47958934008_fa8ebe7a70_b.jpg" intrinsicsize="1024x683" width="1024" height="683" alt="Baby" srcset="https://live.staticflickr.com/65535/47958934008_fa8ebe7a70_b.jpg 1024w, https://live.staticflickr.com/65535/47958934008_3e58bcf3f0_h.jpg 1600w" /></a></p>
<p>2018 年回顧拖了快要半年還沒出來，主要原因是現在空閒時間很少，而且本來想先把記錄組文章的第二篇寫出來，不過想一想還是放棄這個方案，免得到了 2020 年還沒寫好。</p>
<p>去年對我來說變化很大，忙碌到沒有每個月都有拍照，所以放棄以往一個月一張照片的方式，改以文字為主。所以去年有什麼變化呢？去年我換了工作、搬了家、小孩出生然後還買了新車，買車主要是為了方便帶小孩出門時，以前開的是我哥的老車，考慮到安全性和舒適性的問題，決定還是買台新車，然後因為車款熱門所以等很久才拿到車就是。</p>
<p>搬家也是為了小孩，因為考慮到本來住的兩房不夠大才搬的，本來有一間很大環境不錯、價錢不錯還有車位的陰錯陽差沒租到，不過那間缺點是比較偏僻，之後又一直找不太到適合的，然後現在租的也是有點運氣才租到的，本來跟房東約好週末要去看房子，結果前一天房東就打來說租出去了，然後又過了不知道多久那位房東又打來說本來要租的因故無法承租了，然後才輪到我有機會去看，然後一看就覺得不錯就先訂下來，大約是二十年的房子，實際上住進來當然還是有些缺點，不過還算 OK，不過有覺得現在的空間也還無法以後給小孩獨立一間房間，大概過幾年又要再看看了。</p>
<p>工作的部分，其實現在也有點想不起來完整決定離職的原因，不過之前工作有段時間有心理影響生理的狀況出現，現在的工作則是託朋友的福才有的，當時其實最想要的是找國外的遠端工作，第一目標是 Elastic，對於 Kibana 開發還蠻有興趣的，不過可惜連履歷那關都沒過XD，還有一家很想加入的是 DuckDuckGo，其實是第一個投的，履歷的品質和後來的版本差很多，也是一樣沒下文，其它有得到大約兩家的面試機會，不過都沒順利過關，自我評量大概是英文表達能力還明顯不足，現在的工作則是想要的外國公司都失敗後，開始要在國內找時，先有一些朋友來找我，然後我就從中挑了其中一個工作了，其實本來有想公開找的，不過也是還沒機會公開說就確定了。之後大概等小孩大一點就要開始來加強英文了，這部分真的是應該早點開始的。</p>
<p>最後終於要來談談小孩的事了，我家小孩是 5/3 號晚上出生的，剛好預產期同一天，差一點就變成原力寶寶了，不過講真的生產過程也是很辛苦，老婆痛了將近 20 小時，差點就要全餐了，然後還臍帶繞頸，生出來之後給小兒科那邊弄了好久才哭出聲音來，等待的時候真的是很緊張，還好沒什麼其它異狀，大概就是不好帶吧，不愛吃不愛睡，即使到今天已經滿一歲了還是一樣，還好長得很可愛，不然早就忍不住垂下去了(?)，說可愛也不是父母視點，是真的客觀來說長得很可愛，在外面常常被當成小女生，睫毛超長，甚至有過一次背著他走路時，路邊一個大叔看到驚呼：「太可愛了吧！」不過隨著年紀越來越大可愛度似乎也有下降了。有小孩之後生活和心境都變化不少，也必須放棄不少東西，要寫的話好像可以寫一堆，所以還是不寫了，不過就是，在某些時候，就突然想起了 About Time 的劇情，曾經一直想著為什麼主角不再穿越時間，似乎現在也明白了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/47958942466/" title="Baby by othree, on Flickr"><img src="https://live.staticflickr.com/65535/47958942466_b59151817c_b.jpg" intrinsicsize="1024x680" width="1024" height="680" alt="Baby" srcset="https://live.staticflickr.com/65535/47958942466_b59151817c_b.jpg 1024w, https://live.staticflickr.com/65535/47958942466_9087ab3f96_h.jpg 1600w" /></a></p>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2019-05-29T23:28:57+08:00</dc:date>
</item>


</rdf:RDF>