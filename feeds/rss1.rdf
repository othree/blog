<?xml version="1.0" encoding="utf-8"?>

<rdf:RDF
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
xmlns:admin="http://webns.net/mvcb/"
xmlns:cc="http://web.resource.org/cc/"
xmlns="http://purl.org/rss/1.0/">

<channel rdf:about="https://blog.othree.net/">
<title>O3noBLOG</title>
<link>https://blog.othree.net/</link>
<description></description>
<dc:creator></dc:creator>
<dc:date>2023-08-02T19:46:42+08:00</dc:date>
<admin:generatorAgent rdf:resource="http://www.movabletype.org/?v=4.381" />

<cc:license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/1.0/" />


<items>
<rdf:Seq>
<rdf:li rdf:resource="https://blog.othree.net/log/2023/08/02/yorimoi/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2023/05/12/singapore-2022/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2023/05/04/the-railroad-museum/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2023/05/03/sakura-tram/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2023/05/01/2023-tokyo/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2023/01/13/wbr-and-nobr/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2022/12/23/japan-postal-code/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2022/12/03/fix-my-archlinux/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2022/08/23/http-103-early-hints/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2022/08/18/shopify-app/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2022/07/31/coscup-2022/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2021/09/10/does-cat-understand-what-we-say/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2021/08/12/csp-for-lambdaedge/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2021/08/02/static-site-hosting/" />

<rdf:li rdf:resource="https://blog.othree.net/log/2021/07/19/macos-my-pref/" />
</rdf:Seq>
</items>

</channel>


<item rdf:about="https://blog.othree.net/log/2023/08/02/yorimoi/">
<title>比宇宙更遠的地方</title>
<link>https://blog.othree.net/log/2023/08/02/yorimoi/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53088845553/" title="昭和基地 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53088845553_516dcd996d_b.jpg" width="1024" height="576" alt="昭和基地" srcset="" /></a></p>
<p>在剛進入串流時代之時，我想著以後不太需要買什麼 DVD/BD 之類的了，因為想看的東西應該以後網路上都可以看的到，不過過了幾年下來，我的想法又慢慢的改變了，因為這些作品的授權都有個期限，過期之後不一定會重新上架，甚至連自家的原創作品都可能會下架，所以我慢慢的心中開始有了幾部作品，是覺得應該收藏一份實體版下來，其中的評斷標準算是我個人主觀，不過有一個條件倒是比較明確，就是希望讓我兒子長大後能看的，其實在這清單之中也沒幾個作品，而且很少有新增，不過就在最近新增了一部：「<a href="https://ani.gamer.com.tw/animeVideo.php?sn=16507">比宇宙更遠的地方</a>」，簡稱為<strong>よりもい</strong>（yorimoi）。</p>
<p>這部我一直都有聽到不錯的評價，第一印象是屬於那種「一群女孩去完成一件事」的日常系作品，其實我在看之前也沒有深入了解，本來以為就是一群女高中生因為對南極的憧憬，想方設法去南極旅遊的過程吧，畢竟這種類型作品很多是流水帳般將主角們有趣的生活演出來，這樣的日常系作品雖然也是會很有趣，但是就比較會變成打發時間用的，可能看過一陣子就會慢慢淡忘。</p>
<p>結果，看完よりもい之後我第一個感想就是：「真是太好我有看到這部作品了。」我也實在是非常幸運能在作品出來將近五年後還能在沒被捏他到的情況下看完這部作品。其實這陣子因為小孩去過暑假，所以我多了很多時間可以補看之前沒空看的東西，看了很多不錯的作品，也在推特上紀錄了一些心得，不過よりもい是第一部我特別想寫一篇文章紀錄的，因為他帶給我的不是風景多漂亮、劇情多有趣，而是更深刻的，故事中幾位角色的成長與自我突破。</p>
<p>以下有劇情，沒看過的話建議迴避，或是可以轉去看看 YouTube，匯雨有一個比較沒劇透的<a href="https://www.youtube.com/watch?v=O8qowhGwjyc">推坑影片</a>。</p>
]]></description>
<dc:subject>acg</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2023-08-02T19:46:42+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2023/05/12/singapore-2022/">
<title>新加坡 2022</title>
<link>https://blog.othree.net/log/2023/05/12/singapore-2022/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582537844/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582537844_f258048019_b.jpg" width="1024" height="768" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582537844_ff3392033d_k.jpg 2x" /></a></p>
<p>去年因緣際會去了一趟新加坡，是我第一次去新加坡，看到不少建築覺得實在很厲害，想說紀錄一下。</p>
<p>這趟行程中，我看到覺得很厲害特別想介紹的建築有三個，首先第一個是聖陶沙上的 Resort World，規模超大，有飯店商場賭場等等，環球影城也是其中的一部分，不過只是這樣還不會到讓我覺得超厲害，最讓我驚艷的其實是它的地下車道，我不確定他是往下挖還是往上蓋（應該是往上蓋比較簡單），不過整個 Resort World 人行的地方，那些商店廣場的下面其實都是空的：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582514829/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582514829_83d43f970d_b.jpg" width="1024" height="350" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582514829_89c9ed9983_k.jpg 2x" /></a></p>
<p>我只有拍這張照片，不過就是你仔細看你會發現對面深不見底，是不可思議的大的地下空間，裡面有錯綜複雜的車道、接送區、巴士站、停車場、甚至還有卡丁車賽車場，這個是屬於理論上做的出這種東西，技術上應該也沒太大困難，只是我沒想到會有人做出這麼大規模的地下車道系統。</p>
<p>第二個是彰宜機場的 JEWEL 的中間的那一區，就是有很多植物和中間一個瀑布（不知道該不該稱為瀑布，其實它叫 Rain Vortex）的那一區，那一區其實叫 Forest Valley。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52581818242/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52581818242_688d196a1f_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52581818242_5829768040_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582796203/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582796203_5607541fbc_b.jpg" width="1024" height="768" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582796203_bcea3340df_k.jpg 2x" /></a></p>
<p>這區我覺得讓我感到覺得驚豔的地方有兩個，第一個是那個瀑布，要怎樣能讓他不漏水。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582719915/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582719915_136a013e3c_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582719915_c9f07b8487_k.jpg 2x" /></a></p>
<p>這個瀑布水流到 B2 那層時，是一整圈透明的牆（我不確定材質）圍起來，不知道要怎樣能確保水不會滲漏，我有直接摸摸看，也找不到接縫，該不會是整塊玻璃一體成形吧。</p>
<p>PS. 我後來找到 News Asia 的<a href="https://infographics.channelnewsasia.com/jewel-changi-airport/index.html">專題</a>，那塊是壓克力的，不過我還是不知道是怎樣可以弄成無縫的這麼大一塊，然後這個專題對於那個瀑布的介紹是聚焦在水流怎樣下來又上去的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52870391415/" title="Changi Jewel B2 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52870391415_9e06be9147_b.jpg" width="1024" height="684" alt="Changi Jewel B2" srcset="https://live.staticflickr.com/65535/52870391415_7cc90e6f6c_k.jpg 2x" /></a></p>
<p>當時很趕時間沒拍照，還好 Google 街景有。</p>
<p>除了瀑布的漏水問題外，這區還有非常多的植物，而且不是小顆的花花草草，也有比較高大的樹木，置身在其中會覺得非常難以想像有人會放這麼多的植物在室內空間（請見<a href="https://flickr.com/photos/othree/52871953754/">影片</a>），然後我就又想到他們的樹根會一直成長變長，不知道要如何確保數十年後，這些樹木的下面，通常是商店的地方，不會有漏水的問題出現...</p>
<p>最後一個要介紹的，是金沙酒店（Marina Bay Sands）的 Apple Store：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582539949/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582539949_df324fb346_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582539949_1e3709311d_k.jpg 2x" /></a></p>
<p>其實本來也沒特別有安排要去金沙酒店，後來也是最後一晚了不知道要幹嘛就跑去看水舞光雕表演，然後才發現這個 Apple Store，遠遠看到的時候就覺得：「不可能吧！」真的走到旁邊看的時候就覺得非常誇張，怎麼這麼有錢有閒弄一個浮在水中間的球。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582713440/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582713440_3590a10a6e_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582713440_95c1473d95_k.jpg 2x" /></a></p>
<p>裡面往上看圓頂。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582717675/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582717675_9d8da122ac_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582717675_3f955709d9_k.jpg 2x" /></a></p>
<p>圓弧形自動門，等很久都等不到全關，一直有人進出。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582276986/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582276986_abd01e3106_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582276986_25de161fc6_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582711635/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582711635_e4f494b6d6_b.jpg" width="768" height="1024" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582711635_5d7eb3dd6f_k.jpg 2x" /></a></p>
<p>不意外的對得很齊，甚至對齊到地板的金屬飾板（請見<a href="https://www.flickr.com/photos/othree/52871206437/in/dateposted-public/">影片</a>）。</p>
<p>逛一逛意外的發現有電扶梯通往樓下，覺得不是獨立在水上的一顆球嗎，怎麼還有地下室，然後又想到，那行動不便的怎麼辦，蘋果不可能沒考慮到吧，尋找一陣子之後，發現了一個鏡面的圓柱體（請見<a href="https://www.flickr.com/photos/othree/52872219398/in/dateposted-public/">影片</a>），裡面就藏著電梯，然後下到樓下走一走，才發現是有通道金沙酒店商場內的。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52582719930/" title="新加坡 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52582719930_a96637b686_b.jpg" width="1024" height="457" alt="新加坡" srcset="https://live.staticflickr.com/65535/52582719930_5b235277c7_k.jpg 2x" /></a></p>
<p>我只能說這個建築設計真的是讓我當場覺得驚呆了，當時我以為這個 Apple Store 是一開始在蓋金沙酒店時就一起設計進去的，結果回來研究一下資料發現不是，這個 Apple Store 是後蓋的，努力搜尋一番有找到篇文章有些施工當時的照片。</p>
<ul>
<li><a href="https://www.archigardener.com/2020/01/is-this-apples-coolest-new-store.html">Is this Apple's Coolest new Store?</a></li>
</ul>
<p>基本上就是圍了一塊範圍把水排掉後把它蓋起來，是可以想像得到的工法，只是想不到會有人這樣設計（<a href="https://www.fosterandpartners.com/projects/apple-marina-bay-sands">Foster + Partners</a> 設計的），而且真的願意這樣施工，然後不免俗的，我又擔心起會不會漏水的問題了，不過後來想一想如果認真要處理防水應該不是問題吧，實在是被台灣的房子會漏水的觀念荼毒太久了。</p>
<p>新加坡整體而言，城市的魅力還是蠻高的，尤其是這些建築的設計更是讓我驚艷，光是來看看這些建築我就覺得蠻不錯的，不過物價實在是很高，然後天氣也是蠻熱的，有機會的話我是會願意再來一次去看看這次沒見到的地方，像是植物園那邊，金沙酒店這次也沒仔細逛（金沙酒店本身也是很厲害，商場裡面還有人工河和瀑布）。</p>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2023-05-12T21:03:03+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2023/05/04/the-railroad-museum/">
<title>大宮鐵道博物館</title>
<link>https://blog.othree.net/log/2023/05/04/the-railroad-museum/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52855334718/" title="The Railroad Museum by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52855334718_f9d565503c_b.jpg" width="1024" height="683" alt="The Railroad Museum" srcset="https://live.staticflickr.com/65535/52855334718_f0185f6ce7_k.jpg 2x" /></a></p>
<p><a href="https://www.railway-museum.jp/">大宮鐵道博物館</a>（簡稱鐵博）也是知名景點了，網路上一堆介紹，所以這篇除了我們的遊記之外，還會有些博物館本身以外的內容。</p>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2023-05-04T17:03:45+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2023/05/03/sakura-tram/">
<title>荒川線（Sakura Tram）一日遊</title>
<link>https://blog.othree.net/log/2023/05/03/sakura-tram/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52857686013/" title="都電荒川線 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52857686013_ddac4c75dd_b.jpg" width="1024" height="683" alt="都電荒川線" srcset="https://live.staticflickr.com/65535/52857686013_e476726098_k.jpg 2x" /></a></p>
<p>續前一篇，這次東京自由行最後一個整天我們因為所以然後選擇了荒川線一日遊，結果而言蠻不錯的，網路上介紹過荒川線一日遊的文章其實也不少，所以這篇就來紀錄我們去的地方就好。</p>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2023-05-03T10:56:12+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2023/05/01/2023-tokyo/">
<title>2023 Tokyo</title>
<link>https://blog.othree.net/log/2023/05/01/2023-tokyo/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52852893699/" title="東京 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52852893699_3827342974_b.jpg" width="1024" height="683" alt="東京" srcset="https://live.staticflickr.com/65535/52852893699_6f3f08c711_k.jpg 2x" /></a></p>
<p>睽違三年，終於又去了日本了，這次因為太久沒去所以排比較多天，來回共十一天，從週五跨一個週間到週一，這篇想紀錄一下這次的行程規劃、後來實際進行的狀況以及覺得有點缺憾錯過的東西。</p>
<p>這趟的主行程其實是三年前本來要去的，結果遇到疫情爆發，當時想的就是帶小朋友去迪士尼玩和順便去看富士山泡溫泉，所以這次行程規劃也就把那次的缺憾放進來，不過我們決定的有點晚，加上日本最近一直有國內旅遊補助，所以安排住宿的時候一直蠻困擾的，最後基本上規劃成：</p>
<pre><code>4/14 入境、上野採買
4/15 銀座採買
4/16 淺草、台場
4/17 迪士尼
4/18 迪士尼
4/19 富士山
4/20 富士山
4/21 大宮鐵道博物館
4/22 隨意
4/23 隨意
4/24 出境
</code></pre>
<p>在帶著一個拖油瓶的情況下，入住的飯店一共換了四間其實有點多，前三天住上野御徒町，然後迪士尼樂園大飯店，大倉東京灣酒店，然後河口湖，最後在池袋王子住四天，這樣安排主要是迪士尼本家飯店一來比較貴，二來也很難同一間連住兩天，本來是想說第二天玩完回去市區住，方便隔天搭巴士去河口湖，本來預期的兩大挑戰是：</p>
<ol>
<li>從上野到迪士尼，需要轉車加上搬運大量行李</li>
<li>從迪士尼往富士山，需要去東京車站轉巴士，還要寄送行李到最後的住宿地：池袋王子大飯店</li>
</ol>
<p>這兩個路程我都有仔細研究過，轉車要去哪一站，搭車要搭哪個位置上車比較好，還有怎樣的路線才有電梯等等，不過最後都沒派上用場，首先是從迪士尼離開去河口湖這段，我在出發前就決定改成租車去，這樣雖然有比較貴，但是好處多很多，最棒的就是我時間變多所以還多去了木更津的三井 outlet，以及穿越東京灣的 Aqualine 和海中間的水上螢火蟲休息站（本來是想繞東京灣一圈的，結果發現要兩個小時），尤其是後者我實在蠻有興趣，但是作為觀光客實在很難有機會，所以我的規劃就是一早搭 Disney Resort Line 單軌去舞濱站轉公車，不用跑去其他地方，直接在車站前面的公車站等公車，搭到<strong>猫実</strong>站（念作 Nekozane 四個音，我一時以為是三個音，還好司機聽得出來）然後走到 Toyota 租車<strong>浦安やなぎ通り店</strong>，接著開車回去大倉裝行李。</p>
<p>PS. 我蠻喜歡這間 Toyota 租車的，還有飲料可以給你外帶上車，包括咖啡、果汁、紅茶花傳無糖紅茶，相較於後來還車的東池袋店真是差很多。</p>
<p>至於第一個挑戰，其實本來還沒打算花錢解決，後來因為第一天光是從機場到飯店帶著拖油瓶就累死了，我們帶了兩個大行李箱、小孩有給他推車坐，雖然基本上是都找的到斜坡和無障礙的路線，但是常常需要一直繞路，並且有些路段也不是很好推，體力消耗不小，加上第三天招待我們的朋友也覺得花錢解決比較好，而且前兩天採買過後行李已經變多，所以那天變成直接用 uber 叫大車子來去迪士尼樂園大飯店，意外的很好叫。</p>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2023-05-01T23:18:19+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2023/01/13/wbr-and-nobr/">
<title>wbr 的這些那些</title>
<link>https://blog.othree.net/log/2023/01/13/wbr-and-nobr/</link>
<description><![CDATA[<p>在 responsive design 成為主流之後，有個問題也隨之被突顯出來，就是文字的換行，尤其是標題文字的換行位置，現在的瀏覽器的換行方式簡單來說就是超出區塊範圍的東西都往下放到下一行，所以在某些情況下，就會有第一行很長第二行很短的狀況，視覺上非常不平衡，以下圖為例，網頁的副標題沒有作特殊處理，所以會有可能會變成兩行長度差距很大的樣子：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52622679026/" title="line breaking by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52622679026_dce07ba029_b.jpg" width="1024" height="626" alt="line breaking" srcset="https://live.staticflickr.com/65535/52622679026_a03a8ede93_k.jpg 2x" /></a></p>
<p>這個問題有蠻多解決方法的，目前我知道的就有：</p>
<ol>
<li>微調 responsvie 的樣式來避免出現不平衡的狀態</li>
<li>在特定地方插入 <code>&amp;nbsp;</code> 避免換行</li>
<li>用 flex layout 來控制換行位置</li>
</ol>
<p>基本上就是只要你不擇手段，問題還是可以解決的，不過我一直以來都是會偏好用標準的方法來解決問題，所以整理了一下我所知道可以拿來用的東西：</p>
<ol>
<li><code>&lt;wbr&gt;</code> HTML element</li>
<li><code>white-space</code> CSS property</li>
<li><code>&lt;nobr&gt;</code> HTML element</li>
<li><code>text-wrap</code> CSS property</li>
</ol>
<p>首先的想法是 <code>&lt;wbr&gt;</code> 配上 <code>white-space: nowrap;</code> 或是 <code>&lt;nobr&gt;</code>，不過意外的是大部分瀏覽器都不支援這個組合，也就是說，包在 <code>&lt;nobr&gt;</code> 內的 <code>&lt;wbr&gt;</code> 的地方在現在大部分主流瀏覽器內是不會換行的：</p>
<pre><code class="language-html">&lt;nobr&gt;ChatGPT: Optimizing&lt;wbr&gt;Language Models&lt;wbr&gt;for Dialogue&lt;/nobr&gt;
</code></pre>
<p>這就激起了我的好奇心了，於是我開始仔細的找資料，看看 <code>&lt;nobr&gt;</code> 和 <code>&lt;wbr&gt;</code> 到底是怎樣運作的。首先，就來看看 <code>&lt;wbr&gt;</code> 吧，雖然他第一次出現在 W3C 的文件內就是在 HTML5，但是其實它已經出現了 20 年以上，最早是作為 <a href="https://web.archive.org/web/20000303182655/http://www.netscape.com/assist/net_sites/html_extensions.html">Netscape 的 HTML 2 extension</a> 的一員：</p>
<blockquote>
<p>The WBR element stands for <strong>W</strong>ord <strong>BR</strong>eak. This is for the very rare case when you have a NOBR section and you know exactly where you want it to break. Also, any time you want to give the Netscape Navigator help by telling it where a word is allowed to be broken. The WBR element does not force a line break (BR does that) it simply lets the Netscape Navigator know where a line break is allowed to be inserted if needed.</p>
</blockquote>
<p>在 Internet Archive 上找到的備份，最早的定義其實明確的說著 <code>&lt;wbr&gt;</code> 處應該是要可以優先於 <code>&lt;nobr&gt;</code> 的，我甚至還在 bugzilla 上找到一個 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=6347">24 年前的 bug report</a> 在講這件事，根據這張票最後的關掉前的討論，其實可以用 <code>&lt;/nobr&gt;&lt;nobr&gt;</code> 來達成一樣的效果，然後 Firefox 不打算支援 <code>&lt;wbr&gt;</code>，看到這邊，我只能說這解法怎麼這麼天才（稱讚的意味）。</p>
<p>查到這邊，我還是很好奇為什麼現在的主流瀏覽器依然 <code>&lt;wbr&gt;</code> 優先度比 <code>&lt;nobr&gt;</code> 還低，所以繼續找資料，這次看的就是最新的文件了，首先是 <code>&lt;wbr&gt;</code> 的<a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-wbr-element">定義</a>，在 HTML5 中變成：</p>
<blockquote>
<p>The <code><a href="https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-wbr-element">wbr</a></code> element <a href="https://html.spec.whatwg.org/multipage/dom.html#represents">represents</a> a line break opportunity.</p>
</blockquote>
<p>從 &quot;word break&quot; 變成 &quot;line break opportunity&quot; 了，<code>&lt;nobr&gt;</code> 則和 <code>&lt;wbr&gt;</code> 一樣一開始是 Netscape extension，不過他倒是沒有進到 HTML5，事實上，雖然 <code>&lt;nobr&gt;</code> 不是 HTML5 的一員，但是文件中<a href="https://html.spec.whatwg.org/multipage/rendering.html#phrasing-content-3">定義的 default style 還是有它</a>：</p>
<pre><code class="language-css">br { display-outside: newline; } /* this also has bidi implications */
nobr { white-space: nowrap; }
wbr { display-outside: break-opportunity; } /* this also has bidi implications */
nobr wbr { white-space: normal; }
</code></pre>
<p>其實就是等價於 <code>white-space: nowrap</code>，而 <code>white-space</code> 屬性<a href="https://www.w3.org/TR/CSS2/text.html#white-space-prop">在 CSS2 時</a>是用來定義空白的處理方式：</p>
<blockquote>
<p>This property declares how white space inside the element is handled.</p>
</blockquote>
<p>到 CSS Text Level 3 時<a href="https://www.w3.org/TR/css-text-3/#white-space-property">定義</a>說的更明確，是用來決定遇到 &quot;line break opportunity&quot; 時的處理方式和是不是要合併 space 字元的屬性：</p>
<blockquote>
<ul>
<li>whether and how <a href="https://www.w3.org/TR/css-text-3/#white-space">white space</a> is collapsed</li>
<li>whether lines may <a href="https://www.w3.org/TR/css-text-3/#wrapping">wrap</a> at unforced <a href="https://www.w3.org/TR/css-text-3/#soft-wrap-opportunity">soft wrap opportunities</a></li>
</ul>
</blockquote>
<p>其實在 <a href="https://www.w3.org/TR/css-text-4/#white-space-property">Level 4</a> 更是可以分開設定兩種屬性，<code>white-space</code> 變成一個 shorthand，而看到這些定義的演進，其實也讓人發現最早命名時其實只有考慮到西方語言的特色。</p>
<p>看到這邊，會發現有一個新的名詞：&quot;line break opportunity&quot;，有些地方是稱為 &quot;wrap opportunity&quot;，這個名詞其實是出現在 CSS Module Text 文件中的，顧名思義，就是可以換行的位置，而這份文件也是<a href="https://www.w3.org/TR/css-text-4/#line-breaking">定義換行邏輯</a>的文件，不過這邊其實沒把換行演算法（line breaking algorithm）明確定義下來，而是闡明各種相關的 CSS 屬性和它們會怎樣影響換行的結果，例如換行有分強制（<code>&lt;br&gt;</code>）和非強制（<code>&lt;wbr&gt;</code>），然後不同 CSS 屬性會影響這些換行點的出現與否，至於文本之中，哪些地方可以換行，就是換行演算法的部分了，這部份在 W3C 文件沒有定義死，所以是允許瀏覽器自己決定的，不過有提供一些參考文件，像是 Unicode 的附件 14：&quot;Unicode Line Breaking Algorithm&quot;，或是稱為 UAX14，這份文件要搭配 Unicode Database（UCD） 的 <a href="https://www.unicode.org/Public/UCD/latest/ucd/LineBreak.txt">Line_Break Property 資料</a>，文件中的第五章有仔細的說明各種不同的 line breaking class，然後資料庫則是定義了所有 Unicode 字元的 Line_Break property，接著的第六章就是最重要的換行演算法了，這邊列出了 31 條規則，基本上是反向列舉，說哪些地方不能換行，例如 WJ（word joiner）前後都不能換行，數字中間的符號前後也不能換行之類的，不過不確定哪些瀏覽器是實作 UAX14 的，Chrome 似乎有用到 UCD，Firefox 則是以 JIS X 4051 為基礎做的<a href="https://searchfox.org/mozilla-central/rev/6566d92dd46417a2f57e75c515135ebe84c9cef5/intl/lwbrk/LineBreaker.cpp">換行演算法</a>，其實 JIS X 4051 是我所知道，二戰後世界，最早的正式的文字編排的標準，查到的紀錄是 <a href="https://www.klnet.pref.kanagawa.jp/find-books/kawasaki/kikaku/kikaku-list/jis-hb-x-03.html">1989 有一版</a>，而 UAX14 第一個非草稿的版本則是要到 1999 年才出來。</p>
<p>回到現在主流瀏覽器不支援 <code>&lt;wbr&gt;</code> 放在 <code>white-space: nowrap</code> 裡面無法換行的問題，其實要回到這個 HTML 標籤在繪製時，是不是有 magic 的，什麼是 magic 呢？簡單說就是，你能不能用 CSS 來定義該標籤的樣子，以及你能不能用 CSS 來改掉這些預設的樣式，而 <code>&lt;br&gt;</code> 和 <code>&lt;wbr&gt;</code> 正好是有 magic 的標籤，可以想想看，要怎樣用 CSS 讓文字內產生一個換行點，可能有人會說剛剛上面才看到的，不過，其實那幾個 <code>display-outside</code> 的值只存在於以前的草稿中，CSS-WG 決議不為了這個問題<a href="https://github.com/w3c/csswg-drafts/issues/610">新增多的 display 狀態</a>，所以問題就回到 HTML-WG 這邊了，CSS-WG 的 fantasai 其實有給了一組 default style：</p>
<pre><code class="language-css">br { all: unset !important; display: contents !important; content: &quot;\a&quot; !important; white-space: pre !important; }
wbr { all: unset !important; display: contents !important; content: &quot;\200B&quot; !important; }
</code></pre>
<p>我把 <code>!important</code> 拿掉整理一下：</p>
<pre><code class="language-css">br {
  all: unset;
  display: contents;
  content: &quot;\a&quot;;
  white-space: pre;
}
wbr {
  all: unset;
  display: contents;
  content: &quot;\200B&quot;;
}
</code></pre>
<p>其中，<code>\a</code> 就是<a href="https://util.unicode.org/UnicodeJsps/character.jsp?a=000A&amp;B1=Show">換行字元</a>，<code>\200B</code> 則是 <a href="https://util.unicode.org/UnicodeJsps/character.jsp?a=200B&amp;B1=Show">ZWSP</a>，zero width space，因為是 zero width，所以看不到，然後又因為是 space，所以可以用來把字切開，也就表示可以在該處斷行。不過這個版本有些問題，因為有很多瀏覽器還不支援在 <code>::before, ::after</code> 以外的物件上套用 <code>content</code> 屬性，所以 fantasai 又提供一版用 <code>::before</code> 的版本：</p>
<pre><code class="language-css">br, wbr { all: unset !important; display: contents !important; white-space: pre !important; }
br::before { all: unset !important; content: &quot;\a&quot; !important; }
wbr::before { all: unset !important; content: &quot;\200B&quot; !important; }
</code></pre>
<p>但是，實際上直接拿這組定義來用，還是一樣有問題，就是有些瀏覽器已經讓 <code>&lt;wbr&gt;</code> 有 magic 了，結果 <code>wbr::before</code> 是沒有用的，目前 <a href="https://github.com/whatwg/html/pull/2298">HTML 標準的修改也就還卡在這邊</a>（issue 則是<a href="https://github.com/whatwg/html/issues/2291">另外一個</a>），HTML-WG 的 Domenic 開了這個 PR 要讓 <code>&lt;br&gt;</code> 和 <code>&lt;wbr&gt;</code> 就用 magic 來實現效果，不過這討論已經停很久了，所以最後會是怎樣的方案還不知道。</p>
<p>總之目前的結論就是，現在如果想要讓 <code>&lt;wbr&gt;</code> 照其定義的一樣，可以在 <code>&lt;nobr&gt;</code> 或是 <code>white-space: nowrap</code> 內產生換行，是辦不到的，不過可以用其他的標籤來辦到，像是：</p>
<pre><code class="language-css">.wbr::before {
  display: inline;
  content: &quot;\00200B&quot;;
  white-space: normal;
}
</code></pre>
<p>配上</p>
<pre><code class="language-html">&lt;nobr&gt;ChatGPT: Optimizing&lt;span class=&quot;wbr&quot;&gt;Language Models&lt;span class=&quot;wbr&quot;&gt;for Dialogue&lt;/nobr&gt;
</code></pre>
<p>這個寫法也有出現在一份由 Leif Halvard Silli 在提交 <a href="https://bugs.webkit.org/show_bug.cgi?id=64005">bug</a> 給 WebKit 所做的 <a href="https://www.m%C3%83%C2%A5lform.no/testing/html5/nobr+wbr.html">test 內</a>。</p>
<p>到這邊，大概已經把自己控制換行位置的部分講的差不多了，不過其實，還有一個方法可以處理一開始所提到的換行結果不理想的問題，就是在 CSS Text Module Level 4 中有一個新的屬性叫做 <code>text-wrap</code>，其中有一個屬性值是 <code>balance</code>，合起來<a href="https://www.w3.org/TR/css-text-4/#valdef-text-wrap-balance">就是</a>：</p>
<pre><code class="language-css">text-wrap: balance;
</code></pre>
<p>這樣設定，預期的結果就是會換行換在每一行的寬度最接近的位置，不過當然還沒有瀏覽器支援，連 caniuse 都還查不到 <code>text-wrap</code> 屬性，只是還是有 JS 的解決方案：</p>
<ul>
<li><a href="https://github.com/adobe/balance-text">Adobe 的 balance text</a>，是 jQuery plugin，因為是認真去算長度的，效能比較不好；</li>
<li><a href="https://github.com/qgustavor/vanilla-balance-text">vanilla 版本的 balance text</a>；</li>
<li><a href="https://github.com/nytimes/text-balancer">nytimes（紐約時報）的 text-balancer</a>，透過 binary search 改寬度來調整換行位置，效能比較好；</li>
<li><a href="https://react-wrap-balancer.vercel.app/">React wrap balancer</a>，React component，基本原理和前者一樣，但是還多支援 <code>ratio</code> 屬性。</li>
</ul>
<p>最後的最後補上一些參考資料，一篇是古老的 IE 時代的東西，一篇則是現在的相關 CSS 屬性，一篇則是 balance wrap 的介紹：</p>
<ul>
<li><a href="https://jkorpela.fi/html/nobr.html">Word division in IE</a></li>
<li><a href="https://codersblock.com/blog/deep-dive-into-text-wrapping-and-word-breaking/">Deep Dive into Text Wrapping and Word Breaking</a></li>
<li><a href="https://www.ctrl.blog/entry/text-wrap-balance.html">Improving the New York Times' line wrap balancer</a></li>
</ul>
]]></description>
<dc:subject>css-html</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2023-01-13T22:52:00+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2022/12/23/japan-postal-code/">
<title>日本郵便番号</title>
<link>https://blog.othree.net/log/2022/12/23/japan-postal-code/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/7979542259/" title="北海道 by othree, on Flickr"><img src="https://live.staticflickr.com/8042/7979542259_86954d3eb8_b.jpg" width="1024" height="683" alt="北海道" srcset="https://live.staticflickr.com/8042/7979542259_9ff2dab54b_k.jpg 2x" /></a></p>
<p>因為工作的關係，要做日本郵遞區號和地址間的自動補完，還因此開始維護 <a href="https://www.npmjs.com/package/japan-postal-code-oasis">japan-postal-code-oasis</a> 這個套件，它的前身其實是另外一套叫 <a href="https://www.npmjs.com/package/japan-postal-code">japan-postal-code</a> 的，但是它很久沒更新了，所以我就簡單修改一些設計，在研究套件設計的同時就有機會比較深入了解日本的郵遞區號（郵便番号）系統，發現不少有趣的細節，這篇文章特別來紀錄一下。</p>
<p>首先，第一點就是，日本郵遞區號的資料是有整理好並<a href="https://www.post.japanpost.jp/zipcode/dl/readme.html">開放下載</a>的，而且下載路徑、檔案格式都是固定的沒什麼變動過，也因此可以找到不少使用這些資料的程式語言套件（包含下載腳本），<a href="https://www.npmjs.com/package/japan-postal-code">japan-postal-code</a> 就是透過這份資料來實作從郵遞區號抓地址資訊的功能，雖然不是很想和台灣比，但是這點台灣真的是輸很多，台灣其實到 3+2 郵遞區號都還可以在郵局網站下載的到，但是那個下載連結不是固定的，然後也看不出來是不是固定更新，所以你不會知道你下載的資料是不是最新的，至於最新的 3+3 郵遞區號，就沒有開放大眾下載，取而代之的是提供 Web Service、Windows 應用程式，如果真的要下載資料檔，要特別申請（參照：<a href="https://www.post.gov.tw/post/download/%E6%9C%AC%E5%85%AC%E5%8F%B83%2B3%E9%83%B5%E9%81%9E%E5%8D%80%E8%99%9F%E7%B3%BB%E7%B5%B1%E4%BD%BF%E7%94%A8%E8%A6%8F%E7%AF%84%E8%AA%AA%E6%98%8E%E4%BA%8B%E9%A0%85.odt">本公司3+3郵遞區號系統使用規範說明事項</a>），另外就是台灣是一季更新一次，日本則是一個月更新一次。</p>
<p>其實我會注意到日本每個月都更新郵遞區號，是從另外一件事情發現的，在繼續之前，先來介紹一下日本郵遞區號內不同數字的意義，這在日本郵局網站有很詳細的<a href="https://www.post.japanpost.jp/zipcode/zipmanual/p04.html">說明</a>，前三碼稱為郵便區番号，後四碼是町域番号，其中的前兩碼是大 block 番号，第三碼則是小 block 番号，基本上都是這樣規劃，理論上不會需要到每個月更新，直到有一天我發現到六本木森大樓，每一層樓都有自己的郵遞區號，例如用 Google Map 搜尋 <code>Google Japan (Roppongi Hills)</code> ，然後查看地址就會發現他的郵遞區號是 106-6126，其中的後兩碼就是 26 樓的意思，然後搜尋 <code>Apple Japan合同会社</code>，就會發現郵遞區號是 106-6140，就是 40 樓的意思。後來我才知道，這是屬於 <strong>個別番号</strong> 之中的超高層大樓番号，除了大樓之外，還有其他種個別番号，像是大型機構（醫院、電視台、公家單位等）也可以申請，而這種個別番号也就是資料內最常會變動的地方，所以他們才有這麼頻繁的資料更新。</p>
<p>其實我還有在一些<a href="https://www.msr.co.jp/mapinfo/dl/pdf/PEPOS-201411_1015.pdf">第三方資料</a>，看到說前三碼的郵便區番号，還可以再更細分成兩組：前兩碼是地域番号，第三碼則是地域調整番号，町域番号的最後一碼則是町域調整番号，另外就是第一版的日本郵遞區號是三碼為主，然後有部分地區有 3+2 碼的設計，網路上還找的到當時（1968、昭和43年）<a href="http://sasukekyon.web.fc2.com/postal/postal_code.txt">第一版的郵遞區號的清單</a>。</p>
<p>再來印在信封上的，手寫郵遞區號的格子，其實在日本郵局網站上也有仔細的定義它的尺寸，甚至連手寫的字體也有提供範例（基本上就是要你不要寫的太潦草），台灣郵局網站我找到的最接近的就是只有<a href="https://www.post.gov.tw/post/internet/Postal/index.jsp?ID=21001">信封書寫範例</a>了，其實日本的規範這麼仔細，有一個原因是為了自動化作業。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52579607481/" title="郵便番号枠 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52579607481_fa8277f6c9_b.jpg" width="1024" height="534" alt="郵便番号枠" srcset="" /></a></p>
<p>這個自動化作業，其實遠超我的預期，不只是根據郵遞區號分類而已，日本郵局其實定義了一套地址的數位化編碼系統，轉換邏輯也不困難，也就是說，日本國內的任意地址，都可以用一串數字（看情況加上英文字母）來表示，日本地址可以簡單的轉為英數編碼，有一個很大的原因是他們的地址是從大範圍（ex: X丁目X番X号）到小範圍這樣，而不像是其他地方用路加上號碼（ex: XX路X號）的方式，所以其實編碼機制也很簡單，大部分的地址，就是郵遞區號加上後面的三碼，然後再加上可能樓層、房號就可以組成，例如東京鳩居堂 銀座本店，地址是：</p>
<blockquote>
<p>〒104-0061 東京都中央区銀座５丁目７−4</p>
</blockquote>
<p>轉成編碼就是：</p>
<blockquote>
<p>10400615-7-4</p>
</blockquote>
<p>前七碼固定式郵便番号，所以不用處理分隔符號的問題。</p>
<p>另外日本地址有個天字第一號（我取名的），大家可以猜猜看是哪個地方的地址，沒錯，就是皇居，郵遞區號是 100-0001，地址是 1 丁目 1 番（沒有号），編碼就是：</p>
<blockquote>
<p>10000011-1</p>
</blockquote>
<p>而且這套編碼系統還有一組專用的 <a href="https://www.post.japanpost.jp/zipcode/zipmanual/p11.html">barcode 系統</a>，可以用掃描的方式輸入，非常方便，barcode 的<a href="https://www.post.japanpost.jp/zipcode/zipmanual/p11.html">定義</a>也蠻有趣的，不是用粗細，而是用長短和位置來表達不同意義，一條 bar 有四種（4-state）可能的變化（1-4），所以是 2bit，然後一個字元是三條 bar，所以是 6bit，可以有單一字元或是雙字元，理論上單字元有 64 種組合，雙字元是 12bit 共 4096 種組合，不過其實雙字元的第一個字元固定是控制碼，所以實際上變化沒這麼多，目前也只有定義英數、hyphen 和一些控制字元而已，日本郵局內部似乎還有其他用途，而不是只有標記收件人地址而已，不過細節沒有網站上沒有公開，這部份有分為局內 barcode 和 ID barcode，而自己用這組 barcode 系統標注地址的部分，則是稱為 custom barcode。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52580048500/" title="郵便番号 カスタマバーコード by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52580048500_587f5ae388_b.jpg" width="605" height="1024" alt="郵便番号 カスタマバーコード" srcset="" /></a></p>
<p>至於要如何產生住址的 custom barcode 呢，日本郵局網站是有蠻詳細的說明，包括怎樣拆解地址、怎樣編碼、檢查碼怎樣算等等都有說明。而也還有提供一個 custom barcode 產生程式可以下載，抓下來解開後可以發現是網頁應用程式，上一個世代的，編碼也不是 UTF-8 的，現在還可以正常運作，其實還蠻厲害。</p>
<p>PS. 後來<a href="https://ja.wikipedia.org/wiki/%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%83%90%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89">發現</a>其實有蠻多國家的郵務系統是使用類似的 4-state barcode 的。</p>
<p>接下來算是不相關的資訊了，其實我在查資料時，有想研究看看郵便番號有沒有和其他標準相似或是共通的地方，首先是有注意到 ISO 3166-2 這個標準，是每個國家自己有一個子集，定義了各自國家的行政區，例如日本的是 ISO 3166-2:JP，裡面就是用 01-47 從北到南把日本的都道府縣編碼了一遍，而且直接對應到 JIS X 0401，最初是在好奇 JIS 的編碼和郵便番号前兩碼的地域番号有沒有相通，結果當然是沒有。其實我還蠻羨慕日本有 JIS 標準統整各種規範的單位，台灣也是有相關的編碼，只是就是像是 <a href="https://zh.wikipedia.org/wiki/ISO_3166-2:TW">ISO 3166-2:TW Wikipedia 條目</a>裡面列出的，就是各單位各自為政這樣。</p>
<p>另外一套標準(?)則是日本導航系統幾乎都會有支援的 <a href="https://www.denso-solution.com/mapcode/whats.html">MAPCODE</a>，這個編碼系統就不是官方標準了，而是民間企業 <a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%B3%E3%82%BD%E3%83%BC" title="デンソー">日本電装</a> （前身是 Toyota 自動車的一個部門）開發的定位系統，是針對日本境內的，用類似 quadtree 的方式，把地圖分割成一小塊一小塊，然後每一塊下去編碼，不過和 quadtree 不一樣的是，不是統一分成四塊，而是分成三個層級，第一級是 Zone 全日本被分為 1203 個 Zone，然後每個 Zone 再細分成 30x30 個 Block，每個 Block 一樣再細分成 30x30 個 Unit，如果還要更細，還可以再細分成 Core 和 S Core，大約可以到 3 公尺的精細度，最後就是當然，這套系統的大分區也和郵遞區號完全不相通。</p>
]]></description>
<dc:subject>others</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2022-12-23T09:59:16+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2022/12/03/fix-my-archlinux/">
<title>Archlinux 修復紀錄</title>
<link>https://blog.othree.net/log/2022/12/03/fix-my-archlinux/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52538205764/" title="Universal Studio Singapore by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52538205764_932f161e34_b.jpg" width="1024" height="768" alt="Universal Studio Singapore" srcset="https://live.staticflickr.com/65535/52538205764_0282fbb78d_k.jpg 2x" /></a></p>
<p>之前我在推特上有說過我不小心把我放 blog 的主機搞壞，當時就是用 pacman 更新過後，出現一些錯誤，我快速的重跑 <code>pacman -Syu</code> 然後就開始一直出現錯誤了，當時想說是因為我太久沒更新，然後有相依性錯誤造成系統幾乎爛掉，一度要放棄，不過因為網站相關的 instance 都還跑著，所以我就想說暫時放著，等有空把資料弄出來再重建系統，然後十一月中去了一趟新加坡，這趟行程要邊顧小孩其實很累，然後就在回來當天晚上就收到 Linode 的緊急維護，已經把我的 Linode 主機重開了，網站當然也死了，真的是晴天霹靂，不過實在太累了我也只能先放著不管。</p>
<p>過了幾天終於比較有力氣來看看看問題，我當時的狀況是，無法使用 pacman，然後更進一步發現是 curl 就死掉，curl 死掉會造成很多東西一起掛掉，像是 git、wget 也都掛了，結果我能使用的工具和手段就變的很少，總之先來看看錯誤訊息吧：</p>
<pre><code>/usr/lib/libcurl.so.4: undefined symbol: BrotliDecoderCreateInstance
</code></pre>
<p>由此可知基本上問題就是動態連結 Brotli 的 library 時出錯，我還記得我當初裝機器時，Archlinux 還沒有正式 Brotli 的套件，所以我還自己編譯了一版給 nginx 用，而我的 nginx 也是自己編譯的，沒想到不知不覺 Archlinux 已經有正式的 Brotli 套件，而且 curl 還相依於它。</p>
<p>接著我就開始各種嘗試，想辦法重新裝 Brotli 套件，curl 雖然不能動，但是我還可以用 scp 傳檔案上去，不過就算傳上去 pacman 也還是完全無法跑起來，即使我只是想要他安裝本地的檔案，而不是要連網路，然後我也去看了 <code>/use/local/</code> 裡面 brotli 套件的 header 檔案，查看內容，發現真的沒有 <code>BrotliDecoderCreateInstance</code>，不過這個 symbol 在 Brotli 的 repo 內是有的，而且已經存在了有四年之久，所以顯然，我系統內安裝的版本很有問題，雖然確定問題在哪，但是還是一直沒有解決方法，重裝套件需要 pacman，但是 pacman 需要修好 brotli 才能動，陷入死結當中，更糟的是，我在網路上搜尋就是找不到有一樣問題的人。</p>
<p>然後我就開始研究 pacman 掛掉要怎麼辦，找了許久終於找到有一個 <a href="https://github.com/chaitanyarahalkar/Pacman-Static">pacman-static</a> 的工具，是預先編譯好，並且是靜態連結的 pacman 執行檔，抓下來後發現真的可以用，真的是感動的痛哭流涕，然後我立馬執行 <code>pacman -Syu</code>，一切執行順利，感動QQ，然後我執行了 <code>curl</code> 想確認有沒有修好，結果我再次看到了那個一樣的，熟悉的錯誤訊息...</p>
<p>這時我百思不得其解，我用 pacman 看安裝的套件版本確實是新的，我去解開套件來看也是新的，但是我去系統的 <code>/usr/local/</code> 下看裡面的檔案卻是舊的，重新裝了很多次也都是一樣狀況，就這樣鬼打牆很久之後，我突然察覺，<code>/usr/local/</code> 下的東西，其實是我們手動編譯安裝的，也是路徑中優先權較高的，然後我在前面有提過，我很久以前有手動編譯安裝 Brotli 套件，終於，一切真相大白，我手動裝的時間點是五年前，所以該版本沒有 <code>BrotliDecoderCreateInstance</code>，然後 Archlinux 用的是四年前版本，所以系統中其他需要 Brotli 的東西都會因此而掛掉，解決方法就是把手動裝的全部砍光光就好了。</p>
<p>不過砍掉我手動編譯的 Brotli，也同時造成我的 nginx 再起不能，因為在設定檔內它是需要我手動編譯安裝的那那個套件，解決方法是很簡單，就把需要的 module 路徑改到 pacman 安裝的套件那邊，然後我的 nginx 就可以起來了，不過我的 blog 還是死的，非 blog 的部分倒是活著，我一開始想說是 php-fpm 的問題，看錯誤訊息發現有 permission 問題，就去改 socket file permisson 成 666，然後網站還是起不來，我研究了很久，想要看看 PHP 的錯誤訊息，但是一直看不到東西，也去看 nginx error log，journalctl 也是看沒錯誤，還以為 php-fpm 是死的，還用了</p>
<pre><code>&lt;? echo phpinfo(); ?&gt;
</code></pre>
<p>然後開瀏覽器看到原始碼直接回回來，搞了一陣子想起要改用 <code>&lt;?php</code>，改下去結果又發現一切正常，最後才發現，問題是因為我在用 pacman 更新整個系統時，把 PHP 7 升級到 8，然後我的程式碼裡面有個地方寫死大版號不對的話會回錯誤訊息，但是我沒有把錯誤訊息寫到 log 中，結果就造成我一直找不到問題點。</p>
<p>PHP 的問題解決後，我的 blog 就回到線上了，不過其實，這時候我的 mariadb 還是死的，透過 journalctl 看 log</p>
<pre><code>sudo journalctl -xeu mariadb.service
</code></pre>
<p>有一行寫著：</p>
<pre><code>Plugin 'InnoDB' registration as a STORAGE ENGINE failed.
</code></pre>
<p>一開始想說是安裝失敗，後來往上找發現還有另外一行：</p>
<pre><code>InnoDB: Upgrade after a crash is not supported. The redo log was created with MariaDB 10.4.8
</code></pre>
<p>意思就是如果你的 DB crash 後，沒有正常關閉的狀態下，去更新 mariadb，就會有這個錯誤，不過一開始我不以為意，因為我認為我只有 upgrade，但是不知道是何時 crash 過，後來回想，應該是 brotli 爛掉時，mariadb 就跟著起不來了，總之，這個問題的解決方法，就是退回舊的 10.4.8 然後重新啟動 DB，所以就研究了一下 Archlinux 怎樣安裝舊版的套件，基本上 pacman 是不能指定版本的，有兩個方法可以裝舊版，一個是透過系統內的 pacman cache，不過我之前在修理的時候已經清掉了，所以就只能從 <a href="https://archive.archlinux.org/packages/">Arch Linux Package Archive</a> 那邊下載特定版本的 package tar 檔案，下來用 <code>pacman -U</code> 安裝，然後因為有相依性問題，所以要把幾個需要的套件都抓下來，一起安裝：</p>
<pre><code>pacman -U mariadb-10.4.8-2-x86_64.pkg.tar.xz \
  mariadb-clients-10.4.8-2-x86_64.pkg.tar.xz \
  mariadb-libs-10.4.8-2-x86_64.pkg.tar.xz
</code></pre>
<p>反正如果啟動失敗，也會有訊息提示你要看 log，結果把 mariadb 三個都裝下去後還真的有問題，說找不到 openssl 1.1 的檔案，所以也去抓下來手動安裝：</p>
<pre><code>pacman -S openssl-1.1
</code></pre>
<p>至此，總算是修好了，接下來就是有時間要把我的 blog 系統容器化吧，有太多不是很好安裝的東西了。</p>
<p>PS. 這篇發的出去表示真的修好了。</p>
]]></description>
<dc:subject>unix</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2022-12-03T00:38:10+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2022/08/23/http-103-early-hints/">
<title>HTTP 103 Early Hints</title>
<link>https://blog.othree.net/log/2022/08/23/http-103-early-hints/</link>
<description><![CDATA[<p>前幾天晚上前同事陶百貼了個 Tweet，說到 Chrome 要移除 HTTP/2 Server Push 了：</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">HTTP/2 PUSH is finally going away in Chrome 106: <a href="https://t.co/FFL8hmkRyf">https://t.co/FFL8hmkRyf</a><br /><br />HTTP 103 is the best way to early-hint out-of-band.<br /><br />Thanks to the community and teams that made this possible (standards teams for 103, CDNs for implementing, Net team, huge effort)</p>-- Patrick Meenan (@patmeenan) <a href="https://twitter.com/patmeenan/status/1559943970481913856?ref_src=twsrc%5Etfw">August 17, 2022</a></blockquote>
<script async="async" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>仔細看一下，發現原來大家用 Server Push 都還是為了提升網頁第一屏的速度，但是 Server Push 一直有<a href="https://www.fastly.com/blog/faster-websites-early-priority-hints#but-what-about-http/2-server-push">一些難解的問題</a>，像是不知道 client 端有沒有 cache，實作和支援比較麻煩，而 Chrome 要移除 Server Push 前，其實先實作了 <a href="https://datatracker.ietf.org/doc/html/rfc8297">RFC-8279 的
HTTP 103: Early Hints</a>，為的就要讓 Server Push 現在作的事情先有替代方案。</p>
<p>Early Hints 應該算是 Fastly 提出的，RFC 文件作者是 <a href="https://twitter.com/kazuho/">Kazuho Oku</a>，實際上應該也有其他 Fastly 的人參與構思和試驗，支援 Early Hints 的環境下，一個 HTTP request 看起來就像是下面這樣：</p>
<pre><code>Client request:

  GET / HTTP/1.1
  Host: example.com


Server response:

  HTTP/1.1 103 Early Hints
  Link: &lt;/style.css&gt;; rel=preload; as=style
  Link: &lt;/script.js&gt;; rel=preload; as=script

  HTTP/1.1 200 OK
  Date: Fri, 26 May 2017 10:02:11 GMT
  Content-Length: 1234
  Content-Type: text/html; charset=utf-8
  Link: &lt;/style.css&gt;; rel=preload; as=style
  Link: &lt;/script.js&gt;; rel=preload; as=script

  &lt;!doctype html&gt;
  [... rest of the response body is omitted from the example ...]
</code></pre>
<p>很特別的，就是在於有兩段 response，第一段就是 103 的 status code，然後內容就是 Link headers 了，接著才是常見的 200 回應，看到這邊，自然的出現第一個問題：現有的瀏覽器能相容嗎？</p>
<p>這個問題在 <a href="https://stackoverflow.com/questions/73320707/http-103-responses-what-happens-if-a-server-sends-a-103-early-hints-response-to/73320831#73320831">Stack Overflow 也有人問</a>，結果回答在 RFC 文件內其實就有，只不過是放在第三章的安全性那邊，我一開始也因為先跳過這章而沒發現，總之關於這個問題，就是如果是 HTTP/2 的話，就比較沒問題，HTTP/1.1 的話，理論上應該要可以相容（沒功能但是也不出錯），但是無法保證現在有在用的 HTTP/1.1 client 都有正確的處理 1xx response，所以比較建議是 HTTP/2 才回 103。</p>
<p>過了兩天後，我更仔細的研究一下，發現其實早在 HTTP/1.1 時，就有把 <a href="https://www.rfc-editor.org/rfc/rfc9110#section-15.2-3">1xx 的處理需求定義</a>好了：</p>
<blockquote>
<p>A client MUST be able to parse one or more 1xx responses received prior to a final response, even if the client does not expect one. A user agent MAY ignore unexpected 1xx responses.</p>
</blockquote>
<p>就是說早在 HTTP/1.1 時的設計，就允許 1xx 接 200 的回應，而且還應該要支援多個 1xx 回應，而最後的那個 200（其實是 2xx 到 5xx 都可以），則是稱為 final response，至於這處理的方式，在 WHATWG 的 fetch 的 4.7 章則有清楚的寫下流程，在該章節的第九項裡面的第五子項目，寫成程式碼大概長成：</p>
<pre><code class="language-js">while (true) {
  const response = await networkTransmit();
  const status = response.statusCode;
    
  if (status &gt;= 100 &amp;&amp; status &lt;= 199) {
    // handle 1xx response
    continue;
  } else {
    break;
  }
}

// handle final response
</code></pre>
<p>所以理論上，Early Hints 的設計在正確支援 HTTP/1.1 但是還沒有支援 Early Hints 的瀏覽器就應該要可以正常的略過，而不會把它當成是 final response。</p>
<p>解決完第一個問題後，接著來仔細的看看剛剛範例的 server response：</p>
<pre><code>HTTP/1.1 103 Early Hints
Link: &lt;/style.css&gt;; rel=preload; as=style
Link: &lt;/script.js&gt;; rel=preload; as=script

HTTP/1.1 200 OK
Date: Fri, 26 May 2017 10:02:11 GMT
Content-Length: 1234
Content-Type: text/html; charset=utf-8
Link: &lt;/style.css&gt;; rel=preload; as=style
Link: &lt;/script.js&gt;; rel=preload; as=script

&lt;!doctype html&gt;
[... rest of the response body is omitted from the example ...]
</code></pre>
<p>不知道會不會有人疑惑，為什麼不直接用 200 response 裡面回應的 Link header 就好了？其實我一開始也是這樣想，不過這完全是因為這個問題落入身為前端工程師的我的盲點之中，因為現在前端開發主流是 SPA，通常 HTTP server 回的就是一個靜態的 HTML 檔案，所以回應速度超快。不過，如果回應的 HTML 文件，是由程式語言動態生成的，或許還需要查詢一下資料庫之類的，那這個回應時間就會變慢了，而 HTTP 103 Early Hints 就是在這種狀態下用的，在你的 server 端程式開始處理 request 之前，就先丟 103 的 status code 和 Early Hints 的內容回給瀏覽器，然後才接著處理資料和生成 HTML 文件，這種情境下，Early Hints 就顯得比較有差異了。Nitropack 的<a href="https://nitropack.io/blog/post/early-hints">文章</a>就解釋的很清楚，還有附上詳細的說明圖。</p>
<p>相較於 Server Push，其實 Early Hints 的設計簡單很多，所有的傳輸還是從 client 端看有沒有 cache ，決定要不要發 request，而這種操作已經非常成熟（相較於 server push），相信很多地方可以直接使用現有的程式碼來實作，最大的隱憂，就只是不相容 HTTP/1.0，然後會擔心有 HTTP/1.1 的 client 端沒正確實作吧，畢竟 1xx 的處理機制雖然早早就設計好，但是實際上 1xx 有被廣泛使用也是這幾年的事。</p>
<p>目前 Chrome 是從 103 <a href="https://developer.chrome.com/blog/new-in-chrome-103/">開始支援 Early Hints</a> 的，並且預計在 106 <a href="https://developer.chrome.com/blog/removing-push/">正式移除 Server Push</a>，至於其他瀏覽器則是都還沒有支援， Firefox 是有計畫要支援，<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1407355">進度</a>有點緩慢就是。</p>
<p>最後，Fastly 其實有提供一個測試用的網站：<a href="https://early-hints.fastlylabs.com/">https://early-hints.fastlylabs.com/</a>，不過這個網站不是用來測試你的瀏覽器支不支援 Early Hints 的，而是用來測試先 103 然後接 200 的 response 會不會有非預期的問題（也就是相容性的測試），如果想要直接看看來回的內容，也可以直接用 curl：</p>
<pre><code class="language-sh">curl -v https://early-hints.fastlylabs.com
</code></pre>
]]></description>
<dc:subject>web</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2022-08-23T22:27:35+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2022/08/18/shopify-app/">
<title>Shopify App</title>
<link>https://blog.othree.net/log/2022/08/18/shopify-app/</link>
<description><![CDATA[<p>之前開發 Shopify App 時，為了搞定他的安裝搞了蠻久，所以決定來紀錄一下踩到的坑，這篇文章適合已經開始在開發 Shopify App 的人閱讀，有些 Shopify App 的基本知識就不會提到，以下內文幾個名詞先定義清楚一下：</p>
<ul>
<li>App 指的是我們開發的 Shopify 第三方 app</li>
<li>Merchant 指的是在 Shopify 上開店的商家</li>
<li>安裝 app 指的是 merchant 在他們的 Shopify 商店上安裝我們開發的第三方 app</li>
</ul>
<p>首先就是，我踩的很多坑有一部分原因是因為我用 NodeJS 作為 server 端的語言，選的是 Express，但是官方的 Express 架構的 app 範例已經停止維護了，取而代之的，是 Koa 版本的 <a href="https://github.com/Shopify/koa-shopify-auth">@shopify/koa-shopify-auth</a>，只有負責驗證相關的 middleware，不過其實我也就剛好是需要 auth 相關的部分，只是差在不是 Express 版，我也還可以研究看看要怎樣自己實作了。</p>
<p>大概看一下，發現其實還有另外一個 <a href="https://github.com/Shopify/shopify-api-node">@shopify/shopify-api</a> 是底層負責處理跟 Shopify 相關的邏輯，所以理論上我也可以使用它來搭配 Express，不過這裡首先就有一個坑了，初始化的範例是長這樣：</p>
<pre><code class="language-js">Shopify.Context.initialize({
  API_KEY: process.env.SHOPIFY_API_KEY,
  API_SECRET_KEY: process.env.SHOPIFY_API_SECRET,
  SCOPES: process.env.SHOPIFY_APP_SCOPES,
  HOST_NAME: process.env.SHOPIFY_APP_URL.replace(/^https:\/\//, ''),
  API_VERSION: ApiVersion.October20,
  IS_EMBEDDED_APP: true,
  // More information at https://github.com/Shopify/shopify-node-api/blob/main/docs/issues.md#notes-on-session-handling
  SESSION_STORAGE: new Shopify.Session.MemorySessionStorage(),
});
</code></pre>
<p>可以看到，最後有一個 <code>SESSION_STORAGE</code>，這是個處理 merchant 在安裝 app 時，我們的 app 拿到的 access token 的儲存方式的 adapter，不過官方的範例是用 Memory Storage，這個 adpater 是只有存在記憶體內，其實只適用於開發用，只要你的 server 一重開，所有的 merchant 就都要重新安裝你的 app，不然你的 app 會沒有 access token 跟 Shopify 溝通，實際上你應該要參考 <a href="https://github.com/Shopify/shopify-api-node/blob/main/docs/usage/customsessions.md">Custom Session Storage</a> 這份文件，挑選適用的 adapter，我則是參考範例寫了一個 GCP FireStore 的版本，當然另外沒特別提到的就是，因為是儲存 access token，最好要考慮一下 DB 的加密。</p>
<p>第二個坑，就是要怎樣做 Shopify 的 authentication 以及 identification，先來說如何驗證 request 是可信的，在 Shopify API 的設計，就是要靠 query string parameter 裡面的 hmac，他是根據你的 App 的 secret 來計算出來的，然後，這裡的坑就是官方套件 <code>@shopify/shopify-api</code> 內有個 <code>validateHmac</code> 可以用，但是它的計算其實是不正確的，它是用白名單只有取部分的 query string parameter 來計算，結果和 Shopify 給的就會有出入，所以我是參考 GitHub issue 討論串內 Muhammad Kamal 給的<a href="https://github.com/Shopify/shopify-node-api/issues/275#issuecomment-1059968699">範例</a>來使用。</p>
<p>第三個坑，則是安裝 App 用的 route 了，Shopify 的設計有點特別，所有的初始 request （不論是第一次安裝、還是從 Shopify 後台進入 App 的設定畫面），都長的很接近，所以你就要根據各種狀況來決定該做什麼事情，以下是所有可能的狀況：</p>
<ul>
<li>第一次來安裝</li>
<li>安裝後進到設定畫面</li>
<li>曾經安裝過，但是需要重新授權，可能的原因：
<ul>
<li>App 需要的權限有變動</li>
<li>App 端的 access token 失效了</li>
</ul>
</li>
<li>Shopify 認為已經安裝了，但是 app 端沒資料</li>
</ul>
<p>扣除需要的權限有變動之外，其實就是排列組合，Shopify 端認為有沒有安裝過，和 App 端認為有沒有安裝過，二乘二共四種可能性，不過實際上只有三種處理方式：初次安裝、重新授權、安裝沒問題的快樂路線（happy path）整理成程式流程大概是：</p>
<ol>
<li>驗證 hmac，沒過可以直接回 400</li>
<li>判斷 shop 是否有在資料庫中</li>
<li>2 有的話驗證資料庫中的 access token</li>
<li>3 驗證通過的話，狀態就是 happy path，Shopify 認為 app 有裝，app 端檢查也沒問題，我把這狀態命名為 <code>valid</code></li>
<li>3 驗證沒通過的話，判斷有沒有 <code>session</code> 這個 query string 參數</li>
<li>5 有的話，狀態就是 app 端的 access token 不能用了，需要走重新授權的流程，我把這狀態命名為 <code>invalid</code></li>
<li>5 沒有的話，就是第一次安裝的流程，我把這狀態命名為 <code>not_found</code></li>
<li>最後就是 2 沒有的話也是走初次安裝的授權流程，同樣也可以叫 <code>not_found</code></li>
</ol>
<p>然後 app 需要的權限變動的話，理論上是每次進來，驗證 access token 的時候，可以去打 API 問目前 <a href="https://shopify.dev/api/usage/access-scopes#checking-granted-access-scopes">token 的 access scope</a>，不過這部份我沒實做，因為目前我還沒有相關需求。</p>
<p>網路上可能可以找到 <code>X-Shopify-API-Request-Failure-Reauthorize</code> 這個 header，不過這個其實不是 Shopify API 的回應，而是 Shopify 的 <a href="https://github.com/Shopify/shopify-app-template-node/blob/main/server/middleware/verify-request.js">app-template</a> 裡面設計的機制，它們的 app template 裡面，server 端在轉發 Ajax API request 時，如果收到 Shopify 端的錯誤後，就加上這個 header 回給 app 前端，app 前端收到這個 header 後就可以透過 Shopify app-bridge 進入重新授權的流程。</p>
<p>講到這邊，或許有人會好奇，為什麼需要把安裝 app 和重新授權兩個流程的處理方式分開？其實這可以算是第四個坑，也是和使用者體驗有關係，狀況就是，Shopify 認為是初次安裝時，是直接進入 OAuth 的流程，所以是瀏覽器的最上層視窗直接轉址到 auth 頁面，但是如果是需要重新授權的情形，則是 Shopify 端認為已經安裝好，但是 app 這邊認為需要重新跑一次 OAuth，而這時候，連到 app server 的瀏覽器視窗是在 Shopify 商店後台的 iframe 內，在 iframe 內也無法正確的完成 OAuth 授權，所以需要用 Shopify 現在一套叫 app-bridge 的工具幫忙，讓 OAuth 流程從最上層視窗開始，所以需要回一個 HTML 頁面，<a href="https://shopify.dev/apps/tools/app-bridge/getting-started/app-setup#set-up-shopify-app-bridge-in-your-app">引入 app-bridge 的 script</a>，然後執行以下的的 JS：</p>
<pre><code class="language-js">const AppBridge = window['app-bridge'];
const createApp = AppBridge.default;
const Redirect = AppBridge.actions.Redirect;
const app = createApp({
	apiKey: '{{API_KEY}}',
	host: '{{HOST}}',
});
const redirect = Redirect.create(app);

redirect.dispatch(
	Redirect.Action.REMOTE,
	'/url/to/your/auth?shop={{SHOP}}'
);

</code></pre>
<p>當然記得要把該替換的東西替換上去，然後就可以看到正確的從最上層視窗開始進入 OAuth 授權的流程了。</p>
<p>最後一個坑，其實就是 merchant 反安裝 app 後，Shopify 和 app 端的狀態就會不一致的問題，Shopify 端認為沒安裝，但是 app 端認為有安裝，雖然我上面設計的程式流程已經可以處理這種狀況（驗證 access token 會失敗，然後沒有 <code>session</code> 參數，所以會進入初次安裝），但是這種情形還是應該要能避免就避免，而解法就是要支援 webhook，要作的事情就是：</p>
<ol>
<li>安裝完成的 callback 去訂閱 <code>APP_UNINSTALLED</code> 這個 webhook event</li>
<li>然後在收到這個事件後，把資料庫中的對應資料刪除</li>
</ol>
<p>這邊我是用 <code>@shopify/shopify-api</code> 提供的工具像是
<code>Shopify.Webhooks.Registry.register</code> 和 <code>Shopify.Utils.deleteOfflineSession</code>，真的想要自己作也不是辦不到，不過我記得 Shopify 的 webhook 處理起來有點麻煩。</p>
<p>這些細節就是官方文件沒有好好寫清楚，雖然官方文件內容已經很多，有努力整理了，但是實際上要自己接就還是遇到了不少問題，所以特別寫一篇文章紀錄，雖然不知道會不會有其他中文圈的人需要自己來做 Shopify app 就是了，可以直接用他們的 app template 還是比較簡單啦。</p>
]]></description>
<dc:subject>web</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2022-08-18T20:48:14+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2022/07/31/coscup-2022/">
<title>COSCUP 2022</title>
<link>https://blog.othree.net/log/2022/07/31/coscup-2022/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/52253486310/" title=" by othree, on Flickr"><img src="https://live.staticflickr.com/65535/52253486310_6b0fb625bc_b.jpg" width="1024" height="768" alt="" srcset="https://live.staticflickr.com/65535/52253486310_52f4492e44_k.jpg 2x" /></a></p>
<p>(照片是今年的新玩意，紀錄組的形象照)</p>
<p>今年 COSCUP 恢復實體活動，而我和我的稿件間的緣份也終於來了（有來聽的就知道我等緣份到等了兩年有），所以今年是小孩出生後難得有稿可以投，也幸運的投上了，於是就參加了第一天的活動，今年活動的人潮我目測和往年差不多，後來晚上官方也很快速的公布了明調的數字，也有一千三四百筆數據。</p>
<p>我的分享時間是下午的兩點，我大概早上十點半才到會場，先去摩斯買杯紅茶，然後在門口報到區遇到昨天晚上在前夜 party 淋雨全濕的菜骨，接著我先去攤位區亂晃，在 MozTW 的攤位跟 Irvin 閒聊一下，還有遇到 Ett 和 RJ，之後又在形象照（今年紀錄組的新玩意）區遇到丞相還有幾位紀錄組的新朋友（Ada 和另外一位沒記起名字），拍了些 COSCUP 形象照，還遇到 Bob 和哈維、日落，這邊要先岔題澄清一下，就是我常被誤認我有當過 COSCUP 紀錄組長，不過其實沒有，某一年 Bob 有詢問過我意願，那一年我想要拼研究所畢業所以思考過後還是放棄，結果同一年我後來還是接了其他場活動的紀錄組長，因為我後來還是放棄該年度畢業了...</p>
<p>之後去買了一批 COSCUP 紀念品，然後攤位區拿了一點小點心要回家給小孩，接著亂晃一下發現時間已經接近十二點了，而且肚子有點餓就趕快去覓食，不意外的摩斯爆炸，所以轉戰到一餐點了個可以快速吃完的東西，快速的解決後回到會場，然後和一位台大社團的學弟閒聊一陣子，中間還有遇到大助、Trista、Singing 等人，差不多到一點的時候我決定先去教室內休息等待，途中剛好經過 OCF 攤位有跟 Rock、Max 打招呼，然後也看了一下開源星手村桌遊，OCF 攤位還有位朋友（應該是 OCF 實習生）說之前有到我的動森島上參觀過，之後我就到教室坐著休息一下，接著就是 Max 的分享場次了，他分享的題目是<a href="https://coscup.org/2022/zh-TW/session/99GBZC">開源軟體與社群 - 參與國際社群經驗談</a>，是我的前一個場次。</p>
<p>其實即使到現在，我還是有點難恢復純會眾的角色，到了會場就是會想到處走來走去，有點難靜下心來聽別人分享，連排想聽的主題都有點難，實在是當太多次志工的後遺症，今年聽 <a href="https://sakanamax.github.io/">Max</a> 的分享是我近年難得有真的能夠靜下心來認真作聽眾的經驗，必須說這真的是緣份，要不是剛好排在我的前一個場次，我也不會能夠靜下來聽，而且不聽還好，一聽下去發現內容有很多地方和我的講題部分想說的地方有呼應到，甚至是我想表達但是我沒有很明確寫出來的。</p>
<p>總之接著就換我分享了，今年有認真練習了幾次，有發現時間有點緊，所以實際分享時有一些細節漏了，這邊剛好列一下：</p>
<ul>
<li>如何開始貢獻那邊，原本有想提到 <a href="https://opensource.guide/zh-hant/">opensource.guide</a>，第二天小飛機的分享：<a href="https://coscup.org/2022/zh-TW/session/GKDWQF">如何跟隨開源技術保持你的職涯發展</a>似乎也有提到，期待之後的錄影</li>
<li><a href="https://github.com/mlinksva">Mike Linksvayer</a> 和 <a href="https://github.com/benbalter">Ben Balter</a> 的介紹，兩位都是 GitHub 員工，不過看職位似乎也不是專門處理 open source license 相關的，倒是會後 Bob 在 FB 有提到他也認識(?) Mike</li>
<li>如何跟 Mike Linksvayer 和 Ben Balter 溝通關於使用 Vim License 的那超過一千個的 public repositories</li>
<li>開 issue 跟 PR 時應該怎樣說明</li>
<li>更進一步介紹怎樣比對 Licensee 的比對原理</li>
<li>選擇你最舒服的方式參與，這句是從 Max 的投影片借來的，我自己的分享是說了兩三次佛系貢獻、等待緣份，其實和 Max 說的「選擇你最舒服的方式參與」是很接近的，我想表達的比較是不給自己和對方壓力</li>
<li>本來還想畫張 timeline 的，還有投稿之後準備內容時於到的外部誘惑等等（那個什麼法環的）</li>
<li>然後就有點離題的商業和開源難分難解的關係</li>
</ul>
<p>其實我在分享講話的時候，大腦沒什麼在思考的感覺，很像是直覺反射那樣，所以不太能臨時性的控制和調整，這些缺漏就只能等等看之後寫成文字紀錄的時候能不能補上了，附上分享的<a href="https://speakerdeck.com/othree/how-github-supports-vim-license-detection-the-five-years-journey">投影片</a>：</p>
<iframe class="speakerdeck-iframe" style="border: 0px none; background: rgba(0, 0, 0, 0.1) none repeat scroll 0% 0% padding-box; margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" src="https://speakerdeck.com/player/0256360bb6ec4a79b562fcdcb63d49f3" title="How GitHub Supports Vim License Detection, The Five Years Journey" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" data-dashlane-frameid="1533303324720" data-ratio="1.78343949044586" frameborder="0"></iframe>
<p>除了缺漏之外，其實這次分享還有點可惜是投影解析度不太夠，因為我其中一張投影片的動畫的關係（SPDX 那邊的討論串），我選擇用自己的電腦，不過為了配合大會的錄影，現場的投影解析度就有點低，對現場的聽眾是不太好意思，希望錄影的部分能夠正常可以觀看，其實事後回想，或許我還可以選擇輸出的解析度測試看看，只是不知道那個擷取裝置有沒有支援，當時有點慌忙都忽略了。</p>
<p>分享結束之後我去買了杯氮氣咖啡就快速收工回家了，後來在柏強的 FB 提到了「看到問題的能力」，我就想到我確實之前就有意識到這一點，不過我意識到的是，相較於平常沒主動分享（寫文章或是演講）的人，我確實很容易知道，哪些我的經驗（工作上的、生活上的、興趣上的）可以匯集成一個主題，可能可以寫成文章，也可能可以投稿分享，不過這個<strong>能力</strong>本身似乎不是這麼容易能分享給新手的。</p>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2022-07-31T22:24:42+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2021/09/10/does-cat-understand-what-we-say/">
<title>貓聽得懂人話嗎</title>
<link>https://blog.othree.net/log/2021/09/10/does-cat-understand-what-we-say/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/8997762712/in/photolist-236z5zf-22ms8cB-23HUtwV-X3kfUu-TF7f8Y-RoEKe7-RyyKvA-QoqGRP-RyB6t7-QkDFnQ-RyB5XN-QkDGgd-RoGwzq-RyB7NG-Bcfmhj-BB5dJA-BB5e4U-A1AFfr-qAfKsg-eH6TnS-2mnSMWp-eGZPpp-eH6TN1-eGZNXH" title="菲貓 by othree, on Flickr"><img src="https://live.staticflickr.com/3690/8997762712_4915c923b5_b.jpg" width="1024" height="683" alt="菲貓" srcset="https://live.staticflickr.com/3690/8997762712_e24a8ff6e5_k.jpg 2x" /></a></p>
<p>不知道別人家的貓是怎樣，不過我是蠻相信我家的貓是聽得懂的，我們家的貓咪年紀大了，開始有腎臟問題，行動力也差很多，有一陣子看他身體不舒服，然後還要移動去尿尿埋沙好像很辛苦，於是有一次我就跟他說不要埋了我幫他處理，結果，從此之後他就再也不埋尿尿便便了，即使後來身體比較好也一樣...</p>
<p>我們家貓咪的名字叫菲菲，其實他是一隻蠻特別的貓咪，一來他是很少見的母的橘貓，根據我隨便搜尋了一下，好像要有兩組 DNA 的基因都要是橘色基因，然後機率都是三分之一的樣子；二來他的叫聲很特別，別的貓咪是喵喵叫，他都是凹凹叫，而且很多話；另外就是耳朵的尖端還有些毛也很少在橘貓上見到。這幾個特點之外，其他的地方就和一般常見的橘貓很像了，愛吃、親人、喜歡摸摸，根據我的觀察，家裡的成員當中，他最喜歡我摸他了，常常摸頭頭下巴摸一摸他就乾脆整顆頭都不出力支撐，直接倒在我手上了，啊，他還有一個特色是很會騙人，就我所知有好幾個藍星人跟他接觸之後覺得貓咪很可愛也開始養貓了。</p>
<p>回到聽得懂人話嗎這個問題上，另外一個例子是他前幾兩週身體狀況惡化很多，後腳無力，幾乎走不太動了，尿尿便便常常會來不及跑去貓沙盆，雖然有鋪尿布但是他不一定躺在上面，我就跟他說有事情要叫我們，要便便尿尿都跟我們說，結果就真的開始偶爾會突然開始叫幾聲，然後我們問他什麼事情，他就開始尿尿了（不過還是蠻堅持想要到貓沙上面）。</p>
<p>其實菲菲這次身體狀況惡化，醫生是已經無法處理了，我們就是在家裡讓他盡量過的舒適，晚上事情忙完就會去客廳陪他摸摸他，順便玩對馬戰鬼導演版，所幸他還算可以安靜躺著，因為不知道他到底這樣會不會需要其他協助，還跑去問醫生，不過根據醫生說法，痛苦的話貓咪還是會有反應，像是焦慮、一直換姿勢或是嘔吐等等，總之就是會更慘烈就是，還好菲菲這樣還蠻平靜。菲菲最後是在上週六晚上離開的，他挑了一個剛好沒人在旁邊的時間離開，就是我晚上去倒垃圾的時候，我離開家裡之前還跟他說我要去倒垃圾了，一下子就會回來陪他了，等到我回來時他狀況已經驟變了，呼吸變成很慢，大概好幾秒鐘才一次，然後很吃力了，眼睛也都完全沒反應了，之後只有再呼吸幾次就停了，告別就這樣突然的來到，本來最近看房子還在想不知道到新房子的話要讓他佔據那邊呢，悲傷之餘跟老婆先查過的廠商聯絡，心裡其實也有點逃避現實的想著會不會菲菲其實還活著呢，但是也不敢再多看他幾眼，維持在一個自以為的薛丁格的貓的狀態。</p>
<p>隔天週日天氣很好，週六其實下了很大的雨，所以週日天空特別的蔚藍，空氣很乾淨能見度很高，比這兩天颱風前的天空還要漂亮，在開車往火化園區的路上，看著這一大片蔚藍的天空，想到岳母前幾天有說貓咪在挑日子，就覺得他真的是很會挑日子和時間，挑到天氣這麼這麼好的一天，不過一路上還是會逃避現實的想著他會不會其實還活著，要是還活著就把他送進去火化太可怕了吧，不過這種不切實際的幻想終於還是在禮儀師幫菲菲清潔身體時被打破了，看著完全沒反應不會動的貓咪身體，我心理想著：「啊，真的死了」，等火化出來時，看著骨頭想著：「啊，就這樣變成這樣了」。</p>
<p>跟小孩說貓咪去當小天使了，他雖然不常摸菲菲，但是還是會說不想要看不到貓咪，會想他，看到放在桌上的貓咪罐頭還會怕他去當小天使肚子餓怎麼辦（只好趕快裝到箱子），雖然他沒有反應很大不過似乎這陣子也是有比較敏感。至於我，一開始面對空曠的客廳時感到很不習慣，甚至想逃避那個空間，過了快一週是已經沒那麼害怕客廳了，不過大概是很難繼續玩對馬戰鬼了吧，本來甚至很怕會無法看其他貓咪影片照片的，結果似乎也還好，不過以前要出門時，我都會跟佔據在客廳的菲菲報備一下，這個習慣的慣性即使到現在都還在，或許遲早我還是會習慣菲菲不在了，出門再也不會有要跟他報備的衝動吧，也或許更讓人難受的是知道自己遲早會漸漸忘懷他吧。</p>
<p>PS. 本來想放小孩跟貓咪的合照，不過實在沒很多張，最後挑的是我幫他拍的第一張照片。</p>
]]></description>
<dc:subject>diary</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2021-09-10T21:37:58+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2021/08/12/csp-for-lambdaedge/">
<title>CSP for Lambda@Edge</title>
<link>https://blog.othree.net/log/2021/08/12/csp-for-lambdaedge/</link>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/51371732481/" title="CSP by othree, on Flickr"><img src="https://live.staticflickr.com/65535/51371732481_5335b8d3f0_b.jpg" width="710" height="305" alt="CSP" srcset="" /></a></p>
<p>之前工作上主要是用 AWS，AWS 放靜態網站有過 CloudFront CDN 時，如果需要調整 header 的話，官方的解決方案是用 Lambda@Edge，寫 AWS Lambda function 的時候，其實我個人有一個偏好，就是能不用第三方 module 就不用，主要原因有兩個，第一個原因是，如果程式碼太大包，會無法在 AWS console 上直接看（或修改）程式碼；第二個原因是發佈流程會比較麻煩，因為還要去安裝 module，然後再全部打包起來上傳。</p>
<p>要調整 header 的一個主要原因就是為了 security headers，大部分的 security header 都還算單純，但是 CSP（Content Security Policy）就複雜很多了，如果沒有用結構化的資料，其實很難維護，但是針對 Lambda function 我又不想要用第三方 module，最後我想到的解決方案，就是設計一個很簡短的工具函式來把結構化的資料轉成 CSP header 的值，這就是我最近趁 COSCUP 2021 會議期間整理好的新的 open source 專案：<a href="https://github.com/othree/csp">CSP</a>。</p>
<p>這個專案內容就只是一個簡單的 function：</p>
<pre><code class="language-javascript">const CSP = (directives) =&gt; {
  return directives
    .map((directive) =&gt; {
      return `${directive.name} ${directive.value.join(' ')};`;
    })
    .join(' ');
};
</code></pre>
<p>不過為了好好設計這個 function 其實我也是花不少功夫，首先就是輸入參數的結構要長怎樣，其實一般比較常見的是用物件 property 直接就作為 directive name 的形式，像是 Google 的 <a href="https://github.com/google/csp-evaluator">CSP Evaluator</a>：</p>
<pre><code class="language-json">{
  &quot;default-src&quot;: [&quot;'none'&quot;],
  &quot;script-src&quot;: [&quot;'self'&quot;],
  &quot;connect-src&quot;: [&quot;blah&quot;, &quot;blah&quot;]
}
</code></pre>
<p>這種結構比較精簡，但是問題就是無法保證順序，考慮再三之後，決定還是用陣列的形式：</p>
<pre><code class="language-json">[
  {
    &quot;name&quot;: &quot;default-src&quot;,
    &quot;value&quot;: [&quot;'none'&quot;]
  },
  {
    &quot;name&quot;: &quot;script-src&quot;&quot;,
    &quot;value&quot;: [&quot;'self'&quot;]
  }
]
</code></pre>
<p>這樣就可以讓開發人員確保輸出的順序，其實大部分時候我也不會那麼在意順序，不過要是 <code>default-src</code> 如果不是第一個感覺就很不舒服。確定主要的資料結構後，再來就是屬性名稱要用什麼好的問題了，為了找到正確的名稱，我去翻了 <a href="https://w3c.github.io/webappsec-csp/#framework-policy">CSP spec</a> 找到關於 parsing 相關的說明，確定了 spec 定義的結構是這樣的（使用 TypeScript 語法）：</p>
<pre><code class="language-typescript">type Source = string;

type Directive = {
  name: string;
  value: Source[];
};

type Policy = {
  source: &quot;header&quot; | &quot;meta&quot;;
  disposition: &quot;enforce&quot; | &quot;report&quot;;
  directiveSet: OrderedSet&lt;Directive&gt;;
};

type Policies = Policy[];
</code></pre>
<p>在輸入資料的陣列中，每個元素都是 <code>Directive</code>，<code>Directive</code> 的兩個屬性分別是 <code>name</code> 和 <code>value</code>，<code>value</code>  則是 <code>Source</code> 的陣列集合，當然 <code>Source</code> 還有更嚴謹的定義，不過這邊就簡化成字串就好。確定完輸入資料的結構後，就是要想盡辦法簡化 function 的內容了，但是也不希望太難讀懂，調整了幾次變成現在的樣子，我還提供了精簡的版本：</p>
<pre><code class="language-javascript">const CSP = p =&gt; p.map(d =&gt; `${d.name} ${d.value.join(' ')};`).join(' ');
</code></pre>
<p>其實我對於那個 <code>map</code> 接 <code>join</code> 一直耿耿於懷，很想要用 <code>reduce</code> 解決，但是要避免頭尾多空白，會需要多判斷式，就算不予理會，程式碼長度其實還是比現在這個版本長，結果還是 <code>map</code> 接 <code>join</code> 看起來比較漂亮，所以最後的版本就維持這樣了。</p>
<p>然後我還寫了測試和提供了兩個 <a href="https://github.com/othree/csp/tree/master/examples">example</a>，分別是 Lambda@Edge 和 Cloudflare Workers 的，不確定還有沒有類似的服務，如果有發現會再加上。最後就是，因為這個 function 設計就是要給人複製貼上的，所以並沒有發布到 npm 上，然後使用 MIT-0 license 所以也不用 attribution，覺得有興趣使用的就請直接複製貼上吧～</p>
<p>PS. 如果有其他需求，可以看看 <a href="https://www.npmjs.com/package/csp-header">csp-header</a>，例如 Express 使用，我覺得介面設計得很不錯。</p>
]]></description>
<dc:subject>script</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2021-08-12T11:59:16+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2021/08/02/static-site-hosting/">
<title>Static Site Hosting 服務需求</title>
<link>https://blog.othree.net/log/2021/08/02/static-site-hosting/</link>
<description><![CDATA[<p>前陣子研究了一下用 GCP 來放靜態網站，那時候有整理了一下需求，這篇文章把需求的緣由也整理出來，先說在前面，這些需求並不是要求單一家服務就可以達成所有目標，內文也盡量不提到特定服務，所以不同服務要怎樣達到這些需求就有賴各位自行研究了。</p>
<h4>支援 CDN</h4>
<p>這個需求沒什麼好說了吧。</p>
<h4>支援 HTTP/2</h4>
<p>主要的服務應該都支援了，不過還是列一下。</p>
<h4>支援加上 Security Headers</h4>
<p>現在大家對於安全性的要求很高，所以可以加上 security headers 對我來說已經是一個必備的功能了，像是 CSP、HSTS 等，這項需求看廣一點，其實就是要自定義回傳 header 的功能，如果可以根據路徑調整就更好了，基本上應該只有 HTML 文件本身需要這些 header。</p>
<h4>支援 HTTP 轉成 HTTPS</h4>
<p>在各家瀏覽器的推波助瀾之下，不支援 HTTPS 的網站感覺就是次一等了，所以把 HTTP protocol 的 traffic 全部轉到 HTTPS 這件事情我也列為必備，有兩種支援的方式，一種是服務內建支援 protocol 轉址，這種最好，因為它會保留請求的路徑（path），而不是把訪客導到首頁，另外一種就是用下面要提到的全站轉址的方式來達成。</p>
<p>雖然我自己是都會把 HTTP 轉到 HTTPS，不過看網站目標，也還是有可能需要繼續支援 HTTP 的。</p>
<h4>支援全站轉址</h4>
<p>主要的需求是把 <code>www.example.com</code> 轉址到 <code>example.com</code> ，或是反過來，像 <code>www.apple.com</code> 那樣，當然最好還能保留請求的路徑，這個看似很基本的設定，其實現在還蠻常會發現有網站沒做到這件事，尤其是台灣的，我真的是黑人問號？＿？</p>
<p>除了 host name 的轉換之外，還有一種情形是需要把整個網站的 request 都轉到某個 URL，例如 <code>docs.example.com</code> 要關站，然後要把流量都轉到 <code>https://example.com/docs</code> 。</p>
<p>以下算是非必備的需求</p>
<h4>支援把 404 改寫成 200</h4>
<p>非 SSR 的 SPA 然後配上 route 的話，會有個問題就是除了首頁的 route 都會 404，雖然一般可以用 error_document/not_found_page 之類的設定來讓內容可以正確呈現，但是 404 的 status code 還是會有不少問題，一來是影響搜尋引擎的結果，二來是不知道是不是所有瀏覽器都還會正確的處理 404 時的網頁內容，所以最好還是能回正確的 status code，可以辦到這件事的方法就我所知道的也是有兩種，一種是 rewrite 機制，另外一種就是可以寫程式處理 request/respone 的，像是 Lambda@Edge 那樣。不過在處理這個功能時要是直接全部的路徑回應都變 200 其實也不太好，要完美有點麻煩啊。</p>
<h4>支援 CORS</h4>
<p>如果會有需要靜態的 JSON 檔案，然後跨網域直接抓下來當資料使用，那就會需要支援 CORS header，和上面自定義回傳 header 那一項不太一樣的是，CORS header 其實是有互動而不是寫死的，應該是要根據 request 的 header 內容來改變回傳的 CORS header，如果需要 preflight request 那還要支援 OPTIONS method 和相對應的回應，不過如果單純只是靜態 JSON 檔案，靠自訂回傳 header 的功能直接寫死應該也是夠用了。</p>
<h4>支援 Basic Auth</h4>
<p>如果有尚未公開的網站，還是希望至少有個基本的保護，Basic Auth 只是其中一種方法。</p>
<h4>支援根據 Header 切換 origin</h4>
<p>這個需求的來源就是用手機的訪客可以看到手機版網頁，用桌上型電腦的訪客看到桌面版網頁，然後網址想要維持一致而且兩種版本的網站想要分開開發，不一定會有這個需求。然後不得不說，AWS 的 <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-cloudfront-headers.html#cloudfront-headers-device-type"><code>CloudFront-Is-*-Viewer</code> header</a> 真是蠻方便的，不過他們沒洩漏過判斷方式，Cloudflare 則是只有<a href="https://support.cloudflare.com/hc/en-us/articles/229373388-Understand-Cache-by-Device-Type-Enterprise-plans-only-">企業方案有支援</a>，但是有提供他們如何判斷 device type。</p>
<h4>支援根據路徑切換 origin</h4>
<p>如果有特定路徑下的網頁是另外開發的，有支援這個功能的話就會比較好處理，一個比較常見的情境是開發文件的 API spec 是用其他工具或服務產生的，例如用 OpenAPI 文件產生的那種就很常見，或是有些語言也都有常用的文件產生工具，例如 Python 的 Sphinx。</p>
<h4>支援 brotli</h4>
<p>Google 開發的壓縮格式，對文字資料的壓縮表現比以前主流的 gzip 還好，主要的服務應該都支援了，不過還是列一下。</p>
]]></description>
<dc:subject>server</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2021-08-02T22:23:14+08:00</dc:date>
</item>

<item rdf:about="https://blog.othree.net/log/2021/07/19/macos-my-pref/">
<title>MacOS 我的設定</title>
<link>https://blog.othree.net/log/2021/07/19/macos-my-pref/</link>
<description><![CDATA[<p>最近因應新工作買了台新的 M1 Mac mini，所以重新把常用設定弄了一下，這篇文章來紀錄一下。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/51318768736/" title="Mac OS Preference by othree by othree, on Flickr"><img src="https://live.staticflickr.com/65535/51318768736_786d7e9446_b.jpg" width="668" height="696" alt="Mac OS Preference by othree" srcset="" /></a></p>
<p>首先是 <strong>一般</strong> 裡面的顯示捲軸（scrollbar），預設的設定是 <strong>自動依據滑鼠或觸控軌跡板</strong> ，這個選項的意思是，如果你用的是蘋果的滑鼠或觸控板，那他就會用自動隱藏的那種捲軸，如果有其他品牌的外接游標控制設備，那捲軸就是傳統的，有得捲動時就是會一直出現在那，佔據一塊空間，其實我對於這個預設行為有疑惑很久了，為什麼其他品牌的滑鼠就一定要用傳統的捲軸模式？直到某一天在系統篇好設定亂逛的時候才發現原來就是這個選項。</p>
]]></description>
<dc:subject>mac</dc:subject>
<dc:creator>othree</dc:creator>
<dc:date>2021-07-19T00:37:19+08:00</dc:date>
</item>


</rdf:RDF>