<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>O3noBLOG</title>
<link>https://blog.othree.net/</link>
<description></description>
<copyright>Copyright 2017</copyright>
<lastBuildDate>Fri, 18 Aug 2017 23:54:40 +0800</lastBuildDate>
<generator>http://www.movabletype.org/?v=4.381</generator>
<docs>http://blogs.law.harvard.edu/tech/rss</docs> 


<item>
<title>196</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/36512922821/" title="196 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4360/36512922821_91c0a76194_b.jpg" width="1024" height="683" alt="196" srcset="https://farm5.staticflickr.com/4360/36512922821_91c0a76194_b.jpg 1024w, https://farm5.staticflickr.com/4360/36512922821_a17aefd061_h.jpg 1600w" /></a></p>
<p>這篇文章是在寫 <a href="http://blog.othree.net/log/2017/08/12/temporal-is-next-date/">temporal</a> 那篇文章時，找資料發現的有趣東西，在那篇文章當中，我有說到目前 date 物件的各種問題，其中第六點是「不支援 Gregorian Calendar（格里曆）以外的日曆（例如農曆）」 ，然後我就好奇起來了，現在還有什麼其他的曆法在用呢？結果找著找著，就看到有個<a href="http://www.fourmilab.ch/documents/calendar/">網站</a>提供了很多曆法了線上轉換，像是 Julian Calendar（儒略曆）、Hebrew Calendar（希伯來曆）、Islamic Calendar（伊斯蘭曆）、Persian Calendar（波斯曆）等，用 JavaScript 寫的，而且在程式碼裡面宣告貢獻到 public domain。</p>
<p>由於整個網站非常老派，我就對作者起了興趣，發現這個網站 fourmilab.ch 的所有者是 <a href="https://en.wikipedia.org/wiki/John_Walker_(programmer)">John Walker</a>，Autodesk 的 founder 之一，他現在已經退休搬到瑞士去了，然後 fourmilab.ch 上就放了他的各種記錄，像是<a href="http://www.fourmilab.ch/fourmilog/">文章</a>，其實就是 blog，看他結構感覺也是個 MovableType 站，還有<a href="http://www.fourmilab.ch/documents/reading_list/">閱讀清單</a>，旅遊照片，例如他去過<a href="http://www.fourmilab.ch/images/antarctica_2013/S015.html">南極一趟</a>，還有些他寫的書，例如 <a href="ttps://www.fourmilab.ch/hackdiet/">Hacker's Diet</a>、<a href="http://www.fourmilab.ch/autofile/">The Autodesk File</a> 等。</p>
<p>然後，我在 fourmilab.ch 上看到了「<a href="http://fourmilab.ch/documents/threeyears/threeyears.html">Three Years Of Computing</a>」這篇文章，標題就吸引了我進去仔細閱讀，這篇文章是在說迴文數（palindrome）挑戰，什麼是迴文數呢，「95277259」就是迴文數，不論是從頭開始還是反過來從尾開始都是相同的數字，那什麼是迴文數問題呢？首先你要拿到一個非迴文數的十進位數字，例如 <strong>362</strong> 好了，把他和自己的反轉相加：</p>
<pre><code>&gt;
   362
+  263
------
   625
</code></pre>
<p>結果不是迴文數，那繼續一樣的反轉相加運算：</p>
<pre><code>&gt;
   625
+  526
------
  1151
+ 1511
------
  1661
</code></pre>
<p>最後得到了一個迴文數 <strong>1661</strong>，迴文數問題就是，是否所有的正整數都可以透過這樣的運算，不管幾次，最終可以得到迴文數，如果有數字無法透過這個過程變成迴文數，那這數字也可以稱為 <a href="https://zh.wikipedia.org/wiki/%E5%88%A9%E5%85%8B%E7%91%9E%E5%B0%94%E6%95%B0">Lychrel Number</a>，不過因為目前無法從理論證明一個十進位數是 Lychrel Number，就只能想辦法反證它（註：我有看到說二進位數有證明）。</p>
<p>文裡說到，所有小於一萬的數字都已經被測試過，大部分的數字都可以用很少的次數就得到迴文數，其中，最小的可能的 Lychrel Number: <strong>196</strong> ，到目前還無法讓它經由反轉相加的過程變為迴文數，John Walker 那個跑了三年的程式就是在驗證 196 到底能不能透過反轉相加的過程。他在 1987 年用他的 Sun 工作站開始跑，結果跑了三年後的 1990，達到他當初設的停止條件，100 萬位，總共反轉相加了 2415836 次，他還放上他的程式碼還有計算的結果，如果有人有興趣可以從這邊開始接手繼續算下去，事實上，當初他跑這程式的工作站性能和現在的電腦比起來差距實在很大，在其它人後來的<a href="http://jasondoucette.com/worldrecords.html">挑戰</a>當中，就有提到一些性能數字，例如 Ian J. Peter 的程式只需要 5 小時就可以計算到一百萬位，用的電腦大約是 500 MHz 的 CPU。</p>
<p>John Walker 在 1990 年跑到一百萬位，結果還沒得到迴文數，那麼現在最新的紀錄是多少呢？<a href="http://www.p196.org/news.html">p196.org</a> 這網站收集了很多相關的資訊，對這議題有興趣的人還可以去看看，而它站上的紀錄是 <strong>413,930,770</strong>，四億多位，總共反轉相加了十億次；至於我目前看到的最高紀錄，是在「<a href="http://www.dolbeau.name/dolbeau/p196/p196.html">The p196_mpi page</a>」這裡，提供了平行版的程式，而據作者 Romain Dolbeau 所說，他在 2015 年 2 月已經計算到十億位了，不過他沒提供相關資料，有提供的只有 2012 年的六億位結果。</p>
]]>

</description>
<link>https://blog.othree.net/log/2017/08/18/196/</link>
<guid>https://blog.othree.net/log/2017/08/18/196/</guid>
<category>diary</category>
<pubDate>Fri, 18 Aug 2017 23:54:40 +0800</pubDate>
</item>

<item>
<title>Temporal - 下個世代的 Date</title>
<description><![CDATA[<p>這篇文章寫到快寫完的時候，決定到 <a href="http://modernweb.tw/">Modern Web 2017</a> 分享，所以就比較晚發佈 ，其實 Modern Web 演講內容比較多，文末有放相關參考資料。</p>
<p>JSConf EU 2017 前陣子放出演講影片，蠻多場次都不錯，這篇要主要是從其中的一場演講而來，演講是「 The Past, Present, and Future of JavaScript Date and Time APIs」，講者是 Matt Johnson，<a href="http://momentjs.com/">Moment.js</a> 的作者，下面是這場演講的影片：</p>
<div class="embed_16_9">
  <iframe width="853" height="480" src="https://www.youtube.com/embed/aVuor-VAWTI?rel=0" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>長度不長，推薦可以看一下，主要是在談 JavaScript 的 Datetime，提出這老東西的問題，我覺得可以稱為 WAT JavaScript 的 Datetime 篇，像是 0 起始的月份、不支援 Time Zone、難以運算、是 mutable 物件等等，接著介紹了目前檯面上比較多人用的幾個 library 和他們的特色，都是品質不錯的 library，有需求的可以從中選用，包括了：</p>
<ul>
<li><a href="http://momentjs.com/">Moment.js</a></li>
<li><a href="https://date-fns.org/">date-fns</a></li>
<li><a href="https://js-joda.github.io/js-joda/">js-joda</a></li>
</ul>
<p>最後則是提到他們目前在進行的，改進 JavaScript Datetime 的計畫，也就是新的 ECMAScript Datetime 的 proposal，叫 <a href="https://github.com/tc39/proposal-temporal">temporal</a>，除了 Matt Johnson 之外，還有一位 Microsoft 的 Maggie Pint 也是目前草案的主力推手，他的 blog 上就有兩篇相關的<a href="https://maggiepint.com/2017/04/09/fixing-javascript-date-getting-started/">文</a><a href="https://maggiepint.com/2017/04/11/fixing-javascript-date-web-compatibility-and-reality/">章</a>，裡面有列出目前 <code>Date</code> 的主要問題：</p>
<ol>
<li>不支援 timezone，只有 UTC 和 local</li>
<li>Parser （轉譯日期字串轉成日期物件）的行為不可靠且難以使用</li>
<li>Date object 是 mutable 物件</li>
<li>日光節約時間的行為無法預期</li>
<li>日期計算 API 很難用</li>
<li>不支援 <a href="https://jonathanou.wordpress.com/2005/06/02/gregorian-calendar/">Gregorian</a> 以外的日曆（例如農曆）</li>
</ol>
<p>事實上，目前的 Date 物件，當初 Brendan Eich 因為時間緊迫，所以 Datetime 的 API 是直接參考 Java 的，當時是 1995，參考的應該是 Beta 版 Java 的 <code>java.util.Date</code>，後來 1996 年 1 月 Java 1.0 發佈，但是到了 1997 年 2 月的 Java 1.1 發佈時，<code>java.util.Date</code> 大部分的設計都被捨棄了，然後 1997 年 6 月，ECMAScript 標準 1.0 發佈，結果這個在 Java 語言只活了 1 年多的設計，就活在 JavaScript 世界活了 20 年之久，相信有用過的人都能多少都知道使用起來的痛苦。</p>
<p>不過要改善 JavaScript 從來就不是一件容易的事情，最大的困難點就是你不能隨便改動任何已有的東西，像是已經存在 20 年的 <code>Date</code>，即使它設計不好，隨便改動都可能造成大量的網站壞掉，不像是 Java 1.0 升級到 Java 1.1 那樣，各自用各自的，在改善 JavaScript 時基本上就是要當成有人從不升級，不能有 broken change，最簡單的方法就是增加新的東西，而不要去修改舊的，這也是目前 temporal 的方向（其實 ES 5.1 後，舊有的東西該修的東西大概都修完，之後就是一直加新的而已），在 draft 文件已經有一點基礎和預期的 code sample 了：</p>
<pre><code class="language-javascript">var ldt = new CivilDateTime(2017, 12, 31, 23, 59);

var addHours = new CivilDateTime(2017, 12, 31, 23, 00)
    .add(2, 'hours');

var zdt = ldt.withZone('America/New_York');
</code></pre>
<p>可以看到有方便的加減時間的 API、immutable 特性、還有時區支援等等。事實上這份草案還非常初步而已，還缺非常多細節，預期會有的物件目前已經有八種了，不過這八種物件的 API 也都還沒定義完，不過也正因為如此，想參與的人反而這時候比較有機會提供想法，推薦有興趣的人可以關注關注，給點意見。</p>
<p>最後列一些參考文件：</p>
<ul>
<li>Web Rebels 2017 <a href="https://twitter.com/jxxf">@jxxf</a> 的「<a href="https://www.webrebels.org/#talk-8">Time and Time Again: Fixing Dates in JS</a>」 花了很多時間在講 JavaScript Date 缺少的 concept</li>
<li>林信良（良葛格）介紹 Java 的 Joda-Time 和 JSR310 的<a href="http://www.codedata.com.tw/tag/jodatime/">相關文章</a>，Joda-Time 是 Java 上很廣為使用的時間套件，由 Stephen Colebourne 為主開發的，他也參與了 <a href="https://jcp.org/en/jsr/detail?id=310">JSR 310: Date and Time API</a> 的制訂，並在 JDK 8 開始可以用</li>
<li>temporal 目前主要作者之一的 Maggie Pint 的文章：<a href="https://maggiepint.com/2017/04/11/fixing-javascript-date-web-compatibility-and-reality/">Fixing JavaScript Date - Web Compatibility and Reality</a></li>
<li><a href="https://www.youtube.com/watch?v=oVVXW7lmwtw">Understanding Dates, Times, and Time Zones, with Maggie Pint, Matt Johnson, and Jon Skeet</a></li>
</ul>
]]>

</description>
<link>https://blog.othree.net/log/2017/08/12/temporal-is-next-date/</link>
<guid>https://blog.othree.net/log/2017/08/12/temporal-is-next-date/</guid>
<category>script</category>
<pubDate>Sat, 12 Aug 2017 10:41:06 +0800</pubDate>
</item>

<item>
<title>WAT JavaScript Date</title>
<description><![CDATA[<p>週四在 Modern Web 2017 分享的投影片</p>
<script async="async" class="speakerdeck-embed" data-id="5cf2c2b7e3734425b660781da7a9e57a" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js">/* A_A */</script>
]]>

</description>
<link>https://blog.othree.net/log/2017/08/12/wat-javascript-date/</link>
<guid>https://blog.othree.net/log/2017/08/12/wat-javascript-date/</guid>
<category>script</category>
<pubDate>Sat, 12 Aug 2017 00:13:59 +0800</pubDate>
</item>

<item>
<title>iPad Pro 10.5-inch</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35936571200/" title="iPad Pro 10.5 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4353/35936571200_fc44613220_b.jpg" width="1024" height="683" alt="iPad Pro 10.5, " srcset="https://farm5.staticflickr.com/4353/35936571200_fc44613220_b.jpg 1024w, https://farm5.staticflickr.com/4353/35936571200_e0c6c415db_h.jpg 1600w" /></a></p>
<p>本來其實就一直想要為了四喇叭升級 iPad Pro 了，不過手上機器還可以用就沒下手，最近因緣際會終於要下手升級了，考慮了一陣子卻遲遲無法決定要買 12.9 吋還是剛發表的新款 10.5 吋，直到前天終於我買了 10.5 吋，兩個推手：</p>
<ol>
<li>有 n 個人跟我說 12.9 吋太重，雖然我去店面拿起來感覺是還好；</li>
<li>我自己店面試用有覺得體積是有點過大。</li>
</ol>
]]>

<span class="extended"><a href="https://blog.othree.net/log/2017/08/03/ipad-pro-105-inch/">閱讀 「iPad Pro 10.5-inch」 全文</a></span>

</description>
<link>https://blog.othree.net/log/2017/08/03/ipad-pro-105-inch/</link>
<guid>https://blog.othree.net/log/2017/08/03/ipad-pro-105-inch/</guid>
<category>buy</category>
<pubDate>Thu, 03 Aug 2017 22:17:48 +0800</pubDate>
</item>

<item>
<title>日本橋人形町</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35737121375/" title="日本橋 by othree, on Flickr"><img src="https://farm5.staticflickr.com/4238/35737121375_528bc4b723_b.jpg" width="1024" height="683" alt="日本橋, " srcset="https://farm5.staticflickr.com/4238/35737121375_528bc4b723_b.jpg 1024w, https://farm5.staticflickr.com/4238/35737121375_659ce1f602_h.jpg 1600w" /></a></p>
<p>前陣子去東京有些時間可以自己安排，後來因為也沒特別有什麼目標，就決定排個可以比較悠閒的行程，就是去人形町逛逛，其實很早之前就知道人形町了，後來真的比較有印像是看了新參者這部小說，這本小說的舞台就圍繞在人形町，後來阿部寬有主演日劇版，更是大大帶起該地區最近的知名度，除了新參者之外，我偶爾會看有吉君的正直散步，也是有一兩集散步到那附近，所以就把目標放在人形町了。</p>
]]>

<span class="extended"><a href="https://blog.othree.net/log/2017/08/01/nihombashi-ningyocho/">閱讀 「日本橋人形町」 全文</a></span>

</description>
<link>https://blog.othree.net/log/2017/08/01/nihombashi-ningyocho/</link>
<guid>https://blog.othree.net/log/2017/08/01/nihombashi-ningyocho/</guid>
<category>diary</category>
<pubDate>Tue, 01 Aug 2017 22:00:29 +0800</pubDate>
</item>

<item>
<title>SVG</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/35882767130/" title="SVG by othree, on Flickr"><img src="https://farm5.staticflickr.com/4300/35882767130_abb5a7e7b3_b.jpg" width="1024" height="782" alt="SVG" srcset="https://farm5.staticflickr.com/4300/35882767130_2848f09cbc_k.jpg 2x" /></a></p>
<p>最近網站的 icon 都盡量改用 SVG 向量檔了，網路上也有不少資源，像是 <a href="https://material.io/icons/">Material Icons</a>，累積了一些心得可以記錄一下，其實早在 GitHub 開使用 icon font 之前，大部分的瀏覽器就都有支援 SVG 了，只不過當時的支援還不夠完備，會各自有一些<a href="http://voormedia.com/blog/2012/10/creating-svg-vector-graphics-for-maximum-browser-compatibility">問題</a>，這應該也是 Github 當年不先用 SVG，而是用 icon font 先檔了幾年的主因，總之現在比較不用擔心這些問題了，所以 GitHub 又開槍轉用 SVG icon 了。</p>
<p>GitHub 的用法是 inline SVG 為主，我自己則是用 <code>&lt;picture&gt;</code> 比較多：</p>
<pre><code class="language-html">&lt;picture&gt;
  &lt;source srcset=&quot;/path/to/icon.svg&quot; type=&quot;image/svg+xml&quot;&gt;
  &lt;img src=&quot;/path/to/icon.png&quot; alt=&quot;&quot; width=&quot;32&quot; height=&quot;32&quot; /&gt;
&lt;/picture&gt;
</code></pre>
<p>CSS Trick 有一篇文章 <a href="https://css-tricks.com/a-complete-guide-to-svg-fallbacks/">A Complete Guide to SVG Fallbacks</a> 則介紹了各種在網頁內放入 SVG 圖檔的古老方法，用 <code>&lt;picture&gt;</code> 是比較新的，沒列在其中，而我是為了向下相容選擇用 <code>&lt;picture&gt;</code>，因為支援<code>&lt;picture&gt;</code>標籤的瀏覽器都很新了，對於 SVG 的支援度很夠，剩下少數（大概都是 IE）就讓他直接吃 png 之類的（PS: pngquant 處理過的 PNG 很多可以直接在 IE6 上顯示透明色），這樣用起來就像是一般 <code>&lt;img&gt;</code> 一樣，SVG 檔可以先用 <a href="https://github.com/svg/svgo">svgo</a> 工具處理過，除此之外，我通常會先用 Adobe Illustrator 把不必要的圖層階層刪除，圖層在 SVG 原始碼裡面通常是會 <code>&lt;g&gt;</code> 標籤，另外也記得要把圖層名稱（id）改成 ASCII only 的名稱，甚至直接編輯原始碼刪除 id，因為 svgo 不會處理這部分。</p>
<p>用外部 SVG 檔案好處是可以善用 browser cache 減少傳輸量，尤其是大量重複使用的圖片，不過也會犧牲一些 SVG 的特性，例如會因此不能直接用 CSS 來調整樣式，做 transition，做動畫等等，所以有時候也是會用 inline SVG，就可以搭配 CSS、JS 弄出很多不錯的效果（Safari 偶爾還有遇到無解 bug），不過要讓 inline SVG fallback 回一般圖片就比較麻煩些了，在做這件事之前可以先看一下是不是有需要<a href="http://caniuse.com/#feat=svg-html5">支援</a>，以前是 iOS 不支援，現在還有機會碰到的大概還是 IE（6-8）吧，總之，如果有需要的話，就是參考 CSS Trick 的 <a href="https://css-tricks.com/svg-fallbacks/">SVG Fallbacks</a> 這篇文章，使用</p>
<pre><code class="language-html">&lt;svg width=&quot;96&quot; height=&quot;96&quot;&gt;
  &lt;image xlink:href=&quot;svg.svg&quot; src=&quot;svg.png&quot; width=&quot;96&quot; height=&quot;96&quot; /&gt;
&lt;/svg&gt;
</code></pre>
<p>這是個很有趣的技巧，首先 <code>&lt;image&gt;</code> 標籤是<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image">合法的 SVG 元素</a>，所以放在 SVG 不成問題，但是不支援 SVG 的瀏覽器，照理說也不應該認得 <code>&lt;image&gt;</code> 標籤啊，其實，<code>&lt;image&gt;</code> 在很久以前就一直是 <code>&lt;img&gt;</code> 的別名了，甚至在 WHATWG 的 parse HTML 文件的<a href="https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inbody">流程</a>裡都還有提到處理的方式，而經過測試也都證實了以前的瀏覽器確實是這樣的行為，文裡也有各瀏覽器的行為和支援狀況，不支援 inline SVG 的就會顯示替代的 png 或 jpg 。</p>
<p>文章裡面還有提到背景圖使用 SVG 的處理方式，不過因為我沒這樣使用，所以沒什麼實做到，另外最近也有人用外部 SVG 加上 CSS filter 來改變 <a href="https://codepen.io/noahblon/post/coloring-svgs-in-css-background-images">SVG icon 顏色</a>，不過這太技巧太新了，考慮到支援度我也是沒有用過。</p>
<p>親和力問題的部分，一樣 CSS Tricks 有篇文章 <a href="https://css-tricks.com/accessible-svgs/">Accessible SVG</a> 在講相關的作法，像是用 <code>&lt;title&gt;</code> 加替代文字，加上 <code>role=&quot;img&quot;</code> 等；如果要自己編寫 SVG，W3C 還有份 <a href="http://w3c.github.io/svgwg/specs/svg-authoring/">Authering Guide</a> 可以參考，除了親和力相關的資訊外還有不少技巧可以參考。</p>
<p>最後整理一下，拿到 svg 檔案後我的處理過程：</p>
<ol>
<li>用 Adobe Illustrator 先開來整理一下，修改圖層名稱、刪去合併不必要的圖層</li>
<li>輸出成 SVG 和 1x 解析度的 PNG</li>
<li>SVG 檔用 <code>svgo</code> 最佳化、PNG 會用 <code>pngquant</code> 和 <code>zopflipng</code> 處理過</li>
</ol>
<p>使用方式則還是當成一般外部圖片為主，需要動畫效果才會用 inline SVG。</p>
]]>

</description>
<link>https://blog.othree.net/log/2017/07/29/svg/</link>
<guid>https://blog.othree.net/log/2017/07/29/svg/</guid>
<category>css-html</category>
<pubDate>Sat, 29 Jul 2017 11:14:28 +0800</pubDate>
</item>

<item>
<title>表單 Practice</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34947056856/" title="Form Validation by othree, on Flickr"><img src="https://farm5.staticflickr.com/4274/34947056856_e1ae234f6c_b.jpg" width="500" height="270" alt="Form Validation" srcset="https://farm5.staticflickr.com/4274/34947056856_e1ae234f6c_b.jpg 500w" /></a></p>
<p>這邊是我最近對於表單的一些作法，因為內化還不夠，每次都會漏掉一些，所以花了些時間整理整理，適合的情境不是 single page application 就是了，比較偏傳統形式網頁的表單，然後可能也包括不少大家早就知道(?)的細節就是了。</p>
<p>首先，我現在偏好不用 JavaScript 做表單檢查，而是先做好最基本的 server side 檢查，然後加上 <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation">HTML5 的表單檢查</a>，會這樣決定的主因是：</p>
<ol>
<li>JavaScript 的表單檢查 library 用起來都不太順手，而且不想花時間處理串接，且能少點 library 總是好的；</li>
<li>幾個常用的 type，像是 email, url 比較不需要擔心檢查的 pattern 有不周全的地方，我想很多人都有上網搜尋過這些欄位的 regular expression pettern 的經驗；</li>
<li>支援度已經不是大問題了，事實上我的工作上還需要支援 IE 10, 9 之類的，其實這些非 modern browser 的量都已經非常少了，所以就靠個 server side 檢查對付他們就好，使用體驗稍微差一點也還可以接受，這也是種 graceful degradation（優雅降級）；</li>
<li>HTML5 的表單檢查可以說是 web developer 當年對抗網路標準發展遲緩一大勝利指標，當然應該要好好用一下。</li>
</ol>
<p>而用 HTML5 表單檢查還有個意外的好處是基本的錯誤訊息自動有翻譯（看使用者瀏覽器的語言），另外如果有自製的輸入元件，也有 <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#Validating_forms_using_JavaScript">API</a> 可以串接，當然訊息就要自己提供就是了。</p>
<p>用 HTML5 表單檢查當然也不是完全沒有問題，例如目前 email 欄位還沒有瀏覽器支援 <a href="https://github.com/w3c/html/issues/538">IDN domain 的信箱</a>；另外就是上傳檔案的 file input 的值不能從 server 端直接給，這限制是因為會有安全性問題，而這限制所衍生的問題是：表單送到 server side 檢查後發現有錯誤時（例如 captcha 錯），使用者就一定要重新選取上傳的檔案，對於使用者體驗算是個扣分（而且上傳檔案大的話很花時間，然後另外還有個上傳檔案大小限制、就又是另外一個議題了），要解決這問題一般來說就是靠 JavaScript 做些加強，例如針對 captcha 可以先用 ajax call 檢查 captcha ，正確的話就換個 session token 之類的回來，不過即使這樣，還是逃不了完整的 server side 表單檢查，所以也還要處理 ajax submit 後的表單錯誤訊息顯示。</p>
<p>不管是 server side 檢查後產生的錯誤訊息，還是 ajax call 之前檢查產生的錯誤訊息，理所當然都會放在欄位附近，不過還要讓訊息和欄位之間建立關聯，才好進一步做一些處理，例如使用者有更新欄位值之後會把錯誤訊息隱藏之類的，或許很多人會用父層 DOM 節點加上特殊的 class 包起來找，不過我比較偏好用 <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute"><code>aria-describedby</code></a>，大概會看起像是：</p>
<pre><code class="language-html">&lt;input id=&quot;mail&quot; name=&quot;mail&quot; type=&quot;email&quot; aria-describedby=&quot;mail-field-info&quot; /&gt;
&lt;span id=&quot;mail-field-info&quot;&gt;Required field!&lt;/span&gt;
</code></pre>
<p>這樣只要找的到 <code>#mail</code> 欄位，就可以透過他的 <code>aria-describedby</code> 屬性找到該欄位的相關訊息的 DOM 節點，另外值得注意的是，aria-describedby 值的格式是 <a href="https://www.w3.org/TR/wai-aria/states_and_properties#valuetype_idref_list">IDRefList</a>，不是單一個 ID，而是一個用空白切分的 ID 指標們，所以如果有這種情形，還可以在錯誤訊息的那個 DOM 節點加上  <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role"><code>role=&quot;alert&quot;</code></a> 給它用來辨識，其實就算只有一個 ID 也還是可以加上 role 屬性啦。如果真的需要用透過父層 DOM 節點來找的話，之前研究的結論是可以在預期的父層標籤用 <code>role=&quot;section&quot;</code>來方便定位，用 jQuery 大概會像是：</p>
<pre><code class="language-javascript">$fieldSection = $field.closest('[role=&quot;section&quot;]');
</code></pre>
<p>這個標籤下應該會包括欄位的標籤（label）、欄位的 input element 以及相關的資訊（說明、錯誤訊息）等。</p>
<p>另外還有一點，就是要用 ajax 上傳檔案的話，需要有支援 <a href="http://caniuse.com/#feat=xhr2">FormData</a> 的瀏覽器，並且如果用 jQuery 送 FormData 的話記得要加點設定：</p>
<pre><code class="language-javaascript">contentType: false,
processData: false
</code></pre>
<p>還有就是 ajax 送表單的目標 URL，我目前比較喜歡的作法是讀 <code>&lt;form&gt;</code> 的 <code>action</code> 屬性，也就是和瀏覽器自己送的 URL 一樣，然後透過 HTTP content negotiation 機制來決定回傳的格式，比較正確的作法是看 <code>Accept</code>，以 jQuery 來說，如果要 server 回 JSON 格式的話，可以加上：</p>
<pre><code class="language-javascript">dataType: 'json'
</code></pre>
<p>這樣送出的 request 就會帶上正確的 <code>Accept</code> header，向 server 端要求 <code>application/json</code> ，不過 <code>Accept</code> 的值解析起來比較麻煩些，其實是可以送出說 client 端可以接受多種格式，然後還加上個優先度的，也因此也有很多人是看 <code>X-Requested-With</code>，一般 library 如果是透過 XHR 發的 request 都會有這個 header；還有就是送出的資料格式（Content-Type），即使是 ajax call，我目前也都不用 JSON 了，還是用 <code>application/x-www-form-urlencoded</code> 為主，另外要上傳檔案的話當然一定要用 <code>multipart/form-data</code>，主要是因為：</p>
<ol>
<li>送 JSON 的話就不會是 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Simple_requests">simple request</a> 了，有些時候會比較麻煩，例如 Cross Origin 時會需要發 preflight，然後就可能遇到 AWS 以前不支援 preflight request 的 bug；</li>
<li>用這幾個老的 Content-Type 支援度還是比較高，對於 server 端實做和 client 端實做其實都相對友善一點，例如 jQuery 預設就依然是 form-urlencoded，没特别需求還是用標準一點的格式，特殊需求是例如 GraphQL，不過一般表單發送應該不會走 GraphQL 吧。</li>
</ol>
<p>其實 JSON 雖然已經有 RFC 規範了，不過在 Web 標準的世界還沒相當深入內化，不知道以後有沒有機會更加的內化整合進去。</p>
<p>前面有提到 ajax call 送出的目標 URL 我會偏好從，<code>&lt;form&gt;</code> 裡面讀，不過或許有的情境會讓 ajax call 必須要自己用不一樣的 API URL，這時候我建議還是把 API URL 寫在 <code>&lt;form&gt;</code> 的屬性裡面，這樣可以讓 JavaScript 的邏輯比較乾淨，也不用作什麼 mapping 或是常數來儲存 API 的 URL，維護修改時也不用兩邊檢查，屬性名稱可以用例如：<code>data-action</code> 之類的屬性，<code>data-*</code>屬性正好適合來做這些事情，不但有 DOM API 支援，jQuery 也可以用 <code>.data()</code> method 來讀取，命名上，如果覺得有個標準參考比較好，可以看看 <a href="https://github.com/rails/jquery-ujs">jQuery-ujs</a> 的設計，雖然比較長一點，它用的是：<a href="https://github.com/rails/jquery-ujs/blob/master/src/rails.js#L117"><code>data-ujs:submit-button-formaction</code></a>，我是覺得有些不正確啦，畢竟要送出表單不一定是點擊 submit button。</p>
<p>其實假設送出表單的動作都是滑鼠點擊 submit button 這是個親和力問題，如果只把 ajax call 送的函式 bind 在 submit button 的 click 事件上，這其實是不太好的，因為其實瀏覽器預設的行為是可以在很多地方用鍵盤送出表單，例如在 text input 上按下 Enter 鍵，或是在 submit button 上按下空白鍵之類的，所以針對表單還是要去 bind form submit 事件才是正解，至於 jQuery-ujs，其實也是這樣做的，它是用 delegate event 的形式去監聽傳遞到 document 上的 submit 事件，然後才去做後續的處理，只是命名上讓人覺得不太正確。</p>
<p>最後一項，前面說不用 JavaScript 做表單檢查（不看自訂輸入元件的話），其實有一個例外，就是上傳檔案的大小檢查，因為沒做對使用體驗的影響比較大，然後就是要還要記得針對 ajax call 送表單加上 <a href="https://tools.ietf.org/html/rfc7231#section-6.5.11">HTTP 413</a> Status Code 的錯誤訊息處理。</p>
]]>

</description>
<link>https://blog.othree.net/log/2017/06/13/form-practice/</link>
<guid>https://blog.othree.net/log/2017/06/13/form-practice/</guid>
<category>css-html</category>
<pubDate>Tue, 13 Jun 2017 22:42:42 +0800</pubDate>
</item>

<item>
<title>a11y</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34944175192/" title="Pa11y Dashboard by othree, on Flickr"><img src="https://farm5.staticflickr.com/4251/34944175192_71a6475ca3_b.jpg" width="1024" height="595" alt="Pa11y Dashboard, " srcset="https://farm5.staticflickr.com/4251/34944175192_71a6475ca3_b.jpg 1024w, https://farm5.staticflickr.com/4251/34944175192_32efc09322_h.jpg 1600w" /></a></p>
<p>標題的 a11y 其實是 accessibility （親和力）的縮寫，現在英文世界似乎很大量的使用這個簡稱，今年的 JSConf EU 前陣子放出演講錄影，其中有一場是在講網路親和力的議題「YES, your site too can (and should) be accessible.」：</p>
<div class="embed_16_9">
<iframe width="853" height="480" src="https://www.youtube.com/embed/H4FzW9oFObs?rel=0&amp;showinfo=0" frameborder="0" allowfullscreen="allowfullscreen"></iframe>
</div>
<p>講者是 Laura Carvajal，在 <a href="https://ft.com">Financial Times</a> 工作，而這場演講就是他們改進 ft.com 網站親和力的過程和一些想法，我覺得精華在後半，前面是介紹自動化工具 <a href="http://pa11y.org/">Pa11y</a>，a11y 是 accessibility，至於首字母的 <strong>P</strong>，看 README 應該是 pal 的意思；他們把這個自動化工具整合進他們的開發流程，然後慢慢的修改，直到把回報的問題都修完，其實現在自動化工具已經很強了，連顏色對比度夠不夠都能算出來（瀏覽器的開發工具以後也會有相關資訊），不過要驗證親和力做的如何，還是有很大量的驗證其實是需要手動測試。</p>
<p>手動測試的部分他們是請了 <a href="http://digitalaccessibilitycentre.org/">DAC</a> (Digital Accessibility Centre) 來做，演講中還有一些測試者的測試影片，每位測試者都會先說他身體有怎樣的障礙，然後他邊測試會邊口述他在做什麼，遇到怎樣的問題，建議可以怎麼處理，感覺就是很專業的測試員。總之，在他們處理完所有 Pa11y 檢測到的問題後，才請 DAC 做親和力評估驗證，結果還是收到了一份兩百多頁的測試報告，回報了各種 ft.com 網站上的親和力問題，之後又花了幾個月的時間來處理這些問題，最後終於得到 DAC 的<a href="http://digitalaccessibilitycentre.org/index.php/financial-times">認證</a>，這份認證資訊還蠻完整的，還說明了他們認證時網站的狀況，還有哪些問題待解決，甚至連可能會使用到但是還沒處理過親和力問題的同組織的網站（服務）都有列出來，另外在 ft.com 的<a href="https://www.ft.com/accessibility">親和力聲明</a>也可以看到 DAC 的認證。</p>
<p>接著 Laura Carvajal 介紹到如何實際體會（參與）這些親和力問題，其中一個很經典的狀態就是只用鍵盤做所有的控制，他提供了一些強迫自己只能用鍵盤操控的方法，並且在這種狀態下工作，其它還有像是使用 Mac 的 VoiceOver 做為 ScreenReader、使用 Windows 的高對比模式等等，他建議可以實際自己去體驗看看的，甚至強迫自己使用一陣子，會對這些問題更有體會，除此之外，他還透過一些活動來讓其他公司內的人也來參與，像是模擬一個障礙者會面臨的環境，以他的例子來說是把網頁模糊化，模擬視力障礙的使用者狀態，然後在這個狀態下請人去完成一些任務，像是填一個表單，並且有提供些獎勵增加參與人數，記得他們是提供 Amazon Credit，這樣可以讓更多人體會到需要依靠輔具來上網的不便，長久下來也可以讓這些工作的推動更加順利。</p>
<p>這幾天我也試著裝起了 <a href="https://github.com/pa11y/dashboard">Pa11y Dashboard</a> 開始做些檢測，看到的 Error 加上 Warning 數量真是有點驚人，再來慢慢處理吧...</p>
]]>

</description>
<link>https://blog.othree.net/log/2017/06/07/a11y/</link>
<guid>https://blog.othree.net/log/2017/06/07/a11y/</guid>
<category>web</category>
<pubDate>Wed, 07 Jun 2017 00:09:19 +0800</pubDate>
</item>

<item>
<title>Graceful Degradation Background</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34733787991/" title="Rockman by othree, on Flickr"><img src="https://farm5.staticflickr.com/4224/34733787991_2076c3d7b5_b.jpg" width="1024" height="1024" alt="Rockman" srcset="https://farm5.staticflickr.com/4224/34733787991_2076c3d7b5_b.jpg 1024w, https://farm5.staticflickr.com/4224/34733787991_0ee7b95f3b_h.jpg 1600w" /></a></p>
<p>昨天解了一個其實困擾蠻久的問題，就是在蘋果開始支援 Retina Display（HiDPI）之後，網站上使用的圖片也跟著要提升解析度，一般網頁會使用的圖片基本上就是 <code>&lt;img /&gt;</code> 標籤的圖片和用 CSS 設定的背景圖，對於 <code>&lt;img /&gt;</code> 標籤來說，提供高解析度的圖片並不會有向下相容的問題，當然瀏覽器和作業系統不支援的，抓了比較大的圖下來是比較浪費，也為此有 <code>&lt;picture&gt;</code> 標籤、<code>srcset</code> 屬性和 <a href="http://blog.othree.net/log/2016/02/28/device-pixel-ratio-header/">Client Hints</a> 等標準來處理這個問題，不過我的需求只要圖片都能正常且正確的顯示。</p>
<p><code>&lt;img /&gt;</code> 標籤只要有設定寬高，圖片顯示出來就會是預期的大小，但是 <code>background-image</code> 就不是了，在 <code>background-size</code> 出來前，背景圖多大，它在網頁上就會照那樣的尺寸下去畫，所以在不支援 <code>background-size</code> 的瀏覽器（IE6-8）上用 HiDPI 的背景圖就會很悲劇，雖然可以用 media query 來處理，不過解析度相關的 media query，如果要考慮到以前的瀏覽器，變化有點多，從早期的 device pixel ratio 到 dppx 到現在 resoulution 用的 dpi，還要加上 vendor prefix，自己寫起來有點痛苦，而且原始碼變醜很多，當然，如果有用 PostCSS 就可以用 autoprefixer 解決，不過其實我不太喜歡寫 Media Query，所以都是能少則少（針對 CSS 的 polyfill 也是不太喜歡用），並且有些舊的專案沒有 PostCSS，所以就一直有這個問題，以前的處理方法就是幾種：</p>
<ul>
<li>真的寫 Media Query</li>
<li>用 <code>&lt;img /&gt;</code> 標籤模擬背景圖，也很麻煩（也可以用 polyfill，不過個人不想用）</li>
<li>大家一起用標準解析度的圖</li>
</ul>
<p>這些方法對我來說都算是 workaround 的方式，一直想找個漂亮乾淨一點的解法，直到昨天終於想到了，首先整理一下我的需求：</p>
<ul>
<li>可以有兩張圖不同解析度的圖</li>
<li>不要用 Media Query</li>
<li>有機會支援 HiDPI 的環境就用 HiDPI 的圖</li>
<li>舊瀏覽器顯示正確</li>
</ul>
<p>其實這些需求可以簡化成：**不支援 <code>background-size</code> 的就乖乖看低解析度的圖片吧**，其中隱含著一個現實狀況是，不支援 <code>background-size</code> 的瀏覽器都只能在不支援 HiDPI 的環境下跑，實做上基本的構想是先寫好一個基本背景的定義，然後再加上一個只有新瀏覽器看的懂得定義，這構想有了很久，卻到昨天才想到怎麼寫，結果如下：</p>
<pre><code class="language-css">background: #123456 url('the-bg.png') center center;
background: #123456 url('the-bg@2x.png') center center/32px 32px;
</code></pre>
<p>用了 <code>background</code> 可以把全部背景相關屬性寫在一起，而且如果解析失敗就整條失效的特性，以前因為我都會 <code>background-size</code> 單獨寫（有另外的原因），這種寫法就落入我的盲區，所以過了這麼久才想到，不過這方法不是萬能，還有些限制和使用時機：</p>
<ul>
<li>有需要支援 IE6-8 才需要，IE9 以上就有支援 <code>background-size</code></li>
<li>不考慮 HiDPI 時其實不需要 <code>background-size</code>，例如固定大小區塊的背景、用背景的 icon、有重複排列的背景等</li>
<li><code>background-size: cover;</code> 依然需要靠 polyfill 之類的來處理</li>
</ul>
<p>想出來之後，有開了 IE8 來測試，結果一如預期，這樣應該是 IE6-7 也會正確吧。</p>
]]>

</description>
<link>https://blog.othree.net/log/2017/05/24/graceful-degradation-background/</link>
<guid>https://blog.othree.net/log/2017/05/24/graceful-degradation-background/</guid>
<category>css-html</category>
<pubDate>Wed, 24 May 2017 22:05:27 +0800</pubDate>
</item>

<item>
<title>Telegram Instant View</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34366696420/" title="Telegram Instant View by othree, on Flickr"><img src="https://farm5.staticflickr.com/4194/34366696420_ced4830286_b.jpg" width="1024" height="592" alt="Telegram Instant View, " srcset="https://farm5.staticflickr.com/4194/34366696420_ced4830286_b.jpg 1024w, https://farm5.staticflickr.com/4194/34366696420_83f48bbf29_h.jpg 1600w" /></a></p>
<p>Telegram 前幾天發佈了 4.0，有幾個比較大的功能，包括了 <a href="https://telegram.org/blog/video-messages-and-telescope">Video Message</a>、<a href="https://telegram.org/blog/payments">Payment for Bots</a> 還有就是 <a href="https://telegram.org/blog/instant-view">Instant View</a> 準備要<a href="https://telegram.org/blog/instant-view-contest-200K">開放給所有網頁使用</a>了，Instant View 目的和 Facebook 的 Instant Article 以及 Google 的 AMP 一樣，都是為了提升使用者體驗，讓使用者能夠快的看到文章的內容，不過之前沒有開放，所以一直不知道背後的運作原理是怎樣，直到這次 4.0 發佈才得以一窺其原理，和 Instant Article 與 AMP 不一樣，不再是提供另一個新的版本，而是透過一種新的 template 語言來協助 Telegram service 把自己的網頁內容轉譯成 Instant Article 的內容（Instant View page object），不完全算是程式語言，裡面比較像是一些定義，加上用 <a href="https://zh.wikipedia.org/zh-tw/XPath">XPath</a> 來做文件內容的選取，蠻意外會用 XPath 的，還好我對 XPath 有點經驗，就花了一點時間研究了一下，也把自己 blog 的 tempalte 基本版做出來了：</p>
<pre><code>?exists:  //article/div[@id=&quot;comments&quot;]

author:  &quot;othree&quot;
channel: &quot;@othree&quot;

body:     //article
title:    $body//h3[1]

cover: $body/section[@itemprop=&quot;articleBody&quot;]/p[1]/a[@itemprop=&quot;image&quot;]/img

published_date: $body/header/time[@itemprop=&quot;datePublished dateModified&quot;]/@datetime

@remove: //article/header
@remove: //article/footer
@remove: //article/div[@id=&quot;comments&quot;]
@remove: //noscript
@remove: //a[has-class(&quot;dsq-brlink&quot;)]
</code></pre>
<p>語法還算蠻好理解的，官方也提供了幾個有完整註解的<a href="https://instantview.telegram.org/samples/">範例</a>，仔細一看似乎之前其實也只有 medium 是非官方有支援的網站，也因為這個實做方式，對不同的網站就要有不同的 template 來處理，所以官方辦了個競賽，搶先替<a href="https://instantview.telegram.org/contest">清單上的網站</a>做出可用的 template 就會有獎金，目前個人網站雖然已經可以在官方的 editor 做 template、驗證並發測試連結，不過還要等 domain 被加進白名單後才會真的啟用，目前這個關卡還沒開放就是。</p>
<p>其實我是比較喜歡這種實做方式的，不用為了增加支援一個新的網路服務就多做一個版本，不會影響原本的網頁原始碼，不會讓  <code>&lt;head&gt;</code> 越來越肥大，當然缺點就是網站改版，HTML 結構有變化的話就要跟著修改 template，不過我是認為這個實做方法對於網路生態是比較好一些的。</p>
]]>

</description>
<link>https://blog.othree.net/log/2017/05/21/telegram-instant-view/</link>
<guid>https://blog.othree.net/log/2017/05/21/telegram-instant-view/</guid>
<category>web</category>
<pubDate>Sun, 21 May 2017 23:45:17 +0800</pubDate>
</item>

<item>
<title>MovableType and CommonMark</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33655820694/" title="Typora by othree, on Flickr"><img src="https://farm5.staticflickr.com/4175/33655820694_e30f901655_b.jpg" width="650" height="622" alt="Typora" srcset="https://farm5.staticflickr.com/4175/33655820694_e30f901655_b.jpg 1024w" /></a></p>
<p>我這邊用的 blog 系統是 <a href="https://www.movabletype.org/">MovableType</a> 不是新聞了，然後也因為用 MovableType 我一直都只能用最初版的 markdown 引擎，沒錯，就是 Daring Fireball 作者 John Gruber 的<a href="http://daringfireball.net/projects/markdown/">那一版</a>，這個版本其實已經可以滿足我大部分的需求了，不過當我想要用 <a href="https://typora.io/">Typora</a> 寫文章的時候，就遇到問題了，Typora 在輸出成 Markdown 文件時，code block 只支援三個 ``` 包起來的 <a href="http://spec.commonmark.org/0.27/#fenced-code-block">Fenced Code Block</a>，而不支援 <a href="http://spec.commonmark.org/0.27/#indented-code-block">Indented Code Block</a>，剛好初版的 Markdown 格式只有 Indented Code Block，兩者其實要比的話，我是比較喜歡 Indented Code Block 的，比較符合 Markdown 的 sense，不過用 Fenced Code Block 有個優點是可以指定程式碼的語言，也因此才能夠有 syntax highlight 的效果。</p>
<p>總之，因為這個原因，用 Typora 寫技術文章對我來說就很不方便，一直以來都有想解決這個問題，前兩天還去 Typora 發 issue 說希望他們可以支援 Indented Code Block，結果發完沒多久，躺在床上快要睡覺的時候突然想到，CommonMark 這麼多語言有實做，搞不好有 Perl 的啊，結果快速搜尋了一下，還真的有一個 <a href="https://github.com/nwellnhof/perl-commonmark">perl-commonmark</a>，橋接 Perl 和 <a href="https://github.com/jgm/cmark">cmark</a>，也有發佈到 CPAN 上，當下心裡就盤算著，隔天起來要來把它接到 MovableType 去看看。</p>
<p>結果隔天實做起來是沒花我太多時間，雖然對 Perl 不熟，但是可以直接拿初版 Markdown.pl 來修改，原本的 Markdown.pl 這個檔案裡面實際上自己是一個 Markdown 的 Perl Package，同時也可以作為 MovableType 的 plugin script，我只需要把 plugin script 的部分留下，然後把最後做轉換的 function 換掉就好了，當然系統要裝好 cmark 和 Perl 的 CommonMark，cmark 應該很多環境都有了，我在 archlinux 上是直接用 pacman 裝：</p>
<pre><code class="language-bash">pacman -S cmark
</code></pre>
<p>然後 CommonMark 是用 CPAN 裝，本來要用 cpanminus 的不知道為何用它會抓不到 package：</p>
<pre><code class="language-bash">sudo CPAN CommonMark
</code></pre>
<p>我的 nginx 跑 CGI 時用的 perl 不是系統預設位置的，所以 CPAN 執行檔的路徑我是特別指定給他的，這樣 MovableType 執行的時候才找的到 CommonMark Module，實際上沒花多少功夫，我就把 MovableType 和 CommonMark 串起來了，當下心情真的是非常難以言喻，一來是這個問題其實存在已經許久了，二是我竟然把第一個支援 Markdown 的部落格系統接上 2017 年最新的 CommonMark 實做，雖然現在應該是也幫不到什麼人了。不過沒高興多久，就發現在 UTF-8 字元似乎有些狀況，有中文的文章會爛掉，或是 Dashboard 那頁的文字會變亂碼，後來為了這個問題又弄了好幾個小時，推測問題應該是因為 cmark 那邊回來的字串已經失去編碼的 metadata，所以在做 summary 切文字的時候，就會出現切錯地方的狀況，花了很多時間交叉比對和測試，最後的結果只是用 Perl 的 Encoding 把 cmark 傳回來的字串重新 encode 過而已，其實很簡單。除此之外，我其實還有試著想接看看 <a href="https://github.com/github/cmark">cmark-gfm</a>，因為它還多支援了 Table，不過幾次測試都不太順利，就沒繼續嘗試下去了。</p>
<p>目前的成果放在 GitHub 上，取名叫 <a href="https://github.com/othree/MT-CommonMark">MT-CommonMark</a>，附上簡單的安裝說明，暫時是沒打算發去 movabletype.org 那邊。</p>
<p>做好之後 MT-CommonMark 之後，我就開始在部落格上測試程式碼的 syntax highlight了，研究一陣子之後選擇的是 <a href="http://prismjs.com/">prismjs</a>，選擇它的原因很多，不過有兩個是比較主要的：</p>
<ul>
<li>作者有 <a href="http://lea.verou.me/">Lea Verou</a></li>
<li>支援的 class name 格式剛好和 cmark 輸出的一樣</li>
</ul>
<p>結果兩者也很順利的搭配起來，中間就沒有再遇到什麼問題了。</p>
]]>

</description>
<link>https://blog.othree.net/log/2017/05/07/movabletype-and-commonmark/</link>
<guid>https://blog.othree.net/log/2017/05/07/movabletype-and-commonmark/</guid>
<category>web</category>
<pubDate>Sun, 07 May 2017 09:47:24 +0800</pubDate>
</item>

<item>
<title>Test CommonMark syntax</title>
<description><![CDATA[<p>Fenced code block</p>
<pre><code class="language-javascript">var a = 1;
</code></pre>
]]>

</description>
<link>https://blog.othree.net/log/2017/05/05/test-commonmark/</link>
<guid>https://blog.othree.net/log/2017/05/05/test-commonmark/</guid>
<category>about</category>
<pubDate>Fri, 05 May 2017 11:17:36 +0800</pubDate>
</item>

<item>
<title>Vim Packages</title>
<description><![CDATA[<p>Vim 8 有兩個我覺得比較大的<a href="http://vimhelp.appspot.com/version8.txt.html">新功能</a>，一是開始有 <a href="http://vimhelp.appspot.com/channel.txt.html">Asynchronous I/O</a>，二是開始有官方的 package 機制了，這篇主要想介紹這官方的 package 機制，眾所周知，以前 Vim 實在很難管理自己裝的 Vim script 和 plugin（後文以 plugin 為主），因為原始的設計是自己把檔案丟到 <a href="http://vimhelp.appspot.com/options.txt.html#%27runtimepath%27">runtime 目錄</a>下的對應位置，裝的東西一多，就會開始混亂起來，最常發生的就是越來越多垃圾，不知道還需不需要用，再來就是可能會有檔名重複的情形，所以升級某個 plugin 遇到有檔名重複時，直接覆蓋過去可能也會出錯，這個問題直到 Tim Pope 推出 <a href="https://github.com/tpope/vim-pathogen">pathogen.vim</a> 後才被解決，pathogen 是藉由修改 <code>runtimepath</code> 變數（有點像是系統的 <code>PATH</code> 環境變數，可以有多個路徑）來讓不同的 Vim plugin 可以放在各自的子目錄內，從此一舉解決了 Vim plugin 的管理問題，當然現在很多人用的 <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a>、<a href="https://github.com/Shougo/neobundle.vim">neobundle</a>、<a href="https://github.com/junegunn/vim-plug">vim-plug</a> 等，基礎原理應該都是一樣的。</p>
<p>Vim 8 推出的 package 機制，雖然其基本原理也是增加 runtimepath，不過它其實定位和 pathogen 不一樣，設計上是再高一個階層，不過也因此和 pathogen 的路徑設計不相容，pathogen 之類的都是把 plugin 分目錄放到 <code>~/.vim/bundle</code> 這，例如：</p>
<pre><code>~/.vim/bundle/html5.vim
~/.vim/bundle/yajs.vim
</code></pre>
<p>然後會去把這些路徑加到 <code>runtimepath</code> 內（有些 plugin 是全自動、有些要設定、有些可以加條件），寫成 glob 型式大概是 <code>~/.vim/bundle/*</code>，不過新的 package 定義上是數個 plugin 的組合，所以一個 package 下是可能有多個 plugin 的，放 package 的路徑一樣在 <code>~/.vim</code> 下面，預設在 <code>~/.vim/pack</code>，也可以修改 <code>packpath</code> 來換位置，不過東西不是直接放進去就好了，一開始會被加進去 runtimepath 的路徑實際上是 <code>~/.vim/pack/*/start/*</code>，在這個 glob 表示式中，第一個 <code>*</code> 是 package 層，第二個 <code>*</code> 則是 package 裡面的 plugins，例如我可以建立一個自己在編輯 JavaScript 時用的 plugin 組合，就先叫 <strong>my-js</strong> 好了，我就把東西都丟到 <code>~/.vim/pack/my-js/start/*</code> ，大概像是：</p>
<pre><code>~/.vim/pack/my-js/start/yajs.vim
~/.vim/pack/my-js/start/javascript-libraries-syntax.vim
~/.vim/pack/my-js/start/simple-javascript-indenter
</code></pre>
<p>至於中間的 <code>start</code> 則是表示啟動就會去讀進來的意思，類似於以前 pathogen 的流程，而除了 <code>start</code>之外，還有一個路徑是 <code>opt</code>，是 optional 的意思，放在 <code>opt</code> 下面的 package 不會在啟動時就讀進來，而是要下 <code>packadd</code> 指令，例如 <code>packadd foo</code> 就會去找 <code>~/.vim/pack/*/opt/foo/</code> 這些位置有沒有東西可以用，文件上提供的一個使用情境是根據 Vim 版本決定要讀入哪一個 optional plugin，可以用 Vim script 做一些判斷來決定要讀那些，或是使用者自己執行 packadd，不過我思考一下是覺得後者的情境似乎不太有用，所以這個設計主要的目標應該還是做一些自動化判斷並讀入 plugin 為主吧。</p>
<p>當然，package 也可以只包一個 plugin，理論上可以直接這樣發佈 Vim plugin，不過現在這樣發佈，就會不相容於目前使用量最大的 pathogen 架構，所以我也還沒看過有人這樣直接發佈的，像 vim-css3-syntax 就還是用舊的資料匣架構，但是在 README 內加上對應 Vim package 的<a href="https://github.com/hail2u/vim-css3-syntax/blob/master/README.md#vim-package">安裝方式</a>，這是我目前覺的對於 Vim package 普及化的最大阻力；另外還有一個缺點是，如果完全用 Vim package 機制來裝 plugin，那其實也沒有地方紀錄你安裝了那些東西，和最早的時候，或是單純只有 pathogen 時一樣，要裝新機器什麼的就有點麻煩。目前我是覺得 Vim package 還不會很快普及，它比較像是出來取代 pathogen 的功能，應該接著要等有基於 Vim package 的 package manager 出來才會開始有普及的機會吧。</p>
]]>

</description>
<link>https://blog.othree.net/log/2017/05/02/vim-packages/</link>
<guid>https://blog.othree.net/log/2017/05/02/vim-packages/</guid>
<category>vim</category>
<pubDate>Tue, 02 May 2017 23:05:39 +0800</pubDate>
</item>

<item>
<title>日本自駕</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/34028951701/" title="沖繩 by othree, on Flickr"><img src="https://farm3.staticflickr.com/2805/34028951701_c6d1936940_b.jpg" width="1024" height="683" alt="沖繩" srcset="https://farm3.staticflickr.com/2805/34028951701_c6d1936940_b.jpg 1024w, https://farm3.staticflickr.com/2805/34028951701_5720ab1710_h.jpg 1600w" /></a></p>

<p>這篇想要記錄一下第一次去日本自駕，就前陣子去了沖繩一趟，當然就選擇租車自駕，這篇用條列式記錄一下：</p>

<ul>
<li>租車公司是 OTS，因為第一次的關係，所以就盡量走大眾路線</li>
<li>不過 OTS 因為比較大間，位置離機場也比較遠，其實比較花時間</li>
<li>租的車款是 Toyota C-HR，看到有特價加上早鳥，不過也還是比一般車款貴</li>
<li>不免俗的離開租車公司時要刷一下雨刷</li>
<li>大約第二天就不太有左右駕習慣問題了，回國後也沒有左右問題</li>
<li>沖繩比較偏遠，部分路段的路面狀況其實也不好</li>
<li>幾乎所有路口都可以右轉，有右轉道，可能是沖繩才這樣</li>
<li>晚上山路其實沒什麼路燈，交通號誌反光效果超強的，強到覺得會刺眼 <br />
不過一部份應該是因為車燈很亮，倒是號誌都很乾淨是真的</li>
<li>以後應該還想要東北、北海道也去試試看自駕</li>
</ul>

<p>針對 Toyota C-HR 的部分：</p>

<ul>
<li>後座空間真的小、後座車窗也小</li>
<li>四人三個行李箱有點勉強，後行李箱只能放兩個中 size 的行李箱 <br />
一大一中也不行，剩下一個大的是把後座一個位子拉倒才放進去</li>
<li>有個自動切換遠光燈（<a href="http://www.toyota-global.com/innovation/safety_technology/safety_technology/technology_file/active/ahb.html">AHB</a>）的功能，正確性很高，實在很方便</li>
<li>不過車門在開動車子後不會自動上鎖</li>
<li>開鎖的時候地上會有投影，有點騷包(?)</li>
<li>開起來感覺其實是還不錯啦</li>
</ul>

<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/33201465513/" title="沖繩 okinawa by othree, on Flickr"><img src="https://farm3.staticflickr.com/2946/33201465513_939151304d_b.jpg" width="1024" height="683" alt="沖繩 okinawa, " srcset="https://farm3.staticflickr.com/2946/33201465513_939151304d_b.jpg 1024w, https://farm3.staticflickr.com/2946/33201465513_ea0cd7f8c5_h.jpg 1600w" /></a></p>
]]>

</description>
<link>https://blog.othree.net/log/2017/04/29/japan-self-drive/</link>
<guid>https://blog.othree.net/log/2017/04/29/japan-self-drive/</guid>
<category>diary</category>
<pubDate>Sat, 29 Apr 2017 22:58:39 +0800</pubDate>
</item>

<item>
<title>My First Contribution to Nginx</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/25580381505/" title="nginx conf by othree, on Flickr"><img src="https://farm2.staticflickr.com/1525/25580381505_0825ef9c24_b.jpg" width="570" height="427" alt="nginx conf" srcset="https://farm2.staticflickr.com/1525/25580381505_0825ef9c24_b.jpg 1024w" /></a></p>

<p>因為工作上的需要，所以其實我還蠻常會編輯 nginx configuration file 的，理所當然的編輯器是用 vim，然後就會對 nginx 設定檔的支援有意見，一般人用的 nginx 設定檔的 vim script 其實是 nginx repository 的 contrib 目錄裡面的那份，這份 vim script 其實本來也是獨立的，不過原作者好像把他捐進去 nginx 裡面，之後就一直都在裡面了，也因此之後更新就很不頻繁。</p>

<p>然後因為檔案都放在 nginx repository 裡面，Vim 要使用其實不太方便，所以 Github 上還看的到不少人單獨抽出來，我一開始也是 fork <a href="https://github.com/moskytw/nginx-contrib-vim">mosky</a> 的來用，後來就直接在<a href="https://github.com/othree/nginx-contrib-vim">自己的 repository</a> 上面修改了，改一陣子之後就開始想要推回 upstream，也就是 nginx 的程式庫，然後就開始了這段協工旅程(?)。</p>

<p>要發修改上 upstream，第一步自然是看一下<a href="http://nginx.org/en/docs/contributing_changes.html">如何貢獻</a>，節錄這邊幾個重點：</p>

<ol>
<li>用 <a href="http://mailman.nginx.org/mailman/listinfo/nginx-devel">nginx-devel</a> 這個 mailing list 做討論</li>
<li>發 patch 前有一些注意事項，不過我改 vim script 比較沒關係</li>
<li>Patch 也是用 email 發到 nginx-devel，有範例</li>
<li>推薦用 <a href="https://www.mercurial-scm.org/wiki/PatchbombExtension">patchbomb</a></li>
<li>要先簽 <a href="https://www.nginx.com/resources/wiki/contributing/cla/">CLA</a>（不過目前這條已經不見了，改成最後說發 patch 等於同意用他們專案的 LCIENSE）</li>
</ol>

<p>總之我就照這份，先去訂閱了 nginx-devel 觀察一陣子，然後就直接把我的<a href="http://mailman.nginx.org/pipermail/nginx-devel/2017-February/009489.html">修改</a>整個丟上去了，一開始是直接用 Gmail 發，把 patch 檔內容直接複製貼過去，產生 patch 檔的方法是：</p>

<pre><code>hg export &gt; something.patch
</code></pre>

<p><code>hg export</code> 會直接輸出最後一個 commit 的 patch 內容到 STDOUT，然後就直接用 Gmail 發過去，結果 review 的 <a href="http://mdounin.ru/">Maxim Dounin</a> 說他沒辦法 apply patch，可能是因為我的 mail client 的關係，建議我用 <a href="https://www.mercurial-scm.org/wiki/PatchbombExtension">patchbomb</a> 發，所以就研究搜尋了一下，發現他是直接發 email 的機制，所以要把帳號密碼都寫到設定內，找了一篇 Gmail 的<a href="http://blog.sidkalra.com/2009/02/using-gmail-with-hgs-patchbomb-extension/">設定範例</a>，搭配 Google account 的應用程式密碼，設定範例如下：</p>

<pre><code>[extensions]
hgext.patchbomb =

[email]
from=othree &lt;othree@gmail.com&gt;
to=nginx-devel@nginx.org
cc=othree@gmail.com
method=smtp

[smtp]
host=smtp.gmail.com
port=587
username=othree@gmail.com
password=[gmail_password]
tls=True
</code></pre>

<p>把這些資訊填入 <code>.hg/hgrc</code> 這個檔案內，然後就可以用 <code>hg email -o --test</code> 來測試看看，這個指令會把完整的原始信件內容，包括 header 等都顯示出來（丟到 STDOUT），如果正式要發就把 <code>--test</code> 拿掉就好了。</p>

<p>確認一切沒問題後，我就改用 patchbomb 發 patch 到 nginx-devel 了，結果還是被拒絕了，問題主要是這個 patch 一次修改太多，理想上應該是不同目的的修改放到不同 patch 內，當然這和我一開始的預想不一樣就是了，我一開始的想法是因為 contrib 這邊的東西，相對於 nginx 本體的原始碼來說比較次要，所以盡量減少 commit 數，其實如果我有先去問過應該是可以少繞這段路，總之，為了一個一個修改送出，我又開了一個 github repository，叫做 <a href="https://github.com/othree/nginx-contrib-vim-patch">nginx-contrib-vim-patch</a>，想要慢慢把我的 nginx-contrib-vim 內的更動搬過去，接著開始的，就是漫長的 review 和溝通了。</p>

<p>其實我完全沒想到 Maxim Dounin 會這麼認真的 review，不止會看我這樣改是要達到什麼目的，還有認真測試，結果被抓出一堆問題，雖然都是奇妙的 conf 寫法，合語法，但是應該不會有人這樣寫的 case，這些 case 我也開始慢慢收集到 github 上的 <a href="https://github.com/othree/nginx-conf-test">nginx-conf-test</a>，方便之後測試用，總之來回許久，終於有一部分比較簡單的東西先進去 nginx repository 了，然後我發現外部貢獻者都會在 <a href="https://nginx.org/en/CHANGES">change log</a> 那邊被感謝，我貢獻進去的目前應該都在 1.11.11 那版，其實只有把新的 directive 補上（core modules, 3rd party modules）和幾個 protocol 參數的 highlight，至於其他的修改還進不去，目前看起來會是一場長期抗戰，主要是因為 reviewer 對於期望的目標和我不一樣，目前大概會維持兩個版本吧，一邊弄<a href="https://github.com/othree/nginx-contrib-vim">自己希望的</a>，一邊抽東西送回去 upstream，不得不說主事者控制太緊會讓貢獻者動力被削減不少。</p>

<p>貢獻 nginx 的過程讓我體會到以前的開源協做的模式（應該是吧？），用 mailing list 溝通，發 Patch、code review、做討論，這些點來看，nginx 的流程其實是非常老派，和現在用 Github 做溝通、協做 的流程差很大，門檻也高不少，當然這不一定是壞事，還是要看專案性質，在 Github 這類平台上做這些協做流程的話，門檻降低了，其實可能隨之而來的問題就是太多人進來造成貢獻品質落差很大，反而會吃掉主力人員的時間，剛好今天也看到知乎上有一篇「<a href="https://www.zhihu.com/question/36292298/answer/160028010">維護一個大型開源專案是怎樣的體驗？</a>」，裡面就有提到 VSCode 的狀況，變成還需要排人專門處理 issue 和 PR，感覺就很可怕。</p>

<p>順帶一題，nginx 的固定貢獻者當中不少中國人啊。</p>
]]>

</description>
<link>https://blog.othree.net/log/2017/04/26/first-contribution-to-nginx/</link>
<guid>https://blog.othree.net/log/2017/04/26/first-contribution-to-nginx/</guid>
<category>unix</category>
<pubDate>Wed, 26 Apr 2017 14:35:29 +0800</pubDate>
</item>


</channel>
</rss>