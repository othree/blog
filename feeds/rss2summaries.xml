<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>O3noBLOG</title>
<link>https://blog.othree.net/</link>
<description></description>
<copyright>Copyright 2024</copyright>
<lastBuildDate>Thu, 28 Mar 2024 10:01:14 +0800</lastBuildDate>
<generator>http://www.movabletype.org/?v=4.381</generator>
<docs>http://blogs.law.harvard.edu/tech/rss</docs> 


<item>
<title>やまに（yamani）旅館</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53403097470/" title="やまに旅館 お手頃ふぐ梅 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53403097470_8f640fb9b6_b.jpg" width="1024" height="683" alt="やまに旅館 お手頃ふぐ梅" srcset="https://live.staticflickr.com/65535/53403097470_931b7f0426_k.jpg 2x" /></a></p>
<p><a href="https://blog.othree.net/log/2024/01/06/2023-nagoya/">去年的名古屋之行</a>因為所以然後就跑去了南知多，研究行程時發現當地冬天有虎河豚，也很多餐廳有套餐可以享用，所以在安排行程時就花了不少時間研究要找哪一間，做這種套餐的其實很多是旅館，蠻大部分是當地的小型旅館，沒有上國際的訂房網站，甚至有的只有電話可以聯絡訂房訂位的，後來我的搜尋方法就是用 Google Map 慢慢找，在上面找了很久，最後選的旅館叫 やまに（yamani）旅館，本來是打算住一晚，後來因為參加源氏香活動的關係，就改成只有去吃河豚套餐。</p>
<p>選擇 Yamani 旅館的一個主要原因是，雖然舊，但是看起來蠻乾淨，我也一直很想體驗看看比較在地的住宿體驗（雖然沒住），另外就是它們其實也是有上樂天旅遊可以接外國遊客，不過樂天旅遊訂的話會比較貴，所以就還是在官網訂（不過沒住宿的我忘了樂天能不能能訂），唯一比較擔心的大概就是我沒日本電話號碼吧，不過結果還蠻順利的，不多說廢話，就趕快來看看 やまに旅館 的虎河豚套餐吧。</p>
]]>

<span class="extended"><a href="https://blog.othree.net/log/2024/03/28/yamani/">閱讀 「やまに（yamani）旅館」 全文</a></span>

</description>
<link>https://blog.othree.net/log/2024/03/28/yamani/</link>
<guid>https://blog.othree.net/log/2024/03/28/yamani/</guid>
<category>diary</category>
<pubDate>Thu, 28 Mar 2024 10:01:14 +0800</pubDate>
</item>

<item>
<title>UI Event Order</title>
<description><![CDATA[<p>我一直以來都對於 DOM 事件的順序抱有一種不確定的感覺，舉例來說，當使用者點滑鼠時，你可以預期到會有 <code>mousedown</code>、<code>mouseup</code>、<code>click</code> 事件，但是它們的順序是什麼呢？可以確定的是 down 一定是第一個，up 一定在 down 之後，那 <code>click</code> 是在中間還是最後呢？更進一步，點在可以有 focus 的元件上，那 <code>focus</code> 事件的順序呢？如果已經有其他元件有 focus，那它的 <code>blur</code> 事件又是在 <code>focus</code> 的前面還後面呢？除了滑鼠事件外，鍵盤事件又更複雜，除了 keydown、keyup 之外還有 <code>input</code>、<code>change</code> 和 IME 的 composition 事件等，總之最近實在是太在意了，就認真的弄了個測試網頁自己測試，之後又查找了相關的標準規範，這篇就來記錄一下這些事件的順序。</p>
<p>首先就來說滑鼠（指標裝置）相關的事件順序吧，第一個是滑鼠點擊，就是 <code>mousedown</code>、<code>mouseup</code>、<code>click</code>，是在 <code>mouseup</code> 後才接著有 <code>click</code> 事件，其實仔細想了一下也是蠻合理的，要有 up 事件才代表完成了 <code>click</code> 事件。然後這順序其實是有定義在 <a href="https://www.w3.org/TR/uievents/#events-mouseevent-event-order">UI Events 5.3.3</a> 之中的，其中的最後一個表格就是一個標準的點擊時事件的順序，而且這個表格還包括了 <code>mousemove</code> 和 <code>dblclick</code> 事件，這個章節中的其他部分則是滑鼠移動經過不同、多層的 DOM node 時，不同 node 上的 <code>mouseover</code>、<code>mouseout</code> 事件的順序。</p>
]]>

<span class="extended"><a href="https://blog.othree.net/log/2024/03/24/ui-event-order/">閱讀 「UI Event Order」 全文</a></span>

</description>
<link>https://blog.othree.net/log/2024/03/24/ui-event-order/</link>
<guid>https://blog.othree.net/log/2024/03/24/ui-event-order/</guid>
<category>script</category>
<pubDate>Sun, 24 Mar 2024 18:07:13 +0800</pubDate>
</item>

<item>
<title>鳥山明過世</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53575001401/" title="鳥山明訃報 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53575001401_24c238fbc5_b.jpg" width="600" height="800" alt="鳥山明訃報" /></a></p>
<p>今天（2024-03-08）官方發布的<a href="https://dragon-ball-official.com/news/01_2499.html">消息</a>，七龍珠的作者鳥山明在三月一日時因病過世了，JUMP 也有<a href="https://www.shonenjump.com/j/2024/03/08/240308_oshirase.html">訃報</a>，而且還有堀井雄二、桂正和、尾田栄一郎和岸本斉史的緬懷文（巴哈姆特 GNN 有<a href="https://gnn.gamer.com.tw/detail.php?sn=264681">譯文</a>），在緬懷鳥山明之餘，想來紀錄一下我對七龍珠系列的一些小心得。</p>
<p>首先是作者名字，其實我小時候一直搞錯，而且搞錯很久，把「鳥」當成「島」，即使到現在我都還需要在腦中確認一下，然後直到今天我才知道名字的念法（Akira Toriyama）；然後就是雖然現在大家對於 Z 那段的印象是很拖，但是其實拖的是電視動畫而已，後來我回去重看漫畫時，其實節奏還蠻明快的，當然有不少轉折拉長連載的時間，但不會在同一段劇情上拖拖拉拉；然後另外一個印象就是角色強度的通膨，以前總有個是不是一直吃書改設定的印象，像是佛力札已經號稱是宇宙最強了，怎麼後面還可以一直有更強的角色，後來重看漫畫才發現其實沒有，宇宙帝王佛力札就是在那個時間點的該宇宙中戰鬥力最高的人，接在後面的人造人是紅緞帶軍團製造出來的，魔人普烏則是古早時候就被大界王神封印的，所以佛力札作威作福時人造人還不存在，普烏則是被封印的狀態。</p>
<p>然後動畫故事到魔人普烏之後的續作，有「GT」和「神 vs 神」、「超」那一個系列的兩個線，其實我兩部都蠻喜歡的，比較早的 GT 是鳥山明沒有參與的，這邊就先略過，後來好不容易鳥山明回來參與的「神 vs 神」劇場版開始的世界設定，擴展了整個世界/宇宙的設定，從和界王神成對的破壞神開始到後來的多重宇宙、超級賽亞人 Blue、全王等等，我覺得都很非常的精巧，有趣而且最厲害的是沒有破壞到既有的設定，只能說真不愧是鳥山明，不知道這些設定有多詳細，和未來的企劃也不知道有多少關聯（像是那個還沒開始的大魔），不管如何，都是無限讓人惋惜啊。</p>
<p>最後想放一個 YouTube 的影片連結：</p>
<p><a href="https://www.youtube.com/watch?v=aOXs5hg0a5Y">https://www.youtube.com/watch?v=aOXs5hg0a5Y</a></p>
<p>這是龍珠超最後悟空和吉連對決最高潮的片段，也就是悟空進入「身勝手の極意」狀態的片段，似乎是在墨西哥的非官方?公開放映的景象（一開始有非授權的放映，但是後來有各種地方政府取得授權的放映活動），當初看到這影片的時候就覺得很驚訝，沒想到會在離日本這麼遙遠的地方，有個國家這麼多人都對七龍珠有這麼大的熱情，真的是個空前的成就。</p>
<p>追記：在發文的時間點，推特（現在的 X）的日本的 Trends 上沒有鳥山明，不過其實有三個相關的：「かめはめ波」、「スーパーサイヤ人」和「国民栄誉賞」。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53575020381/" title="Japan Trends 2024-03-08 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53575020381_d36fbe330e_b.jpg" width="387" height="1024" alt="Japan Trends 2024-03-08" srcset="https://live.staticflickr.com/65535/53575020381_37c354f542_k.jpg 2x" /></a></p>
]]>

</description>
<link>https://blog.othree.net/log/2024/03/08/akira-toriyama/</link>
<guid>https://blog.othree.net/log/2024/03/08/akira-toriyama/</guid>
<category>acg</category>
<pubDate>Fri, 08 Mar 2024 23:15:52 +0800</pubDate>
</item>

<item>
<title>QR Code 發明歷史展</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53400019990/" title="QRコード発明ヒストリー～QRコードはトヨタグループの発明だった！～ by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53400019990_281e6bd784_b.jpg" width="1024" height="683" alt="QRコード発明ヒストリー～QRコードはトヨタグループの発明だった！～" srcset="https://live.staticflickr.com/65535/53400019990_9636388588_k.jpg 2x" /></a></p>
<p><a href="https://blog.othree.net/log/2024/01/06/2023-nagoya/">去年去名古屋</a>時，有去了 <a href="https://www.tcmit.org/">Toyota 產業技術紀念館</a>，館內的展覽其實著重在技術介紹，分為紡織和汽車，其實我以前不知道 Toyota 是紡織起家的，展覽的內容非常不錯，很多機器都還可以運作，而且也可以讓訪客按按鈕自動展示，非常用心：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53400018490/" title="トヨタ産業技術記念館 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53400018490_75533ab6f8_b.jpg" width="1024" height="683" alt="トヨタ産業技術記念館" srcset="https://live.staticflickr.com/65535/53400018490_9bfe9edc2b_k.jpg 2x" /></a></p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53398655727/" title="トヨタ産業技術記念館 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53398655727_79d94ac64f_b.jpg" width="1024" height="683" alt="トヨタ産業技術記念館" srcset="https://live.staticflickr.com/65535/53398655727_1525f1a646_k.jpg 2x" /></a></p>
]]>

<span class="extended"><a href="https://blog.othree.net/log/2024/01/12/qr-code-history/">閱讀 「QR Code 發明歷史展」 全文</a></span>

</description>
<link>https://blog.othree.net/log/2024/01/12/qr-code-history/</link>
<guid>https://blog.othree.net/log/2024/01/12/qr-code-history/</guid>
<category>diary</category>
<pubDate>Fri, 12 Jan 2024 23:42:13 +0800</pubDate>
</item>

<item>
<title>2023 名古屋</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53401245579/" title="高山陣屋 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53401245579_c93978534b_b.jpg" width="1024" height="683" alt="高山陣屋" srcset="https://live.staticflickr.com/65535/53401245579_50db12c77e_k.jpg 2x" /></a></p>
<p>去年十一月底的時候，安排了一趟名古屋的旅遊，一開始的目標很簡單，就是帶小孩去樂高樂園，所以挑選了名古屋，結果這趟旅遊在出發前還真是一波三折，首先是因為差不多快要楓葉季了，所以挑選時間時就想說挑個可以順便看楓葉的時間，又考量到公司專案的時程，兩週不錯的時間挑了第二週，和本來那個專案的時間差了兩三週，結果公司專案最後還是拖到我出國前還沒上線；接著在規劃行程時，本來想說一天去下呂溫泉，然後前面四天後面五天都在市區或是近郊，接著看回程要怎樣到機場時，考慮到有想多買行李箱，所以可能無法搭電車，就看了一下計程車費，不意外的很貴，想了一下去查了一下租車一天的價錢，結果發現差不多！但是都租車了，乾脆多租幾天在附近玩，所以就看起了中部國際機場所在的知多半島的觀光景點，發現有虎河豚套餐可以吃，後來老婆覺得可以不用太多小孩行程，想去飛驒高山，排到最後變成：</p>
<pre><code>11/25 名古屋車站
11/26 Toyota 博物館、大須商店街
11/27 栄、Harbs 本店、東山植物園
11/28 Lego Land
11/29 三井 Outlet、名花之里
11/30 飛驒高山
12/01 下呂溫泉
12/02 犬山城、住南知多（源氏香）
12/03 知多半島、河豚套餐
12/04 臨空區、機場回程
</code></pre>
]]>

<span class="extended"><a href="https://blog.othree.net/log/2024/01/06/2023-nagoya/">閱讀 「2023 名古屋」 全文</a></span>

</description>
<link>https://blog.othree.net/log/2024/01/06/2023-nagoya/</link>
<guid>https://blog.othree.net/log/2024/01/06/2023-nagoya/</guid>
<category>diary</category>
<pubDate>Sat, 06 Jan 2024 23:34:12 +0800</pubDate>
</item>

<item>
<title>源氏香 南知多</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53377566549/" title="源氏香 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53377566549_d4c2cc3812_b.jpg" width="1024" height="683" alt="源氏香" srcset="https://live.staticflickr.com/65535/53377566549_2332169903_k.jpg 2x" /></a></p>
<p>前陣子去了一趟名古屋，一開始其實只是想說帶小孩去樂高樂園，結果行程規劃從一開始的名古屋市區和周邊為主，弄到後來變成市區五天租車五天的，然後打算最後一天住在機場旁邊，就想說那前一天就在附近玩玩好了，要去的地方就因此多了一個一開始完全沒考慮過的「知多半島」了，當然也有研究住宿，當時也有找到「<a href="https://genji-koh.kaiei-ryokans.com/">源氏香</a>」這間旅館，不過那時候已經有安排了下呂溫泉的溫泉旅館，所以就沒考慮這個價位的住宿了，就在一切都安排好後沒幾天，突然就看到 FB 上有人分享到他們有特別的，針對台灣人的免費體驗方案，就是入住後要在 SNS 上分享。</p>
]]>

<span class="extended"><a href="https://blog.othree.net/log/2023/12/09/genji-koh/">閱讀 「源氏香 南知多」 全文</a></span>

</description>
<link>https://blog.othree.net/log/2023/12/09/genji-koh/</link>
<guid>https://blog.othree.net/log/2023/12/09/genji-koh/</guid>
<category>diary</category>
<pubDate>Sat, 09 Dec 2023 15:41:08 +0800</pubDate>
</item>

<item>
<title>Sign-in with OOO ID</title>
<description><![CDATA[<p>最近工作上在研究 Sign-in with Apple/Google ID，其實這件事情也作過很多次了，不過距離上次也有點久了，不知道那些 SDK 有沒有什麼改變，所以還是要重頭來，而且這次多研究了一個 Apple，有搞懂些以前沒釐清的細節，想說紀錄一下。</p>
<p>首先就是，我發現到 Google 和 Apple 現在都會回一個 <a href="https://openid.net/specs/openid-connect-core-1_0.html#IDToken">ID Token</a>，內容則是 JWT，而且是認真的 JWT，真的會有帶一點使用者資料（像是 email）的，可以用來作 user authentication（認證）用的，這在以前只有 OAuth 2.0 的時候是沒有的，查一陣子資料才發現這其實是 <a href="https://openid.net/specs/openid-connect-core-1_0.html">OpenID Connect</a>（簡稱 OIDC） 規範的，該規範是是 2014 年發布的，其實還比 JWT 早定稿。</p>
<p>相較於 OAuth 2.0 做的是 authorization（授權），OIDC 做的則是 authentication（認證），只不過 OIDC 是整個依附在 OAuth 2.0 的架構上，利用的就是 OAuth 2.0 的 <a href="https://www.rfc-editor.org/rfc/rfc6749#section-3.1.1">response_type</a>，本來只有 <code>code</code> 和 <code>token</code> 兩種，在 OIDC 多提供了 <a href="https://openid.net/specs/openid-connect-core-1_0.html#Authentication"><code>id_token</code></a>，ID Token 是用 JWT，而且也有明確定義有裡面的 user profile 相關的<a href="https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims">欄位</a>（不是定義哪些是必須提供，而是定義好語意和對應的欄位名稱）。</p>
<p>第二個則是我一直存疑已久的問題，就是 OAuth 2.0 的設計上基本是用 redirection flow，而且 <a href="https://www.rfc-editor.org/rfc/rfc6749#section-3.1.2"><code>redirect_uri</code></a> 也是必要的，但是 Google 其實一直都支援純 JS 的方案，也就是說 Relying Party(應用程式端)不需要實作一個 redirection endpoint 來接資料，前端的 JS 就可以直接拿到 authorization code 和 access token，這次也認真的研究了這個問題，結果發現，Apple 的 OAuth 流程中，<a href="https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#ResponseModes">response_mode</a> 給的值是目前不在標準內的 <code>web_message</code>，而 Google 則是 <a href="https://www.rfc-editor.org/rfc/rfc6749#section-3.1.2"><code>redirect_uri</code></a> 給的是一個沒見過的 scheme：<code>storagerelay://</code> 的 URI。</p>
<p>其實我一開始以為這些設計，是各個公司自己想一想然後就自己做下去的，結果沒想到其實不是，首先是 Apple 的實作，用的是 <a href="https://datatracker.ietf.org/doc/html/draft-sakimura-oauth-wmrm-00">OAuth 2.0 Web Message Response Mode</a> 這份草稿的設計，這份草稿其中一位作者 Nat Sakimura 現在是 OpenID 的 chairman，而且他也是其他很多相關規範的作者（像是 <a href="https://www.rfc-editor.org/rfc/rfc7519">JWT</a>)，不過這份草稿只有一版且沒人更新，有很多細節沒有寫定，大部分都是提供範例程式碼而已，所以 Apple 有些東西不是照範例做，例如 message 的 payload；Google 實作的則是 <a href="https://lists.openid.net/pipermail/openid-specs-ab/2015-November/005865.html">OAuth 2.0 IDP-IFrame-based Implicit Flow</a>，這份文件其實是我最後才找到的，因為這份只有出現在 OpenID 的 mailing-list，而且也完全沒有討論和更新，不像前一份還有發到 IETF，回到文件內容，這份的作者，就全部都是 Google 的人了，內容完整許多，也有定義好 message 的 payload 結構，不過還是有些細節有缺，像是認證完成後的回傳事件，現在 Google 用的事件名稱在這份文件中就找不到。</p>
<p>除了這兩份草稿外，其實還有一份是 <a href="https://curity.io/">Curity</a> 提出的 <a href="https://datatracker.ietf.org/doc/html/draft-ideskog-assisted-token-05">OAuth 2.0 Assisted Token</a>，一樣有發到 IETF，而且還比較有在更新，最新一版是 2021 的，Assisted Token 的設計是多給了一個流程叫做 Assisted Token Flow，用不一樣的 URL 來使用這個 flow，這個流程的最後一步就是 postMessage 回到 opener/parent，規範寫的比較完整，包括各種新屬性的 registry、message 的 payload，還有安全性相關的考量都有，不過我看一看有些地方覺得有些疑惑，第一個是 message payload 的結構似乎辨識度沒很高，第二個則是完全沒提到 refresh token 和 authorization code，不確定是目前還沒考慮到那邊，還是因為安全性考量把它們先排除。</p>
<p>第三個是 Apple 的實作，雖然基本上還是照著 OAuth，但是其實限制更多，首先就是，<code>scope</code> 就只有 email 和 name 可以拿，而且 Apple 做成，只有第一次 authorization 時，會把 user profile 傳給 RP，之後是拿不到的（不過 email 有在 id token 內），然後，雖然可以拿到 access token，但是其實完全沒有可以使用它的 API endpoint，所以什麼事情都不能作，真的只能用來做 authentication，最後一個，就是用 code 換 token 時，要給的 <code>client_secret</code> 參數還特別麻煩，要<a href="https://developer.apple.com/documentation/accountorganizationaldatasharing/creating-a-client-secret">自己組一個 JWT</a>（但是也因此會 expire 比較安全），然後用之前從 Apple Developer 後台生好的 secret key 去算 signature。</p>
<p>最後一個想紀錄的就是，這幾份標準和文件裡面幾乎都有一個章節是 Security Consideration，內容雖然不全面但是還蠻值得一看的，也有提到一些攻擊手法，而除此之外，其實還有一份文件：<a href="https://www.rfc-editor.org/rfc/rfc6819">RFC6819: OAuth 2.0 Threat Model and Security Considerations</a>，內容就是有說明 OAuth 2.0 各種設計在安全性上的考量（像是為什麼有 <a href="https://www.rfc-editor.org/rfc/rfc6819#section-3.3">Refresh Token</a>，什麼情境下它有助於安全性的提升），以及各種可能的攻擊手法。</p>
]]>

</description>
<link>https://blog.othree.net/log/2023/11/08/sign-in-with-/</link>
<guid>https://blog.othree.net/log/2023/11/08/sign-in-with-/</guid>
<category>web</category>
<pubDate>Wed, 08 Nov 2023 21:52:51 +0800</pubDate>
</item>

<item>
<title>Celeste</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53276279101/" title="Celeste by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53276279101_c264a1ba25_b.jpg" width="768" height="1024" alt="Celeste" srcset="https://live.staticflickr.com/65535/53276279101_77a78ba47f_k.jpg 2x" /></a></p>
<p>一直想寫一篇關於 <a href="https://www.celestegame.com/">Celeste</a>（蔚藍山脈）的文章，不過拖了很久一直寫不出來，其實我當初也是拖了很久才玩的。我因為原本就很喜歡 2D 的平台遊戲，然後看到 Celeste 的介紹覺得很特別，以登山為目標，沒有戰鬥但是有挑戰性的平台遊戲，多麼特別啊！所以 2019 年我就把它買下來了，還是 <a href="https://limitedrungames.com/products/switch-limited-run-23-celeste-preorder">Limited Run Games 的版本</a>，結果買回來後，稍微玩一下覺得怎麼難到爆炸，就放置了。</p>
<p>後來到了 2021 年底，在 FB 看到橘子說<a href="https://www.facebook.com/Orange.8361/posts/pfbid0MZgonb2aBDzEfp1JwzrRALTZGtjf384afpWZXYFo9Pt3Pk78rDaJAwxyXyPwtHoNl">他登頂了</a>，我才一點手癢一點不服輸的又重拾了起來，結果這次就順利了突破一開始的障礙，漸漸的上手了起來，後來橘子更是把<a href="https://www.facebook.com/Orange.8361/posts/pfbid02hRCPB4QydeQnBcUygewfZh7akZ2nWr9i9XTQmvB2sVpLjsheCCjWtiuuZmWpfJwal">全部的關卡包括第九章都過完</a>了，本來想說我 B 面 C 面不勉強（有多難可以參考机核的文章：<a href="https://www.gcores.com/articles/96249">《蔚蓝：Celeste》：每个人心中都有一座山，但并非每个人都能登上山顶</a>），結果還是不服輸的就慢慢的也都過完了，必須說這關卡難度的曲線設計的真的是非常棒，最後花了一個月左右，遊戲時間 50 多小時，成績是把全部關卡通過，收集到所有除了黃金草莓以外的草莓，認真的說，這遊戲真的很難，我相信一定很多人無法達到這樣的成績，當然我也不是要說我多厲害，因為我這樣的成績還不是全要素收集，更上一層還有無死通關的金草莓，不過這樣的挑戰歷程已經讓我想寫文章記錄下來了。</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53281633529/" title="Celeste by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53281633529_58b4cc2bc0_b.jpg" width="1024" height="576" alt="Celeste" srcset="" /></a></p>
<p>我覺得這款遊戲最讓我感到厲害的，就是它遊戲的內外呼應，遊戲內的故事主軸是登山，而在了遊戲故事之外，這款遊戲也設計成了一個讓人攀登的高山，關卡和整體的難度就是設計的非常精巧，大家都可以在山腳出發，但是可能只有一半人能到五成高度，到了八成高度的地方就只剩下兩成，而真正能到達山頂，達成全要素，收集到所有的草莓，真正見到最後那個山頂風景的，就只有少數的那些玩家，那 26 個黃金草莓，全世界登記有案能拿到的大約只有<a href="https://celeste.ink/wiki/List_of_Celeste_players_with_the_Farewell_Golden_Berry">三百多人</a>（<a href="https://forum.gamer.com.tw/C.php?bsn=32436&amp;snA=17">台灣也有至少一位</a>），Celeste 也有賣出一百萬套左右，也就說只有萬分之三的人，能夠到達這款遊戲的真正的山頂（要素的山頂、還有另一批人在拼 speed run）。</p>
<p>本來還想要介紹更多的東西，但是寫了兩三次都不盡如意，最後決定，留下這篇文章作為自己參與了這段挑戰的紀錄，我到現在偶爾，都還會拉出當時登山時的一些影片紀錄，有些關卡真的是非常困難，難到讓人過關時都忍不住會按下 Switch 的錄影按鍵紀錄下來，甚至也不少是功虧一簣的紀錄，當然，我拿到最後一顆 moon berry 的紀錄也有，當時也有<a href="https://www.facebook.com/othree/posts/pfbid0RtymcvfzMXR2QfdD1X756CNoCzuZBe4WYj9dCsCEu4zpEVorNweWqBjbrTMtUnJZl">貼在 FB</a> 上。</p>
<p>附上幾篇開發相關的延伸閱讀：</p>
<ul>
<li><a href="https://indie-guider.games/post/DevStudy-Celestegame/">開發經驗分享】專題系列－《Celeste》</a></li>
<li><a href="https://qwe321qwe321qwe321.github.io/posts/61013/">從移動和跳躍開始，做好 2D 平台跳躍遊戲的角色控制 _BB001</a></li>
<li><a href="https://www.rockpapershotgun.com/celeste-dash">Why Celeste's dash feels great</a></li>
<li><a href="https://www.youtube.com/watch?v=4RlpMhBKNr0">Level Design Workshop: Designing Celeste</a> Celeste 開發者 Maddy Thorson 在 GDC 2017 的分享</li>
</ul>
<p>其他延伸閱讀可以參考橘子的第二篇 FB 貼文。</p>
]]>

</description>
<link>https://blog.othree.net/log/2023/10/22/celeste/</link>
<guid>https://blog.othree.net/log/2023/10/22/celeste/</guid>
<category>acg</category>
<pubDate>Sun, 22 Oct 2023 20:56:37 +0800</pubDate>
</item>

<item>
<title>digital envelope routines::unsupported</title>
<description><![CDATA[<p>Node.js 16 LTS 已經結束維護，所以手上的東西就開始需要升級升級，然後就必須要來正面面對這個我逃避已久的錯誤訊息：</p>
<pre><code>digital envelope routines::unsupported
</code></pre>
<p>這錯誤基本上就是發生在幾個網站的專案，尤其是 build 專案時特別會容易看到，而且這個錯誤其實和一般看到的 JS 錯誤長得不太一樣，全貌其實是這樣：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53186660279/" title="digital envelope routines::unsupported by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53186660279_4f2b82bbbc_b.jpg" width="1024" height="738" alt="digital envelope routines::unsupported" srcset="https://live.staticflickr.com/65535/53186660279_a5cd706923_k.jpg 2x" /></a></p>
<pre><code>Error: error:0308010C:digital envelope routines::unsupported
</code></pre>
<p>首先是錯誤訊息，前面有一些 hex 值，不知道是什麼，然後下面 trace 的地方，可以看到幾乎都是 node_module 內的東西，不是因為我們自己的 code 造成的，所以就很讓人困惑，想說是不是什麼系統問題、還是有什麼偷用非公開 API 造成不相容的狀況。總之以前就是遇到這個問題就是又降版回來，沒有仔細深究，這次終於要來認真處理，不過搜尋結果，幾乎都是說加一個 <code>--openssl-legacy-provider</code> flag，都沒人說到底是什麼問題，尋找許久，終於在 StackOverflow 找到一則<a href="https://stackoverflow.com/a/73027407/443051">最正確的答案</a>，沒想到和 OpenSSL 1.x 的生命已經到盡頭有關。</p>
<p>結果這個錯誤，其實是因為 Node.js 17 開始，從 OpenSSL 1.x 換到 3.x，然後 OpenSSL 3.x 不是向下相容的，所以有些東西有機會出錯，這邊爛掉的，其實是一些 legacy 的 hash method 預設是拿掉的，而 Webpack 在建立 bundle 檔案時，如果檔名有用到 hash 的話，預設的 hash method 用的就是已經被淘汰的 <a href="https://www.openssl.org/docs/man3.1/man3/MD4.html">md4</a>，然後 md4 是用 Node.js 的 <a href="https://nodejs.org/docs/latest-v20.x/api/crypto.html#cryptocreatehashalgorithm-options">crypto</a> 來呼叫 OpenSSL 做事，Node.js 的文件也有提到支援的演算法是依據你的 OpenSSL 版本和系統而定，所以其實並沒有保證 <strong>md4</strong> 一定可以用，而如果使用了 OpenSSL 不支援的演算法，跑出來的錯誤訊息就是像上面截圖一樣特別了，然後我還特別去用 OpenSSL 3 cli 跑跑看，結果出來的錯誤訊息真的就是差不多：</p>
<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53188641438/" title="OpenSSL 3 error by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53188641438_3493041848_b.jpg" width="512" height="341" alt="OpenSSL 3 error" srcset="" /></a></p>
<p>使用 flag 開啟舊演算法的支援其實我覺得還算可以接受，畢竟是 build 而已，不是拿來跑服務，不過這個 flag 似乎有點特殊，似乎不能直接放在 <code>NODE_OPTIONS</code> 裡面，而且同個程式庫要是拿到舊版 Node.js 環境去跑，加這個 flag 反而跑不起來，所以最理想還是把問題解決掉。</p>
<p>那這個問題應該怎麼處理呢？其實簡單說就是把套件升級升級就好了，因為現在的套件新版本都有處理這個問題，不過走上升級這條路之前可以先試試看 StackOverflow 上的解法（有可能讓你專案爛掉，請先備份）：</p>
<pre><code class="language-bash">npm audit fix --force 
</code></pre>
<p>如果你用的是 yarn，沒有 <code>audit fix</code> 可用，但是也有人提供用 npm 來修理的<a href="https://stackoverflow.com/questions/51732435/is-there-a-yarn-alternative-for-npm-audit/60878037#60878037">流程</a>，不過我是沒試過這個流程，我自己有一個專案是靠 <code>yarn upgrade</code> 升級後解決問題的（實際上是把所有有用到的 <a href="https://github.com/webpack/loader-utils/releases/tag/v2.0.1"><strong>loader-utils</strong> 都升級到 2.0.4</a>，本來有個套件用到 2.0.0），剩下的還是無法修好的就要靠手工了，然後因為我處理的網站只有 Gatsby 和 CRE(Create React App) 兩種，所以以下就是只有說明這兩個系統的為主，兩者其實都是使用 Webpack 作打包工具的，而 <a href="https://github.com/webpack/webpack/releases/tag/v5.61.0">Webpack</a> 是從 v5.61.0 開始保證支援 Node.js 17 的，我稍微查了一下 Gatsby 是從 <a href="https://github.com/gatsbyjs/gatsby/releases/tag/gatsby%404.2.0">4.2.0</a>，而 CRA 的則是要最新版 react-script <a href="https://github.com/facebook/create-react-app/releases/tag/v5.0.1">5.0.1</a> 才保證支援，為什麼說是保證呢？因為 <code>^</code> 的 semver range 的關係，例如要是你的 react-script 是 5.0.0，那你本地可能會是裝到 Webpack v5.60.0，那就不支援 Node.js 17 了，像我就是有 Gatsby 3.x 的，升級到 4.x 就沒事了。</p>
<p>Gatsby 和 CRA 其實都還好，最慘的是 eject 過的 CRA 了，只能手工升級，基本上就是去 <a href="https://github.com/facebook/create-react-app/tree/main/packages/react-scripts">react-script</a> 那邊，複製需要的檔案回到你的專案覆蓋過去，最主要的是 <code>scripts/</code> 和 <code>config/</code> 下的檔案，然後根據自己的修改紀錄把自己作過的修改改回去，接著更新 <code>package.json</code> 裡面的 dependencies，版本號就是參照 react-script 那邊的 <a href="https://github.com/facebook/create-react-app/blob/main/packages/react-scripts/package.json#L30-L78">package.json</a>，最主要的就是 <code>webpack</code> 相關的，接著安裝套件後重新 build，要是還有一樣的錯誤，就看 trace 看看是哪個相依套件，看有沒有新版有修正就更新試試看，大概就是這樣，很容易漏東西所以會一直重複測試，蠻花時間的，不過最後 build 成功還是有成就感的。</p>
<p>PS. 還要小心其他升級的後遺症，如果是 app 最好要測試過各種行為，像我遇到 Webpack 5 不支援 polyfill Buffer 的問題，剛好那個錯誤又被 catch 掉，所以我 build 是沒問題的，就是測試跑不過，後來參考網路上的<a href="https://viglucci.io/articles/how-to-polyfill-buffer-with-webpack-5">文章</a>處理。</p>
]]>

</description>
<link>https://blog.othree.net/log/2023/09/15/digital-envelope-routines-unsupported/</link>
<guid>https://blog.othree.net/log/2023/09/15/digital-envelope-routines-unsupported/</guid>
<category>script</category>
<pubDate>Fri, 15 Sep 2023 11:41:56 +0800</pubDate>
</item>

<item>
<title>Vim License 的故事（下）</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177611514/" title="Vim License on choosealicense by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177611514_6232063ea9_b.jpg" width="1024" height="684" alt="Vim License on choosealicense" srcset="https://live.staticflickr.com/65535/53177611514_69382dace8_k.jpg 2x" /></a></p>
<p>接續<a href="https://blog.othree.net/log/2023/09/10/vim-license-1/">前一篇</a>。</p>
<p>Mike 在 SPDX License List 這邊提出的問題則是，為什麼會有 Vim 要替換，但是 Vim Maintainer 不要替換這樣特別的情形，所以我就是認真的解釋，並且說明這是跟原作者 Bram 確認過的細節並附上討論，還有舉我前面提過那個最極端的例子，然後我猜最重要的是現實世界有沒有人這樣使用過，還好我還真的找到幾個專案有認真的把條款內的 Vim 替換掉（當然是連 Vim Maintainer 也換掉了），像是 <a href="https://github.com/preservim/tagbar/blob/master/LICENSE">Tagbar</a>；我的 PR 是 2019/07/11 提的，然後一直來回到 9/25 回了最後一個回應之後就沒人回我了，之後到了 10/19 就突然被合併了（其實 SPDX 有定期的會議，應該是在其中有討論過要不要合併這個 PR 吧），接著等到 2020 一月我發了 PR 到 choosealicense 把 vim.txt 加進去，這次就蠻順利就合併了。</p>
]]>

<span class="extended"><a href="https://blog.othree.net/log/2023/09/11/vim-license-2/">閱讀 「Vim License 的故事（下）」 全文</a></span>

</description>
<link>https://blog.othree.net/log/2023/09/11/vim-license-2/</link>
<guid>https://blog.othree.net/log/2023/09/11/vim-license-2/</guid>
<category>vim</category>
<pubDate>Mon, 11 Sep 2023 17:27:11 +0800</pubDate>
</item>

<item>
<title>Vim License 的故事（上）</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53177898493/" title="‎vim-license-slide.‎001 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53177898493_0143b6204a_b.jpg" width="1024" height="576" alt="‎vim-license-slide.‎001" srcset="https://live.staticflickr.com/65535/53177898493_530da1ec12_k.jpg 2x" /></a></p>
<p>這篇是我<a href="https://blog.othree.net/log/2022/07/31/coscup-2022/">去年 COSCUP</a> 分享的文字版，拖稿許久終於寫出來了，以下正文開始。</p>
<p>Open Source Software 一直是 GitHub 的心頭肉(?)，也因此 GitHub 一直都有在各方面協助 OSS 開發者，其中也包括了對 Open Source License（開源授權）相關的協助。在 2013 年，GitHub <a href="https://github.blog/2013-07-15-choosing-an-open-source-license/">發佈了一個小網站</a> 叫 <a href="https://choosealicense.com/">choosealicense.com</a>，用簡單的條列介紹各開源授權條款的特色，並且藉由一些問答互動來幫助開發者挑選開源軟體授權條款。</p>
<p>而到了 2016 年，GitHub 更進一步提供了<a href="https://github.blog/2016-09-21-license-now-displayed-on-repository-overview/">授權條款的偵測功能</a>，只要你的程式庫裡面有正確的授權條款資訊（像是 LICENSE 檔案），然後使用的條款也在偵測的範圍內，那在 GitHub 上就會顯示該專案所使用的授權條款，也會同時提供該授權條款的特色給訪客參考，不過這個偵測功能，能偵測到的授權條款只有一些，更精確的說，就是只有 choosealicense 網站上的那些。</p>
<p>在 GitHub 推出授權條款偵測功能後沒多久，我就發現到 Vim 所使用的 Vim License 並不在偵測的範圍內。Vim License 是一個很特別的授權條款，是 Vim 的作者 Bram Moolenaar 專為 Vim 使用而寫的，雖然內文是針對 Vim 本身寫的，不過其實有很多的 Vim Script 也是標注使用 Vim License，甚至常常是寫 &quot;Same as Vim&quot;，所以實際上使用的專案並不少，所以我就一直想著，是不是有可能讓 GitHub 可以支援偵測 Vim License 呢？</p>
]]>

<span class="extended"><a href="https://blog.othree.net/log/2023/09/10/vim-license-1/">閱讀 「Vim License 的故事（上）」 全文</a></span>

</description>
<link>https://blog.othree.net/log/2023/09/10/vim-license-1/</link>
<guid>https://blog.othree.net/log/2023/09/10/vim-license-1/</guid>
<category>vim</category>
<pubDate>Sun, 10 Sep 2023 23:32:05 +0800</pubDate>
</item>

<item>
<title>Remove Disqus</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53136393026/" title="EFF Privacy Badger by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53136393026_ffc28f0f35_c.jpg" width="400" height="280" alt="EFF Privacy Badger" /></a></p>
<p>前陣子有整理了一下部落格的東西，大致上作的事情是：</p>
<ul>
<li>拿掉 Google Analytic</li>
<li>拿掉所有的 SNS 按鈕</li>
<li>拿掉 Disqus</li>
<li>換 web font 服務</li>
</ul>
<p>首先是拿掉 Google Analytic 這件事，其實我已經想很久了，一部分原因是不想餵資料資料給 Google，另一個原因則是剛好現在舊的 Universal Analytic 已經停用了，一定要改成用 GA4，所以趁這個機會就乾脆的拿掉了，不過還是會好奇哪些內容比較有人看，所以又花了點時間研究了 <a href="https://en.wikipedia.org/wiki/List_of_web_analytics_software">web log 分析軟體</a>，因為不想多架服務，老牌的 AWStats 介面現在實在是無法接受，所以現在選的是 <a href="https://goaccess.io/">goaccess</a> 當成 terminal 工具來用，不過它其實還蠻強的，選項很多，要當成服務跑也可以。另外就是如果還是偏好前端的追蹤， Twitter(現在的X) 上也有<a href="https://twitter.com/hsins_/status/1690038318732611584">朋友</a>推薦了 <a href="https://www.goatcounter.com/">GoatCounter</a> 和 <a href="https://umami.is/">umami</a>，分別是 golang 和 js 寫的服務，有開源也有線上的服務，有限度的服務使用額度，當然自架的話也可以，不意外的都需要資料庫，非開源專案的話也有一個 <a href="https://plausible.io/">Plausible</a> 看起來不錯。</p>
<p>第二個是 SNS 按鈕，其實以前有三個按鈕，分別是 Google+、Facebook 和 Twitter，然後我都是用 iframe 掛上按鈕的，這樣比較不用擔心直接掛第三方 js 的各種問題（隱私、安全），不過 Google+ 收掉了，FB 按鈕因為 Firefox container 的關係我其實也都看不到，後來忘了什麼原因也拿掉了，最後只剩下 Twitter 的，結果最近發現我掛按鈕使用的那個 <a href="https://developer.twitter.com/en/docs/twitter-for-websites/web-intents/overview">Web Intent</a> 也被改的無法在 iframe 內顯示按鈕了，所以就乾脆的剩下的全拿掉，最後只留下一個用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Share_API">Web Share API</a> 的按鈕。</p>
<p>然後是 Disqus，其實留言系統原理簡單不難，但是真的要做的話也是很麻煩，一來要有資料庫，這樣現在很多的靜態網頁產生工具就先死一票了、二來還要有能檔 spam 的能力，所以 Disqus 的出現真的是補了一個很大的缺口，我以前是很喜歡 Disqus 的，畢竟它是這種需求數一數二的先行者，該公司的工程師也很認真的研究 3rd party script 的技巧，我現在工作也有一部分是在寫 3rd party script，對此有興趣之餘，也對於這東西的麻煩之處很有感，不過現實就是開公司就是還是要賺錢，所以慢慢的它也是走向我比較不喜歡的方向，開始大量收集資料，然後甚至有人說開始有插入廣告了，不過除此之外，更大的一個原因是在我這邊的使用率實在太低，如果都沒人用的話，一直掛著也只是訪客被收集資料而已，於是我決定把整個迴響區塊都拔掉，帶來的副作用當然就是以前一些少數的留言也都消失了。</p>
<p>我在拿掉迴響後沒兩天，就剛好看到 HackMD 也拿掉 Disqus 的<a href="https://twitter.com/hackmdio/status/1692158313704910982">消息</a>，跟著原推文下去找其實也有不少的替代方案，像是 <a href="https://cusdis.com/">cusdis</a>、用 GitHub 的 <a href="https://giscus.app/">giscus</a> 和 <a href="https://utteranc.es/">utterances</a> 等，其實 <a href="https://www.wappalyzer.com/technologies/comment-systems/">Wappalyzer</a> 上也有些替代方案（然後也可以看到 Disqus 佔有率目前還很高）。</p>
<p>其實還有另外一種類型的替代方案，就是去支援新的 protocol，像是 <a href="https://activitypub.rocks/">ActivityPub</a> 和 <a href="https://indieweb.org/Webmention">Webmention</a> ，第一次看到 ActivityPub 加上靜態網站產生器的方案時，我就想起以前消失在 spam 的洪流之中的 trackback 機制，不過靜態網站產生器和 ActivityHub 相性不是那麼好，它其實也是和留言系統一樣，需要有 API endpoint 和資料庫，所以有辦法做到支援的選擇也沒很多，相關的服務和專案也相對不成熟，還需要不少<a href="https://paul.kinlan.me/adding-activity-pub-to-your-static-site/">手工</a>；另外一個選擇 Webmention，則可以參考 Jason 的「<a href="https://jason-memo.dev/posts/webmention/">透過 webmention 來搜集 blog 的社群迴響</a>」，基本上是可以透過第三方服務來弄成純前端的方案。</p>
<p>最後一個就是 web font 了，其實本來沒有要調整這塊，只是上面幾項改完，發現網站幾乎要沒有追蹤器了，只剩下 Google Fonts 相關的 request，Google Fonts 一直是被歸類為潛在的追蹤器，實際上到底有沒有被偷偷用來當做追蹤器也無法證實，總之我就試著尋找替代方案，一開始想的是自己放檔案，因為我只有用到兩個英文字型，不過結果大小差了 10 倍，不進一步調整不行，就在這時候看到了 <a href="https://twitter.com/littlegoodjack/status/1691699453877682247">Laravel 因為 GDPR 的關係改用</a> <a href="https://fonts.bunny.net/">Bunny Fonts</a> 了，大概研究了一下，bunny.net 本身是 CDN 服務商，而 Bunny Fonts 就是主打無追蹤，所以 GDPR 沒問題，另一個特點就是介面和 Google Fonts 相容，也就是說只要把 domain name 換掉就好（我的狀況是還有 CSP 要修改）。</p>
<p>然後最後的結果就是如文章上面的圖片一樣，現在大部分頁面，<a href="https://www.eff.org/pages/privacy-badger">EFF Privacy Badger</a> 的檢查結果已經是沒有需要阻擋的東西了，只有部分文章有內嵌 Tweet 或 YouTube 影片的，就還是會顯示有潛在的追蹤器。</p>
]]>

</description>
<link>https://blog.othree.net/log/2023/08/23/remove-disqus/</link>
<guid>https://blog.othree.net/log/2023/08/23/remove-disqus/</guid>
<category>about</category>
<pubDate>Wed, 23 Aug 2023 23:03:25 +0800</pubDate>
</item>

<item>
<title>Common Log Format</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53115754953/" title="Common Log File Format by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53115754953_56deb9d603_b.jpg" width="512" height="380" alt="Common Log File Format" /></a></p>
<p>這篇算是一篇軟體的考古文吧，最近對部落格做了些調整，其中一個改變就是把 Google Analytic 拿掉了，一部分是因為現在已經不能用 UA 而要改用 GA4 了，然後其實我也想拿掉很久了，這次就順便把它移除，不過我還是有興趣想知道不同文章大家感興趣的程度差異，所以就又研究起以前那種根據 HTTP server log 來整理網站統計資訊的工具，其實以前一直沒成功拿掉 GA 的原因之一就是找不到好的替代工具，一直以來我比較有印象的就是 <a href="https://www.awstats.org/">AWStats</a>，只是那個介面我實在是受不了，然後搜尋其他替代工具的過程也不太順利，直到這次重新研究之後，發現到一個關鍵字 <strong>Common Log Format</strong>，這聽起來很一般的詞，在軟體工程界其實已經變成是一個專有名詞了。</p>
<p><a href="https://en.wikipedia.org/wiki/Common_Log_Format">Common Log Format 的 Wikipedia 條目</a> 寫著這是一種 HTTP server log 的標準格式，不過我覺得應該只能算是 de facto standard（業界標準），因為沒有任何機構真的定義並作為標準發布過，現在網路上可以找到 W3C 的一份格式說明，但是那其實是 CERN 時代的 <a href="https://www.w3.org/Daemon/">httpd</a> 這個軟體的說明文件，趁這個機會，我就想著要來搞清楚幾個我一直很疑惑的幾個和 log 相關的單字，分別就是一開始說到的 <strong>common</strong>，然後就是 <strong>combined</strong> 和 <strong>extended</strong>，這幾個關鍵字都是我以前在設定 Apache HTTPD 的時後常常會看到的，甚至其它的 web server 也有用到，但是一直沒有搞的很清楚，而且使用的字我也覺得很奇怪，像是 combined 是在 combine 什麼。</p>
<p>結果就是，這些問題的答案，幾乎都在 NCSA(National Center for Supercomputing Applications、美國國家超級電腦應用中心) 開發的 HTTPd 軟體文件中，NCSA HTTPd 也就是最早提出這種 log format 的 HTTP server，而 NCSA HTTPd 的 log，其實預設下是有三個的，分別是：</p>
<ul>
<li><a href="https://web.archive.org/web/20090124003443/http://hoohoo.ncsa.uiuc.edu/docs/setup/httpd/TransferLog.html">TransferLog</a></li>
<li><a href="https://web.archive.org/web/20090130083429/http://hoohoo.ncsa.uiuc.edu/docs/setup/httpd/RefererLog.html">RefererLog</a></li>
<li><a href="https://web.archive.org/web/20090130083423/http://hoohoo.ncsa.uiuc.edu/docs/setup/httpd/AgentLog.html">AgentLog</a></li>
</ul>
<p>TransferLog 其實就是現在大家說的 access log，格式就是所謂的 CLF，不過其實當時是寫作 <strong>Common Log File(CLF) Format</strong>，紀錄的資料格式就是：</p>
<pre><code>host rfc931 authuser [DD/Mon/YYYY:hh:mm:ss] &quot;request&quot; ddd bbbb

- host: Either the DNS name or the IP number of the remote client
- rfc931: Any information returned by identd for this person, - otherwise.
- authuser: If user sent a userid for authentication, the user name, - otherwise.
- DD: Day
- Mon: Month (calendar name)
- YYYY: Year
- hh: hour (24-hour format, the machine's timezone)
- mm: minutes
- ss: seconds
- request: The first line of the HTTP request as sent by the client.
- ddd: the status code returned by the server, - if not available.
- bbbb: the total number of bytes sent, *not including the HTTP/1.0 header*, - if not available
</code></pre>
<p>然後文件還有定義了一個可擴充版的 <strong>Extended CLF Format</strong>，允許在這些 log 的末端加上其他的資料，如果 <a href="https://web.archive.org/web/20090124003443/http://hoohoo.ncsa.uiuc.edu/docs/setup/httpd/LogOptions.html"><code>LogOptions</code></a> 設定為 <code>Combined</code> 的話，三種 log 會 combine 在一起，使用 Extended CLF Format，多加上了 referrer 和 user-agent 資訊，這也就是 Combined 這個格式名稱的由來，而這邊有另外一個容易混淆的東西，就是 W3C 有一份很古老的 <a href="https://www.w3.org/TR/WD-logfile">Extended Log File Format 的 Working Draft</a>，這份文件定義的格式和 CLF 其實是沒關係的，所以看文件時，有比較仔細的文件就會寫到是 W3C 的 extended 還是 NCSA 的。</p>
<p>雖然我沒仔細查先後關係，不過 CERN 版的 HTTPd 應該是後來才實作了 NCSA 版的 log format，文件內則是稱為 <strong>Common Logfile Format</strong>，簡稱也是 CLF，不過單字有一點點不一樣就是，當然格式是一樣的，然後其實它也保留了 CERN HTTPd 的舊版 log，格式是：</p>
<pre><code>time remotehost request 
</code></pre>
<p>實作是：</p>
<pre><code>fprintf(log, &quot;%24.24s %s %s\n&quot;,
		asctime(gorl), HTClientHost, n_noth(HTReqLine));
</code></pre>
<p>其中的 <code>%24.24s</code> 我還是<a href="https://en.cppreference.com/w/c/io/fprintf">研究</a>了好一陣子才看懂第一個 24 是最短長度，資料不夠長時會加上空白，然後 <code>.</code> 後面的是精確度，遇到字串時則會變成最長長度，超過的就會不輸出，<a href="https://cplusplus.com/reference/ctime/asctime/"><code>asctime</code></a> 則是一個內建函數可以把時間轉成字串，格式是：</p>
<pre><code>Www Mmm dd hh:mm:ss yyyy
</code></pre>
<p>長度剛好是 24 個字元，至於那個變數名稱 <code>gorl</code> 則是我花最多時間才參透的，它的意思是：「GMT time or Local time」，但是它不是 indicator 那種二元值，而是變數本身就是那個時間，而那個時間可能是 GMT 時區時間也可能是本地時間。</p>
<p>這樣，其實很多細節的小疑問都有了解答，像是以前看 log 常常看到兩個 <code>-</code> 接連出現，其實代表的是連續兩個沒有值的欄位，其中一個是現在已經幾乎沒用到的 Identification Protocol（<a href="https://www.rfc-editor.org/rfc/rfc1413">RFC1413</a>），也是個古早的東西，我稍微看了一下好像 IRC 有用到；然後因為其實沒有標準，所以以前和現在的日期格式用的已經不一樣了，現在是普遍有加上時區，當時 NCSA 的和後來 CERN 實做的都沒有時區資訊；另外就是 <a href="https://httpd.apache.org/docs/current/mod/mod_log_config.html#examples">Apache HTTPD 文件</a> 的範例也有提到 RefererLog 和 AgentLog，我當時看到時就想說怎麼會有人只要這兩種資訊的 log；發現 CLF 這個專有名詞後，我也循線找到更多的 <a href="https://en.wikipedia.org/wiki/List_of_web_analytics_software">web log 分析工具</a>了，目前我是先挑了 goaccess 來用。</p>
<p>最後整理一下，這三個關鍵字在 web log 的情境下時：</p>
<ul>
<li>Common 格式，通常指的是 Common Log File(CLF) Format；</li>
<li>Extended，不考慮 W3C 的版本的話，這邊指的是 NCSA Extended CLF Foramt，如果 CLF Format 定義的欄位不夠用，需要更多資訊時，就可以使用這種格式，多的資訊是加在 log 尾端；</li>
<li>Combined 格式，多加了 referrer 和 user-agent 的 web log，使用 NCSA 版 Extended CLF Foramt 的格式，combine 指的是合併 TransferLog、RefererLog 和 AgentLog 三種 log。</li>
</ul>
<p>實際上 NCSA HTTPd 就不只 Common 和 Combined 兩種，還有 ServerName 可以加上，當然也是使用 Extended 格式，不過目前流傳下來，最常見的就是這兩種了。</p>
]]>

</description>
<link>https://blog.othree.net/log/2023/08/14/common-log-format/</link>
<guid>https://blog.othree.net/log/2023/08/14/common-log-format/</guid>
<category>unix</category>
<pubDate>Mon, 14 Aug 2023 21:29:05 +0800</pubDate>
</item>

<item>
<title>Vim Boss Passed Away</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53108661434/" title="Vim by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53108661434_38230541b1_b.jpg" width="1024" height="684" alt="Vim" srcset="https://live.staticflickr.com/65535/53108661434_6c5922f3cf_k.jpg 2x" /></a></p>
<p>Vim 的作者 Bram Moolenaar 在<a href="https://groups.google.com/g/vim_announce/c/tWahca9zkt4">月初過世</a>，消息出來至今大約已經過了一週，<a href="https://www.vim.org/">Vim 官網</a>也在兩天前有了正式公告，現在除了各方的緬懷之外，Vim 的未來也是令人非常在意，這陣子也都大概有些<a href="https://github.com/vim/vim/discussions/12736">方向</a>了，目前狀況是 Vim 的另外一位維護者 Christian Brabandt 在負責，包括了維護 Vim 本身、網站主機和網站修改、各種使用到的服務的統整（像是 binary 放哪）、未來捐款的處理方式等等，其實事情很多，而我這篇文章則是要紀錄一些這幾天看到的東西。</p>
<p>Bram Moolenaar 之前其實在 Google 工作了很久，到 2021 年十月才退休，在 <a href="https://www.theregister.com/2023/08/07/bram_moolenaar_obituary/">The Register 的報導</a>中，有當時的訪談的部分內容，只不過當時因為種種原因沒有成為一篇報導刊出，其實看內容也感覺的出來他當時還有些退休計畫，然後接著一年後，2022 年十月，Bram 有在 mailing-group 裡面提到自己有<a href="https://groups.google.com/g/vim_dev/c/ivkq22t3LQM">健康問題</a>，當時就已經有中斷 Vim 的維護工作了，然後就是今年過世的消息了，講真的，措手不及，而且 Bram 也才 62 歲，歐洲國家的預期壽命其實都有七八十的。</p>
<p>回到我與 Vim 之間的關係，除了我早期花很多心力在 html5.vim 之外，其實我目前還是 runtime 裡面 <code>csscomplete.vim</code> 的維護者，剛剛查一下才發現我也好久沒更新了，然後就是去年 COSCUP 我分享的 <a href="https://www.youtube.com/watch?v=YM7RHRwIrKU&amp;themeRefresh=1">Vim License 的事情</a>了，在 <a href="https://github.com/vim/vim/blob/master/LICENSE">Vim License</a> 的文本裡面的那一個特別的條文，就是開源與否的爭議是交給 Vim 的維護者決定，文本內還直接寫了現在的維護者是 Bram，然後現在就有個問題是這個條文需不需要修改，除此之外還有一個就是 vim.org 的 mail server 不知道有沒有辦法轉移，不然 maintainer@vim.org 也會無法繼續使用；其實就我所知，那個條文好像沒有真的發揮效用過，我覺得未來會用上它的機會應該也是很小，而且未來也不知道會不會有單一的 maintainer，我自己判斷社群應該會傾向維持條文不動吧。</p>
<p>最後就是，其實 Git 的每個 commit 的作者（author）和提交者（committer）可以是不同人的，而 Vim 早期，一直走的是老派的發 email 提交 Patch 給 Bram，然後由 Bram commit 進去 repository 裡面的流程，我當年想要用 Gmail 提交還發生過檔案內容太長，Gmail 無法發送這種信件的問題，後來是用 cli 的工具來發信，後來才開始有收 GitHub PR，但是 Bram 並不是直接用上面的功能來 merge，而是一樣拉 patch 下來，保留 author 資訊後 commit 進 repository，所以以前在 GitHub 上就很容易看到文章一開始那張圖那樣，全部都是 Bram 頭像的樣子，現在新的 commit 也開始進來了，所以最新的地方已經看不到這個樣子了。</p>
]]>

</description>
<link>https://blog.othree.net/log/2023/08/11/vim-boss-passed-away/</link>
<guid>https://blog.othree.net/log/2023/08/11/vim-boss-passed-away/</guid>
<category>vim</category>
<pubDate>Fri, 11 Aug 2023 20:16:47 +0800</pubDate>
</item>

<item>
<title>比宇宙更遠的地方</title>
<description><![CDATA[<p><a class="thumbnail" href="https://www.flickr.com/photos/othree/53088711466/" title="宇宙よりも遠い場所 by othree, on Flickr"><img src="https://live.staticflickr.com/65535/53088711466_b346a743d6_b.jpg" width="600" height="787" alt="宇宙よりも遠い場所" srcset="" /></a></p>
<p>在剛進入串流時代之時，我想著以後不太需要買什麼 DVD/BD 之類的了，因為想看的東西應該以後網路上都可以看的到，不過過了幾年下來，我的想法又慢慢的改變了，因為這些作品的授權都有個期限，過期之後不一定會重新上架，甚至連自家的原創作品都可能會下架，所以我慢慢的心中開始有了幾部作品，是覺得應該收藏一份實體版下來，其中的評斷標準算是我個人主觀，不過有一個條件倒是比較明確，就是希望讓我兒子長大後能看的，其實在這清單之中也沒幾個作品，而且很少有新增，不過就在最近新增了一部：「<a href="https://ani.gamer.com.tw/animeVideo.php?sn=16507">比宇宙更遠的地方</a>」，簡稱為<strong>よりもい</strong>（yorimoi）。</p>
<p>這部我一直都有聽到不錯的評價，第一印象是屬於那種「一群女孩去完成一件事」的日常系作品，其實我在看之前也沒有深入了解，本來以為就是一群女高中生因為對南極的憧憬，想方設法去南極旅遊的過程吧，畢竟這種類型作品很多是流水帳般將主角們有趣的生活演出來，這樣的日常系作品雖然也是會很有趣，但是就比較會變成打發時間用的，可能看過一陣子就會慢慢淡忘。</p>
<p>結果，看完よりもい之後我第一個感想就是：「真是太好我有看到這部作品了。」我也實在是非常幸運能在作品出來將近五年後還能在沒被捏他到的情況下看完這部作品。其實這陣子因為小孩去過暑假，所以我多了很多時間可以補看之前沒空看的東西，看了很多不錯的作品，也在推特上紀錄了一些心得，不過よりもい是第一部我特別想寫一篇文章紀錄的，因為他帶給我的不是風景多漂亮、劇情多有趣，而是更深刻的，故事中幾位角色的成長與自我突破。</p>
<p>以下有劇情，沒看過的話建議迴避，或是可以轉去看看 YouTube，匯雨有一個比較沒劇透的<a href="https://www.youtube.com/watch?v=O8qowhGwjyc">推坑影片</a>。</p>
]]>

<span class="extended"><a href="https://blog.othree.net/log/2023/08/02/yorimoi/">閱讀 「比宇宙更遠的地方」 全文</a></span>

</description>
<link>https://blog.othree.net/log/2023/08/02/yorimoi/</link>
<guid>https://blog.othree.net/log/2023/08/02/yorimoi/</guid>
<category>acg</category>
<pubDate>Wed, 02 Aug 2023 19:46:42 +0800</pubDate>
</item>


</channel>
</rss>